(function(undefined) {
  // @note
  //   A few conventions for the documentation of this file:
  //   1. Always use "//" (in contrast with "/**/")
  //   2. The syntax used is Yardoc (yardoc.org), which is intended for Ruby (se below)
  //   3. `@param` and `@return` types should be preceded by `JS.` when referring to
  //      JavaScript constructors (e.g. `JS.Function`) otherwise Ruby is assumed.
  //   4. `nil` and `null` being unambiguous refer to the respective
  //      objects/values in Ruby and JavaScript
  //   5. This is still WIP :) so please give feedback and suggestions on how
  //      to improve or for alternative solutions
  //
  //   The way the code is digested before going through Yardoc is a secret kept
  //   in the docs repo (https://github.com/opal/docs/tree/master).

  if (typeof(this.Opal) !== 'undefined') {
    console.warn('Opal already loaded. Loading twice can cause troubles, please fix your setup.');
    return this.Opal;
  }

  var nil;

  // The actual class for BasicObject
  var BasicObject;

  // The actual Object class.
  // The leading underscore is to avoid confusion with window.Object()
  var _Object;

  // The actual Module class
  var Module;

  // The actual Class class
  var Class;

  // Constructor for instances of BasicObject
  function BasicObject_alloc(){}

  // Constructor for instances of Object
  function Object_alloc(){}

  // Constructor for instances of Class
  function Class_alloc(){}

  // Constructor for instances of Module
  function Module_alloc(){}

  // Constructor for instances of NilClass (nil)
  function NilClass_alloc(){}

  // The Opal object that is exposed globally
  var Opal = this.Opal = {};

  // All bridged classes - keep track to donate methods from Object
  var bridges = {};

  // TopScope is used for inheriting constants from the top scope
  var TopScope = function(){};

  // Opal just acts as the top scope
  TopScope.prototype = Opal;

  // To inherit scopes
  Opal.constructor = TopScope;

  // List top scope constants
  Opal.constants = [];

  // This is a useful reference to global object inside ruby files
  Opal.global = this;

  // Configure runtime behavior with regards to require and unsupported fearures
  Opal.config = {
    missing_require_severity: 'error', // error, warning, ignore
    unsupported_features_severity: 'warning' // error, warning, ignore
  }

  // Minify common function calls
  var $hasOwn = Opal.hasOwnProperty;
  var $slice  = Opal.slice = Array.prototype.slice;

  // Nil object id is always 4
  var nil_id = 4;

  // Generates even sequential numbers greater than 4
  // (nil_id) to serve as unique ids for ruby objects
  var unique_id = nil_id;

  // Return next unique id
  Opal.uid = function() {
    unique_id += 2;
    return unique_id;
  };

  // Table holds all class variables
  Opal.cvars = {};

  // Globals table
  Opal.gvars = {};

  // Exit function, this should be replaced by platform specific implementation
  // (See nodejs and phantom for examples)
  Opal.exit = function(status) { if (Opal.gvars.DEBUG) console.log('Exited with status '+status); };

  // keeps track of exceptions for $!
  Opal.exceptions = [];

  // @private
  // Pops an exception from the stack and updates `$!`.
  Opal.pop_exception = function() {
    Opal.gvars["!"] = Opal.exceptions.pop() || nil;
  }


  // Constants
  // ---------

  // Get a constant on the given scope. Every class and module in Opal has a
  // scope used to store, and inherit, constants. For example, the top level
  // `Object` in ruby has a scope accessible as `Opal.Object.$$scope`.
  //
  // To get the `Array` class using this scope, you could use:
  //
  //     Opal.Object.$$scope.get("Array")
  //
  // If a constant with the given name cannot be found, then a dispatch to the
  // class/module's `#const_method` is called, which by default will raise an
  // error.
  //
  // @param name [String] the name of the constant to lookup
  // @return [Object]
  //
  Opal.get = function(name) {
    var constant = this[name];

    if (constant == null) {
      return this.base.$const_get(name);
    }

    return constant;
  };

  // Create a new constants scope for the given class with the given
  // base. Constants are looked up through their parents, so the base
  // scope will be the outer scope of the new klass.
  //
  // @param base_scope [$$scope] the scope in which the new scope should be created
  // @param klass      [Class]
  // @param id         [String, null] the name of the newly created scope
  //
  Opal.create_scope = function(base_scope, klass, id) {
    var const_alloc = function() {};
    var const_scope = const_alloc.prototype = new base_scope.constructor();

    klass.$$scope       = const_scope;
    klass.$$base_module = base_scope.base;

    const_scope.base        = klass;
    const_scope.constructor = const_alloc;
    const_scope.constants   = [];

    if (id) {
      Opal.cdecl(base_scope, id, klass);
      const_alloc.displayName = id+"_scope_alloc";
    }
  };

  // Constant assignment, see also `Opal.cdecl`
  //
  // @param base_module [Module, Class] the constant namespace
  // @param name        [String] the name of the constant
  // @param value       [Object] the value of the constant
  //
  // @example Assigning a namespaced constant
  //   self::FOO = 'bar'
  //
  // @example Assigning with Module#const_set
  //   Foo.const_set :BAR, 123
  //
  Opal.casgn = function(base_module, name, value) {
    function update(klass, name) {
      klass.$$name = name;

      for (name in klass.$$scope) {
        var value = klass.$$scope[name];

        if (value.$$name === nil && (value.$$is_class || value.$$is_module)) {
          update(value, name)
        }
      }
    }

    var scope = base_module.$$scope;

    if (value.$$is_class || value.$$is_module) {
      // Only checking _Object prevents setting a const on an anonymous class
      // that has a superclass that's not Object
      if (value.$$is_class || value.$$base_module === _Object) {
        value.$$base_module = base_module;
      }

      if (value.$$name === nil && value.$$base_module.$$name !== nil) {
        update(value, name);
      }
    }

    scope.constants.push(name);
    scope[name] = value;

    // If we dynamically declare a constant in a module,
    // we should populate all the classes that include this module
    // with the same constant
    if (base_module.$$is_module && base_module.$$dep) {
      for (var i = 0; i < base_module.$$dep.length; i++) {
        var dep = base_module.$$dep[i];
        Opal.casgn(dep, name, value);
      }
    }

    return value;
  };

  // Constant declaration
  //
  // @example
  //   FOO = :bar
  //
  // @param base_scope [$$scope] the current scope
  // @param name       [String] the name of the constant
  // @param value      [Object] the value of the constant
  Opal.cdecl = function(base_scope, name, value) {
    if ((value.$$is_class || value.$$is_module) && value.$$orig_scope == null) {
      value.$$name = name;
      value.$$orig_scope = base_scope;
      // Here we should explicitly set a base module
      // (a module where the constant was initially defined)
      value.$$base_module = base_scope.base;
      base_scope.constructor[name] = value;
    }

    base_scope.constants.push(name);
    return base_scope[name] = value;
  };


  // Modules & Classes
  // -----------------

  // A `class Foo; end` expression in ruby is compiled to call this runtime
  // method which either returns an existing class of the given name, or creates
  // a new class in the given `base` scope.
  //
  // If a constant with the given name exists, then we check to make sure that
  // it is a class and also that the superclasses match. If either of these
  // fail, then we raise a `TypeError`. Note, `superclass` may be null if one
  // was not specified in the ruby code.
  //
  // We pass a constructor to this method of the form `function ClassName() {}`
  // simply so that classes show up with nicely formatted names inside debuggers
  // in the web browser (or node/sprockets).
  //
  // The `base` is the current `self` value where the class is being created
  // from. We use this to get the scope for where the class should be created.
  // If `base` is an object (not a class/module), we simple get its class and
  // use that as the base instead.
  //
  // @param base        [Object] where the class is being created
  // @param superclass  [Class,null] superclass of the new class (may be null)
  // @param id          [String] the name of the class to be created
  // @param constructor [JS.Function] function to use as constructor
  //
  // @return new [Class]  or existing ruby class
  //
  Opal.klass = function(base, superclass, name, constructor) {
    var klass, bridged, alloc;

    // If base is an object, use its class
    if (!base.$$is_class && !base.$$is_module) {
      base = base.$$class;
    }

    // If the superclass is a function then we're bridging a native JS class
    if (typeof(superclass) === 'function') {
      bridged = superclass;
      superclass = _Object;
    }

    // Try to find the class in the current scope
    klass = base.$$scope[name];

    // If the class exists in the scope, then we must use that
    if (klass && klass.$$orig_scope === base.$$scope) {
      // Make sure the existing constant is a class, or raise error
      if (!klass.$$is_class) {
        throw Opal.TypeError.$new(name + " is not a class");
      }

      // Make sure existing class has same superclass
      if (superclass && klass.$$super !== superclass) {
        throw Opal.TypeError.$new("superclass mismatch for class " + name);
      }

      return klass;
    }

    // Class doesnt exist, create a new one with given superclass...

    // Not specifying a superclass means we can assume it to be Object
    if (superclass == null) {
      superclass = _Object;
    }

    // If bridged the JS class will also be the alloc function
    alloc = bridged || Opal.boot_class_alloc(name, constructor, superclass);

    // Create the class object (instance of Class)
    klass = Opal.setup_class_object(name, alloc, superclass.$$name, superclass.constructor);

    // @property $$super the superclass, doesn't get changed by module inclusions
    klass.$$super = superclass;

    // @property $$parent direct parent class
    //                    starts with the superclass, after klass inclusion is
    //                    the last included klass
    klass.$$parent = superclass;

    // Every class gets its own constant scope, inherited from current scope
    Opal.create_scope(base.$$scope, klass, name);

    // Name new class directly onto current scope (Opal.Foo.Baz = klass)
    base[name] = klass;

    if (bridged) {
      Opal.bridge(klass, alloc);
    }
    else {
      // Copy all parent constants to child, unless parent is Object
      if (superclass !== _Object && superclass !== BasicObject) {
        Opal.donate_constants(superclass, klass);
      }

      // Call .inherited() hook with new class on the superclass
      if (superclass.$inherited) {
        superclass.$inherited(klass);
      }
    }

    return klass;
  };

  // Boot a base class (makes instances).
  //
  // @param name [String,null] the class name
  // @param constructor [JS.Function] the class' instances constructor/alloc function
  // @param superclass  [Class,null] the superclass object
  // @return [JS.Function] the consturctor holding the prototype for the class' instances
  Opal.boot_class_alloc = function(name, constructor, superclass) {
    if (superclass) {
      var alloc_proxy = function() {};
      alloc_proxy.prototype  = superclass.$$proto || superclass.prototype;
      constructor.prototype = new alloc_proxy();
    }

    if (name) {
      constructor.displayName = name+'_alloc';
    }

    constructor.prototype.constructor = constructor;

    return constructor;
  };

  // Adds common/required properties to class object (as in `Class.new`)
  //
  // @param name  [String,null] The name of the class
  //
  // @param alloc [JS.Function] The constructor of the class' instances
  //
  // @param superclass_name [String,null]
  //   The name of the super class, this is
  //   usefule to build the `.displayName` of the singleton class
  //
  // @param superclass_alloc [JS.Function]
  //   The constructor of the superclass from which the singleton_class is
  //   derived.
  //
  // @return [Class]
  Opal.setup_class_object = function(name, alloc, superclass_name, superclass_alloc) {
    // Grab the superclass prototype and use it to build an intermediary object
    // in the prototype chain.
    var superclass_alloc_proxy = function() {};
        superclass_alloc_proxy.prototype = superclass_alloc.prototype;
        superclass_alloc_proxy.displayName = superclass_name;

    var singleton_class_alloc = function() {}
        singleton_class_alloc.prototype = new superclass_alloc_proxy();

    // The built class is the only instance of its singleton_class
    var klass = new singleton_class_alloc();

    // @property $$alloc This is the constructor of instances of the current
    //                   class. Its prototype will be used for method lookup
    klass.$$alloc = alloc;

    klass.$$name = name || nil;

    // @property $$id Each class is assigned a unique `id` that helps
    //                comparation and implementation of `#object_id`
    klass.$$id = Opal.uid();

    // Set a displayName for the singleton_class
    singleton_class_alloc.displayName = "#<Class:"+(name || ("#<Class:"+klass.$$id+">"))+">";

    // @property $$proto This is the prototype on which methods will be defined
    klass.$$proto = alloc.prototype;

    // @property $$proto.$$class Make available to instances a reference to the
    //                           class they belong to.
    klass.$$proto.$$class = klass;

    // @property constructor keeps a ref to the constructor, but apparently the
    //                       constructor is already set on:
    //
    //                          `var klass = new constructor` is called.
    //
    //                       Maybe there are some browsers not abiding (IE6?)
    klass.constructor = singleton_class_alloc;

    // @property $$is_class Clearly mark this as a class
    klass.$$is_class = true;

    // @property $$class Classes are instances of the class Class
    klass.$$class    = Class;

    // @property $$inc included modules
    klass.$$inc = [];

    return klass;
  };

  // Define new module (or return existing module). The given `base` is basically
  // the current `self` value the `module` statement was defined in. If this is
  // a ruby module or class, then it is used, otherwise if the base is a ruby
  // object then that objects real ruby class is used (e.g. if the base is the
  // main object, then the top level `Object` class is used as the base).
  //
  // If a module of the given name is already defined in the base, then that
  // instance is just returned.
  //
  // If there is a class of the given name in the base, then an error is
  // generated instead (cannot have a class and module of same name in same base).
  //
  // Otherwise, a new module is created in the base with the given name, and that
  // new instance is returned back (to be referenced at runtime).
  //
  // @param  base [Module, Class] class or module this definition is inside
  // @param  id   [String] the name of the new (or existing) module
  //
  // @return [Module]
  Opal.module = function(base, name) {
    var module;

    if (!base.$$is_class && !base.$$is_module) {
      base = base.$$class;
    }

    if ($hasOwn.call(base.$$scope, name)) {
      module = base.$$scope[name];

      if (!module.$$is_module && module !== _Object) {
        throw Opal.TypeError.$new(name + " is not a module");
      }
    }
    else {
      module = Opal.module_allocate(Module);
      Opal.create_scope(base.$$scope, module, name);
    }

    return module;
  };

  // The implementation for Module#initialize
  // @param module [Module]
  // @param block [Proc,nil]
  // @return nil
  Opal.module_initialize = function(module, block) {
    if (block !== nil) {
      var block_self = block.$$s;
      block.$$s = null;
      block.call(module);
      block.$$s = block_self;
    }
    return nil;
  };

  // Internal function to create a new module instance. This simply sets up
  // the prototype hierarchy and method tables.
  //
  Opal.module_allocate = function(superclass) {
    var mtor = function() {};
    mtor.prototype = superclass.$$alloc.prototype;

    function module_constructor() {}
    module_constructor.prototype = new mtor();

    var module = new module_constructor();
    var module_prototype = {};

    // @property $$id Each class is assigned a unique `id` that helps
    //                comparation and implementation of `#object_id`
    module.$$id = Opal.uid();

    // Set the display name of the singleton prototype holder
    module_constructor.displayName = "#<Class:#<Module:"+module.$$id+">>"

    // @property $$proto This is the prototype on which methods will be defined
    module.$$proto = module_prototype;

    // @property constructor
    //   keeps a ref to the constructor, but apparently the
    //   constructor is already set on:
    //
    //      `var module = new constructor` is called.
    //
    //   Maybe there are some browsers not abiding (IE6?)
    module.constructor = module_constructor;

    // @property $$is_module Clearly mark this as a module
    module.$$is_module = true;
    module.$$class     = Module;

    // @property $$super
    //   the superclass, doesn't get changed by module inclusions
    module.$$super = superclass;

    // @property $$parent
    //   direct parent class or module
    //   starts with the superclass, after module inclusion is
    //   the last included module
    module.$$parent = superclass;

    // @property $$inc included modules
    module.$$inc = [];

    // mark the object as a module
    module.$$is_module = true;

    // initialize dependency tracking
    module.$$dep = [];

    // initialize the name with nil
    module.$$name = nil;

    return module;
  };

  // Return the singleton class for the passed object.
  //
  // If the given object alredy has a singleton class, then it will be stored on
  // the object as the `$$meta` property. If this exists, then it is simply
  // returned back.
  //
  // Otherwise, a new singleton object for the class or object is created, set on
  // the object at `$$meta` for future use, and then returned.
  //
  // @param object [Object] the ruby object
  // @return [Class] the singleton class for object
  Opal.get_singleton_class = function(object) {
    if (object.$$meta) {
      return object.$$meta;
    }

    if (object.$$is_class || object.$$is_module) {
      return Opal.build_class_singleton_class(object);
    }

    return Opal.build_object_singleton_class(object);
  };

  // Build the singleton class for an existing class. Class object are built
  // with their singleton class already in the prototype chain and inheriting
  // from their superclass object (up to `Class` itself).
  //
  // NOTE: Actually in MRI a class' singleton class inherits from its
  // superclass' singleton class which in turn inherits from Class.
  //
  // @param klass [Class]
  // @return [Class]
  Opal.build_class_singleton_class = function(object) {
    var alloc, superclass, klass;

    if (object.$$meta) {
      return object.$$meta;
    }

    // The constructor and prototype of the singleton_class instances is the
    // current class constructor and prototype.
    alloc = object.constructor;

    // The singleton_class superclass is the singleton_class of its superclass;
    // but BasicObject has no superclass (its `$$super` is null), thus we
    // fallback on `Class`.
    superclass = object === BasicObject ? Class : Opal.build_class_singleton_class(object.$$super);

    klass = Opal.setup_class_object(null, alloc, superclass.$$name, superclass.constructor);
    klass.$$super = superclass;
    klass.$$parent = superclass;

    // The singleton_class retains the same scope as the original class
    Opal.create_scope(object.$$scope, klass);

    klass.$$is_singleton = true;
    klass.$$singleton_of = object;

    return object.$$meta = klass;
  };

  // Build the singleton class for a Ruby (non class) Object.
  //
  // @param object [Object]
  // @return [Class]
  Opal.build_object_singleton_class = function(object) {
    var superclass = object.$$class,
        name = "#<Class:#<" + superclass.$$name + ":" + superclass.$$id + ">>";

    var alloc = Opal.boot_class_alloc(name, function(){}, superclass)
    var klass = Opal.setup_class_object(name, alloc, superclass.$$name, superclass.constructor);

    klass.$$super  = superclass;
    klass.$$parent = superclass;
    klass.$$class  = superclass.$$class;
    klass.$$scope  = superclass.$$scope;
    klass.$$proto  = object;

    klass.$$is_singleton = true;
    klass.$$singleton_of = object;

    return object.$$meta = klass;
  };

  // Bridges a single method.
  Opal.bridge_method = function(target, from, name, body) {
    var ancestors, i, ancestor, length;

    ancestors = target.$$bridge.$ancestors();

    // order important here, we have to check for method presence in
    // ancestors from the bridged class to the last ancestor
    for (i = 0, length = ancestors.length; i < length; i++) {
      ancestor = ancestors[i];

      if ($hasOwn.call(ancestor.$$proto, name) &&
          ancestor.$$proto[name] &&
          !ancestor.$$proto[name].$$donated &&
          !ancestor.$$proto[name].$$stub &&
          ancestor !== from) {
        break;
      }

      if (ancestor === from) {
        target.prototype[name] = body
        break;
      }
    }

  };

  // Bridges from *donator* to a *target*.
  Opal._bridge = function(target, donator) {
    var id, methods, method, i, bridged;

    if (typeof(target) === "function") {
      id      = donator.$__id__();
      methods = donator.$instance_methods();

      for (i = methods.length - 1; i >= 0; i--) {
        method = '$' + methods[i];

        Opal.bridge_method(target, donator, method, donator.$$proto[method]);
      }

      if (!bridges[id]) {
        bridges[id] = [];
      }

      bridges[id].push(target);
    }
    else {
      bridged = bridges[target.$__id__()];

      if (bridged) {
        for (i = bridged.length - 1; i >= 0; i--) {
          Opal._bridge(bridged[i], donator);
        }

        bridges[donator.$__id__()] = bridged.slice();
      }
    }
  };

  // The actual inclusion of a module into a class.
  //
  // ## Class `$$parent` and `iclass`
  //
  // To handle `super` calls, every class has a `$$parent`. This parent is
  // used to resolve the next class for a super call. A normal class would
  // have this point to its superclass. However, if a class includes a module
  // then this would need to take into account the module. The module would
  // also have to then point its `$$parent` to the actual superclass. We
  // cannot modify modules like this, because it might be included in more
  // then one class. To fix this, we actually insert an `iclass` as the class'
  // `$$parent` which can then point to the superclass. The `iclass` acts as
  // a proxy to the actual module, so the `super` chain can then search it for
  // the required method.
  //
  // @param module [Module] the module to include
  // @param klass  [Class] the target class to include module into
  // @return [null]
  Opal.append_features = function(module, klass) {
    var iclass, donator, prototype, methods, id, i;

    // check if this module is already included in the class
    for (i = klass.$$inc.length - 1; i >= 0; i--) {
      if (klass.$$inc[i] === module) {
        return;
      }
    }

    klass.$$inc.push(module);
    module.$$dep.push(klass);
    Opal._bridge(klass, module);

    // iclass
    iclass = {
      $$name:   module.$$name,
      $$proto:  module.$$proto,
      $$parent: klass.$$parent,
      $$module: module,
      $$iclass: true
    };

    klass.$$parent = iclass;

    donator   = module.$$proto;
    prototype = klass.$$proto;
    methods   = module.$instance_methods();

    for (i = methods.length - 1; i >= 0; i--) {
      id = '$' + methods[i];

      // if the target class already has a method of the same name defined
      // and that method was NOT donated, then it must be a method defined
      // by the class so we do not want to override it
      if ( prototype.hasOwnProperty(id) &&
          !prototype[id].$$donated &&
          !prototype[id].$$stub) {
        continue;
      }

      prototype[id] = donator[id];
      prototype[id].$$donated = module;
    }

    Opal.donate_constants(module, klass);
  };

  // Table that holds all methods that have been defined on all objects
  // It is used for defining method stubs for new coming native classes
  Opal.stubs = {};

  // For performance, some core Ruby classes are toll-free bridged to their
  // native JavaScript counterparts (e.g. a Ruby Array is a JavaScript Array).
  //
  // This method is used to setup a native constructor (e.g. Array), to have
  // its prototype act like a normal Ruby class. Firstly, a new Ruby class is
  // created using the native constructor so that its prototype is set as the
  // target for th new class. Note: all bridged classes are set to inherit
  // from Object.
  //
  // Example:
  //
  //    Opal.bridge(self, Function);
  //
  // @param klass       [Class] the Ruby class to bridge
  // @param constructor [JS.Function] native JavaScript constructor to use
  // @return [Class] returns the passed Ruby class
  //
  Opal.bridge = function(klass, constructor) {
    if (constructor.$$bridge) {
      throw Opal.ArgumentError.$new("already bridged");
    }

    Opal.stub_subscribers.push(constructor.prototype);

    // Populate constructor with previously stored stubs
    for (var method_name in Opal.stubs) {
      if (!(method_name in constructor.prototype)) {
        constructor.prototype[method_name] = Opal.stub_for(method_name);
      }
    }

    constructor.prototype.$$class = klass;
    constructor.$$bridge          = klass;

    var ancestors = klass.$ancestors();

    // order important here, we have to bridge from the last ancestor to the
    // bridged class
    for (var i = ancestors.length - 1; i >= 0; i--) {
      Opal._bridge(constructor, ancestors[i]);
    }

    for (var name in BasicObject_alloc.prototype) {
      var method = BasicObject_alloc.prototype[method];

      if (method && method.$$stub && !(name in constructor.prototype)) {
        constructor.prototype[name] = method;
      }
    }

    return klass;
  };

  // When a source module is included into the target module, we must also copy
  // its constants to the target.
  //
  Opal.donate_constants = function(source_mod, target_mod) {
    var source_constants = source_mod.$$scope.constants,
        target_scope     = target_mod.$$scope,
        target_constants = target_scope.constants;

    for (var i = 0, length = source_constants.length; i < length; i++) {
      target_constants.push(source_constants[i]);
      target_scope[source_constants[i]] = source_mod.$$scope[source_constants[i]];
    }
  };

  // Donate methods for a module.
  Opal.donate = function(module, jsid) {
    var included_in = module.$$dep,
        body = module.$$proto[jsid],
        i, length, includee, dest, current,
        klass_includees, j, jj, current_owner_index, module_index;

    if (!included_in) {
      return;
    }

    for (i = 0, length = included_in.length; i < length; i++) {
      includee = included_in[i];
      dest = includee.$$proto;
      current = dest[jsid];

      if (dest.hasOwnProperty(jsid) && !current.$$donated && !current.$$stub) {
        // target class has already defined the same method name - do nothing
      }
      else if (dest.hasOwnProperty(jsid) && !current.$$stub) {
        // target class includes another module that has defined this method
        klass_includees = includee.$$inc;

        for (j = 0, jj = klass_includees.length; j < jj; j++) {
          if (klass_includees[j] === current.$$donated) {
            current_owner_index = j;
          }
          if (klass_includees[j] === module) {
            module_index = j;
          }
        }

        // only redefine method on class if the module was included AFTER
        // the module which defined the current method body. Also make sure
        // a module can overwrite a method it defined before
        if (current_owner_index <= module_index) {
          dest[jsid] = body;
          dest[jsid].$$donated = module;
        }
      }
      else {
        // neither a class, or module included by class, has defined method
        dest[jsid] = body;
        dest[jsid].$$donated = module;
      }

      if (includee.$$dep) {
        Opal.donate(includee, jsid);
      }
    }
  };

  // The Array of ancestors for a given module/class
  Opal.ancestors = function(module_or_class) {
    var parent = module_or_class,
        result = [],
        modules;

    while (parent) {
      result.push(parent);
      for (var i=0; i < parent.$$inc.length; i++) {
        modules = Opal.ancestors(parent.$$inc[i]);

        for(var j = 0; j < modules.length; j++) {
          result.push(modules[j]);
        }
      }

      // only the actual singleton class gets included in its ancestry
      // after that, traverse the normal class hierarchy
      if (parent.$$is_singleton && parent.$$singleton_of.$$is_module) {
        parent = parent.$$singleton_of.$$super;
      }
      else {
        parent = parent.$$is_class ? parent.$$super : null;
      }
    }

    return result;
  };


  // Method Missing
  // --------------

  // Methods stubs are used to facilitate method_missing in opal. A stub is a
  // placeholder function which just calls `method_missing` on the receiver.
  // If no method with the given name is actually defined on an object, then it
  // is obvious to say that the stub will be called instead, and then in turn
  // method_missing will be called.
  //
  // When a file in ruby gets compiled to javascript, it includes a call to
  // this function which adds stubs for every method name in the compiled file.
  // It should then be safe to assume that method_missing will work for any
  // method call detected.
  //
  // Method stubs are added to the BasicObject prototype, which every other
  // ruby object inherits, so all objects should handle method missing. A stub
  // is only added if the given property name (method name) is not already
  // defined.
  //
  // Note: all ruby methods have a `$` prefix in javascript, so all stubs will
  // have this prefix as well (to make this method more performant).
  //
  //    Opal.add_stubs(["$foo", "$bar", "$baz="]);
  //
  // All stub functions will have a private `$$stub` property set to true so
  // that other internal methods can detect if a method is just a stub or not.
  // `Kernel#respond_to?` uses this property to detect a methods presence.
  //
  // @param stubs [Array] an array of method stubs to add
  // @return [undefined]
  Opal.add_stubs = function(stubs) {
    var subscriber, subscribers = Opal.stub_subscribers,
        i, ilength = stubs.length,
        j, jlength = subscribers.length,
        method_name, stub;

    for (i = 0; i < ilength; i++) {
      method_name = stubs[i];
      // Save method name to populate other subscribers with this stub
      Opal.stubs[method_name] = true;
      stub = Opal.stub_for(method_name);

      for (j = 0; j < jlength; j++) {
        subscriber = subscribers[j];

        if (!(method_name in subscriber)) {
          subscriber[method_name] = stub;
        }
      }
    }
  };

  // Keep a list of prototypes that want method_missing stubs to be added.
  //
  // @default [Prototype List] BasicObject_alloc.prototype
  //
  Opal.stub_subscribers = [BasicObject_alloc.prototype];

  // Add a method_missing stub function to the given prototype for the
  // given name.
  //
  // @param prototype [Prototype] the target prototype
  // @param stub [String] stub name to add (e.g. "$foo")
  // @return [undefined]
  Opal.add_stub_for = function(prototype, stub) {
    var method_missing_stub = Opal.stub_for(stub);
    prototype[stub] = method_missing_stub;
  };

  // Generate the method_missing stub for a given method name.
  //
  // @param method_name [String] The js-name of the method to stub (e.g. "$foo")
  // @return [undefined]
  Opal.stub_for = function(method_name) {
    function method_missing_stub() {
      // Copy any given block onto the method_missing dispatcher
      this.$method_missing.$$p = method_missing_stub.$$p;

      // Set block property to null ready for the next call (stop false-positives)
      method_missing_stub.$$p = null;

      // call method missing with correct args (remove '$' prefix on method name)
      var args_ary = new Array(arguments.length);
      for(var i = 0, l = args_ary.length; i < l; i++) { args_ary[i] = arguments[i]; }

      return this.$method_missing.apply(this, [method_name.slice(1)].concat(args_ary));
    }

    method_missing_stub.$$stub = true;

    return method_missing_stub;
  };


  // Methods
  // -------

  // Arity count error dispatcher for methods
  //
  // @param actual [Fixnum] number of arguments given to method
  // @param expected [Fixnum] expected number of arguments
  // @param object [Object] owner of the method +meth+
  // @param meth [String] method name that got wrong number of arguments
  // @raise [ArgumentError]
  Opal.ac = function(actual, expected, object, meth) {
    var inspect = '';
    if (object.$$is_class || object.$$is_module) {
      inspect += object.$$name + '.';
    }
    else {
      inspect += object.$$class.$$name + '#';
    }
    inspect += meth;

    throw Opal.ArgumentError.$new('[' + inspect + '] wrong number of arguments(' + actual + ' for ' + expected + ')');
  };

  // Arity count error dispatcher for blocks
  //
  // @param actual [Fixnum] number of arguments given to block
  // @param expected [Fixnum] expected number of arguments
  // @param context [Object] context of the block definition
  // @raise [ArgumentError]
  Opal.block_ac = function(actual, expected, context) {
    var inspect = "`block in " + context + "'";

    throw Opal.ArgumentError.$new(inspect + ': wrong number of arguments (' + actual + ' for ' + expected + ')');
  }

  // Super dispatcher
  Opal.find_super_dispatcher = function(obj, jsid, current_func, defcheck, defs) {
    var dispatcher;

    if (defs) {
      if (obj.$$is_class || obj.$$is_module) {
        dispatcher = defs.$$super;
      }
      else {
        dispatcher = obj.$$class.$$proto;
      }
    }
    else {
      dispatcher = Opal.find_obj_super_dispatcher(obj, jsid, current_func);
    }

    dispatcher = dispatcher['$' + jsid];

    if (!defcheck && dispatcher.$$stub && Opal.Kernel.$method_missing === obj.$method_missing) {
      // method_missing hasn't been explicitly defined
      throw Opal.NoMethodError.$new('super: no superclass method `'+jsid+"' for "+obj, jsid);
    }

    return dispatcher;
  };

  // Iter dispatcher for super in a block
  Opal.find_iter_super_dispatcher = function(obj, jsid, current_func, defcheck, implicit) {
    var call_jsid = jsid;

    if (!current_func) {
      throw Opal.RuntimeError.$new("super called outside of method");
    }

    if (implicit && current_func.$$define_meth) {
      throw Opal.RuntimeError.$new("implicit argument passing of super from method defined by define_method() is not supported. Specify all arguments explicitly");
    }

    if (current_func.$$def) {
      call_jsid = current_func.$$jsid;
    }

    return Opal.find_super_dispatcher(obj, call_jsid, current_func, defcheck);
  };

  Opal.find_obj_super_dispatcher = function(obj, jsid, current_func) {
    var klass = obj.$$meta || obj.$$class;

    // first we need to find the class/module current_func is located on
    klass = Opal.find_owning_class(klass, current_func);

    if (!klass) {
      throw new Error("could not find current class for super()");
    }

    jsid = '$' + jsid;
    return Opal.find_super_func(klass, jsid, current_func);
  };

  Opal.find_owning_class = function(klass, current_func) {
    var owner = current_func.$$owner;

    while (klass) {
      // repeating for readability

      if (klass.$$iclass && klass.$$module === current_func.$$donated) {
        // this klass was the last one the module donated to
        // case is also hit with multiple module includes
        break;
      }
      else if (klass.$$iclass && klass.$$module === owner) {
        // module has donated to other classes but klass isn't one of those
        break;
      }
      else if (owner.$$is_singleton && klass === owner.$$singleton_of.$$class) {
        // cases like stdlib `Singleton::included` that use a singleton of a singleton
        break;
      }
      else if (klass === owner) {
        // no modules, pure class inheritance
        break;
      }

      klass = klass.$$parent;
    }

    return klass;
  };

  Opal.find_super_func = function(owning_klass, jsid, current_func) {
    var klass = owning_klass.$$parent;

    // now we can find the super
    while (klass) {
      var working = klass.$$proto[jsid];

      if (working && working !== current_func) {
        // ok
        break;
      }

      klass = klass.$$parent;
    }

    return klass.$$proto;
  };

  // Used to return as an expression. Sometimes, we can't simply return from
  // a javascript function as if we were a method, as the return is used as
  // an expression, or even inside a block which must "return" to the outer
  // method. This helper simply throws an error which is then caught by the
  // method. This approach is expensive, so it is only used when absolutely
  // needed.
  //
  Opal.ret = function(val) {
    Opal.returner.$v = val;
    throw Opal.returner;
  };

  // Used to break out of a block.
  Opal.brk = function(val, breaker) {
    breaker.$v = val;
    throw breaker;
  };

  // Builds a new unique breaker, this is to avoid multiple nested breaks to get
  // in the way of each other.
  Opal.new_brk = function() {
    return new Error('unexpected break');
  };

  // handles yield calls for 1 yielded arg
  Opal.yield1 = function(block, arg) {
    if (typeof(block) !== "function") {
      throw Opal.LocalJumpError.$new("no block given");
    }

    var has_mlhs = block.$$has_top_level_mlhs_arg,
        has_trailing_comma = block.$$has_trailing_comma_in_args;

    if (block.length > 1 || ((has_mlhs || has_trailing_comma) && block.length === 1)) {
      arg = Opal.to_ary(arg);
    }

    if ((block.length > 1 || (has_trailing_comma && block.length === 1)) && arg.$$is_array) {
      return block.apply(null, arg);
    }
    else {
      return block(arg);
    }
  };

  // handles yield for > 1 yielded arg
  Opal.yieldX = function(block, args) {
    if (typeof(block) !== "function") {
      throw Opal.LocalJumpError.$new("no block given");
    }

    if (block.length > 1 && args.length === 1) {
      if (args[0].$$is_array) {
        return block.apply(null, args[0]);
      }
    }

    if (!args.$$is_array) {
      var args_ary = new Array(args.length);
      for(var i = 0, l = args_ary.length; i < l; i++) { args_ary[i] = args[i]; }

      return block.apply(null, args_ary);
    }

    return block.apply(null, args);
  };

  // Finds the corresponding exception match in candidates.  Each candidate can
  // be a value, or an array of values.  Returns null if not found.
  Opal.rescue = function(exception, candidates) {
    for (var i = 0; i < candidates.length; i++) {
      var candidate = candidates[i];

      if (candidate.$$is_array) {
        var result = Opal.rescue(exception, candidate);

        if (result) {
          return result;
        }
      }
      else if (candidate['$==='](exception)) {
        return candidate;
      }
    }

    return null;
  };

  Opal.is_a = function(object, klass) {
    if (object.$$meta === klass) {
      return true;
    }

    var i, length, ancestors = Opal.ancestors(object.$$class);

    for (i = 0, length = ancestors.length; i < length; i++) {
      if (ancestors[i] === klass) {
        return true;
      }
    }

    ancestors = Opal.ancestors(object.$$meta);

    for (i = 0, length = ancestors.length; i < length; i++) {
      if (ancestors[i] === klass) {
        return true;
      }
    }

    return false;
  };

  // Helpers for extracting kwsplats
  // Used for: { **h }
  Opal.to_hash = function(value) {
    if (value.$$is_hash) {
      return value;
    }
    else if (value['$respond_to?']('to_hash', true)) {
      var hash = value.$to_hash();
      if (hash.$$is_hash) {
        return hash;
      }
      else {
        throw Opal.TypeError.$new("Can't convert " + value.$$class +
          " to Hash (" + value.$$class + "#to_hash gives " + hash.$$class + ")");
      }
    }
    else {
      throw Opal.TypeError.$new("no implicit conversion of " + value.$$class + " into Hash");
    }
  };

  // Helpers for implementing multiple assignment
  // Our code for extracting the values and assigning them only works if the
  // return value is a JS array.
  // So if we get an Array subclass, extract the wrapped JS array from it

  // Used for: a, b = something (no splat)
  Opal.to_ary = function(value) {
    if (value.$$is_array) {
      return value;
    }
    else if (value['$respond_to?']('to_ary', true)) {
      var ary = value.$to_ary();
      if (ary === nil) {
        return [value];
      }
      else if (ary.$$is_array) {
        return ary;
      }
      else {
        throw Opal.TypeError.$new("Can't convert " + value.$$class +
          " to Array (" + value.$$class + "#to_ary gives " + ary.$$class + ")");
      }
    }
    else {
      return [value];
    }
  };

  // Used for: a, b = *something (with splat)
  Opal.to_a = function(value) {
    if (value.$$is_array) {
      // A splatted array must be copied
      return value.slice();
    }
    else if (value['$respond_to?']('to_a', true)) {
      var ary = value.$to_a();
      if (ary === nil) {
        return [value];
      }
      else if (ary.$$is_array) {
        return ary;
      }
      else {
        throw Opal.TypeError.$new("Can't convert " + value.$$class +
          " to Array (" + value.$$class + "#to_a gives " + ary.$$class + ")");
      }
    }
    else {
      return [value];
    }
  };

  // Used for extracting keyword arguments from arguments passed to
  // JS function. If provided +arguments+ list doesn't have a Hash
  // as a last item, returns a blank Hash.
  //
  // @param parameters [Array]
  // @return [Hash]
  //
  Opal.extract_kwargs = function(parameters) {
    var kwargs = parameters[parameters.length - 1];
    if (kwargs != null && kwargs['$respond_to?']('to_hash', true)) {
      Array.prototype.splice.call(parameters, parameters.length - 1, 1);
      return kwargs.$to_hash();
    }
    else {
      return Opal.hash2([], {});
    }
  }

  // Used to get a list of rest keyword arguments. Method takes the given
  // keyword args, i.e. the hash literal passed to the method containing all
  // keyword arguemnts passed to method, as well as the used args which are
  // the names of required and optional arguments defined. This method then
  // just returns all key/value pairs which have not been used, in a new
  // hash literal.
  //
  // @param given_args [Hash] all kwargs given to method
  // @param used_args [Object<String: true>] all keys used as named kwargs
  // @return [Hash]
  //
  Opal.kwrestargs = function(given_args, used_args) {
    var keys      = [],
        map       = {},
        key       = null,
        given_map = given_args.$$smap;

    for (key in given_map) {
      if (!used_args[key]) {
        keys.push(key);
        map[key] = given_map[key];
      }
    }

    return Opal.hash2(keys, map);
  };

  // Call a ruby method on a ruby object with some arguments:
  //
  // @example
  //   var my_array = [1, 2, 3, 4]
  //   Opal.send(my_array, 'length')     # => 4
  //   Opal.send(my_array, 'reverse!')   # => [4, 3, 2, 1]
  //
  // A missing method will be forwarded to the object via
  // method_missing.
  //
  // The result of either call with be returned.
  //
  // @param recv [Object] the ruby object
  // @param mid  [String] ruby method to call
  // @return [Object] forwards the return value of the method (or of method_missing)
  Opal.send = function(recv, mid) {
    var args_ary = new Array(Math.max(arguments.length - 2, 0));
    for(var i = 0, l = args_ary.length; i < l; i++) { args_ary[i] = arguments[i + 2]; }

    var func = recv['$' + mid];

    if (func) {
      return func.apply(recv, args_ary);
    }

    return recv.$method_missing.apply(recv, [mid].concat(args_ary));
  };

  Opal.block_send = function(recv, mid, block) {
    var args_ary = new Array(Math.max(arguments.length - 3, 0));
    for(var i = 0, l = args_ary.length; i < l; i++) { args_ary[i] = arguments[i + 3]; }

    var func = recv['$' + mid];

    if (func) {
      func.$$p = block;
      return func.apply(recv, args_ary);
    }

    return recv.$method_missing.apply(recv, [mid].concat(args_ary));
  };

  // Used to define methods on an object. This is a helper method, used by the
  // compiled source to define methods on special case objects when the compiler
  // can not determine the destination object, or the object is a Module
  // instance. This can get called by `Module#define_method` as well.
  //
  // ## Modules
  //
  // Any method defined on a module will come through this runtime helper.
  // The method is added to the module body, and the owner of the method is
  // set to be the module itself. This is used later when choosing which
  // method should show on a class if more than 1 included modules define
  // the same method. Finally, if the module is in `module_function` mode,
  // then the method is also defined onto the module itself.
  //
  // ## Classes
  //
  // This helper will only be called for classes when a method is being
  // defined indirectly; either through `Module#define_method`, or by a
  // literal `def` method inside an `instance_eval` or `class_eval` body. In
  // either case, the method is simply added to the class' prototype. A special
  // exception exists for `BasicObject` and `Object`. These two classes are
  // special because they are used in toll-free bridged classes. In each of
  // these two cases, extra work is required to define the methods on toll-free
  // bridged class' prototypes as well.
  //
  // ## Objects
  //
  // If a simple ruby object is the object, then the method is simply just
  // defined on the object as a singleton method. This would be the case when
  // a method is defined inside an `instance_eval` block.
  //
  // @param obj  [Object, Class] the actual obj to define method for
  // @param jsid [String] the JavaScript friendly method name (e.g. '$foo')
  // @param body [JS.Function] the literal JavaScript function used as method
  // @return [null]
  //
  Opal.defn = function(obj, jsid, body) {
    obj.$$proto[jsid] = body;
    // for super dispatcher, etc.
    body.$$owner = obj;

    if (obj.$$is_module) {
      Opal.donate(obj, jsid);

      if (obj.$$module_function) {
        Opal.defs(obj, jsid, body);
      }
    }

    if (obj.$__id__ && !obj.$__id__.$$stub) {
      var bridged = bridges[obj.$__id__()];

      if (bridged) {
        for (var i = bridged.length - 1; i >= 0; i--) {
          Opal.bridge_method(bridged[i], obj, jsid, body);
        }
      }
    }

    var singleton_of = obj.$$singleton_of;
    if (obj.$method_added && !obj.$method_added.$$stub && !singleton_of) {
      obj.$method_added(jsid.substr(1));
    }
    else if (singleton_of && singleton_of.$singleton_method_added && !singleton_of.$singleton_method_added.$$stub) {
      singleton_of.$singleton_method_added(jsid.substr(1));
    }

    return nil;
  };

  // Define a singleton method on the given object.
  Opal.defs = function(obj, jsid, body) {
    Opal.defn(Opal.get_singleton_class(obj), jsid, body)
  };

  Opal.def = function(obj, jsid, body) {
    // if instance_eval is invoked on a module/class, it sets inst_eval_mod
    if (!obj.$$eval && (obj.$$is_class || obj.$$is_module)) {
      Opal.defn(obj, jsid, body);
    }
    else {
      Opal.defs(obj, jsid, body);
    }
  };

  // Called from #remove_method.
  Opal.rdef = function(obj, jsid) {
    // TODO: remove from bridges as well

    if (!$hasOwn.call(obj.$$proto, jsid)) {
      throw Opal.NameError.$new("method '" + jsid.substr(1) + "' not defined in " + obj.$name());
    }

    delete obj.$$proto[jsid];

    if (obj.$$is_singleton) {
      if (obj.$$proto.$singleton_method_removed && !obj.$$proto.$singleton_method_removed.$$stub) {
        obj.$$proto.$singleton_method_removed(jsid.substr(1));
      }
    }
    else {
      if (obj.$method_removed && !obj.$method_removed.$$stub) {
        obj.$method_removed(jsid.substr(1));
      }
    }
  };

  // Called from #undef_method.
  Opal.udef = function(obj, jsid) {
    if (!obj.$$proto[jsid] || obj.$$proto[jsid].$$stub) {
      throw Opal.NameError.$new("method '" + jsid.substr(1) + "' not defined in " + obj.$name());
    }

    Opal.add_stub_for(obj.$$proto, jsid);

    if (obj.$$is_singleton) {
      if (obj.$$proto.$singleton_method_undefined && !obj.$$proto.$singleton_method_undefined.$$stub) {
        obj.$$proto.$singleton_method_undefined(jsid.substr(1));
      }
    }
    else {
      if (obj.$method_undefined && !obj.$method_undefined.$$stub) {
        obj.$method_undefined(jsid.substr(1));
      }
    }
  };

  Opal.alias = function(obj, name, old) {
    var id     = '$' + name,
        old_id = '$' + old,
        body   = obj.$$proto['$' + old];

    // instance_eval is being run on a class/module, so that need to alias class methods
    if (obj.$$eval) {
      return Opal.alias(Opal.get_singleton_class(obj), name, old);
    }

    if (typeof(body) !== "function" || body.$$stub) {
      var ancestor = obj.$$super;

      while (typeof(body) !== "function" && ancestor) {
        body     = ancestor[old_id];
        ancestor = ancestor.$$super;
      }

      if (typeof(body) !== "function" || body.$$stub) {
        throw Opal.NameError.$new("undefined method `" + old + "' for class `" + obj.$name() + "'")
      }
    }

    Opal.defn(obj, id, body);

    return obj;
  };

  Opal.alias_native = function(obj, name, native_name) {
    var id   = '$' + name,
        body = obj.$$proto[native_name];

    if (typeof(body) !== "function" || body.$$stub) {
      throw Opal.NameError.$new("undefined native method `" + native_name + "' for class `" + obj.$name() + "'")
    }

    Opal.defn(obj, id, body);

    return obj;
  };


  // Hashes
  // ------

  Opal.hash_init = function(hash) {
    hash.$$smap = {};
    hash.$$map  = {};
    hash.$$keys = [];
  };

  Opal.hash_clone = function(from_hash, to_hash) {
    to_hash.$$none = from_hash.$$none;
    to_hash.$$proc = from_hash.$$proc;

    for (var i = 0, keys = from_hash.$$keys, length = keys.length, key, value; i < length; i++) {
      key = from_hash.$$keys[i];

      if (key.$$is_string) {
        value = from_hash.$$smap[key];
      } else {
        value = key.value;
        key = key.key;
      }

      Opal.hash_put(to_hash, key, value);
    }
  };

  Opal.hash_put = function(hash, key, value) {
    if (key.$$is_string) {
      if (!hash.$$smap.hasOwnProperty(key)) {
        hash.$$keys.push(key);
      }
      hash.$$smap[key] = value;
      return;
    }

    var key_hash = key.$hash(), bucket, last_bucket;

    if (!hash.$$map.hasOwnProperty(key_hash)) {
      bucket = {key: key, key_hash: key_hash, value: value};
      hash.$$keys.push(bucket);
      hash.$$map[key_hash] = bucket;
      return;
    }

    bucket = hash.$$map[key_hash];

    while (bucket) {
      if (key === bucket.key || key['$eql?'](bucket.key)) {
        last_bucket = undefined;
        bucket.value = value;
        break;
      }
      last_bucket = bucket;
      bucket = bucket.next;
    }

    if (last_bucket) {
      bucket = {key: key, key_hash: key_hash, value: value};
      hash.$$keys.push(bucket);
      last_bucket.next = bucket;
    }
  };

  Opal.hash_get = function(hash, key) {
    if (key.$$is_string) {
      if (hash.$$smap.hasOwnProperty(key)) {
        return hash.$$smap[key];
      }
      return;
    }

    var key_hash = key.$hash(), bucket;

    if (hash.$$map.hasOwnProperty(key_hash)) {
      bucket = hash.$$map[key_hash];

      while (bucket) {
        if (key === bucket.key || key['$eql?'](bucket.key)) {
          return bucket.value;
        }
        bucket = bucket.next;
      }
    }
  };

  Opal.hash_delete = function(hash, key) {
    var i, keys = hash.$$keys, length = keys.length, value;

    if (key.$$is_string) {
      if (!hash.$$smap.hasOwnProperty(key)) {
        return;
      }

      for (i = 0; i < length; i++) {
        if (keys[i] === key) {
          keys.splice(i, 1);
          break;
        }
      }

      value = hash.$$smap[key];
      delete hash.$$smap[key];
      return value;
    }

    var key_hash = key.$hash();

    if (!hash.$$map.hasOwnProperty(key_hash)) {
      return;
    }

    var bucket = hash.$$map[key_hash], last_bucket;

    while (bucket) {
      if (key === bucket.key || key['$eql?'](bucket.key)) {
        value = bucket.value;

        for (i = 0; i < length; i++) {
          if (keys[i] === bucket) {
            keys.splice(i, 1);
            break;
          }
        }

        if (last_bucket && bucket.next) {
          last_bucket.next = bucket.next;
        }
        else if (last_bucket) {
          delete last_bucket.next;
        }
        else if (bucket.next) {
          hash.$$map[key_hash] = bucket.next;
        }
        else {
          delete hash.$$map[key_hash];
        }

        return value;
      }
      last_bucket = bucket;
      bucket = bucket.next;
    }
  };

  Opal.hash_rehash = function(hash) {
    for (var i = 0, length = hash.$$keys.length, key_hash, bucket, last_bucket; i < length; i++) {

      if (hash.$$keys[i].$$is_string) {
        continue;
      }

      key_hash = hash.$$keys[i].key.$hash();

      if (key_hash === hash.$$keys[i].key_hash) {
        continue;
      }

      bucket = hash.$$map[hash.$$keys[i].key_hash];
      last_bucket = undefined;

      while (bucket) {
        if (bucket === hash.$$keys[i]) {
          if (last_bucket && bucket.next) {
            last_bucket.next = bucket.next;
          }
          else if (last_bucket) {
            delete last_bucket.next;
          }
          else if (bucket.next) {
            hash.$$map[hash.$$keys[i].key_hash] = bucket.next;
          }
          else {
            delete hash.$$map[hash.$$keys[i].key_hash];
          }
          break;
        }
        last_bucket = bucket;
        bucket = bucket.next;
      }

      hash.$$keys[i].key_hash = key_hash;

      if (!hash.$$map.hasOwnProperty(key_hash)) {
        hash.$$map[key_hash] = hash.$$keys[i];
        continue;
      }

      bucket = hash.$$map[key_hash];
      last_bucket = undefined;

      while (bucket) {
        if (bucket === hash.$$keys[i]) {
          last_bucket = undefined;
          break;
        }
        last_bucket = bucket;
        bucket = bucket.next;
      }

      if (last_bucket) {
        last_bucket.next = hash.$$keys[i];
      }
    }
  };

  Opal.hash = function() {
    var arguments_length = arguments.length, args, hash, i, length, key, value;

    if (arguments_length === 1 && arguments[0].$$is_hash) {
      return arguments[0];
    }

    hash = new Opal.Hash.$$alloc();
    Opal.hash_init(hash);

    if (arguments_length === 1 && arguments[0].$$is_array) {
      args = arguments[0];
      length = args.length;

      for (i = 0; i < length; i++) {
        if (args[i].length !== 2) {
          throw Opal.ArgumentError.$new("value not of length 2: " + args[i].$inspect());
        }

        key = args[i][0];
        value = args[i][1];

        Opal.hash_put(hash, key, value);
      }

      return hash;
    }

    if (arguments_length === 1) {
      args = arguments[0];
      for (key in args) {
        if (args.hasOwnProperty(key)) {
          value = args[key];

          Opal.hash_put(hash, key, value);
        }
      }

      return hash;
    }

    if (arguments_length % 2 !== 0) {
      throw Opal.ArgumentError.$new("odd number of arguments for Hash");
    }

    for (i = 0; i < arguments_length; i += 2) {
      key = arguments[i];
      value = arguments[i + 1];

      Opal.hash_put(hash, key, value);
    }

    return hash;
  };

  // hash2 is a faster creator for hashes that just use symbols and
  // strings as keys. The map and keys array can be constructed at
  // compile time, so they are just added here by the constructor
  // function
  //
  Opal.hash2 = function(keys, smap) {
    var hash = new Opal.Hash.$$alloc();

    hash.$$smap = smap;
    hash.$$map  = {};
    hash.$$keys = keys;

    return hash;
  };

  // Create a new range instance with first and last values, and whether the
  // range excludes the last value.
  //
  Opal.range = function(first, last, exc) {
    var range         = new Opal.Range.$$alloc();
        range.begin   = first;
        range.end     = last;
        range.exclude = exc;

    return range;
  };

  Opal.ivar = function(name) {
    if (
        // properties
        name === "constructor" ||
        name === "displayName" ||
        name === "__count__" ||
        name === "__noSuchMethod__" ||
        name === "__parent__" ||
        name === "__proto__" ||

        // methods
        name === "hasOwnProperty" ||
        name === "valueOf"
       )
    {
      return name + "$";
    }

    return name;
  };


  // Require system
  // --------------

  Opal.modules         = {};
  Opal.loaded_features = ['corelib/runtime'];
  Opal.current_dir     = '.'
  Opal.require_table   = {'corelib/runtime': true};

  Opal.normalize = function(path) {
    var parts, part, new_parts = [], SEPARATOR = '/';

    if (Opal.current_dir !== '.') {
      path = Opal.current_dir.replace(/\/*$/, '/') + path;
    }

    path = path.replace(/\.(rb|opal|js)$/, '');
    parts = path.split(SEPARATOR);

    for (var i = 0, ii = parts.length; i < ii; i++) {
      part = parts[i];
      if (part === '') continue;
      (part === '..') ? new_parts.pop() : new_parts.push(part)
    }

    return new_parts.join(SEPARATOR);
  };

  Opal.loaded = function(paths) {
    var i, l, path;

    for (i = 0, l = paths.length; i < l; i++) {
      path = Opal.normalize(paths[i]);

      if (Opal.require_table[path]) {
        return;
      }

      Opal.loaded_features.push(path);
      Opal.require_table[path] = true;
    }
  };

  Opal.load = function(path) {
    path = Opal.normalize(path);

    Opal.loaded([path]);

    var module = Opal.modules[path];

    if (module) {
      module(Opal);
    }
    else {
      var severity = Opal.config.missing_require_severity;
      var message  = 'cannot load such file -- ' + path;

      if (severity === "error") {
        Opal.LoadError ? Opal.LoadError.$new(message) : function(){throw message}();
      }
      else if (severity === "warning") {
        console.warn('WARNING: LoadError: ' + message);
      }
    }

    return true;
  };

  Opal.require = function(path) {
    path = Opal.normalize(path);

    if (Opal.require_table[path]) {
      return false;
    }

    return Opal.load(path);
  };


  // Initialization
  // --------------

  // Constructors for *instances* of core objects
  Opal.boot_class_alloc('BasicObject', BasicObject_alloc);
  Opal.boot_class_alloc('Object',      Object_alloc,       BasicObject_alloc);
  Opal.boot_class_alloc('Module',      Module_alloc,       Object_alloc);
  Opal.boot_class_alloc('Class',       Class_alloc,        Module_alloc);

  // Constructors for *classes* of core objects
  Opal.BasicObject = BasicObject = Opal.setup_class_object('BasicObject', BasicObject_alloc, 'Class',       Class_alloc);
  Opal.Object      = _Object     = Opal.setup_class_object('Object',      Object_alloc,      'BasicObject', BasicObject.constructor);
  Opal.Module      = Module      = Opal.setup_class_object('Module',      Module_alloc,      'Object',      _Object.constructor);
  Opal.Class       = Class       = Opal.setup_class_object('Class',       Class_alloc,       'Module',      Module.constructor);

  Opal.constants.push("BasicObject");
  Opal.constants.push("Object");
  Opal.constants.push("Module");
  Opal.constants.push("Class");

  // Fix booted classes to use their metaclass
  BasicObject.$$class = Class;
  _Object.$$class     = Class;
  Module.$$class      = Class;
  Class.$$class       = Class;

  // Fix superclasses of booted classes
  BasicObject.$$super = null;
  _Object.$$super     = BasicObject;
  Module.$$super      = _Object;
  Class.$$super       = Module;

  BasicObject.$$parent = null;
  _Object.$$parent     = BasicObject;
  Module.$$parent      = _Object;
  Class.$$parent       = Module;

  Opal.base                = _Object;
  BasicObject.$$scope      = _Object.$$scope = Opal;
  BasicObject.$$orig_scope = _Object.$$orig_scope = Opal;

  Module.$$scope      = _Object.$$scope;
  Module.$$orig_scope = _Object.$$orig_scope;
  Class.$$scope       = _Object.$$scope;
  Class.$$orig_scope  = _Object.$$orig_scope;

  // Forward .toString() to #to_s
  _Object.$$proto.toString = function() {
    return this.$to_s();
  };

  // Make Kernel#require immediately available as it's needed to require all the
  // other corelib files.
  _Object.$$proto.$require = Opal.require;

  // Instantiate the top object
  Opal.top = new _Object.$$alloc();

  // Nil
  Opal.klass(_Object, _Object, 'NilClass', NilClass_alloc);
  nil = Opal.nil = new NilClass_alloc();
  nil.$$id = nil_id;
  nil.call = nil.apply = function() { throw Opal.LocalJumpError.$new('no block given'); };
  Opal.breaker  = new Error('unexpected break (old)');
  Opal.returner = new Error('unexpected return');

  TypeError.$$super = Error;
}).call(this);

if (typeof(global) !== 'undefined') {
  global.Opal = this.Opal;
  Opal.global = global;
}

if (typeof(window) !== 'undefined') {
  window.Opal = this.Opal;
  Opal.global = window;
}
;
/* Generated by Opal 0.10.3 */
Opal.modules["corelib/helpers"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$new', '$class', '$===', '$respond_to?', '$raise', '$type_error', '$__send__', '$coerce_to', '$nil?', '$<=>', '$inspect', '$coerce_to!', '$!=', '$[]', '$upcase']);
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13;

    Opal.defs(self, '$bridge', TMP_1 = function $$bridge(klass, constructor) {
      var self = this;

      return Opal.bridge(klass, constructor);
    }, TMP_1.$$arity = 2);

    Opal.defs(self, '$type_error', TMP_2 = function $$type_error(object, type, method, coerced) {
      var $a, $b, self = this;

      if (method == null) {
        method = nil;
      }
      if (coerced == null) {
        coerced = nil;
      }
      if ((($a = (($b = method !== false && method !== nil && method != null) ? coerced : method)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return $scope.get('TypeError').$new("can't convert " + (object.$class()) + " into " + (type) + " (" + (object.$class()) + "#" + (method) + " gives " + (coerced.$class()))
        } else {
        return $scope.get('TypeError').$new("no implicit conversion of " + (object.$class()) + " into " + (type))
      };
    }, TMP_2.$$arity = -3);

    Opal.defs(self, '$coerce_to', TMP_3 = function $$coerce_to(object, type, method) {
      var $a, self = this;

      if ((($a = type['$==='](object)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return object};
      if ((($a = object['$respond_to?'](method)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise(self.$type_error(object, type))
      };
      return object.$__send__(method);
    }, TMP_3.$$arity = 3);

    Opal.defs(self, '$coerce_to!', TMP_4 = function(object, type, method) {
      var $a, self = this, coerced = nil;

      coerced = self.$coerce_to(object, type, method);
      if ((($a = type['$==='](coerced)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise(self.$type_error(object, type, method, coerced))
      };
      return coerced;
    }, TMP_4.$$arity = 3);

    Opal.defs(self, '$coerce_to?', TMP_5 = function(object, type, method) {
      var $a, self = this, coerced = nil;

      if ((($a = object['$respond_to?'](method)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return nil
      };
      coerced = self.$coerce_to(object, type, method);
      if ((($a = coerced['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return nil};
      if ((($a = type['$==='](coerced)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise(self.$type_error(object, type, method, coerced))
      };
      return coerced;
    }, TMP_5.$$arity = 3);

    Opal.defs(self, '$try_convert', TMP_6 = function $$try_convert(object, type, method) {
      var $a, self = this;

      if ((($a = type['$==='](object)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return object};
      if ((($a = object['$respond_to?'](method)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return object.$__send__(method)
        } else {
        return nil
      };
    }, TMP_6.$$arity = 3);

    Opal.defs(self, '$compare', TMP_7 = function $$compare(a, b) {
      var $a, self = this, compare = nil;

      compare = a['$<=>'](b);
      if ((($a = compare === nil) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "comparison of " + (a.$class()) + " with " + (b.$class()) + " failed")};
      return compare;
    }, TMP_7.$$arity = 2);

    Opal.defs(self, '$destructure', TMP_8 = function $$destructure(args) {
      var self = this;

      
      if (args.length == 1) {
        return args[0];
      }
      else if (args.$$is_array) {
        return args;
      }
      else {
        var args_ary = new Array(args.length);
        for(var i = 0, l = args_ary.length; i < l; i++) { args_ary[i] = args[i]; }

        return args_ary;
      }
    
    }, TMP_8.$$arity = 1);

    Opal.defs(self, '$respond_to?', TMP_9 = function(obj, method) {
      var self = this;

      
      if (obj == null || !obj.$$class) {
        return false;
      }
    
      return obj['$respond_to?'](method);
    }, TMP_9.$$arity = 2);

    Opal.defs(self, '$inspect', TMP_10 = function $$inspect(obj) {
      var self = this;

      
      if (obj === undefined) {
        return "undefined";
      }
      else if (obj === null) {
        return "null";
      }
      else if (!obj.$$class) {
        return obj.toString();
      }
      else {
        return obj.$inspect();
      }
    
    }, TMP_10.$$arity = 1);

    Opal.defs(self, '$instance_variable_name!', TMP_11 = function(name) {
      var $a, self = this;

      name = $scope.get('Opal')['$coerce_to!'](name, $scope.get('String'), "to_str");
      if ((($a = /^@[a-zA-Z_][a-zA-Z0-9_]*?$/.test(name)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('NameError').$new("'" + (name) + "' is not allowed as an instance variable name", name))
      };
      return name;
    }, TMP_11.$$arity = 1);

    Opal.defs(self, '$const_name!', TMP_12 = function(const_name) {
      var $a, self = this;

      const_name = $scope.get('Opal')['$coerce_to!'](const_name, $scope.get('String'), "to_str");
      if ((($a = const_name['$[]'](0)['$!='](const_name['$[]'](0).$upcase())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('NameError'), "wrong constant name " + (const_name))};
      return const_name;
    }, TMP_12.$$arity = 1);

    Opal.defs(self, '$pristine', TMP_13 = function $$pristine(owner_class, $a_rest) {
      var self = this, method_names;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      method_names = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        method_names[$arg_idx - 1] = arguments[$arg_idx];
      }
      
      var method_name;
      for (var i = method_names.length - 1; i >= 0; i--) {
        method_name = method_names[i];
        owner_class.$$proto['$'+method_name].$$pristine = true
      }
    
      return nil;
    }, TMP_13.$$arity = -2);
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["corelib/module"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $range = Opal.range, $hash2 = Opal.hash2;

  Opal.add_stubs(['$===', '$raise', '$equal?', '$<', '$>', '$nil?', '$attr_reader', '$attr_writer', '$coerce_to!', '$new', '$const_name!', '$=~', '$inject', '$const_get', '$split', '$const_missing', '$==', '$!', '$start_with?', '$to_proc', '$lambda', '$bind', '$call', '$class', '$append_features', '$included', '$name', '$cover?', '$size', '$merge', '$compile', '$proc', '$to_s', '$__id__', '$constants', '$include?']);
  return (function($base, $super) {
    function $Module(){};
    var self = $Module = $klass($base, $super, 'Module', $Module);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_22, TMP_23, TMP_24, TMP_25, TMP_27, TMP_28, TMP_29, TMP_30, TMP_31, TMP_32, TMP_33, TMP_34, TMP_35, TMP_36, TMP_37, TMP_38, TMP_39, TMP_41, TMP_42, TMP_43, TMP_44, TMP_45, TMP_46, TMP_47, TMP_48, TMP_49;

    Opal.defs(self, '$allocate', TMP_1 = function $$allocate() {
      var self = this;

      
      var module;

      module = Opal.module_allocate(self);
      Opal.create_scope(Opal.Module.$$scope, module, null);
      return module;
    
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$initialize', TMP_2 = function $$initialize() {
      var self = this, $iter = TMP_2.$$p, block = $iter || nil;

      TMP_2.$$p = null;
      return Opal.module_initialize(self, block);
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$===', TMP_3 = function(object) {
      var $a, self = this;

      if ((($a = object == null) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return false};
      return Opal.is_a(object, self);
    }, TMP_3.$$arity = 1);

    Opal.defn(self, '$<', TMP_4 = function(other) {
      var $a, self = this;

      if ((($a = $scope.get('Module')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('TypeError'), "compared with non class/module")
      };
      
      var working = self,
          ancestors,
          i, length;

      if (working === other) {
        return false;
      }

      for (i = 0, ancestors = Opal.ancestors(self), length = ancestors.length; i < length; i++) {
        if (ancestors[i] === other) {
          return true;
        }
      }

      for (i = 0, ancestors = Opal.ancestors(other), length = ancestors.length; i < length; i++) {
        if (ancestors[i] === self) {
          return false;
        }
      }

      return nil;
    
    }, TMP_4.$$arity = 1);

    Opal.defn(self, '$<=', TMP_5 = function(other) {
      var $a, self = this;

      return ((($a = self['$equal?'](other)) !== false && $a !== nil && $a != null) ? $a : $rb_lt(self, other));
    }, TMP_5.$$arity = 1);

    Opal.defn(self, '$>', TMP_6 = function(other) {
      var $a, self = this;

      if ((($a = $scope.get('Module')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('TypeError'), "compared with non class/module")
      };
      return $rb_lt(other, self);
    }, TMP_6.$$arity = 1);

    Opal.defn(self, '$>=', TMP_7 = function(other) {
      var $a, self = this;

      return ((($a = self['$equal?'](other)) !== false && $a !== nil && $a != null) ? $a : $rb_gt(self, other));
    }, TMP_7.$$arity = 1);

    Opal.defn(self, '$<=>', TMP_8 = function(other) {
      var $a, self = this, lt = nil;

      
      if (self === other) {
        return 0;
      }
    
      if ((($a = $scope.get('Module')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return nil
      };
      lt = $rb_lt(self, other);
      if ((($a = lt['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return nil};
      if (lt !== false && lt !== nil && lt != null) {
        return -1
        } else {
        return 1
      };
    }, TMP_8.$$arity = 1);

    Opal.defn(self, '$alias_method', TMP_9 = function $$alias_method(newname, oldname) {
      var self = this;

      Opal.alias(self, newname, oldname);
      return self;
    }, TMP_9.$$arity = 2);

    Opal.defn(self, '$alias_native', TMP_10 = function $$alias_native(mid, jsid) {
      var self = this;

      if (jsid == null) {
        jsid = mid;
      }
      Opal.alias_native(self, mid, jsid);
      return self;
    }, TMP_10.$$arity = -2);

    Opal.defn(self, '$ancestors', TMP_11 = function $$ancestors() {
      var self = this;

      return Opal.ancestors(self);
    }, TMP_11.$$arity = 0);

    Opal.defn(self, '$append_features', TMP_12 = function $$append_features(klass) {
      var self = this;

      Opal.append_features(self, klass);
      return self;
    }, TMP_12.$$arity = 1);

    Opal.defn(self, '$attr_accessor', TMP_13 = function $$attr_accessor($a_rest) {
      var $b, $c, self = this, names;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      names = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        names[$arg_idx - 0] = arguments[$arg_idx];
      }
      ($b = self).$attr_reader.apply($b, Opal.to_a(names));
      return ($c = self).$attr_writer.apply($c, Opal.to_a(names));
    }, TMP_13.$$arity = -1);

    Opal.alias(self, 'attr', 'attr_accessor');

    Opal.defn(self, '$attr_reader', TMP_14 = function $$attr_reader($a_rest) {
      var self = this, names;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      names = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        names[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      var proto = self.$$proto;

      for (var i = names.length - 1; i >= 0; i--) {
        var name = names[i],
            id   = '$' + name,
            ivar = Opal.ivar(name);

        // the closure here is needed because name will change at the next
        // cycle, I wish we could use let.
        var body = (function(ivar) {
          return function() {
            if (this[ivar] == null) {
              return nil;
            }
            else {
              return this[ivar];
            }
          };
        })(ivar);

        // initialize the instance variable as nil
        proto[ivar] = nil;

        body.$$parameters = [];
        body.$$arity = 0;

        if (self.$$is_singleton) {
          proto.constructor.prototype[id] = body;
        }
        else {
          Opal.defn(self, id, body);
        }
      }
    
      return nil;
    }, TMP_14.$$arity = -1);

    Opal.defn(self, '$attr_writer', TMP_15 = function $$attr_writer($a_rest) {
      var self = this, names;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      names = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        names[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      var proto = self.$$proto;

      for (var i = names.length - 1; i >= 0; i--) {
        var name = names[i],
            id   = '$' + name + '=',
            ivar = Opal.ivar(name);

        // the closure here is needed because name will change at the next
        // cycle, I wish we could use let.
        var body = (function(ivar){
          return function(value) {
            return this[ivar] = value;
          }
        })(ivar);

        body.$$parameters = [['req']];
        body.$$arity = 1;

        // initialize the instance variable as nil
        proto[ivar] = nil;

        if (self.$$is_singleton) {
          proto.constructor.prototype[id] = body;
        }
        else {
          Opal.defn(self, id, body);
        }
      }
    
      return nil;
    }, TMP_15.$$arity = -1);

    Opal.defn(self, '$autoload', TMP_16 = function $$autoload(const$, path) {
      var self = this;

      
      var autoloaders;

      if (!(autoloaders = self.$$autoload)) {
        autoloaders = self.$$autoload = {};
      }

      autoloaders[const$] = path;
      return nil;
    ;
    }, TMP_16.$$arity = 2);

    Opal.defn(self, '$class_variable_get', TMP_17 = function $$class_variable_get(name) {
      var $a, self = this;

      name = $scope.get('Opal')['$coerce_to!'](name, $scope.get('String'), "to_str");
      if ((($a = name.length < 3 || name.slice(0,2) !== '@@') !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('NameError').$new("class vars should start with @@", name))};
      
      var value = Opal.cvars[name.slice(2)];
      (function() {if ((($a = value == null) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$raise($scope.get('NameError').$new("uninitialized class variable @@a in", name))
        } else {
        return nil
      }; return nil; })()
      return value;
    
    }, TMP_17.$$arity = 1);

    Opal.defn(self, '$class_variable_set', TMP_18 = function $$class_variable_set(name, value) {
      var $a, self = this;

      name = $scope.get('Opal')['$coerce_to!'](name, $scope.get('String'), "to_str");
      if ((($a = name.length < 3 || name.slice(0,2) !== '@@') !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('NameError'))};
      
      Opal.cvars[name.slice(2)] = value;
      return value;
    
    }, TMP_18.$$arity = 2);

    Opal.defn(self, '$constants', TMP_19 = function $$constants() {
      var self = this;

      return self.$$scope.constants.slice(0);
    }, TMP_19.$$arity = 0);

    Opal.defn(self, '$const_defined?', TMP_20 = function(name, inherit) {
      var $a, self = this;

      if (inherit == null) {
        inherit = true;
      }
      name = $scope.get('Opal')['$const_name!'](name);
      if ((($a = name['$=~']((($scope.get('Opal')).$$scope.get('CONST_NAME_REGEXP')))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('NameError').$new("wrong constant name " + (name), name))
      };
      
      var scopes = [self.$$scope];

      if (inherit || self === Opal.Object) {
        var parent = self.$$super;

        while (parent !== Opal.BasicObject) {
          scopes.push(parent.$$scope);

          parent = parent.$$super;
        }
      }

      for (var i = 0, length = scopes.length; i < length; i++) {
        if (scopes[i].hasOwnProperty(name)) {
          return true;
        }
      }

      return false;
    
    }, TMP_20.$$arity = -2);

    Opal.defn(self, '$const_get', TMP_22 = function $$const_get(name, inherit) {
      var $a, $b, TMP_21, self = this;

      if (inherit == null) {
        inherit = true;
      }
      name = $scope.get('Opal')['$const_name!'](name);
      
      if (name.indexOf('::') === 0 && name !== '::'){
        name = name.slice(2);
      }
    
      if ((($a = name.indexOf('::') != -1 && name != '::') !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = name.$split("::")).$inject, $a.$$p = (TMP_21 = function(o, c){var self = TMP_21.$$s || this;
if (o == null) o = nil;if (c == null) c = nil;
        return o.$const_get(c)}, TMP_21.$$s = self, TMP_21.$$arity = 2, TMP_21), $a).call($b, self)};
      if ((($a = name['$=~']((($scope.get('Opal')).$$scope.get('CONST_NAME_REGEXP')))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('NameError').$new("wrong constant name " + (name), name))
      };
      
      var scopes = [self.$$scope];

      if (inherit || self == Opal.Object) {
        var parent = self.$$super;

        while (parent !== Opal.BasicObject) {
          scopes.push(parent.$$scope);

          parent = parent.$$super;
        }
      }

      for (var i = 0, length = scopes.length; i < length; i++) {
        if (scopes[i].hasOwnProperty(name)) {
          return scopes[i][name];
        }
      }

      return self.$const_missing(name);
    
    }, TMP_22.$$arity = -2);

    Opal.defn(self, '$const_missing', TMP_23 = function $$const_missing(name) {
      var self = this, full_const_name = nil;

      
      if (self.$$autoload) {
        var file = self.$$autoload[name];

        if (file) {
          self.$require(file);

          return self.$const_get(name);
        }
      }
    
      full_const_name = (function() {if (self['$==']($scope.get('Object'))) {
        return name
        } else {
        return "" + (self) + "::" + (name)
      }; return nil; })();
      return self.$raise($scope.get('NameError').$new("uninitialized constant " + (full_const_name), name));
    }, TMP_23.$$arity = 1);

    Opal.defn(self, '$const_set', TMP_24 = function $$const_set(name, value) {
      var $a, $b, self = this;

      name = $scope.get('Opal')['$const_name!'](name);
      if ((($a = ((($b = (name['$=~']((($scope.get('Opal')).$$scope.get('CONST_NAME_REGEXP'))))['$!']()) !== false && $b !== nil && $b != null) ? $b : name['$start_with?']("::"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('NameError').$new("wrong constant name " + (name), name))};
      Opal.casgn(self, name, value);
      return value;
    }, TMP_24.$$arity = 2);

    Opal.defn(self, '$define_method', TMP_25 = function $$define_method(name, method) {
      var $a, $b, $c, TMP_26, self = this, $iter = TMP_25.$$p, block = $iter || nil, $case = nil;

      TMP_25.$$p = null;
      if ((($a = method === undefined && block === nil) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "tried to create a Proc object without a block")};
      ((($a = block) !== false && $a !== nil && $a != null) ? $a : block = (function() {$case = method;if ($scope.get('Proc')['$===']($case)) {return method}else if ($scope.get('Method')['$===']($case)) {return method.$to_proc().$$unbound;}else if ($scope.get('UnboundMethod')['$===']($case)) {return ($b = ($c = self).$lambda, $b.$$p = (TMP_26 = function($d_rest){var self = TMP_26.$$s || this, args, $e, bound = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
      bound = method.$bind(self);
        return ($e = bound).$call.apply($e, Opal.to_a(args));}, TMP_26.$$s = self, TMP_26.$$arity = -1, TMP_26), $b).call($c)}else {return self.$raise($scope.get('TypeError'), "wrong argument type " + (block.$class()) + " (expected Proc/Method)")}})());
      
      var id = '$' + name;

      block.$$jsid        = name;
      block.$$s           = null;
      block.$$def         = block;
      block.$$define_meth = true;

      Opal.defn(self, id, block);

      return name;
    
    }, TMP_25.$$arity = -2);

    Opal.defn(self, '$remove_method', TMP_27 = function $$remove_method($a_rest) {
      var self = this, names;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      names = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        names[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      for (var i = 0, length = names.length; i < length; i++) {
        Opal.rdef(self, "$" + names[i]);
      }
    
      return self;
    }, TMP_27.$$arity = -1);

    Opal.defn(self, '$singleton_class?', TMP_28 = function() {
      var self = this;

      return !!self.$$is_singleton;
    }, TMP_28.$$arity = 0);

    Opal.defn(self, '$include', TMP_29 = function $$include($a_rest) {
      var self = this, mods;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      mods = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        mods[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      for (var i = mods.length - 1; i >= 0; i--) {
        var mod = mods[i];

        if (mod === self) {
          continue;
        }

        if (!mod.$$is_module) {
          self.$raise($scope.get('TypeError'), "wrong argument type " + ((mod).$class()) + " (expected Module)");
        }

        (mod).$append_features(self);
        (mod).$included(self);
      }
    
      return self;
    }, TMP_29.$$arity = -1);

    Opal.defn(self, '$included_modules', TMP_30 = function $$included_modules() {
      var self = this;

      
      var results;

      var module_chain = function(klass) {
        var included = [];

        for (var i = 0; i != klass.$$inc.length; i++) {
          var mod_or_class = klass.$$inc[i];
          included.push(mod_or_class);
          included = included.concat(module_chain(mod_or_class));
        }

        return included;
      };

      results = module_chain(self);

      // need superclass's modules
      if (self.$$is_class) {
          for (var cls = self; cls; cls = cls.$$super) {
            results = results.concat(module_chain(cls));
          }
      }

      return results;
    
    }, TMP_30.$$arity = 0);

    Opal.defn(self, '$include?', TMP_31 = function(mod) {
      var self = this;

      
      for (var cls = self; cls; cls = cls.$$super) {
        for (var i = 0; i != cls.$$inc.length; i++) {
          var mod2 = cls.$$inc[i];
          if (mod === mod2) {
            return true;
          }
        }
      }
      return false;
    
    }, TMP_31.$$arity = 1);

    Opal.defn(self, '$instance_method', TMP_32 = function $$instance_method(name) {
      var self = this;

      
      var meth = self.$$proto['$' + name];

      if (!meth || meth.$$stub) {
        self.$raise($scope.get('NameError').$new("undefined method `" + (name) + "' for class `" + (self.$name()) + "'", name));
      }

      return $scope.get('UnboundMethod').$new(self, meth, name);
    
    }, TMP_32.$$arity = 1);

    Opal.defn(self, '$instance_methods', TMP_33 = function $$instance_methods(include_super) {
      var self = this;

      if (include_super == null) {
        include_super = true;
      }
      
      var methods = [],
          proto   = self.$$proto;

      for (var prop in proto) {
        if (prop.charAt(0) !== '$') {
          continue;
        }

        if (typeof(proto[prop]) !== "function") {
          continue;
        }

        if (proto[prop].$$stub) {
          continue;
        }

        if (!self.$$is_module) {
          if (self !== Opal.BasicObject && proto[prop] === Opal.BasicObject.$$proto[prop]) {
            continue;
          }

          if (!include_super && !proto.hasOwnProperty(prop)) {
            continue;
          }

          if (!include_super && proto[prop].$$donated) {
            continue;
          }
        }

        methods.push(prop.substr(1));
      }

      return methods;
    
    }, TMP_33.$$arity = -1);

    Opal.defn(self, '$included', TMP_34 = function $$included(mod) {
      var self = this;

      return nil;
    }, TMP_34.$$arity = 1);

    Opal.defn(self, '$extended', TMP_35 = function $$extended(mod) {
      var self = this;

      return nil;
    }, TMP_35.$$arity = 1);

    Opal.defn(self, '$method_added', TMP_36 = function $$method_added($a_rest) {
      var self = this;

      return nil;
    }, TMP_36.$$arity = -1);

    Opal.defn(self, '$method_removed', TMP_37 = function $$method_removed($a_rest) {
      var self = this;

      return nil;
    }, TMP_37.$$arity = -1);

    Opal.defn(self, '$method_undefined', TMP_38 = function $$method_undefined($a_rest) {
      var self = this;

      return nil;
    }, TMP_38.$$arity = -1);

    Opal.defn(self, '$module_eval', TMP_39 = function $$module_eval($a_rest) {
      var $b, $c, TMP_40, self = this, args, $iter = TMP_39.$$p, block = $iter || nil, string = nil, file = nil, _lineno = nil, default_eval_options = nil, compiling_options = nil, compiled = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_39.$$p = null;
      if ((($b = ($c = block['$nil?'](), $c !== false && $c !== nil && $c != null ?!!Opal.compile : $c)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        if ((($b = ($range(1, 3, false))['$cover?'](args.$size())) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          } else {
          $scope.get('Kernel').$raise($scope.get('ArgumentError'), "wrong number of arguments (0 for 1..3)")
        };
        $b = Opal.to_a(args), string = ($b[0] == null ? nil : $b[0]), file = ($b[1] == null ? nil : $b[1]), _lineno = ($b[2] == null ? nil : $b[2]), $b;
        default_eval_options = $hash2(["file", "eval"], {"file": (((($b = file) !== false && $b !== nil && $b != null) ? $b : "(eval)")), "eval": true});
        compiling_options = Opal.hash({ arity_check: false }).$merge(default_eval_options);
        compiled = $scope.get('Opal').$compile(string, compiling_options);
        block = ($b = ($c = $scope.get('Kernel')).$proc, $b.$$p = (TMP_40 = function(){var self = TMP_40.$$s || this;

        
          return (function(self) {
            return eval(compiled);
          })(self)
        }, TMP_40.$$s = self, TMP_40.$$arity = 0, TMP_40), $b).call($c);
      } else if ((($b = $rb_gt(args.$size(), 0)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        $scope.get('Kernel').$raise($scope.get('ArgumentError'), "wrong number of arguments (" + (args.$size()) + " for 0)")};
      
      var old = block.$$s,
          result;

      block.$$s = null;
      result = block.apply(self, [self]);
      block.$$s = old;

      return result;
    
    }, TMP_39.$$arity = -1);

    Opal.alias(self, 'class_eval', 'module_eval');

    Opal.defn(self, '$module_exec', TMP_41 = function $$module_exec($a_rest) {
      var self = this, args, $iter = TMP_41.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_41.$$p = null;
      
      if (block === nil) {
        self.$raise($scope.get('LocalJumpError'), "no block given")
      }

      var block_self = block.$$s, result;

      block.$$s = null;
      result = block.apply(self, args);
      block.$$s = block_self;

      return result;
    ;
    }, TMP_41.$$arity = -1);

    Opal.alias(self, 'class_exec', 'module_exec');

    Opal.defn(self, '$method_defined?', TMP_42 = function(method) {
      var self = this;

      
      var body = self.$$proto['$' + method];
      return (!!body) && !body.$$stub;
    
    }, TMP_42.$$arity = 1);

    Opal.defn(self, '$module_function', TMP_43 = function $$module_function($a_rest) {
      var self = this, methods;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      methods = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        methods[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      if (methods.length === 0) {
        self.$$module_function = true;
      }
      else {
        for (var i = 0, length = methods.length; i < length; i++) {
          var meth = methods[i],
              id   = '$' + meth,
              func = self.$$proto[id];

          Opal.defs(self, id, func);
        }
      }

      return self;
    
    }, TMP_43.$$arity = -1);

    Opal.defn(self, '$name', TMP_44 = function $$name() {
      var self = this;

      
      if (self.$$full_name) {
        return self.$$full_name;
      }

      var result = [], base = self;

      while (base) {
        if (base.$$name === nil) {
          return result.length === 0 ? nil : result.join('::');
        }

        result.unshift(base.$$name);

        base = base.$$base_module;

        if (base === Opal.Object) {
          break;
        }
      }

      if (result.length === 0) {
        return nil;
      }

      return self.$$full_name = result.join('::');
    
    }, TMP_44.$$arity = 0);

    Opal.defn(self, '$remove_class_variable', TMP_45 = function $$remove_class_variable($a_rest) {
      var self = this;

      return nil;
    }, TMP_45.$$arity = -1);

    Opal.defn(self, '$remove_const', TMP_46 = function $$remove_const(name) {
      var self = this;

      
      var old = self.$$scope[name];
      delete self.$$scope[name];
      return old;
    
    }, TMP_46.$$arity = 1);

    Opal.defn(self, '$to_s', TMP_47 = function $$to_s() {
      var $a, self = this;

      return ((($a = Opal.Module.$name.call(self)) !== false && $a !== nil && $a != null) ? $a : "#<" + (self.$$is_module ? 'Module' : 'Class') + ":0x" + (self.$__id__().$to_s(16)) + ">");
    }, TMP_47.$$arity = 0);

    Opal.defn(self, '$undef_method', TMP_48 = function $$undef_method($a_rest) {
      var self = this, names;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      names = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        names[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      for (var i = 0, length = names.length; i < length; i++) {
        Opal.udef(self, "$" + names[i]);
      }
    
      return self;
    }, TMP_48.$$arity = -1);

    return (Opal.defn(self, '$instance_variables', TMP_49 = function $$instance_variables() {
      var self = this, consts = nil;

      consts = self.$constants();
      
      var result = [];

      for (var name in self) {
        if (self.hasOwnProperty(name) && name.charAt(0) !== '$' && name !== 'constructor' && !consts['$include?'](name)) {
          result.push('@' + name);
        }
      }

      return result;
    
    }, TMP_49.$$arity = 0), nil) && 'instance_variables';
  })($scope.base, null)
};
/* Generated by Opal 0.10.3 */
Opal.modules["corelib/class"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$allocate', '$name', '$to_s']);
  self.$require("corelib/module");
  return (function($base, $super) {
    function $Class(){};
    var self = $Class = $klass($base, $super, 'Class', $Class);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6;

    Opal.defs(self, '$new', TMP_1 = function(superclass) {
      var self = this, $iter = TMP_1.$$p, block = $iter || nil;

      if (superclass == null) {
        superclass = $scope.get('Object');
      }
      TMP_1.$$p = null;
      
      if (!superclass.$$is_class) {
        throw Opal.TypeError.$new("superclass must be a Class");
      }

      var alloc = Opal.boot_class_alloc(null, function(){}, superclass)
      var klass = Opal.setup_class_object(null, alloc, superclass.$$name, superclass.constructor);

      klass.$$super = superclass;
      klass.$$parent = superclass;

      // inherit scope from parent
      Opal.create_scope(superclass.$$scope, klass);

      superclass.$inherited(klass);
      Opal.module_initialize(klass, block);

      return klass;
    
    }, TMP_1.$$arity = -1);

    Opal.defn(self, '$allocate', TMP_2 = function $$allocate() {
      var self = this;

      
      var obj = new self.$$alloc();
      obj.$$id = Opal.uid();
      return obj;
    
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$inherited', TMP_3 = function $$inherited(cls) {
      var self = this;

      return nil;
    }, TMP_3.$$arity = 1);

    Opal.defn(self, '$new', TMP_4 = function($a_rest) {
      var self = this, args, $iter = TMP_4.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_4.$$p = null;
      
      var obj = self.$allocate();

      obj.$initialize.$$p = block;
      obj.$initialize.apply(obj, args);
      return obj;
    ;
    }, TMP_4.$$arity = -1);

    Opal.defn(self, '$superclass', TMP_5 = function $$superclass() {
      var self = this;

      return self.$$super || nil;
    }, TMP_5.$$arity = 0);

    return (Opal.defn(self, '$to_s', TMP_6 = function $$to_s() {
      var $a, $b, self = this, $iter = TMP_6.$$p, $yield = $iter || nil;

      TMP_6.$$p = null;
      
      var singleton_of = self.$$singleton_of;

      if (singleton_of && (singleton_of.$$is_class || singleton_of.$$is_module)) {
        return "#<Class:" + ((singleton_of).$name()) + ">";
      }
      else if (singleton_of) {
        // a singleton class created from an object
        return "#<Class:#<" + ((singleton_of.$$class).$name()) + ":0x" + ((singleton_of.$$id).$to_s(16)) + ">>";
      }
      return ($a = ($b = self, Opal.find_super_dispatcher(self, 'to_s', TMP_6, false)), $a.$$p = null, $a).call($b);
    
    }, TMP_6.$$arity = 0), nil) && 'to_s';
  })($scope.base, null);
};
/* Generated by Opal 0.10.3 */
Opal.modules["corelib/basic_object"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $range = Opal.range, $hash2 = Opal.hash2;

  Opal.add_stubs(['$==', '$!', '$nil?', '$cover?', '$size', '$raise', '$merge', '$compile', '$proc', '$>', '$new', '$inspect']);
  return (function($base, $super) {
    function $BasicObject(){};
    var self = $BasicObject = $klass($base, $super, 'BasicObject', $BasicObject);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14;

    Opal.defn(self, '$initialize', TMP_1 = function $$initialize($a_rest) {
      var self = this;

      return nil;
    }, TMP_1.$$arity = -1);

    Opal.defn(self, '$==', TMP_2 = function(other) {
      var self = this;

      return self === other;
    }, TMP_2.$$arity = 1);

    Opal.defn(self, '$eql?', TMP_3 = function(other) {
      var self = this;

      return self['$=='](other);
    }, TMP_3.$$arity = 1);

    Opal.alias(self, 'equal?', '==');

    Opal.defn(self, '$__id__', TMP_4 = function $$__id__() {
      var self = this;

      return self.$$id || (self.$$id = Opal.uid());
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$__send__', TMP_5 = function $$__send__(symbol, $a_rest) {
      var self = this, args, $iter = TMP_5.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      TMP_5.$$p = null;
      
      var func = self['$' + symbol]

      if (func) {
        if (block !== nil) {
          func.$$p = block;
        }

        return func.apply(self, args);
      }

      if (block !== nil) {
        self.$method_missing.$$p = block;
      }

      return self.$method_missing.apply(self, [symbol].concat(args));
    
    }, TMP_5.$$arity = -2);

    Opal.defn(self, '$!', TMP_6 = function() {
      var self = this;

      return false;
    }, TMP_6.$$arity = 0);

    Opal.defn(self, '$!=', TMP_7 = function(other) {
      var self = this;

      return (self['$=='](other))['$!']();
    }, TMP_7.$$arity = 1);

    Opal.alias(self, 'equal?', '==');

    Opal.defn(self, '$instance_eval', TMP_8 = function $$instance_eval($a_rest) {
      var $b, $c, TMP_9, self = this, args, $iter = TMP_8.$$p, block = $iter || nil, string = nil, file = nil, _lineno = nil, default_eval_options = nil, compiling_options = nil, compiled = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_8.$$p = null;
      if ((($b = ($c = block['$nil?'](), $c !== false && $c !== nil && $c != null ?!!Opal.compile : $c)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        if ((($b = ($range(1, 3, false))['$cover?'](args.$size())) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          } else {
          $scope.get('Kernel').$raise($scope.get('ArgumentError'), "wrong number of arguments (0 for 1..3)")
        };
        $b = Opal.to_a(args), string = ($b[0] == null ? nil : $b[0]), file = ($b[1] == null ? nil : $b[1]), _lineno = ($b[2] == null ? nil : $b[2]), $b;
        default_eval_options = $hash2(["file", "eval"], {"file": (((($b = file) !== false && $b !== nil && $b != null) ? $b : "(eval)")), "eval": true});
        compiling_options = Opal.hash({ arity_check: false }).$merge(default_eval_options);
        compiled = $scope.get('Opal').$compile(string, compiling_options);
        block = ($b = ($c = $scope.get('Kernel')).$proc, $b.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this;

        
          return (function(self) {
            return eval(compiled);
          })(self)
        }, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $b).call($c);
      } else if ((($b = $rb_gt(args.$size(), 0)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        $scope.get('Kernel').$raise($scope.get('ArgumentError'), "wrong number of arguments (" + (args.$size()) + " for 0)")};
      
      var old = block.$$s,
          result;

      block.$$s = null;

      // Need to pass $$eval so that method definitions know if this is
      // being done on a class/module. Cannot be compiler driven since
      // send(:instance_eval) needs to work.
      if (self.$$is_class || self.$$is_module) {
        self.$$eval = true;
        try {
          result = block.call(self, self);
        }
        finally {
          self.$$eval = false;
        }
      }
      else {
        result = block.call(self, self);
      }

      block.$$s = old;

      return result;
    
    }, TMP_8.$$arity = -1);

    Opal.defn(self, '$instance_exec', TMP_10 = function $$instance_exec($a_rest) {
      var self = this, args, $iter = TMP_10.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_10.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        $scope.get('Kernel').$raise($scope.get('ArgumentError'), "no block given")
      };
      
      var block_self = block.$$s,
          result;

      block.$$s = null;

      if (self.$$is_class || self.$$is_module) {
        self.$$eval = true;
        try {
          result = block.apply(self, args);
        }
        finally {
          self.$$eval = false;
        }
      }
      else {
        result = block.apply(self, args);
      }

      block.$$s = block_self;

      return result;
    
    }, TMP_10.$$arity = -1);

    Opal.defn(self, '$singleton_method_added', TMP_11 = function $$singleton_method_added($a_rest) {
      var self = this;

      return nil;
    }, TMP_11.$$arity = -1);

    Opal.defn(self, '$singleton_method_removed', TMP_12 = function $$singleton_method_removed($a_rest) {
      var self = this;

      return nil;
    }, TMP_12.$$arity = -1);

    Opal.defn(self, '$singleton_method_undefined', TMP_13 = function $$singleton_method_undefined($a_rest) {
      var self = this;

      return nil;
    }, TMP_13.$$arity = -1);

    return (Opal.defn(self, '$method_missing', TMP_14 = function $$method_missing(symbol, $a_rest) {
      var $b, self = this, args, $iter = TMP_14.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      TMP_14.$$p = null;
      return $scope.get('Kernel').$raise($scope.get('NoMethodError').$new((function() {if ((($b = self.$inspect && !self.$inspect.$$stub) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        return "undefined method `" + (symbol) + "' for " + (self.$inspect()) + ":" + (self.$$class)
        } else {
        return "undefined method `" + (symbol) + "' for " + (self.$$class)
      }; return nil; })(), symbol));
    }, TMP_14.$$arity = -2), nil) && 'method_missing';
  })($scope.base, null)
};
/* Generated by Opal 0.10.3 */
Opal.modules["corelib/kernel"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $gvars = Opal.gvars, $hash2 = Opal.hash2, $klass = Opal.klass;

  Opal.add_stubs(['$raise', '$new', '$inspect', '$!', '$=~', '$==', '$object_id', '$class', '$coerce_to?', '$<<', '$allocate', '$copy_instance_variables', '$copy_singleton_methods', '$initialize_clone', '$initialize_copy', '$define_method', '$to_proc', '$singleton_class', '$initialize_dup', '$for', '$>', '$size', '$pop', '$call', '$append_features', '$extended', '$length', '$respond_to?', '$[]', '$nil?', '$to_a', '$to_int', '$fetch', '$Integer', '$Float', '$to_ary', '$to_str', '$coerce_to', '$to_s', '$__id__', '$instance_variable_name!', '$coerce_to!', '$===', '$enum_for', '$print', '$format', '$puts', '$each', '$<=', '$empty?', '$exception', '$kind_of?', '$respond_to_missing?', '$try_convert!', '$expand_path', '$join', '$start_with?', '$sym', '$arg', '$open', '$include']);
  (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30, TMP_31, TMP_32, TMP_33, TMP_34, TMP_35, TMP_36, TMP_37, TMP_38, TMP_39, TMP_40, TMP_41, TMP_42, TMP_43, TMP_45, TMP_46, TMP_47, TMP_48, TMP_49, TMP_50, TMP_51, TMP_52, TMP_53, TMP_54, TMP_55, TMP_56, TMP_57, TMP_58, TMP_59, TMP_60, TMP_61, TMP_62, TMP_63;

    Opal.defn(self, '$method_missing', TMP_1 = function $$method_missing(symbol, $a_rest) {
      var self = this, args, $iter = TMP_1.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      TMP_1.$$p = null;
      return self.$raise($scope.get('NoMethodError').$new("undefined method `" + (symbol) + "' for " + (self.$inspect()), symbol, args));
    }, TMP_1.$$arity = -2);

    Opal.defn(self, '$=~', TMP_2 = function(obj) {
      var self = this;

      return false;
    }, TMP_2.$$arity = 1);

    Opal.defn(self, '$!~', TMP_3 = function(obj) {
      var self = this;

      return (self['$=~'](obj))['$!']();
    }, TMP_3.$$arity = 1);

    Opal.defn(self, '$===', TMP_4 = function(other) {
      var $a, self = this;

      return ((($a = self.$object_id()['$=='](other.$object_id())) !== false && $a !== nil && $a != null) ? $a : self['$=='](other));
    }, TMP_4.$$arity = 1);

    Opal.defn(self, '$<=>', TMP_5 = function(other) {
      var self = this;

      
      // set guard for infinite recursion
      self.$$comparable = true;

      var x = self['$=='](other);

      if (x && x !== nil) {
        return 0;
      }

      return nil;
    
    }, TMP_5.$$arity = 1);

    Opal.defn(self, '$method', TMP_6 = function $$method(name) {
      var self = this;

      
      var meth = self['$' + name];

      if (!meth || meth.$$stub) {
        self.$raise($scope.get('NameError').$new("undefined method `" + (name) + "' for class `" + (self.$class()) + "'", name));
      }

      return $scope.get('Method').$new(self, meth, name);
    
    }, TMP_6.$$arity = 1);

    Opal.defn(self, '$methods', TMP_7 = function $$methods(all) {
      var self = this;

      if (all == null) {
        all = true;
      }
      
      var methods = [];

      for (var key in self) {
        if (key[0] == "$" && typeof(self[key]) === "function") {
          if (all == false || all === nil) {
            if (!Opal.hasOwnProperty.call(self, key)) {
              continue;
            }
          }
          if (self[key].$$stub === undefined) {
            methods.push(key.substr(1));
          }
        }
      }

      return methods;
    
    }, TMP_7.$$arity = -1);

    Opal.alias(self, 'public_methods', 'methods');

    Opal.defn(self, '$Array', TMP_8 = function $$Array(object) {
      var self = this;

      
      var coerced;

      if (object === nil) {
        return [];
      }

      if (object.$$is_array) {
        return object;
      }

      coerced = $scope.get('Opal')['$coerce_to?'](object, $scope.get('Array'), "to_ary");
      if (coerced !== nil) { return coerced; }

      coerced = $scope.get('Opal')['$coerce_to?'](object, $scope.get('Array'), "to_a");
      if (coerced !== nil) { return coerced; }

      return [object];
    
    }, TMP_8.$$arity = 1);

    Opal.defn(self, '$at_exit', TMP_9 = function $$at_exit() {
      var $a, self = this, $iter = TMP_9.$$p, block = $iter || nil;
      if ($gvars.__at_exit__ == null) $gvars.__at_exit__ = nil;

      TMP_9.$$p = null;
      ((($a = $gvars.__at_exit__) !== false && $a !== nil && $a != null) ? $a : $gvars.__at_exit__ = []);
      return $gvars.__at_exit__['$<<'](block);
    }, TMP_9.$$arity = 0);

    Opal.defn(self, '$caller', TMP_10 = function $$caller() {
      var self = this;

      return [];
    }, TMP_10.$$arity = 0);

    Opal.defn(self, '$class', TMP_11 = function() {
      var self = this;

      return self.$$class;
    }, TMP_11.$$arity = 0);

    Opal.defn(self, '$copy_instance_variables', TMP_12 = function $$copy_instance_variables(other) {
      var self = this;

      
      for (var name in other) {
        if (other.hasOwnProperty(name) && name.charAt(0) !== '$') {
          self[name] = other[name];
        }
      }
    
    }, TMP_12.$$arity = 1);

    Opal.defn(self, '$copy_singleton_methods', TMP_13 = function $$copy_singleton_methods(other) {
      var self = this;

      
      var name;

      if (other.hasOwnProperty('$$meta')) {
        var other_singleton_class_proto = Opal.get_singleton_class(other).$$proto;
        var self_singleton_class_proto = Opal.get_singleton_class(self).$$proto;

        for (name in other_singleton_class_proto) {
          if (name.charAt(0) === '$' && other_singleton_class_proto.hasOwnProperty(name)) {
            self_singleton_class_proto[name] = other_singleton_class_proto[name];
          }
        }
      }

      for (name in other) {
        if (name.charAt(0) === '$' && name.charAt(1) !== '$' && other.hasOwnProperty(name)) {
          self[name] = other[name];
        }
      }
    
    }, TMP_13.$$arity = 1);

    Opal.defn(self, '$clone', TMP_14 = function $$clone() {
      var self = this, copy = nil;

      copy = self.$class().$allocate();
      copy.$copy_instance_variables(self);
      copy.$copy_singleton_methods(self);
      copy.$initialize_clone(self);
      return copy;
    }, TMP_14.$$arity = 0);

    Opal.defn(self, '$initialize_clone', TMP_15 = function $$initialize_clone(other) {
      var self = this;

      return self.$initialize_copy(other);
    }, TMP_15.$$arity = 1);

    Opal.defn(self, '$define_singleton_method', TMP_16 = function $$define_singleton_method(name, method) {
      var $a, $b, self = this, $iter = TMP_16.$$p, block = $iter || nil;

      TMP_16.$$p = null;
      return ($a = ($b = self.$singleton_class()).$define_method, $a.$$p = block.$to_proc(), $a).call($b, name, method);
    }, TMP_16.$$arity = -2);

    Opal.defn(self, '$dup', TMP_17 = function $$dup() {
      var self = this, copy = nil;

      copy = self.$class().$allocate();
      copy.$copy_instance_variables(self);
      copy.$initialize_dup(self);
      return copy;
    }, TMP_17.$$arity = 0);

    Opal.defn(self, '$initialize_dup', TMP_18 = function $$initialize_dup(other) {
      var self = this;

      return self.$initialize_copy(other);
    }, TMP_18.$$arity = 1);

    Opal.defn(self, '$enum_for', TMP_19 = function $$enum_for(method, $a_rest) {
      var $b, $c, self = this, args, $iter = TMP_19.$$p, block = $iter || nil;

      if (method == null) {
        method = "each";
      }
      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      TMP_19.$$p = null;
      return ($b = ($c = $scope.get('Enumerator')).$for, $b.$$p = block.$to_proc(), $b).apply($c, [self, method].concat(Opal.to_a(args)));
    }, TMP_19.$$arity = -1);

    Opal.alias(self, 'to_enum', 'enum_for');

    Opal.defn(self, '$equal?', TMP_20 = function(other) {
      var self = this;

      return self === other;
    }, TMP_20.$$arity = 1);

    Opal.defn(self, '$exit', TMP_21 = function $$exit(status) {
      var $a, $b, self = this, block = nil;
      if ($gvars.__at_exit__ == null) $gvars.__at_exit__ = nil;

      if (status == null) {
        status = true;
      }
      ((($a = $gvars.__at_exit__) !== false && $a !== nil && $a != null) ? $a : $gvars.__at_exit__ = []);
      while ((($b = $rb_gt($gvars.__at_exit__.$size(), 0)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
      block = $gvars.__at_exit__.$pop();
      block.$call();};
      if ((($a = status === true) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        status = 0};
      Opal.exit(status);
      return nil;
    }, TMP_21.$$arity = -1);

    Opal.defn(self, '$extend', TMP_22 = function $$extend($a_rest) {
      var self = this, mods;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      mods = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        mods[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      var singleton = self.$singleton_class();

      for (var i = mods.length - 1; i >= 0; i--) {
        var mod = mods[i];

        if (!mod.$$is_module) {
          self.$raise($scope.get('TypeError'), "wrong argument type " + ((mod).$class()) + " (expected Module)");
        }

        (mod).$append_features(singleton);
        (mod).$extended(self);
      }
    ;
      return self;
    }, TMP_22.$$arity = -1);

    Opal.defn(self, '$format', TMP_23 = function $$format(format_string, $a_rest) {
      var $b, $c, self = this, args, ary = nil;
      if ($gvars.DEBUG == null) $gvars.DEBUG = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      if ((($b = (($c = args.$length()['$=='](1)) ? args['$[]'](0)['$respond_to?']("to_ary") : args.$length()['$=='](1))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        ary = $scope.get('Opal')['$coerce_to?'](args['$[]'](0), $scope.get('Array'), "to_ary");
        if ((($b = ary['$nil?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          } else {
          args = ary.$to_a()
        };};
      
      var result = '',
          //used for slicing:
          begin_slice = 0,
          end_slice,
          //used for iterating over the format string:
          i,
          len = format_string.length,
          //used for processing field values:
          arg,
          str,
          //used for processing %g and %G fields:
          exponent,
          //used for keeping track of width and precision:
          width,
          precision,
          //used for holding temporary values:
          tmp_num,
          //used for processing %{} and %<> fileds:
          hash_parameter_key,
          closing_brace_char,
          //used for processing %b, %B, %o, %x, and %X fields:
          base_number,
          base_prefix,
          base_neg_zero_regex,
          base_neg_zero_digit,
          //used for processing arguments:
          next_arg,
          seq_arg_num = 1,
          pos_arg_num = 0,
          //used for keeping track of flags:
          flags,
          FNONE  = 0,
          FSHARP = 1,
          FMINUS = 2,
          FPLUS  = 4,
          FZERO  = 8,
          FSPACE = 16,
          FWIDTH = 32,
          FPREC  = 64,
          FPREC0 = 128;

      function CHECK_FOR_FLAGS() {
        if (flags&FWIDTH) { self.$raise($scope.get('ArgumentError'), "flag after width") }
        if (flags&FPREC0) { self.$raise($scope.get('ArgumentError'), "flag after precision") }
      }

      function CHECK_FOR_WIDTH() {
        if (flags&FWIDTH) { self.$raise($scope.get('ArgumentError'), "width given twice") }
        if (flags&FPREC0) { self.$raise($scope.get('ArgumentError'), "width after precision") }
      }

      function GET_NTH_ARG(num) {
        if (num >= args.length) { self.$raise($scope.get('ArgumentError'), "too few arguments") }
        return args[num];
      }

      function GET_NEXT_ARG() {
        switch (pos_arg_num) {
        case -1: self.$raise($scope.get('ArgumentError'), "unnumbered(" + (seq_arg_num) + ") mixed with numbered")
        case -2: self.$raise($scope.get('ArgumentError'), "unnumbered(" + (seq_arg_num) + ") mixed with named")
        }
        pos_arg_num = seq_arg_num++;
        return GET_NTH_ARG(pos_arg_num - 1);
      }

      function GET_POS_ARG(num) {
        if (pos_arg_num > 0) {
          self.$raise($scope.get('ArgumentError'), "numbered(" + (num) + ") after unnumbered(" + (pos_arg_num) + ")")
        }
        if (pos_arg_num === -2) {
          self.$raise($scope.get('ArgumentError'), "numbered(" + (num) + ") after named")
        }
        if (num < 1) {
          self.$raise($scope.get('ArgumentError'), "invalid index - " + (num) + "$")
        }
        pos_arg_num = -1;
        return GET_NTH_ARG(num - 1);
      }

      function GET_ARG() {
        return (next_arg === undefined ? GET_NEXT_ARG() : next_arg);
      }

      function READ_NUM(label) {
        var num, str = '';
        for (;; i++) {
          if (i === len) {
            self.$raise($scope.get('ArgumentError'), "malformed format string - %*[0-9]")
          }
          if (format_string.charCodeAt(i) < 48 || format_string.charCodeAt(i) > 57) {
            i--;
            num = parseInt(str, 10) || 0;
            if (num > 2147483647) {
              self.$raise($scope.get('ArgumentError'), "" + (label) + " too big")
            }
            return num;
          }
          str += format_string.charAt(i);
        }
      }

      function READ_NUM_AFTER_ASTER(label) {
        var arg, num = READ_NUM(label);
        if (format_string.charAt(i + 1) === '$') {
          i++;
          arg = GET_POS_ARG(num);
        } else {
          arg = GET_NEXT_ARG();
        }
        return (arg).$to_int();
      }

      for (i = format_string.indexOf('%'); i !== -1; i = format_string.indexOf('%', i)) {
        str = undefined;

        flags = FNONE;
        width = -1;
        precision = -1;
        next_arg = undefined;

        end_slice = i;

        i++;

        switch (format_string.charAt(i)) {
        case '%':
          begin_slice = i;
        case '':
        case '\n':
        case '\0':
          i++;
          continue;
        }

        format_sequence: for (; i < len; i++) {
          switch (format_string.charAt(i)) {

          case ' ':
            CHECK_FOR_FLAGS();
            flags |= FSPACE;
            continue format_sequence;

          case '#':
            CHECK_FOR_FLAGS();
            flags |= FSHARP;
            continue format_sequence;

          case '+':
            CHECK_FOR_FLAGS();
            flags |= FPLUS;
            continue format_sequence;

          case '-':
            CHECK_FOR_FLAGS();
            flags |= FMINUS;
            continue format_sequence;

          case '0':
            CHECK_FOR_FLAGS();
            flags |= FZERO;
            continue format_sequence;

          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
            tmp_num = READ_NUM('width');
            if (format_string.charAt(i + 1) === '$') {
              if (i + 2 === len) {
                str = '%';
                i++;
                break format_sequence;
              }
              if (next_arg !== undefined) {
                self.$raise($scope.get('ArgumentError'), "value given twice - %" + (tmp_num) + "$")
              }
              next_arg = GET_POS_ARG(tmp_num);
              i++;
            } else {
              CHECK_FOR_WIDTH();
              flags |= FWIDTH;
              width = tmp_num;
            }
            continue format_sequence;

          case '<':
          case '\{':
            closing_brace_char = (format_string.charAt(i) === '<' ? '>' : '\}');
            hash_parameter_key = '';

            i++;

            for (;; i++) {
              if (i === len) {
                self.$raise($scope.get('ArgumentError'), "malformed name - unmatched parenthesis")
              }
              if (format_string.charAt(i) === closing_brace_char) {

                if (pos_arg_num > 0) {
                  self.$raise($scope.get('ArgumentError'), "named " + (hash_parameter_key) + " after unnumbered(" + (pos_arg_num) + ")")
                }
                if (pos_arg_num === -1) {
                  self.$raise($scope.get('ArgumentError'), "named " + (hash_parameter_key) + " after numbered")
                }
                pos_arg_num = -2;

                if (args[0] === undefined || !args[0].$$is_hash) {
                  self.$raise($scope.get('ArgumentError'), "one hash required")
                }

                next_arg = (args[0]).$fetch(hash_parameter_key);

                if (closing_brace_char === '>') {
                  continue format_sequence;
                } else {
                  str = next_arg.toString();
                  if (precision !== -1) { str = str.slice(0, precision); }
                  if (flags&FMINUS) {
                    while (str.length < width) { str = str + ' '; }
                  } else {
                    while (str.length < width) { str = ' ' + str; }
                  }
                  break format_sequence;
                }
              }
              hash_parameter_key += format_string.charAt(i);
            }

          case '*':
            i++;
            CHECK_FOR_WIDTH();
            flags |= FWIDTH;
            width = READ_NUM_AFTER_ASTER('width');
            if (width < 0) {
              flags |= FMINUS;
              width = -width;
            }
            continue format_sequence;

          case '.':
            if (flags&FPREC0) {
              self.$raise($scope.get('ArgumentError'), "precision given twice")
            }
            flags |= FPREC|FPREC0;
            precision = 0;
            i++;
            if (format_string.charAt(i) === '*') {
              i++;
              precision = READ_NUM_AFTER_ASTER('precision');
              if (precision < 0) {
                flags &= ~FPREC;
              }
              continue format_sequence;
            }
            precision = READ_NUM('precision');
            continue format_sequence;

          case 'd':
          case 'i':
          case 'u':
            arg = self.$Integer(GET_ARG());
            if (arg >= 0) {
              str = arg.toString();
              while (str.length < precision) { str = '0' + str; }
              if (flags&FMINUS) {
                if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                while (str.length < width) { str = str + ' '; }
              } else {
                if (flags&FZERO && precision === -1) {
                  while (str.length < width - ((flags&FPLUS || flags&FSPACE) ? 1 : 0)) { str = '0' + str; }
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                } else {
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                  while (str.length < width) { str = ' ' + str; }
                }
              }
            } else {
              str = (-arg).toString();
              while (str.length < precision) { str = '0' + str; }
              if (flags&FMINUS) {
                str = '-' + str;
                while (str.length < width) { str = str + ' '; }
              } else {
                if (flags&FZERO && precision === -1) {
                  while (str.length < width - 1) { str = '0' + str; }
                  str = '-' + str;
                } else {
                  str = '-' + str;
                  while (str.length < width) { str = ' ' + str; }
                }
              }
            }
            break format_sequence;

          case 'b':
          case 'B':
          case 'o':
          case 'x':
          case 'X':
            switch (format_string.charAt(i)) {
            case 'b':
            case 'B':
              base_number = 2;
              base_prefix = '0b';
              base_neg_zero_regex = /^1+/;
              base_neg_zero_digit = '1';
              break;
            case 'o':
              base_number = 8;
              base_prefix = '0';
              base_neg_zero_regex = /^3?7+/;
              base_neg_zero_digit = '7';
              break;
            case 'x':
            case 'X':
              base_number = 16;
              base_prefix = '0x';
              base_neg_zero_regex = /^f+/;
              base_neg_zero_digit = 'f';
              break;
            }
            arg = self.$Integer(GET_ARG());
            if (arg >= 0) {
              str = arg.toString(base_number);
              while (str.length < precision) { str = '0' + str; }
              if (flags&FMINUS) {
                if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                if (flags&FSHARP && arg !== 0) { str = base_prefix + str; }
                while (str.length < width) { str = str + ' '; }
              } else {
                if (flags&FZERO && precision === -1) {
                  while (str.length < width - ((flags&FPLUS || flags&FSPACE) ? 1 : 0) - ((flags&FSHARP && arg !== 0) ? base_prefix.length : 0)) { str = '0' + str; }
                  if (flags&FSHARP && arg !== 0) { str = base_prefix + str; }
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                } else {
                  if (flags&FSHARP && arg !== 0) { str = base_prefix + str; }
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                  while (str.length < width) { str = ' ' + str; }
                }
              }
            } else {
              if (flags&FPLUS || flags&FSPACE) {
                str = (-arg).toString(base_number);
                while (str.length < precision) { str = '0' + str; }
                if (flags&FMINUS) {
                  if (flags&FSHARP) { str = base_prefix + str; }
                  str = '-' + str;
                  while (str.length < width) { str = str + ' '; }
                } else {
                  if (flags&FZERO && precision === -1) {
                    while (str.length < width - 1 - (flags&FSHARP ? 2 : 0)) { str = '0' + str; }
                    if (flags&FSHARP) { str = base_prefix + str; }
                    str = '-' + str;
                  } else {
                    if (flags&FSHARP) { str = base_prefix + str; }
                    str = '-' + str;
                    while (str.length < width) { str = ' ' + str; }
                  }
                }
              } else {
                str = (arg >>> 0).toString(base_number).replace(base_neg_zero_regex, base_neg_zero_digit);
                while (str.length < precision - 2) { str = base_neg_zero_digit + str; }
                if (flags&FMINUS) {
                  str = '..' + str;
                  if (flags&FSHARP) { str = base_prefix + str; }
                  while (str.length < width) { str = str + ' '; }
                } else {
                  if (flags&FZERO && precision === -1) {
                    while (str.length < width - 2 - (flags&FSHARP ? base_prefix.length : 0)) { str = base_neg_zero_digit + str; }
                    str = '..' + str;
                    if (flags&FSHARP) { str = base_prefix + str; }
                  } else {
                    str = '..' + str;
                    if (flags&FSHARP) { str = base_prefix + str; }
                    while (str.length < width) { str = ' ' + str; }
                  }
                }
              }
            }
            if (format_string.charAt(i) === format_string.charAt(i).toUpperCase()) {
              str = str.toUpperCase();
            }
            break format_sequence;

          case 'f':
          case 'e':
          case 'E':
          case 'g':
          case 'G':
            arg = self.$Float(GET_ARG());
            if (arg >= 0 || isNaN(arg)) {
              if (arg === Infinity) {
                str = 'Inf';
              } else {
                switch (format_string.charAt(i)) {
                case 'f':
                  str = arg.toFixed(precision === -1 ? 6 : precision);
                  break;
                case 'e':
                case 'E':
                  str = arg.toExponential(precision === -1 ? 6 : precision);
                  break;
                case 'g':
                case 'G':
                  str = arg.toExponential();
                  exponent = parseInt(str.split('e')[1], 10);
                  if (!(exponent < -4 || exponent >= (precision === -1 ? 6 : precision))) {
                    str = arg.toPrecision(precision === -1 ? (flags&FSHARP ? 6 : undefined) : precision);
                  }
                  break;
                }
              }
              if (flags&FMINUS) {
                if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                while (str.length < width) { str = str + ' '; }
              } else {
                if (flags&FZERO && arg !== Infinity && !isNaN(arg)) {
                  while (str.length < width - ((flags&FPLUS || flags&FSPACE) ? 1 : 0)) { str = '0' + str; }
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                } else {
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                  while (str.length < width) { str = ' ' + str; }
                }
              }
            } else {
              if (arg === -Infinity) {
                str = 'Inf';
              } else {
                switch (format_string.charAt(i)) {
                case 'f':
                  str = (-arg).toFixed(precision === -1 ? 6 : precision);
                  break;
                case 'e':
                case 'E':
                  str = (-arg).toExponential(precision === -1 ? 6 : precision);
                  break;
                case 'g':
                case 'G':
                  str = (-arg).toExponential();
                  exponent = parseInt(str.split('e')[1], 10);
                  if (!(exponent < -4 || exponent >= (precision === -1 ? 6 : precision))) {
                    str = (-arg).toPrecision(precision === -1 ? (flags&FSHARP ? 6 : undefined) : precision);
                  }
                  break;
                }
              }
              if (flags&FMINUS) {
                str = '-' + str;
                while (str.length < width) { str = str + ' '; }
              } else {
                if (flags&FZERO && arg !== -Infinity) {
                  while (str.length < width - 1) { str = '0' + str; }
                  str = '-' + str;
                } else {
                  str = '-' + str;
                  while (str.length < width) { str = ' ' + str; }
                }
              }
            }
            if (format_string.charAt(i) === format_string.charAt(i).toUpperCase() && arg !== Infinity && arg !== -Infinity && !isNaN(arg)) {
              str = str.toUpperCase();
            }
            str = str.replace(/([eE][-+]?)([0-9])$/, '$10$2');
            break format_sequence;

          case 'a':
          case 'A':
            // Not implemented because there are no specs for this field type.
            self.$raise($scope.get('NotImplementedError'), "`A` and `a` format field types are not implemented in Opal yet")

          case 'c':
            arg = GET_ARG();
            if ((arg)['$respond_to?']("to_ary")) { arg = (arg).$to_ary()[0]; }
            if ((arg)['$respond_to?']("to_str")) {
              str = (arg).$to_str();
            } else {
              str = String.fromCharCode($scope.get('Opal').$coerce_to(arg, $scope.get('Integer'), "to_int"));
            }
            if (str.length !== 1) {
              self.$raise($scope.get('ArgumentError'), "%c requires a character")
            }
            if (flags&FMINUS) {
              while (str.length < width) { str = str + ' '; }
            } else {
              while (str.length < width) { str = ' ' + str; }
            }
            break format_sequence;

          case 'p':
            str = (GET_ARG()).$inspect();
            if (precision !== -1) { str = str.slice(0, precision); }
            if (flags&FMINUS) {
              while (str.length < width) { str = str + ' '; }
            } else {
              while (str.length < width) { str = ' ' + str; }
            }
            break format_sequence;

          case 's':
            str = (GET_ARG()).$to_s();
            if (precision !== -1) { str = str.slice(0, precision); }
            if (flags&FMINUS) {
              while (str.length < width) { str = str + ' '; }
            } else {
              while (str.length < width) { str = ' ' + str; }
            }
            break format_sequence;

          default:
            self.$raise($scope.get('ArgumentError'), "malformed format string - %" + (format_string.charAt(i)))
          }
        }

        if (str === undefined) {
          self.$raise($scope.get('ArgumentError'), "malformed format string - %")
        }

        result += format_string.slice(begin_slice, end_slice) + str;
        begin_slice = i + 1;
      }

      if ($gvars.DEBUG && pos_arg_num >= 0 && seq_arg_num < args.length) {
        self.$raise($scope.get('ArgumentError'), "too many arguments for format string")
      }

      return result + format_string.slice(begin_slice);
    ;
    }, TMP_23.$$arity = -2);

    Opal.defn(self, '$hash', TMP_24 = function $$hash() {
      var self = this;

      return self.$__id__();
    }, TMP_24.$$arity = 0);

    Opal.defn(self, '$initialize_copy', TMP_25 = function $$initialize_copy(other) {
      var self = this;

      return nil;
    }, TMP_25.$$arity = 1);

    Opal.defn(self, '$inspect', TMP_26 = function $$inspect() {
      var self = this;

      return self.$to_s();
    }, TMP_26.$$arity = 0);

    Opal.defn(self, '$instance_of?', TMP_27 = function(klass) {
      var self = this;

      
      if (!klass.$$is_class && !klass.$$is_module) {
        self.$raise($scope.get('TypeError'), "class or module required");
      }

      return self.$$class === klass;
    ;
    }, TMP_27.$$arity = 1);

    Opal.defn(self, '$instance_variable_defined?', TMP_28 = function(name) {
      var self = this;

      name = $scope.get('Opal')['$instance_variable_name!'](name);
      return Opal.hasOwnProperty.call(self, name.substr(1));
    }, TMP_28.$$arity = 1);

    Opal.defn(self, '$instance_variable_get', TMP_29 = function $$instance_variable_get(name) {
      var self = this;

      name = $scope.get('Opal')['$instance_variable_name!'](name);
      
      var ivar = self[Opal.ivar(name.substr(1))];

      return ivar == null ? nil : ivar;
    
    }, TMP_29.$$arity = 1);

    Opal.defn(self, '$instance_variable_set', TMP_30 = function $$instance_variable_set(name, value) {
      var self = this;

      name = $scope.get('Opal')['$instance_variable_name!'](name);
      return self[Opal.ivar(name.substr(1))] = value;
    }, TMP_30.$$arity = 2);

    Opal.defn(self, '$remove_instance_variable', TMP_31 = function $$remove_instance_variable(name) {
      var self = this;

      name = $scope.get('Opal')['$instance_variable_name!'](name);
      
      var key = Opal.ivar(name.substr(1)),
          val;
      if (self.hasOwnProperty(key)) {
        val = self[key];
        delete self[key];
        return val;
      }
    
      return self.$raise($scope.get('NameError'), "instance variable " + (name) + " not defined");
    }, TMP_31.$$arity = 1);

    Opal.defn(self, '$instance_variables', TMP_32 = function $$instance_variables() {
      var self = this;

      
      var result = [], ivar;

      for (var name in self) {
        if (self.hasOwnProperty(name) && name.charAt(0) !== '$') {
          if (name.substr(-1) === '$') {
            ivar = name.slice(0, name.length - 1);
          } else {
            ivar = name;
          }
          result.push('@' + ivar);
        }
      }

      return result;
    
    }, TMP_32.$$arity = 0);

    Opal.defn(self, '$Integer', TMP_33 = function $$Integer(value, base) {
      var self = this;

      
      var i, str, base_digits;

      if (!value.$$is_string) {
        if (base !== undefined) {
          self.$raise($scope.get('ArgumentError'), "base specified for non string value")
        }
        if (value === nil) {
          self.$raise($scope.get('TypeError'), "can't convert nil into Integer")
        }
        if (value.$$is_number) {
          if (value === Infinity || value === -Infinity || isNaN(value)) {
            self.$raise($scope.get('FloatDomainError'), value)
          }
          return Math.floor(value);
        }
        if (value['$respond_to?']("to_int")) {
          i = value.$to_int();
          if (i !== nil) {
            return i;
          }
        }
        return $scope.get('Opal')['$coerce_to!'](value, $scope.get('Integer'), "to_i");
      }

      if (base === undefined) {
        base = 0;
      } else {
        base = $scope.get('Opal').$coerce_to(base, $scope.get('Integer'), "to_int");
        if (base === 1 || base < 0 || base > 36) {
          self.$raise($scope.get('ArgumentError'), "invalid radix " + (base))
        }
      }

      str = value.toLowerCase();

      str = str.replace(/(\d)_(?=\d)/g, '$1');

      str = str.replace(/^(\s*[+-]?)(0[bodx]?)/, function (_, head, flag) {
        switch (flag) {
        case '0b':
          if (base === 0 || base === 2) {
            base = 2;
            return head;
          }
        case '0':
        case '0o':
          if (base === 0 || base === 8) {
            base = 8;
            return head;
          }
        case '0d':
          if (base === 0 || base === 10) {
            base = 10;
            return head;
          }
        case '0x':
          if (base === 0 || base === 16) {
            base = 16;
            return head;
          }
        }
        self.$raise($scope.get('ArgumentError'), "invalid value for Integer(): \"" + (value) + "\"")
      });

      base = (base === 0 ? 10 : base);

      base_digits = '0-' + (base <= 10 ? base - 1 : '9a-' + String.fromCharCode(97 + (base - 11)));

      if (!(new RegExp('^\\s*[+-]?[' + base_digits + ']+\\s*$')).test(str)) {
        self.$raise($scope.get('ArgumentError'), "invalid value for Integer(): \"" + (value) + "\"")
      }

      i = parseInt(str, base);

      if (isNaN(i)) {
        self.$raise($scope.get('ArgumentError'), "invalid value for Integer(): \"" + (value) + "\"")
      }

      return i;
    ;
    }, TMP_33.$$arity = -2);

    Opal.defn(self, '$Float', TMP_34 = function $$Float(value) {
      var self = this;

      
      var str;

      if (value === nil) {
        self.$raise($scope.get('TypeError'), "can't convert nil into Float")
      }

      if (value.$$is_string) {
        str = value.toString();

        str = str.replace(/(\d)_(?=\d)/g, '$1');

        //Special case for hex strings only:
        if (/^\s*[-+]?0[xX][0-9a-fA-F]+\s*$/.test(str)) {
          return self.$Integer(str);
        }

        if (!/^\s*[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?\s*$/.test(str)) {
          self.$raise($scope.get('ArgumentError'), "invalid value for Float(): \"" + (value) + "\"")
        }

        return parseFloat(str);
      }

      return $scope.get('Opal')['$coerce_to!'](value, $scope.get('Float'), "to_f");
    
    }, TMP_34.$$arity = 1);

    Opal.defn(self, '$Hash', TMP_35 = function $$Hash(arg) {
      var $a, $b, self = this;

      if ((($a = ((($b = arg['$nil?']()) !== false && $b !== nil && $b != null) ? $b : arg['$==']([]))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return $hash2([], {})};
      if ((($a = $scope.get('Hash')['$==='](arg)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return arg};
      return $scope.get('Opal')['$coerce_to!'](arg, $scope.get('Hash'), "to_hash");
    }, TMP_35.$$arity = 1);

    Opal.defn(self, '$is_a?', TMP_36 = function(klass) {
      var self = this;

      
      if (!klass.$$is_class && !klass.$$is_module) {
        self.$raise($scope.get('TypeError'), "class or module required");
      }

      return Opal.is_a(self, klass);
    ;
    }, TMP_36.$$arity = 1);

    Opal.alias(self, 'kind_of?', 'is_a?');

    Opal.defn(self, '$lambda', TMP_37 = function $$lambda() {
      var self = this, $iter = TMP_37.$$p, block = $iter || nil;

      TMP_37.$$p = null;
      block.$$is_lambda = true;
      return block;
    }, TMP_37.$$arity = 0);

    Opal.defn(self, '$load', TMP_38 = function $$load(file) {
      var self = this;

      file = $scope.get('Opal')['$coerce_to!'](file, $scope.get('String'), "to_str");
      return Opal.load(file);
    }, TMP_38.$$arity = 1);

    Opal.defn(self, '$loop', TMP_39 = function $$loop() {
      var self = this, $iter = TMP_39.$$p, $yield = $iter || nil;

      TMP_39.$$p = null;
      if (($yield !== nil)) {
        } else {
        return self.$enum_for("loop")
      };
      
      while (true) {
        Opal.yieldX($yield, [])
      }
    ;
      return self;
    }, TMP_39.$$arity = 0);

    Opal.defn(self, '$nil?', TMP_40 = function() {
      var self = this;

      return false;
    }, TMP_40.$$arity = 0);

    Opal.alias(self, 'object_id', '__id__');

    Opal.defn(self, '$printf', TMP_41 = function $$printf($a_rest) {
      var $b, self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ((($b = $rb_gt(args.$length(), 0)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        self.$print(($b = self).$format.apply($b, Opal.to_a(args)))};
      return nil;
    }, TMP_41.$$arity = -1);

    Opal.defn(self, '$proc', TMP_42 = function $$proc() {
      var self = this, $iter = TMP_42.$$p, block = $iter || nil;

      TMP_42.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        self.$raise($scope.get('ArgumentError'), "tried to create Proc object without a block")
      };
      block.$$is_lambda = false;
      return block;
    }, TMP_42.$$arity = 0);

    Opal.defn(self, '$puts', TMP_43 = function $$puts($a_rest) {
      var $b, self = this, strs;
      if ($gvars.stdout == null) $gvars.stdout = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      strs = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        strs[$arg_idx - 0] = arguments[$arg_idx];
      }
      return ($b = $gvars.stdout).$puts.apply($b, Opal.to_a(strs));
    }, TMP_43.$$arity = -1);

    Opal.defn(self, '$p', TMP_45 = function $$p($a_rest) {
      var $b, $c, TMP_44, self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      ($b = ($c = args).$each, $b.$$p = (TMP_44 = function(obj){var self = TMP_44.$$s || this;
        if ($gvars.stdout == null) $gvars.stdout = nil;
if (obj == null) obj = nil;
      return $gvars.stdout.$puts(obj.$inspect())}, TMP_44.$$s = self, TMP_44.$$arity = 1, TMP_44), $b).call($c);
      if ((($b = $rb_le(args.$length(), 1)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        return args['$[]'](0)
        } else {
        return args
      };
    }, TMP_45.$$arity = -1);

    Opal.defn(self, '$print', TMP_46 = function $$print($a_rest) {
      var $b, self = this, strs;
      if ($gvars.stdout == null) $gvars.stdout = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      strs = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        strs[$arg_idx - 0] = arguments[$arg_idx];
      }
      return ($b = $gvars.stdout).$print.apply($b, Opal.to_a(strs));
    }, TMP_46.$$arity = -1);

    Opal.defn(self, '$warn', TMP_47 = function $$warn($a_rest) {
      var $b, $c, self = this, strs;
      if ($gvars.VERBOSE == null) $gvars.VERBOSE = nil;
      if ($gvars.stderr == null) $gvars.stderr = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      strs = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        strs[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ((($b = ((($c = $gvars.VERBOSE['$nil?']()) !== false && $c !== nil && $c != null) ? $c : strs['$empty?']())) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        return nil
        } else {
        return ($b = $gvars.stderr).$puts.apply($b, Opal.to_a(strs))
      };
    }, TMP_47.$$arity = -1);

    Opal.defn(self, '$raise', TMP_48 = function $$raise(exception, string, _backtrace) {
      var self = this;
      if ($gvars["!"] == null) $gvars["!"] = nil;

      if (string == null) {
        string = nil;
      }
      if (_backtrace == null) {
        _backtrace = nil;
      }
      
      if (exception == null && $gvars["!"] !== nil) {
        throw $gvars["!"];
      }
      if (exception == null) {
        exception = $scope.get('RuntimeError').$new();
      }
      else if (exception.$$is_string) {
        exception = $scope.get('RuntimeError').$new(exception);
      }
      // using respond_to? and not an undefined check to avoid method_missing matching as true
      else if (exception.$$is_class && exception['$respond_to?']("exception")) {
        exception = exception.$exception(string);
      }
      else if (exception['$kind_of?']($scope.get('Exception'))) {
        // exception is fine
      }
      else {
        exception = $scope.get('TypeError').$new("exception class/object expected");
      }

      if ($gvars["!"] !== nil) {
        Opal.exceptions.push($gvars["!"]);
      }

      $gvars["!"] = exception;

      throw exception;
    ;
    }, TMP_48.$$arity = -1);

    Opal.alias(self, 'fail', 'raise');

    Opal.defn(self, '$rand', TMP_49 = function $$rand(max) {
      var self = this;

      
      if (max === undefined) {
        return Math.random();
      }
      else if (max.$$is_range) {
        var min = max.begin, range = max.end - min;
        if(!max.exclude) range++;

        return self.$rand(range) + min;
      }
      else {
        return Math.floor(Math.random() *
          Math.abs($scope.get('Opal').$coerce_to(max, $scope.get('Integer'), "to_int")));
      }
    
    }, TMP_49.$$arity = -1);

    Opal.defn(self, '$respond_to?', TMP_50 = function(name, include_all) {
      var $a, self = this;

      if (include_all == null) {
        include_all = false;
      }
      if ((($a = self['$respond_to_missing?'](name, include_all)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return true};
      
      var body = self['$' + name];

      if (typeof(body) === "function" && !body.$$stub) {
        return true;
      }
    
      return false;
    }, TMP_50.$$arity = -2);

    Opal.defn(self, '$respond_to_missing?', TMP_51 = function(method_name, include_all) {
      var self = this;

      if (include_all == null) {
        include_all = false;
      }
      return false;
    }, TMP_51.$$arity = -2);

    Opal.defn(self, '$require', TMP_52 = function $$require(file) {
      var self = this;

      file = $scope.get('Opal')['$coerce_to!'](file, $scope.get('String'), "to_str");
      return Opal.require(file);
    }, TMP_52.$$arity = 1);

    Opal.defn(self, '$require_relative', TMP_53 = function $$require_relative(file) {
      var self = this;

      $scope.get('Opal')['$try_convert!'](file, $scope.get('String'), "to_str");
      file = $scope.get('File').$expand_path($scope.get('File').$join(Opal.current_file, "..", file));
      return Opal.require(file);
    }, TMP_53.$$arity = 1);

    Opal.defn(self, '$require_tree', TMP_54 = function $$require_tree(path) {
      var self = this;

      path = $scope.get('File').$expand_path(path);
      if (path['$=='](".")) {
        path = ""};
      
      for (var name in Opal.modules) {
        if ((name)['$start_with?'](path)) {
          Opal.require(name);
        }
      }
    ;
      return nil;
    }, TMP_54.$$arity = 1);

    Opal.alias(self, 'send', '__send__');

    Opal.alias(self, 'public_send', '__send__');

    Opal.defn(self, '$singleton_class', TMP_55 = function $$singleton_class() {
      var self = this;

      return Opal.get_singleton_class(self);
    }, TMP_55.$$arity = 0);

    Opal.defn(self, '$sleep', TMP_56 = function $$sleep(seconds) {
      var self = this;

      if (seconds == null) {
        seconds = nil;
      }
      
      if (seconds === nil) {
        self.$raise($scope.get('TypeError'), "can't convert NilClass into time interval")
      }
      if (!seconds.$$is_number) {
        self.$raise($scope.get('TypeError'), "can't convert " + (seconds.$class()) + " into time interval")
      }
      if (seconds < 0) {
        self.$raise($scope.get('ArgumentError'), "time interval must be positive")
      }
      var t = new Date();
      while (new Date() - t <= seconds * 1000);
      return seconds;
    ;
    }, TMP_56.$$arity = -1);

    Opal.alias(self, 'sprintf', 'format');

    Opal.alias(self, 'srand', 'rand');

    Opal.defn(self, '$String', TMP_57 = function $$String(str) {
      var $a, self = this;

      return ((($a = $scope.get('Opal')['$coerce_to?'](str, $scope.get('String'), "to_str")) !== false && $a !== nil && $a != null) ? $a : $scope.get('Opal')['$coerce_to!'](str, $scope.get('String'), "to_s"));
    }, TMP_57.$$arity = 1);

    Opal.defn(self, '$tap', TMP_58 = function $$tap() {
      var self = this, $iter = TMP_58.$$p, block = $iter || nil;

      TMP_58.$$p = null;
      Opal.yield1(block, self);
      return self;
    }, TMP_58.$$arity = 0);

    Opal.defn(self, '$to_proc', TMP_59 = function $$to_proc() {
      var self = this;

      return self;
    }, TMP_59.$$arity = 0);

    Opal.defn(self, '$to_s', TMP_60 = function $$to_s() {
      var self = this;

      return "#<" + (self.$class()) + ":0x" + (self.$__id__().$to_s(16)) + ">";
    }, TMP_60.$$arity = 0);

    Opal.defn(self, '$catch', TMP_61 = function(sym) {
      var self = this, $iter = TMP_61.$$p, $yield = $iter || nil, e = nil;

      TMP_61.$$p = null;
      try {
        return Opal.yieldX($yield, []);
      } catch ($err) {
        if (Opal.rescue($err, [$scope.get('UncaughtThrowError')])) {e = $err;
          try {
            if (e.$sym()['$=='](sym)) {
              return e.$arg()};
            return self.$raise();
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };
    }, TMP_61.$$arity = 1);

    Opal.defn(self, '$throw', TMP_62 = function($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      return self.$raise($scope.get('UncaughtThrowError').$new(args));
    }, TMP_62.$$arity = -1);

    Opal.defn(self, '$open', TMP_63 = function $$open($a_rest) {
      var $b, $c, self = this, args, $iter = TMP_63.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_63.$$p = null;
      return ($b = ($c = $scope.get('File')).$open, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args));
    }, TMP_63.$$arity = -1);
  })($scope.base);
  return (function($base, $super) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $scope = self.$$scope;

    return self.$include($scope.get('Kernel'))
  })($scope.base, null);
};
/* Generated by Opal 0.10.3 */
Opal.modules["corelib/error"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module;

  Opal.add_stubs(['$new', '$clone', '$to_s', '$empty?', '$class', '$attr_reader', '$[]', '$>', '$length', '$inspect']);
  (function($base, $super) {
    function $Exception(){};
    var self = $Exception = $klass($base, $super, 'Exception', $Exception);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8;

    def.message = nil;
    Opal.defs(self, '$new', TMP_1 = function($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      var message = (args.length > 0) ? args[0] : nil;
      var err = new self.$$alloc(message);

      if (Error.captureStackTrace) {
        Error.captureStackTrace(err);
      }

      err.name = self.$$name;
      err.$initialize.apply(err, args);
      return err;
    
    }, TMP_1.$$arity = -1);

    Opal.defs(self, '$exception', TMP_2 = function $$exception($a_rest) {
      var $b, self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      return ($b = self).$new.apply($b, Opal.to_a(args));
    }, TMP_2.$$arity = -1);

    Opal.defn(self, '$initialize', TMP_3 = function $$initialize($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      return self.message = (args.length > 0) ? args[0] : nil;
    }, TMP_3.$$arity = -1);

    Opal.defn(self, '$backtrace', TMP_4 = function $$backtrace() {
      var self = this;

      
      var backtrace = self.stack;

      if (typeof(backtrace) === 'string') {
        return backtrace.split("\n").slice(0, 15);
      }
      else if (backtrace) {
        return backtrace.slice(0, 15);
      }

      return [];
    
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$exception', TMP_5 = function $$exception(str) {
      var self = this;

      if (str == null) {
        str = nil;
      }
      
      if (str === nil || self === str) {
        return self;
      }
      
      var cloned = self.$clone();
      cloned.message = str;
      return cloned;
    
    }, TMP_5.$$arity = -1);

    Opal.defn(self, '$message', TMP_6 = function $$message() {
      var self = this;

      return self.$to_s();
    }, TMP_6.$$arity = 0);

    Opal.defn(self, '$inspect', TMP_7 = function $$inspect() {
      var $a, self = this, as_str = nil;

      as_str = self.$to_s();
      if ((($a = as_str['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$class().$to_s()
        } else {
        return "#<" + (self.$class().$to_s()) + ": " + (self.$to_s()) + ">"
      };
    }, TMP_7.$$arity = 0);

    return (Opal.defn(self, '$to_s', TMP_8 = function $$to_s() {
      var $a, $b, self = this;

      return ((($a = (($b = self.message, $b !== false && $b !== nil && $b != null ?self.message.$to_s() : $b))) !== false && $a !== nil && $a != null) ? $a : self.$class().$to_s());
    }, TMP_8.$$arity = 0), nil) && 'to_s';
  })($scope.base, Error);
  (function($base, $super) {
    function $ScriptError(){};
    var self = $ScriptError = $klass($base, $super, 'ScriptError', $ScriptError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('Exception'));
  (function($base, $super) {
    function $SyntaxError(){};
    var self = $SyntaxError = $klass($base, $super, 'SyntaxError', $SyntaxError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('ScriptError'));
  (function($base, $super) {
    function $LoadError(){};
    var self = $LoadError = $klass($base, $super, 'LoadError', $LoadError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('ScriptError'));
  (function($base, $super) {
    function $NotImplementedError(){};
    var self = $NotImplementedError = $klass($base, $super, 'NotImplementedError', $NotImplementedError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('ScriptError'));
  (function($base, $super) {
    function $SystemExit(){};
    var self = $SystemExit = $klass($base, $super, 'SystemExit', $SystemExit);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('Exception'));
  (function($base, $super) {
    function $NoMemoryError(){};
    var self = $NoMemoryError = $klass($base, $super, 'NoMemoryError', $NoMemoryError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('Exception'));
  (function($base, $super) {
    function $SignalException(){};
    var self = $SignalException = $klass($base, $super, 'SignalException', $SignalException);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('Exception'));
  (function($base, $super) {
    function $Interrupt(){};
    var self = $Interrupt = $klass($base, $super, 'Interrupt', $Interrupt);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('Exception'));
  (function($base, $super) {
    function $SecurityError(){};
    var self = $SecurityError = $klass($base, $super, 'SecurityError', $SecurityError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('Exception'));
  (function($base, $super) {
    function $StandardError(){};
    var self = $StandardError = $klass($base, $super, 'StandardError', $StandardError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('Exception'));
  (function($base, $super) {
    function $ZeroDivisionError(){};
    var self = $ZeroDivisionError = $klass($base, $super, 'ZeroDivisionError', $ZeroDivisionError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('StandardError'));
  (function($base, $super) {
    function $NameError(){};
    var self = $NameError = $klass($base, $super, 'NameError', $NameError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('StandardError'));
  (function($base, $super) {
    function $NoMethodError(){};
    var self = $NoMethodError = $klass($base, $super, 'NoMethodError', $NoMethodError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('NameError'));
  (function($base, $super) {
    function $RuntimeError(){};
    var self = $RuntimeError = $klass($base, $super, 'RuntimeError', $RuntimeError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('StandardError'));
  (function($base, $super) {
    function $LocalJumpError(){};
    var self = $LocalJumpError = $klass($base, $super, 'LocalJumpError', $LocalJumpError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('StandardError'));
  (function($base, $super) {
    function $TypeError(){};
    var self = $TypeError = $klass($base, $super, 'TypeError', $TypeError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('StandardError'));
  (function($base, $super) {
    function $ArgumentError(){};
    var self = $ArgumentError = $klass($base, $super, 'ArgumentError', $ArgumentError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('StandardError'));
  (function($base, $super) {
    function $IndexError(){};
    var self = $IndexError = $klass($base, $super, 'IndexError', $IndexError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('StandardError'));
  (function($base, $super) {
    function $StopIteration(){};
    var self = $StopIteration = $klass($base, $super, 'StopIteration', $StopIteration);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('IndexError'));
  (function($base, $super) {
    function $KeyError(){};
    var self = $KeyError = $klass($base, $super, 'KeyError', $KeyError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('IndexError'));
  (function($base, $super) {
    function $RangeError(){};
    var self = $RangeError = $klass($base, $super, 'RangeError', $RangeError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('StandardError'));
  (function($base, $super) {
    function $FloatDomainError(){};
    var self = $FloatDomainError = $klass($base, $super, 'FloatDomainError', $FloatDomainError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('RangeError'));
  (function($base, $super) {
    function $IOError(){};
    var self = $IOError = $klass($base, $super, 'IOError', $IOError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('StandardError'));
  (function($base, $super) {
    function $SystemCallError(){};
    var self = $SystemCallError = $klass($base, $super, 'SystemCallError', $SystemCallError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('StandardError'));
  (function($base) {
    var $Errno, self = $Errno = $module($base, 'Errno');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $EINVAL(){};
      var self = $EINVAL = $klass($base, $super, 'EINVAL', $EINVAL);

      var def = self.$$proto, $scope = self.$$scope, TMP_9;

      return (Opal.defs(self, '$new', TMP_9 = function() {
        var $a, $b, self = this, $iter = TMP_9.$$p, $yield = $iter || nil;

        TMP_9.$$p = null;
        return ($a = ($b = self, Opal.find_super_dispatcher(self, 'new', TMP_9, false, $EINVAL)), $a.$$p = null, $a).call($b, "Invalid argument");
      }, TMP_9.$$arity = 0), nil) && 'new'
    })($scope.base, $scope.get('SystemCallError'))
  })($scope.base);
  (function($base, $super) {
    function $UncaughtThrowError(){};
    var self = $UncaughtThrowError = $klass($base, $super, 'UncaughtThrowError', $UncaughtThrowError);

    var def = self.$$proto, $scope = self.$$scope, TMP_10;

    def.sym = nil;
    self.$attr_reader("sym", "arg");

    return (Opal.defn(self, '$initialize', TMP_10 = function $$initialize(args) {
      var $a, $b, self = this, $iter = TMP_10.$$p, $yield = $iter || nil;

      TMP_10.$$p = null;
      self.sym = args['$[]'](0);
      if ((($a = $rb_gt(args.$length(), 1)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.arg = args['$[]'](1)};
      return ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_10, false)), $a.$$p = null, $a).call($b, "uncaught throw " + (self.sym.$inspect()));
    }, TMP_10.$$arity = 1), nil) && 'initialize';
  })($scope.base, $scope.get('ArgumentError'));
  (function($base, $super) {
    function $NameError(){};
    var self = $NameError = $klass($base, $super, 'NameError', $NameError);

    var def = self.$$proto, $scope = self.$$scope, TMP_11;

    self.$attr_reader("name");

    return (Opal.defn(self, '$initialize', TMP_11 = function $$initialize(message, name) {
      var $a, $b, self = this, $iter = TMP_11.$$p, $yield = $iter || nil;

      if (name == null) {
        name = nil;
      }
      TMP_11.$$p = null;
      ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_11, false)), $a.$$p = null, $a).call($b, message);
      return self.name = name;
    }, TMP_11.$$arity = -2), nil) && 'initialize';
  })($scope.base, null);
  return (function($base, $super) {
    function $NoMethodError(){};
    var self = $NoMethodError = $klass($base, $super, 'NoMethodError', $NoMethodError);

    var def = self.$$proto, $scope = self.$$scope, TMP_12;

    self.$attr_reader("args");

    return (Opal.defn(self, '$initialize', TMP_12 = function $$initialize(message, name, args) {
      var $a, $b, self = this, $iter = TMP_12.$$p, $yield = $iter || nil;

      if (name == null) {
        name = nil;
      }
      if (args == null) {
        args = [];
      }
      TMP_12.$$p = null;
      ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_12, false)), $a.$$p = null, $a).call($b, message, name);
      return self.args = args;
    }, TMP_12.$$arity = -2), nil) && 'initialize';
  })($scope.base, null);
};
/* Generated by Opal 0.10.3 */
Opal.modules["corelib/constants"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.cdecl($scope, 'RUBY_PLATFORM', "opal");
  Opal.cdecl($scope, 'RUBY_ENGINE', "opal");
  Opal.cdecl($scope, 'RUBY_VERSION', "2.2.5");
  Opal.cdecl($scope, 'RUBY_ENGINE_VERSION', "0.10.3");
  Opal.cdecl($scope, 'RUBY_RELEASE_DATE', "2016-10-31");
  Opal.cdecl($scope, 'RUBY_PATCHLEVEL', 0);
  Opal.cdecl($scope, 'RUBY_REVISION', 0);
  Opal.cdecl($scope, 'RUBY_COPYRIGHT', "opal - Copyright (C) 2013-2015 Adam Beynon");
  return Opal.cdecl($scope, 'RUBY_DESCRIPTION', "opal " + ($scope.get('RUBY_ENGINE_VERSION')) + " (" + ($scope.get('RUBY_RELEASE_DATE')) + " revision " + ($scope.get('RUBY_REVISION')) + ")");
};
/* Generated by Opal 0.10.3 */
Opal.modules["opal/base"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  self.$require("corelib/runtime");
  self.$require("corelib/helpers");
  self.$require("corelib/module");
  self.$require("corelib/class");
  self.$require("corelib/basic_object");
  self.$require("corelib/kernel");
  self.$require("corelib/error");
  return self.$require("corelib/constants");
};
/* Generated by Opal 0.10.3 */
Opal.modules["corelib/nil"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$raise', '$class', '$new', '$>', '$length', '$Rational']);
  (function($base, $super) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18;

    def.$$meta = self;

    Opal.defn(self, '$!', TMP_1 = function() {
      var self = this;

      return true;
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$&', TMP_2 = function(other) {
      var self = this;

      return false;
    }, TMP_2.$$arity = 1);

    Opal.defn(self, '$|', TMP_3 = function(other) {
      var self = this;

      return other !== false && other !== nil;
    }, TMP_3.$$arity = 1);

    Opal.defn(self, '$^', TMP_4 = function(other) {
      var self = this;

      return other !== false && other !== nil;
    }, TMP_4.$$arity = 1);

    Opal.defn(self, '$==', TMP_5 = function(other) {
      var self = this;

      return other === nil;
    }, TMP_5.$$arity = 1);

    Opal.defn(self, '$dup', TMP_6 = function $$dup() {
      var self = this;

      return self.$raise($scope.get('TypeError'), "can't dup " + (self.$class()));
    }, TMP_6.$$arity = 0);

    Opal.defn(self, '$clone', TMP_7 = function $$clone() {
      var self = this;

      return self.$raise($scope.get('TypeError'), "can't clone " + (self.$class()));
    }, TMP_7.$$arity = 0);

    Opal.defn(self, '$inspect', TMP_8 = function $$inspect() {
      var self = this;

      return "nil";
    }, TMP_8.$$arity = 0);

    Opal.defn(self, '$nil?', TMP_9 = function() {
      var self = this;

      return true;
    }, TMP_9.$$arity = 0);

    Opal.defn(self, '$singleton_class', TMP_10 = function $$singleton_class() {
      var self = this;

      return $scope.get('NilClass');
    }, TMP_10.$$arity = 0);

    Opal.defn(self, '$to_a', TMP_11 = function $$to_a() {
      var self = this;

      return [];
    }, TMP_11.$$arity = 0);

    Opal.defn(self, '$to_h', TMP_12 = function $$to_h() {
      var self = this;

      return Opal.hash();
    }, TMP_12.$$arity = 0);

    Opal.defn(self, '$to_i', TMP_13 = function $$to_i() {
      var self = this;

      return 0;
    }, TMP_13.$$arity = 0);

    Opal.alias(self, 'to_f', 'to_i');

    Opal.defn(self, '$to_s', TMP_14 = function $$to_s() {
      var self = this;

      return "";
    }, TMP_14.$$arity = 0);

    Opal.defn(self, '$to_c', TMP_15 = function $$to_c() {
      var self = this;

      return $scope.get('Complex').$new(0, 0);
    }, TMP_15.$$arity = 0);

    Opal.defn(self, '$rationalize', TMP_16 = function $$rationalize($a_rest) {
      var $b, self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ((($b = $rb_gt(args.$length(), 1)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        self.$raise($scope.get('ArgumentError'))};
      return self.$Rational(0, 1);
    }, TMP_16.$$arity = -1);

    Opal.defn(self, '$to_r', TMP_17 = function $$to_r() {
      var self = this;

      return self.$Rational(0, 1);
    }, TMP_17.$$arity = 0);

    return (Opal.defn(self, '$instance_variables', TMP_18 = function $$instance_variables() {
      var self = this;

      return [];
    }, TMP_18.$$arity = 0), nil) && 'instance_variables';
  })($scope.base, null);
  return Opal.cdecl($scope, 'NIL', nil);
};
/* Generated by Opal 0.10.3 */
Opal.modules["corelib/boolean"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$raise', '$class']);
  (function($base, $super) {
    function $Boolean(){};
    var self = $Boolean = $klass($base, $super, 'Boolean', $Boolean);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10;

    def.$$is_boolean = true;

    def.$$meta = self;

    Opal.defn(self, '$__id__', TMP_1 = function $$__id__() {
      var self = this;

      return self.valueOf() ? 2 : 0;
    }, TMP_1.$$arity = 0);

    Opal.alias(self, 'object_id', '__id__');

    Opal.defn(self, '$!', TMP_2 = function() {
      var self = this;

      return self != true;
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$&', TMP_3 = function(other) {
      var self = this;

      return (self == true) ? (other !== false && other !== nil) : false;
    }, TMP_3.$$arity = 1);

    Opal.defn(self, '$|', TMP_4 = function(other) {
      var self = this;

      return (self == true) ? true : (other !== false && other !== nil);
    }, TMP_4.$$arity = 1);

    Opal.defn(self, '$^', TMP_5 = function(other) {
      var self = this;

      return (self == true) ? (other === false || other === nil) : (other !== false && other !== nil);
    }, TMP_5.$$arity = 1);

    Opal.defn(self, '$==', TMP_6 = function(other) {
      var self = this;

      return (self == true) === other.valueOf();
    }, TMP_6.$$arity = 1);

    Opal.alias(self, 'equal?', '==');

    Opal.alias(self, 'eql?', '==');

    Opal.defn(self, '$singleton_class', TMP_7 = function $$singleton_class() {
      var self = this;

      return $scope.get('Boolean');
    }, TMP_7.$$arity = 0);

    Opal.defn(self, '$to_s', TMP_8 = function $$to_s() {
      var self = this;

      return (self == true) ? 'true' : 'false';
    }, TMP_8.$$arity = 0);

    Opal.defn(self, '$dup', TMP_9 = function $$dup() {
      var self = this;

      return self.$raise($scope.get('TypeError'), "can't dup " + (self.$class()));
    }, TMP_9.$$arity = 0);

    return (Opal.defn(self, '$clone', TMP_10 = function $$clone() {
      var self = this;

      return self.$raise($scope.get('TypeError'), "can't clone " + (self.$class()));
    }, TMP_10.$$arity = 0), nil) && 'clone';
  })($scope.base, Boolean);
  Opal.cdecl($scope, 'TrueClass', $scope.get('Boolean'));
  Opal.cdecl($scope, 'FalseClass', $scope.get('Boolean'));
  Opal.cdecl($scope, 'TRUE', true);
  return Opal.cdecl($scope, 'FALSE', false);
};
/* Generated by Opal 0.10.3 */
Opal.modules["corelib/comparable"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$===', '$>', '$<', '$equal?', '$<=>', '$normalize', '$raise', '$class']);
  return (function($base) {
    var $Comparable, self = $Comparable = $module($base, 'Comparable');

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7;

    Opal.defs(self, '$normalize', TMP_1 = function $$normalize(what) {
      var $a, self = this;

      if ((($a = $scope.get('Integer')['$==='](what)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return what};
      if ((($a = $rb_gt(what, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return 1};
      if ((($a = $rb_lt(what, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return -1};
      return 0;
    }, TMP_1.$$arity = 1);

    Opal.defn(self, '$==', TMP_2 = function(other) {
      var $a, self = this, cmp = nil;

      try {
        if ((($a = self['$equal?'](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return true};
        
      if (self["$<=>"] == Opal.Kernel["$<=>"]) {
        return false;
      }

      // check for infinite recursion
      if (self.$$comparable) {
        delete self.$$comparable;
        return false;
      }
    
        if ((($a = cmp = (self['$<=>'](other))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          return false
        };
        return $scope.get('Comparable').$normalize(cmp) == 0;
      } catch ($err) {
        if (Opal.rescue($err, [$scope.get('StandardError')])) {
          try {
            return false
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };
    }, TMP_2.$$arity = 1);

    Opal.defn(self, '$>', TMP_3 = function(other) {
      var $a, self = this, cmp = nil;

      if ((($a = cmp = (self['$<=>'](other))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
      };
      return $scope.get('Comparable').$normalize(cmp) > 0;
    }, TMP_3.$$arity = 1);

    Opal.defn(self, '$>=', TMP_4 = function(other) {
      var $a, self = this, cmp = nil;

      if ((($a = cmp = (self['$<=>'](other))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
      };
      return $scope.get('Comparable').$normalize(cmp) >= 0;
    }, TMP_4.$$arity = 1);

    Opal.defn(self, '$<', TMP_5 = function(other) {
      var $a, self = this, cmp = nil;

      if ((($a = cmp = (self['$<=>'](other))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
      };
      return $scope.get('Comparable').$normalize(cmp) < 0;
    }, TMP_5.$$arity = 1);

    Opal.defn(self, '$<=', TMP_6 = function(other) {
      var $a, self = this, cmp = nil;

      if ((($a = cmp = (self['$<=>'](other))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
      };
      return $scope.get('Comparable').$normalize(cmp) <= 0;
    }, TMP_6.$$arity = 1);

    Opal.defn(self, '$between?', TMP_7 = function(min, max) {
      var self = this;

      if ($rb_lt(self, min)) {
        return false};
      if ($rb_gt(self, max)) {
        return false};
      return true;
    }, TMP_7.$$arity = 2);
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["corelib/regexp"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$nil?', '$[]', '$raise', '$escape', '$options', '$to_str', '$new', '$join', '$coerce_to!', '$!', '$match', '$coerce_to?', '$begin', '$coerce_to', '$call', '$=~', '$attr_reader', '$===', '$inspect', '$to_a']);
  (function($base, $super) {
    function $RegexpError(){};
    var self = $RegexpError = $klass($base, $super, 'RegexpError', $RegexpError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('StandardError'));
  (function($base, $super) {
    function $Regexp(){};
    var self = $Regexp = $klass($base, $super, 'Regexp', $Regexp);

    var def = self.$$proto, $scope = self.$$scope, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15;

    Opal.cdecl($scope, 'IGNORECASE', 1);

    Opal.cdecl($scope, 'MULTILINE', 4);

    def.$$is_regexp = true;

    (function(self) {
      var $scope = self.$$scope, def = self.$$proto, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5;

      Opal.defn(self, '$allocate', TMP_1 = function $$allocate() {
        var $a, $b, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, allocated = nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

        TMP_1.$$p = null;
        $zuper = [];
        
        for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
          $zuper[$zuper_index] = arguments[$zuper_index];
        }
        allocated = ($a = ($b = self, Opal.find_super_dispatcher(self, 'allocate', TMP_1, false)), $a.$$p = $iter, $a).apply($b, $zuper);
        allocated.uninitialized = true;
        return allocated;
      }, TMP_1.$$arity = 0);
      Opal.defn(self, '$escape', TMP_2 = function $$escape(string) {
        var self = this;

        
        return string.replace(/([-[\]\/{}()*+?.^$\\| ])/g, '\\$1')
                     .replace(/[\n]/g, '\\n')
                     .replace(/[\r]/g, '\\r')
                     .replace(/[\f]/g, '\\f')
                     .replace(/[\t]/g, '\\t');
      
      }, TMP_2.$$arity = 1);
      Opal.defn(self, '$last_match', TMP_3 = function $$last_match(n) {
        var $a, self = this;
        if ($gvars["~"] == null) $gvars["~"] = nil;

        if (n == null) {
          n = nil;
        }
        if ((($a = n['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return $gvars["~"]
          } else {
          return $gvars["~"]['$[]'](n)
        };
      }, TMP_3.$$arity = -1);
      Opal.alias(self, 'quote', 'escape');
      Opal.defn(self, '$union', TMP_4 = function $$union($a_rest) {
        var self = this, parts;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        parts = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          parts[$arg_idx - 0] = arguments[$arg_idx];
        }
        
        var is_first_part_array, quoted_validated, part, options, each_part_options;
        if (parts.length == 0) {
          return /(?!)/;
        }
        // cover the 2 arrays passed as arguments case
        is_first_part_array = parts[0].$$is_array;
        if (parts.length > 1 && is_first_part_array) {
          self.$raise($scope.get('TypeError'), "no implicit conversion of Array into String")
        }        
        // deal with splat issues (related to https://github.com/opal/opal/issues/858)
        if (is_first_part_array) {
          parts = parts[0];
        }
        options = undefined;
        quoted_validated = [];
        for (var i=0; i < parts.length; i++) {
          part = parts[i];
          if (part.$$is_string) {
            quoted_validated.push(self.$escape(part));
          }
          else if (part.$$is_regexp) {
            each_part_options = (part).$options();
            if (options != undefined && options != each_part_options) {
              self.$raise($scope.get('TypeError'), "All expressions must use the same options")
            }
            options = each_part_options;
            quoted_validated.push('('+part.source+')');
          }
          else {
            quoted_validated.push(self.$escape((part).$to_str()));
          }
        }
      
        return self.$new((quoted_validated).$join("|"), options);
      }, TMP_4.$$arity = -1);
      return (Opal.defn(self, '$new', TMP_5 = function(regexp, options) {
        var self = this;

        
        if (regexp.$$is_regexp) {
          return new RegExp(regexp);
        }

        regexp = $scope.get('Opal')['$coerce_to!'](regexp, $scope.get('String'), "to_str");

        if (regexp.charAt(regexp.length - 1) === '\\' && regexp.charAt(regexp.length - 2) !== '\\') {
          self.$raise($scope.get('RegexpError'), "too short escape sequence: /" + (regexp) + "/")
        }

        if (options === undefined || options['$!']()) {
          return new RegExp(regexp);
        }

        if (options.$$is_number) {
          var temp = '';
          if ($scope.get('IGNORECASE') & options) { temp += 'i'; }
          if ($scope.get('MULTILINE')  & options) { temp += 'm'; }
          options = temp;
        }
        else {
          options = 'i';
        }

        return new RegExp(regexp, options);
      ;
      }, TMP_5.$$arity = -2), nil) && 'new';
    })(Opal.get_singleton_class(self));

    Opal.defn(self, '$==', TMP_6 = function(other) {
      var self = this;

      return other.constructor == RegExp && self.toString() === other.toString();
    }, TMP_6.$$arity = 1);

    Opal.defn(self, '$===', TMP_7 = function(string) {
      var self = this;

      return self.$match($scope.get('Opal')['$coerce_to?'](string, $scope.get('String'), "to_str")) !== nil;
    }, TMP_7.$$arity = 1);

    Opal.defn(self, '$=~', TMP_8 = function(string) {
      var $a, self = this;
      if ($gvars["~"] == null) $gvars["~"] = nil;

      return ($a = self.$match(string), $a !== false && $a !== nil && $a != null ?$gvars["~"].$begin(0) : $a);
    }, TMP_8.$$arity = 1);

    Opal.alias(self, 'eql?', '==');

    Opal.defn(self, '$inspect', TMP_9 = function $$inspect() {
      var self = this;

      return self.toString();
    }, TMP_9.$$arity = 0);

    Opal.defn(self, '$match', TMP_10 = function $$match(string, pos) {
      var self = this, $iter = TMP_10.$$p, block = $iter || nil;
      if ($gvars["~"] == null) $gvars["~"] = nil;

      TMP_10.$$p = null;
      
      if (self.uninitialized) {
        self.$raise($scope.get('TypeError'), "uninitialized Regexp")
      }

      if (pos === undefined) {
        pos = 0;
      } else {
        pos = $scope.get('Opal').$coerce_to(pos, $scope.get('Integer'), "to_int");
      }

      if (string === nil) {
        return $gvars["~"] = nil;
      }

      string = $scope.get('Opal').$coerce_to(string, $scope.get('String'), "to_str");

      if (pos < 0) {
        pos += string.length;
        if (pos < 0) {
          return $gvars["~"] = nil;
        }
      }

      var source = self.source;
      var flags = 'g';
      // m flag + a . in Ruby will match white space, but in JS, it only matches beginning/ending of lines, so we get the equivalent here
      if (self.multiline) {
        source = source.replace('.', "[\\s\\S]");
        flags += 'm';
      }

      // global RegExp maintains state, so not using self/this
      var md, re = new RegExp(source, flags + (self.ignoreCase ? 'i' : ''));

      while (true) {
        md = re.exec(string);
        if (md === null) {
          return $gvars["~"] = nil;
        }
        if (md.index >= pos) {
          $gvars["~"] = $scope.get('MatchData').$new(re, md)
          return block === nil ? $gvars["~"] : block.$call($gvars["~"]);
        }
        re.lastIndex = md.index + 1;
      }
    ;
    }, TMP_10.$$arity = -2);

    Opal.defn(self, '$~', TMP_11 = function() {
      var self = this;
      if ($gvars._ == null) $gvars._ = nil;

      return self['$=~']($gvars._);
    }, TMP_11.$$arity = 0);

    Opal.defn(self, '$source', TMP_12 = function $$source() {
      var self = this;

      return self.source;
    }, TMP_12.$$arity = 0);

    Opal.defn(self, '$options', TMP_13 = function $$options() {
      var self = this;

      
      if (self.uninitialized) {
        self.$raise($scope.get('TypeError'), "uninitialized Regexp")
      }
      var result = 0;
      // should be supported in IE6 according to https://msdn.microsoft.com/en-us/library/7f5z26w4(v=vs.94).aspx
      if (self.multiline) {
        result |= $scope.get('MULTILINE');
      }
      if (self.ignoreCase) {
        result |= $scope.get('IGNORECASE');
      }
      return result;
    ;
    }, TMP_13.$$arity = 0);

    Opal.defn(self, '$casefold?', TMP_14 = function() {
      var self = this;

      return self.ignoreCase;
    }, TMP_14.$$arity = 0);

    Opal.alias(self, 'to_s', 'source');

    return (Opal.defs(self, '$_load', TMP_15 = function $$_load(args) {
      var $a, self = this;

      return ($a = self).$new.apply($a, Opal.to_a(args));
    }, TMP_15.$$arity = 1), nil) && '_load';
  })($scope.base, RegExp);
  return (function($base, $super) {
    function $MatchData(){};
    var self = $MatchData = $klass($base, $super, 'MatchData', $MatchData);

    var def = self.$$proto, $scope = self.$$scope, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27;

    def.matches = nil;
    self.$attr_reader("post_match", "pre_match", "regexp", "string");

    Opal.defn(self, '$initialize', TMP_16 = function $$initialize(regexp, match_groups) {
      var self = this;

      $gvars["~"] = self;
      self.regexp = regexp;
      self.begin = match_groups.index;
      self.string = match_groups.input;
      self.pre_match = match_groups.input.slice(0, match_groups.index);
      self.post_match = match_groups.input.slice(match_groups.index + match_groups[0].length);
      self.matches = [];
      
      for (var i = 0, length = match_groups.length; i < length; i++) {
        var group = match_groups[i];

        if (group == null) {
          self.matches.push(nil);
        }
        else {
          self.matches.push(group);
        }
      }
    
    }, TMP_16.$$arity = 2);

    Opal.defn(self, '$[]', TMP_17 = function($a_rest) {
      var $b, self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      return ($b = self.matches)['$[]'].apply($b, Opal.to_a(args));
    }, TMP_17.$$arity = -1);

    Opal.defn(self, '$offset', TMP_18 = function $$offset(n) {
      var self = this;

      
      if (n !== 0) {
        self.$raise($scope.get('ArgumentError'), "MatchData#offset only supports 0th element")
      }
      return [self.begin, self.begin + self.matches[n].length];
    ;
    }, TMP_18.$$arity = 1);

    Opal.defn(self, '$==', TMP_19 = function(other) {
      var $a, $b, $c, $d, self = this;

      if ((($a = $scope.get('MatchData')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return false
      };
      return ($a = ($b = ($c = ($d = self.string == other.string, $d !== false && $d !== nil && $d != null ?self.regexp.toString() == other.regexp.toString() : $d), $c !== false && $c !== nil && $c != null ?self.pre_match == other.pre_match : $c), $b !== false && $b !== nil && $b != null ?self.post_match == other.post_match : $b), $a !== false && $a !== nil && $a != null ?self.begin == other.begin : $a);
    }, TMP_19.$$arity = 1);

    Opal.alias(self, 'eql?', '==');

    Opal.defn(self, '$begin', TMP_20 = function $$begin(n) {
      var self = this;

      
      if (n !== 0) {
        self.$raise($scope.get('ArgumentError'), "MatchData#begin only supports 0th element")
      }
      return self.begin;
    ;
    }, TMP_20.$$arity = 1);

    Opal.defn(self, '$end', TMP_21 = function $$end(n) {
      var self = this;

      
      if (n !== 0) {
        self.$raise($scope.get('ArgumentError'), "MatchData#end only supports 0th element")
      }
      return self.begin + self.matches[n].length;
    ;
    }, TMP_21.$$arity = 1);

    Opal.defn(self, '$captures', TMP_22 = function $$captures() {
      var self = this;

      return self.matches.slice(1);
    }, TMP_22.$$arity = 0);

    Opal.defn(self, '$inspect', TMP_23 = function $$inspect() {
      var self = this;

      
      var str = "#<MatchData " + (self.matches[0]).$inspect();

      for (var i = 1, length = self.matches.length; i < length; i++) {
        str += " " + i + ":" + (self.matches[i]).$inspect();
      }

      return str + ">";
    ;
    }, TMP_23.$$arity = 0);

    Opal.defn(self, '$length', TMP_24 = function $$length() {
      var self = this;

      return self.matches.length;
    }, TMP_24.$$arity = 0);

    Opal.alias(self, 'size', 'length');

    Opal.defn(self, '$to_a', TMP_25 = function $$to_a() {
      var self = this;

      return self.matches;
    }, TMP_25.$$arity = 0);

    Opal.defn(self, '$to_s', TMP_26 = function $$to_s() {
      var self = this;

      return self.matches[0];
    }, TMP_26.$$arity = 0);

    return (Opal.defn(self, '$values_at', TMP_27 = function $$values_at($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      var i, a, index, values = [];

      for (i = 0; i < args.length; i++) {

        if (args[i].$$is_range) {
          a = (args[i]).$to_a();
          a.unshift(i, 1);
          Array.prototype.splice.apply(args, a);
        }

        index = $scope.get('Opal')['$coerce_to!'](args[i], $scope.get('Integer'), "to_int");

        if (index < 0) {
          index += self.matches.length;
          if (index < 0) {
            values.push(nil);
            continue;
          }
        }

        values.push(self.matches[index]);
      }

      return values;
    
    }, TMP_27.$$arity = -1), nil) && 'values_at';
  })($scope.base, null);
};
/* Generated by Opal 0.10.3 */
Opal.modules["corelib/string"] = function(Opal) {
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$include', '$coerce_to?', '$coerce_to', '$raise', '$===', '$format', '$to_s', '$respond_to?', '$to_str', '$<=>', '$==', '$=~', '$new', '$empty?', '$ljust', '$ceil', '$/', '$+', '$rjust', '$floor', '$to_a', '$each_char', '$to_proc', '$coerce_to!', '$copy_singleton_methods', '$initialize_clone', '$initialize_dup', '$enum_for', '$size', '$chomp', '$[]', '$to_i', '$each_line', '$class', '$match', '$captures', '$proc', '$shift', '$__send__', '$succ', '$escape']);
  self.$require("corelib/comparable");
  self.$require("corelib/regexp");
  (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30, TMP_31, TMP_32, TMP_33, TMP_34, TMP_35, TMP_36, TMP_37, TMP_38, TMP_39, TMP_40, TMP_41, TMP_42, TMP_43, TMP_44, TMP_45, TMP_46, TMP_47, TMP_48, TMP_49, TMP_50, TMP_51, TMP_52, TMP_53, TMP_54, TMP_55, TMP_56, TMP_57, TMP_58, TMP_59, TMP_61, TMP_62, TMP_63, TMP_64, TMP_65, TMP_66, TMP_67, TMP_68;

    def.length = nil;
    self.$include($scope.get('Comparable'));

    def.$$is_string = true;

    Opal.defn(self, '$__id__', TMP_1 = function $$__id__() {
      var self = this;

      return self.toString();
    }, TMP_1.$$arity = 0);

    Opal.alias(self, 'object_id', '__id__');

    Opal.defs(self, '$try_convert', TMP_2 = function $$try_convert(what) {
      var self = this;

      return $scope.get('Opal')['$coerce_to?'](what, $scope.get('String'), "to_str");
    }, TMP_2.$$arity = 1);

    Opal.defs(self, '$new', TMP_3 = function(str) {
      var self = this;

      if (str == null) {
        str = "";
      }
      str = $scope.get('Opal').$coerce_to(str, $scope.get('String'), "to_str");
      return new String(str);
    }, TMP_3.$$arity = -1);

    Opal.defn(self, '$initialize', TMP_4 = function $$initialize(str) {
      var self = this;

      
      if (str === undefined) {
        return self;
      }
    
      return self.$raise($scope.get('NotImplementedError'), "Mutable strings are not supported in Opal.");
    }, TMP_4.$$arity = -1);

    Opal.defn(self, '$%', TMP_5 = function(data) {
      var $a, self = this;

      if ((($a = $scope.get('Array')['$==='](data)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($a = self).$format.apply($a, [self].concat(Opal.to_a(data)))
        } else {
        return self.$format(self, data)
      };
    }, TMP_5.$$arity = 1);

    Opal.defn(self, '$*', TMP_6 = function(count) {
      var self = this;

      
      count = $scope.get('Opal').$coerce_to(count, $scope.get('Integer'), "to_int");

      if (count < 0) {
        self.$raise($scope.get('ArgumentError'), "negative argument")
      }

      if (count === 0) {
        return '';
      }

      var result = '',
          string = self.toString();

      // All credit for the bit-twiddling magic code below goes to Mozilla
      // polyfill implementation of String.prototype.repeat() posted here:
      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat

      if (string.length * count >= 1 << 28) {
        self.$raise($scope.get('RangeError'), "multiply count must not overflow maximum string size")
      }

      for (;;) {
        if ((count & 1) === 1) {
          result += string;
        }
        count >>>= 1;
        if (count === 0) {
          break;
        }
        string += string;
      }

      return result;
    ;
    }, TMP_6.$$arity = 1);

    Opal.defn(self, '$+', TMP_7 = function(other) {
      var self = this;

      other = $scope.get('Opal').$coerce_to(other, $scope.get('String'), "to_str");
      return self + other.$to_s();
    }, TMP_7.$$arity = 1);

    Opal.defn(self, '$<=>', TMP_8 = function(other) {
      var $a, self = this;

      if ((($a = other['$respond_to?']("to_str")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        other = other.$to_str().$to_s();
        return self > other ? 1 : (self < other ? -1 : 0);
        } else {
        
        var cmp = other['$<=>'](self);

        if (cmp === nil) {
          return nil;
        }
        else {
          return cmp > 0 ? -1 : (cmp < 0 ? 1 : 0);
        }
      ;
      };
    }, TMP_8.$$arity = 1);

    Opal.defn(self, '$==', TMP_9 = function(other) {
      var self = this;

      
      if (other.$$is_string) {
        return self.toString() === other.toString();
      }
      if ($scope.get('Opal')['$respond_to?'](other, "to_str")) {
        return other['$=='](self);
      }
      return false;
    ;
    }, TMP_9.$$arity = 1);

    Opal.alias(self, 'eql?', '==');

    Opal.alias(self, '===', '==');

    Opal.defn(self, '$=~', TMP_10 = function(other) {
      var self = this;

      
      if (other.$$is_string) {
        self.$raise($scope.get('TypeError'), "type mismatch: String given");
      }

      return other['$=~'](self);
    ;
    }, TMP_10.$$arity = 1);

    Opal.defn(self, '$[]', TMP_11 = function(index, length) {
      var self = this;

      
      var size = self.length, exclude;

      if (index.$$is_range) {
        exclude = index.exclude;
        length  = $scope.get('Opal').$coerce_to(index.end, $scope.get('Integer'), "to_int");
        index   = $scope.get('Opal').$coerce_to(index.begin, $scope.get('Integer'), "to_int");

        if (Math.abs(index) > size) {
          return nil;
        }

        if (index < 0) {
          index += size;
        }

        if (length < 0) {
          length += size;
        }

        if (!exclude) {
          length += 1;
        }

        length = length - index;

        if (length < 0) {
          length = 0;
        }

        return self.substr(index, length);
      }


      if (index.$$is_string) {
        if (length != null) {
          self.$raise($scope.get('TypeError'))
        }
        return self.indexOf(index) !== -1 ? index : nil;
      }


      if (index.$$is_regexp) {
        var match = self.match(index);

        if (match === null) {
          $gvars["~"] = nil
          return nil;
        }

        $gvars["~"] = $scope.get('MatchData').$new(index, match)

        if (length == null) {
          return match[0];
        }

        length = $scope.get('Opal').$coerce_to(length, $scope.get('Integer'), "to_int");

        if (length < 0 && -length < match.length) {
          return match[length += match.length];
        }

        if (length >= 0 && length < match.length) {
          return match[length];
        }

        return nil;
      }


      index = $scope.get('Opal').$coerce_to(index, $scope.get('Integer'), "to_int");

      if (index < 0) {
        index += size;
      }

      if (length == null) {
        if (index >= size || index < 0) {
          return nil;
        }
        return self.substr(index, 1);
      }

      length = $scope.get('Opal').$coerce_to(length, $scope.get('Integer'), "to_int");

      if (length < 0) {
        return nil;
      }

      if (index > size || index < 0) {
        return nil;
      }

      return self.substr(index, length);
    
    }, TMP_11.$$arity = -2);

    Opal.alias(self, 'byteslice', '[]');

    Opal.defn(self, '$capitalize', TMP_12 = function $$capitalize() {
      var self = this;

      return self.charAt(0).toUpperCase() + self.substr(1).toLowerCase();
    }, TMP_12.$$arity = 0);

    Opal.defn(self, '$casecmp', TMP_13 = function $$casecmp(other) {
      var self = this;

      other = $scope.get('Opal').$coerce_to(other, $scope.get('String'), "to_str").$to_s();
      
      var ascii_only = /^[\x00-\x7F]*$/;
      if (ascii_only.test(self) && ascii_only.test(other)) {
        self = self.toLowerCase();
        other = other.toLowerCase();
      }
    
      return self['$<=>'](other);
    }, TMP_13.$$arity = 1);

    Opal.defn(self, '$center', TMP_14 = function $$center(width, padstr) {
      var $a, self = this;

      if (padstr == null) {
        padstr = " ";
      }
      width = $scope.get('Opal').$coerce_to(width, $scope.get('Integer'), "to_int");
      padstr = $scope.get('Opal').$coerce_to(padstr, $scope.get('String'), "to_str").$to_s();
      if ((($a = padstr['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "zero width padding")};
      if ((($a = width <= self.length) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self};
      
      var ljustified = self.$ljust($rb_divide(($rb_plus(width, self.length)), 2).$ceil(), padstr),
          rjustified = self.$rjust($rb_divide(($rb_plus(width, self.length)), 2).$floor(), padstr);

      return rjustified + ljustified.slice(self.length);
    ;
    }, TMP_14.$$arity = -2);

    Opal.defn(self, '$chars', TMP_15 = function $$chars() {
      var $a, $b, self = this, $iter = TMP_15.$$p, block = $iter || nil;

      TMP_15.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        return self.$each_char().$to_a()
      };
      return ($a = ($b = self).$each_char, $a.$$p = block.$to_proc(), $a).call($b);
    }, TMP_15.$$arity = 0);

    Opal.defn(self, '$chomp', TMP_16 = function $$chomp(separator) {
      var $a, self = this;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      if (separator == null) {
        separator = $gvars["/"];
      }
      if ((($a = separator === nil || self.length === 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self};
      separator = $scope.get('Opal')['$coerce_to!'](separator, $scope.get('String'), "to_str").$to_s();
      
      if (separator === "\n") {
        return self.replace(/\r?\n?$/, '');
      }
      else if (separator === "") {
        return self.replace(/(\r?\n)+$/, '');
      }
      else if (self.length > separator.length) {
        var tail = self.substr(self.length - separator.length, separator.length);

        if (tail === separator) {
          return self.substr(0, self.length - separator.length);
        }
      }
    
      return self;
    }, TMP_16.$$arity = -1);

    Opal.defn(self, '$chop', TMP_17 = function $$chop() {
      var self = this;

      
      var length = self.length;

      if (length <= 1) {
        return "";
      }

      if (self.charAt(length - 1) === "\n" && self.charAt(length - 2) === "\r") {
        return self.substr(0, length - 2);
      }
      else {
        return self.substr(0, length - 1);
      }
    
    }, TMP_17.$$arity = 0);

    Opal.defn(self, '$chr', TMP_18 = function $$chr() {
      var self = this;

      return self.charAt(0);
    }, TMP_18.$$arity = 0);

    Opal.defn(self, '$clone', TMP_19 = function $$clone() {
      var self = this, copy = nil;

      copy = self.slice();
      copy.$copy_singleton_methods(self);
      copy.$initialize_clone(self);
      return copy;
    }, TMP_19.$$arity = 0);

    Opal.defn(self, '$dup', TMP_20 = function $$dup() {
      var self = this, copy = nil;

      copy = self.slice();
      copy.$initialize_dup(self);
      return copy;
    }, TMP_20.$$arity = 0);

    Opal.defn(self, '$count', TMP_21 = function $$count($a_rest) {
      var self = this, sets;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      sets = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        sets[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      if (sets.length === 0) {
        self.$raise($scope.get('ArgumentError'), "ArgumentError: wrong number of arguments (0 for 1+)")
      }
      var char_class = char_class_from_char_sets(sets);
      if (char_class === null) {
        return 0;
      }
      return self.length - self.replace(new RegExp(char_class, 'g'), '').length;
    ;
    }, TMP_21.$$arity = -1);

    Opal.defn(self, '$delete', TMP_22 = function($a_rest) {
      var self = this, sets;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      sets = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        sets[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      if (sets.length === 0) {
        self.$raise($scope.get('ArgumentError'), "ArgumentError: wrong number of arguments (0 for 1+)")
      }
      var char_class = char_class_from_char_sets(sets);
      if (char_class === null) {
        return self;
      }
      return self.replace(new RegExp(char_class, 'g'), '');
    ;
    }, TMP_22.$$arity = -1);

    Opal.defn(self, '$downcase', TMP_23 = function $$downcase() {
      var self = this;

      return self.toLowerCase();
    }, TMP_23.$$arity = 0);

    Opal.defn(self, '$each_char', TMP_24 = function $$each_char() {
      var $a, $b, TMP_25, self = this, $iter = TMP_24.$$p, block = $iter || nil;

      TMP_24.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_25 = function(){var self = TMP_25.$$s || this;

        return self.$size()}, TMP_25.$$s = self, TMP_25.$$arity = 0, TMP_25), $a).call($b, "each_char")
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        Opal.yield1(block, self.charAt(i));
      }
    
      return self;
    }, TMP_24.$$arity = 0);

    Opal.defn(self, '$each_line', TMP_26 = function $$each_line(separator) {
      var self = this, $iter = TMP_26.$$p, block = $iter || nil;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      if (separator == null) {
        separator = $gvars["/"];
      }
      TMP_26.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("each_line", separator)
      };
      
      if (separator === nil) {
        Opal.yield1(block, self);

        return self;
      }

      separator = $scope.get('Opal').$coerce_to(separator, $scope.get('String'), "to_str")

      var a, i, n, length, chomped, trailing, splitted;

      if (separator.length === 0) {
        for (a = self.split(/(\n{2,})/), i = 0, n = a.length; i < n; i += 2) {
          if (a[i] || a[i + 1]) {
            Opal.yield1(block, (a[i] || "") + (a[i + 1] || ""));
          }
        }

        return self;
      }

      chomped  = self.$chomp(separator);
      trailing = self.length != chomped.length;
      splitted = chomped.split(separator);

      for (i = 0, length = splitted.length; i < length; i++) {
        if (i < length - 1 || trailing) {
          Opal.yield1(block, splitted[i] + separator);
        }
        else {
          Opal.yield1(block, splitted[i]);
        }
      }
    
      return self;
    }, TMP_26.$$arity = -1);

    Opal.defn(self, '$empty?', TMP_27 = function() {
      var self = this;

      return self.length === 0;
    }, TMP_27.$$arity = 0);

    Opal.defn(self, '$end_with?', TMP_28 = function($a_rest) {
      var self = this, suffixes;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      suffixes = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        suffixes[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      for (var i = 0, length = suffixes.length; i < length; i++) {
        var suffix = $scope.get('Opal').$coerce_to(suffixes[i], $scope.get('String'), "to_str").$to_s();

        if (self.length >= suffix.length &&
            self.substr(self.length - suffix.length, suffix.length) == suffix) {
          return true;
        }
      }
    
      return false;
    }, TMP_28.$$arity = -1);

    Opal.alias(self, 'eql?', '==');

    Opal.alias(self, 'equal?', '===');

    Opal.defn(self, '$gsub', TMP_29 = function $$gsub(pattern, replacement) {
      var self = this, $iter = TMP_29.$$p, block = $iter || nil;

      TMP_29.$$p = null;
      
      if (replacement === undefined && block === nil) {
        return self.$enum_for("gsub", pattern);
      }

      var result = '', match_data = nil, index = 0, match, _replacement;

      if (pattern.$$is_regexp) {
        pattern = new RegExp(pattern.source, 'gm' + (pattern.ignoreCase ? 'i' : ''));
      } else {
        pattern = $scope.get('Opal').$coerce_to(pattern, $scope.get('String'), "to_str");
        pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'gm');
      }

      while (true) {
        match = pattern.exec(self);

        if (match === null) {
          $gvars["~"] = nil
          result += self.slice(index);
          break;
        }

        match_data = $scope.get('MatchData').$new(pattern, match);

        if (replacement === undefined) {
          _replacement = block(match[0]);
        }
        else if (replacement.$$is_hash) {
          _replacement = (replacement)['$[]'](match[0]).$to_s();
        }
        else {
          if (!replacement.$$is_string) {
            replacement = $scope.get('Opal').$coerce_to(replacement, $scope.get('String'), "to_str");
          }
          _replacement = replacement.replace(/([\\]+)([0-9+&`'])/g, function (original, slashes, command) {
            if (slashes.length % 2 === 0) {
              return original;
            }
            switch (command) {
            case "+":
              for (var i = match.length - 1; i > 0; i--) {
                if (match[i] !== undefined) {
                  return slashes.slice(1) + match[i];
                }
              }
              return '';
            case "&": return slashes.slice(1) + match[0];
            case "`": return slashes.slice(1) + self.slice(0, match.index);
            case "'": return slashes.slice(1) + self.slice(match.index + match[0].length);
            default:  return slashes.slice(1) + (match[command] || '');
            }
          }).replace(/\\\\/g, '\\');
        }

        if (pattern.lastIndex === match.index) {
          result += (_replacement + self.slice(index, match.index + 1))
          pattern.lastIndex += 1;
        }
        else {
          result += (self.slice(index, match.index) + _replacement)
        }
        index = pattern.lastIndex;
      }

      $gvars["~"] = match_data
      return result;
    ;
    }, TMP_29.$$arity = -2);

    Opal.defn(self, '$hash', TMP_30 = function $$hash() {
      var self = this;

      return self.toString();
    }, TMP_30.$$arity = 0);

    Opal.defn(self, '$hex', TMP_31 = function $$hex() {
      var self = this;

      return self.$to_i(16);
    }, TMP_31.$$arity = 0);

    Opal.defn(self, '$include?', TMP_32 = function(other) {
      var self = this;

      
      if (!other.$$is_string) {
        other = $scope.get('Opal').$coerce_to(other, $scope.get('String'), "to_str")
      }
      return self.indexOf(other) !== -1;
    ;
    }, TMP_32.$$arity = 1);

    Opal.defn(self, '$index', TMP_33 = function $$index(search, offset) {
      var self = this;

      
      var index,
          match,
          regex;

      if (offset === undefined) {
        offset = 0;
      } else {
        offset = $scope.get('Opal').$coerce_to(offset, $scope.get('Integer'), "to_int");
        if (offset < 0) {
          offset += self.length;
          if (offset < 0) {
            return nil;
          }
        }
      }

      if (search.$$is_regexp) {
        regex = new RegExp(search.source, 'gm' + (search.ignoreCase ? 'i' : ''));
        while (true) {
          match = regex.exec(self);
          if (match === null) {
            $gvars["~"] = nil;
            index = -1;
            break;
          }
          if (match.index >= offset) {
            $gvars["~"] = $scope.get('MatchData').$new(regex, match)
            index = match.index;
            break;
          }
          regex.lastIndex = match.index + 1;
        }
      } else {
        search = $scope.get('Opal').$coerce_to(search, $scope.get('String'), "to_str");
        if (search.length === 0 && offset > self.length) {
          index = -1;
        } else {
          index = self.indexOf(search, offset);
        }
      }

      return index === -1 ? nil : index;
    
    }, TMP_33.$$arity = -2);

    Opal.defn(self, '$inspect', TMP_34 = function $$inspect() {
      var self = this;

      
      var escapable = /[\\\"\x00-\x1f\x7f-\x9f\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
          meta = {
            '\u0007': '\\a',
            '\u001b': '\\e',
            '\b': '\\b',
            '\t': '\\t',
            '\n': '\\n',
            '\f': '\\f',
            '\r': '\\r',
            '\v': '\\v',
            '"' : '\\"',
            '\\': '\\\\'
          },
          escaped = self.replace(escapable, function (chr) {
            return meta[chr] || '\\u' + ('0000' + chr.charCodeAt(0).toString(16).toUpperCase()).slice(-4);
          });
      return '"' + escaped.replace(/\#[\$\@\{]/g, '\\$&') + '"';
    
    }, TMP_34.$$arity = 0);

    Opal.defn(self, '$intern', TMP_35 = function $$intern() {
      var self = this;

      return self;
    }, TMP_35.$$arity = 0);

    Opal.defn(self, '$lines', TMP_36 = function $$lines(separator) {
      var $a, $b, self = this, $iter = TMP_36.$$p, block = $iter || nil, e = nil;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      if (separator == null) {
        separator = $gvars["/"];
      }
      TMP_36.$$p = null;
      e = ($a = ($b = self).$each_line, $a.$$p = block.$to_proc(), $a).call($b, separator);
      if (block !== false && block !== nil && block != null) {
        return self
        } else {
        return e.$to_a()
      };
    }, TMP_36.$$arity = -1);

    Opal.defn(self, '$length', TMP_37 = function $$length() {
      var self = this;

      return self.length;
    }, TMP_37.$$arity = 0);

    Opal.defn(self, '$ljust', TMP_38 = function $$ljust(width, padstr) {
      var $a, self = this;

      if (padstr == null) {
        padstr = " ";
      }
      width = $scope.get('Opal').$coerce_to(width, $scope.get('Integer'), "to_int");
      padstr = $scope.get('Opal').$coerce_to(padstr, $scope.get('String'), "to_str").$to_s();
      if ((($a = padstr['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "zero width padding")};
      if ((($a = width <= self.length) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self};
      
      var index  = -1,
          result = "";

      width -= self.length;

      while (++index < width) {
        result += padstr;
      }

      return self + result.slice(0, width);
    
    }, TMP_38.$$arity = -2);

    Opal.defn(self, '$lstrip', TMP_39 = function $$lstrip() {
      var self = this;

      return self.replace(/^\s*/, '');
    }, TMP_39.$$arity = 0);

    Opal.defn(self, '$match', TMP_40 = function $$match(pattern, pos) {
      var $a, $b, self = this, $iter = TMP_40.$$p, block = $iter || nil;

      TMP_40.$$p = null;
      if ((($a = ((($b = $scope.get('String')['$==='](pattern)) !== false && $b !== nil && $b != null) ? $b : pattern['$respond_to?']("to_str"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        pattern = $scope.get('Regexp').$new(pattern.$to_str())};
      if ((($a = $scope.get('Regexp')['$==='](pattern)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('TypeError'), "wrong argument type " + (pattern.$class()) + " (expected Regexp)")
      };
      return ($a = ($b = pattern).$match, $a.$$p = block.$to_proc(), $a).call($b, self, pos);
    }, TMP_40.$$arity = -2);

    Opal.defn(self, '$next', TMP_41 = function $$next() {
      var self = this;

      
      var i = self.length;
      if (i === 0) {
        return '';
      }
      var result = self;
      var first_alphanum_char_index = self.search(/[a-zA-Z0-9]/);
      var carry = false;
      var code;
      while (i--) {
        code = self.charCodeAt(i);
        if ((code >= 48 && code <= 57) ||
          (code >= 65 && code <= 90) ||
          (code >= 97 && code <= 122)) {
          switch (code) {
          case 57:
            carry = true;
            code = 48;
            break;
          case 90:
            carry = true;
            code = 65;
            break;
          case 122:
            carry = true;
            code = 97;
            break;
          default:
            carry = false;
            code += 1;
          }
        } else {
          if (first_alphanum_char_index === -1) {
            if (code === 255) {
              carry = true;
              code = 0;
            } else {
              carry = false;
              code += 1;
            }
          } else {
            carry = true;
          }
        }
        result = result.slice(0, i) + String.fromCharCode(code) + result.slice(i + 1);
        if (carry && (i === 0 || i === first_alphanum_char_index)) {
          switch (code) {
          case 65:
            break;
          case 97:
            break;
          default:
            code += 1;
          }
          if (i === 0) {
            result = String.fromCharCode(code) + result;
          } else {
            result = result.slice(0, i) + String.fromCharCode(code) + result.slice(i);
          }
          carry = false;
        }
        if (!carry) {
          break;
        }
      }
      return result;
    
    }, TMP_41.$$arity = 0);

    Opal.defn(self, '$oct', TMP_42 = function $$oct() {
      var self = this;

      
      var result,
          string = self,
          radix = 8;

      if (/^\s*_/.test(string)) {
        return 0;
      }

      string = string.replace(/^(\s*[+-]?)(0[bodx]?)(.+)$/i, function (original, head, flag, tail) {
        switch (tail.charAt(0)) {
        case '+':
        case '-':
          return original;
        case '0':
          if (tail.charAt(1) === 'x' && flag === '0x') {
            return original;
          }
        }
        switch (flag) {
        case '0b':
          radix = 2;
          break;
        case '0':
        case '0o':
          radix = 8;
          break;
        case '0d':
          radix = 10;
          break;
        case '0x':
          radix = 16;
          break;
        }
        return head + tail;
      });

      result = parseInt(string.replace(/_(?!_)/g, ''), radix);
      return isNaN(result) ? 0 : result;
    
    }, TMP_42.$$arity = 0);

    Opal.defn(self, '$ord', TMP_43 = function $$ord() {
      var self = this;

      return self.charCodeAt(0);
    }, TMP_43.$$arity = 0);

    Opal.defn(self, '$partition', TMP_44 = function $$partition(sep) {
      var self = this;

      
      var i, m;

      if (sep.$$is_regexp) {
        m = sep.exec(self);
        if (m === null) {
          i = -1;
        } else {
          $scope.get('MatchData').$new(sep, m);
          sep = m[0];
          i = m.index;
        }
      } else {
        sep = $scope.get('Opal').$coerce_to(sep, $scope.get('String'), "to_str");
        i = self.indexOf(sep);
      }

      if (i === -1) {
        return [self, '', ''];
      }

      return [
        self.slice(0, i),
        self.slice(i, i + sep.length),
        self.slice(i + sep.length)
      ];
    
    }, TMP_44.$$arity = 1);

    Opal.defn(self, '$reverse', TMP_45 = function $$reverse() {
      var self = this;

      return self.split('').reverse().join('');
    }, TMP_45.$$arity = 0);

    Opal.defn(self, '$rindex', TMP_46 = function $$rindex(search, offset) {
      var self = this;

      
      var i, m, r, _m;

      if (offset === undefined) {
        offset = self.length;
      } else {
        offset = $scope.get('Opal').$coerce_to(offset, $scope.get('Integer'), "to_int");
        if (offset < 0) {
          offset += self.length;
          if (offset < 0) {
            return nil;
          }
        }
      }

      if (search.$$is_regexp) {
        m = null;
        r = new RegExp(search.source, 'gm' + (search.ignoreCase ? 'i' : ''));
        while (true) {
          _m = r.exec(self);
          if (_m === null || _m.index > offset) {
            break;
          }
          m = _m;
          r.lastIndex = m.index + 1;
        }
        if (m === null) {
          $gvars["~"] = nil
          i = -1;
        } else {
          $scope.get('MatchData').$new(r, m);
          i = m.index;
        }
      } else {
        search = $scope.get('Opal').$coerce_to(search, $scope.get('String'), "to_str");
        i = self.lastIndexOf(search, offset);
      }

      return i === -1 ? nil : i;
    
    }, TMP_46.$$arity = -2);

    Opal.defn(self, '$rjust', TMP_47 = function $$rjust(width, padstr) {
      var $a, self = this;

      if (padstr == null) {
        padstr = " ";
      }
      width = $scope.get('Opal').$coerce_to(width, $scope.get('Integer'), "to_int");
      padstr = $scope.get('Opal').$coerce_to(padstr, $scope.get('String'), "to_str").$to_s();
      if ((($a = padstr['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "zero width padding")};
      if ((($a = width <= self.length) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self};
      
      var chars     = Math.floor(width - self.length),
          patterns  = Math.floor(chars / padstr.length),
          result    = Array(patterns + 1).join(padstr),
          remaining = chars - result.length;

      return result + padstr.slice(0, remaining) + self;
    
    }, TMP_47.$$arity = -2);

    Opal.defn(self, '$rpartition', TMP_48 = function $$rpartition(sep) {
      var self = this;

      
      var i, m, r, _m;

      if (sep.$$is_regexp) {
        m = null;
        r = new RegExp(sep.source, 'gm' + (sep.ignoreCase ? 'i' : ''));

        while (true) {
          _m = r.exec(self);
          if (_m === null) {
            break;
          }
          m = _m;
          r.lastIndex = m.index + 1;
        }

        if (m === null) {
          i = -1;
        } else {
          $scope.get('MatchData').$new(r, m);
          sep = m[0];
          i = m.index;
        }

      } else {
        sep = $scope.get('Opal').$coerce_to(sep, $scope.get('String'), "to_str");
        i = self.lastIndexOf(sep);
      }

      if (i === -1) {
        return ['', '', self];
      }

      return [
        self.slice(0, i),
        self.slice(i, i + sep.length),
        self.slice(i + sep.length)
      ];
    
    }, TMP_48.$$arity = 1);

    Opal.defn(self, '$rstrip', TMP_49 = function $$rstrip() {
      var self = this;

      return self.replace(/[\s\u0000]*$/, '');
    }, TMP_49.$$arity = 0);

    Opal.defn(self, '$scan', TMP_50 = function $$scan(pattern) {
      var self = this, $iter = TMP_50.$$p, block = $iter || nil;

      TMP_50.$$p = null;
      
      var result = [],
          match_data = nil,
          match;

      if (pattern.$$is_regexp) {
        pattern = new RegExp(pattern.source, 'gm' + (pattern.ignoreCase ? 'i' : ''));
      } else {
        pattern = $scope.get('Opal').$coerce_to(pattern, $scope.get('String'), "to_str");
        pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'gm');
      }

      while ((match = pattern.exec(self)) != null) {
        match_data = $scope.get('MatchData').$new(pattern, match);
        if (block === nil) {
          match.length == 1 ? result.push(match[0]) : result.push((match_data).$captures());
        } else {
          match.length == 1 ? block(match[0]) : block.call(self, (match_data).$captures());
        }
        if (pattern.lastIndex === match.index) {
          pattern.lastIndex += 1;
        }
      }

      $gvars["~"] = match_data

      return (block !== nil ? self : result);
    
    }, TMP_50.$$arity = 1);

    Opal.alias(self, 'size', 'length');

    Opal.alias(self, 'slice', '[]');

    Opal.defn(self, '$split', TMP_51 = function $$split(pattern, limit) {
      var $a, self = this;
      if ($gvars[";"] == null) $gvars[";"] = nil;

      
      if (self.length === 0) {
        return [];
      }

      if (limit === undefined) {
        limit = 0;
      } else {
        limit = $scope.get('Opal')['$coerce_to!'](limit, $scope.get('Integer'), "to_int");
        if (limit === 1) {
          return [self];
        }
      }

      if (pattern === undefined || pattern === nil) {
        pattern = ((($a = $gvars[";"]) !== false && $a !== nil && $a != null) ? $a : " ");
      }

      var result = [],
          string = self.toString(),
          index = 0,
          match,
          i;

      if (pattern.$$is_regexp) {
        pattern = new RegExp(pattern.source, 'gm' + (pattern.ignoreCase ? 'i' : ''));
      } else {
        pattern = $scope.get('Opal').$coerce_to(pattern, $scope.get('String'), "to_str").$to_s();
        if (pattern === ' ') {
          pattern = /\s+/gm;
          string = string.replace(/^\s+/, '');
        } else {
          pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'gm');
        }
      }

      result = string.split(pattern);

      if (result.length === 1 && result[0] === string) {
        return result;
      }

      while ((i = result.indexOf(undefined)) !== -1) {
        result.splice(i, 1);
      }

      if (limit === 0) {
        while (result[result.length - 1] === '') {
          result.length -= 1;
        }
        return result;
      }

      match = pattern.exec(string);

      if (limit < 0) {
        if (match !== null && match[0] === '' && pattern.source.indexOf('(?=') === -1) {
          for (i = 0; i < match.length; i++) {
            result.push('');
          }
        }
        return result;
      }

      if (match !== null && match[0] === '') {
        result.splice(limit - 1, result.length - 1, result.slice(limit - 1).join(''));
        return result;
      }

      if (limit >= result.length) {
        return result;
      }

      i = 0;
      while (match !== null) {
        i++;
        index = pattern.lastIndex;
        if (i + 1 === limit) {
          break;
        }
        match = pattern.exec(string);
      }
      result.splice(limit - 1, result.length - 1, string.slice(index));
      return result;
    
    }, TMP_51.$$arity = -1);

    Opal.defn(self, '$squeeze', TMP_52 = function $$squeeze($a_rest) {
      var self = this, sets;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      sets = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        sets[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      if (sets.length === 0) {
        return self.replace(/(.)\1+/g, '$1');
      }
      var char_class = char_class_from_char_sets(sets);
      if (char_class === null) {
        return self;
      }
      return self.replace(new RegExp('(' + char_class + ')\\1+', 'g'), '$1');
    
    }, TMP_52.$$arity = -1);

    Opal.defn(self, '$start_with?', TMP_53 = function($a_rest) {
      var self = this, prefixes;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      prefixes = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        prefixes[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      for (var i = 0, length = prefixes.length; i < length; i++) {
        var prefix = $scope.get('Opal').$coerce_to(prefixes[i], $scope.get('String'), "to_str").$to_s();

        if (self.indexOf(prefix) === 0) {
          return true;
        }
      }

      return false;
    
    }, TMP_53.$$arity = -1);

    Opal.defn(self, '$strip', TMP_54 = function $$strip() {
      var self = this;

      return self.replace(/^\s*/, '').replace(/[\s\u0000]*$/, '');
    }, TMP_54.$$arity = 0);

    Opal.defn(self, '$sub', TMP_55 = function $$sub(pattern, replacement) {
      var self = this, $iter = TMP_55.$$p, block = $iter || nil;

      TMP_55.$$p = null;
      
      if (!pattern.$$is_regexp) {
        pattern = $scope.get('Opal').$coerce_to(pattern, $scope.get('String'), "to_str");
        pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'));
      }

      var result = pattern.exec(self);

      if (result === null) {
        $gvars["~"] = nil
        return self.toString();
      }

      $scope.get('MatchData').$new(pattern, result)

      if (replacement === undefined) {
        if (block === nil) {
          self.$raise($scope.get('ArgumentError'), "wrong number of arguments (1 for 2)")
        }
        return self.slice(0, result.index) + block(result[0]) + self.slice(result.index + result[0].length);
      }

      if (replacement.$$is_hash) {
        return self.slice(0, result.index) + (replacement)['$[]'](result[0]).$to_s() + self.slice(result.index + result[0].length);
      }

      replacement = $scope.get('Opal').$coerce_to(replacement, $scope.get('String'), "to_str");

      replacement = replacement.replace(/([\\]+)([0-9+&`'])/g, function (original, slashes, command) {
        if (slashes.length % 2 === 0) {
          return original;
        }
        switch (command) {
        case "+":
          for (var i = result.length - 1; i > 0; i--) {
            if (result[i] !== undefined) {
              return slashes.slice(1) + result[i];
            }
          }
          return '';
        case "&": return slashes.slice(1) + result[0];
        case "`": return slashes.slice(1) + self.slice(0, result.index);
        case "'": return slashes.slice(1) + self.slice(result.index + result[0].length);
        default:  return slashes.slice(1) + (result[command] || '');
        }
      }).replace(/\\\\/g, '\\');

      return self.slice(0, result.index) + replacement + self.slice(result.index + result[0].length);
    ;
    }, TMP_55.$$arity = -2);

    Opal.alias(self, 'succ', 'next');

    Opal.defn(self, '$sum', TMP_56 = function $$sum(n) {
      var self = this;

      if (n == null) {
        n = 16;
      }
      
      n = $scope.get('Opal').$coerce_to(n, $scope.get('Integer'), "to_int");

      var result = 0,
          length = self.length,
          i = 0;

      for (; i < length; i++) {
        result += self.charCodeAt(i);
      }

      if (n <= 0) {
        return result;
      }

      return result & (Math.pow(2, n) - 1);
    ;
    }, TMP_56.$$arity = -1);

    Opal.defn(self, '$swapcase', TMP_57 = function $$swapcase() {
      var self = this;

      
      var str = self.replace(/([a-z]+)|([A-Z]+)/g, function($0,$1,$2) {
        return $1 ? $0.toUpperCase() : $0.toLowerCase();
      });

      if (self.constructor === String) {
        return str;
      }

      return self.$class().$new(str);
    
    }, TMP_57.$$arity = 0);

    Opal.defn(self, '$to_f', TMP_58 = function $$to_f() {
      var self = this;

      
      if (self.charAt(0) === '_') {
        return 0;
      }

      var result = parseFloat(self.replace(/_/g, ''));

      if (isNaN(result) || result == Infinity || result == -Infinity) {
        return 0;
      }
      else {
        return result;
      }
    
    }, TMP_58.$$arity = 0);

    Opal.defn(self, '$to_i', TMP_59 = function $$to_i(base) {
      var self = this;

      if (base == null) {
        base = 10;
      }
      
      var result,
          string = self.toLowerCase(),
          radix = $scope.get('Opal').$coerce_to(base, $scope.get('Integer'), "to_int");

      if (radix === 1 || radix < 0 || radix > 36) {
        self.$raise($scope.get('ArgumentError'), "invalid radix " + (radix))
      }

      if (/^\s*_/.test(string)) {
        return 0;
      }

      string = string.replace(/^(\s*[+-]?)(0[bodx]?)(.+)$/, function (original, head, flag, tail) {
        switch (tail.charAt(0)) {
        case '+':
        case '-':
          return original;
        case '0':
          if (tail.charAt(1) === 'x' && flag === '0x' && (radix === 0 || radix === 16)) {
            return original;
          }
        }
        switch (flag) {
        case '0b':
          if (radix === 0 || radix === 2) {
            radix = 2;
            return head + tail;
          }
          break;
        case '0':
        case '0o':
          if (radix === 0 || radix === 8) {
            radix = 8;
            return head + tail;
          }
          break;
        case '0d':
          if (radix === 0 || radix === 10) {
            radix = 10;
            return head + tail;
          }
          break;
        case '0x':
          if (radix === 0 || radix === 16) {
            radix = 16;
            return head + tail;
          }
          break;
        }
        return original
      });

      result = parseInt(string.replace(/_(?!_)/g, ''), radix);
      return isNaN(result) ? 0 : result;
    ;
    }, TMP_59.$$arity = -1);

    Opal.defn(self, '$to_proc', TMP_61 = function $$to_proc() {
      var $a, $b, TMP_60, self = this, sym = nil;

      sym = self;
      return ($a = ($b = self).$proc, $a.$$p = (TMP_60 = function($c_rest){var self = TMP_60.$$s || this, block, args, $d, $e, obj = nil;

        block = TMP_60.$$p || nil, TMP_60.$$p = null;
        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
      if ((($d = args['$empty?']()) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          self.$raise($scope.get('ArgumentError'), "no receiver given")};
        obj = args.$shift();
        return ($d = ($e = obj).$__send__, $d.$$p = block.$to_proc(), $d).apply($e, [sym].concat(Opal.to_a(args)));}, TMP_60.$$s = self, TMP_60.$$arity = -1, TMP_60), $a).call($b);
    }, TMP_61.$$arity = 0);

    Opal.defn(self, '$to_s', TMP_62 = function $$to_s() {
      var self = this;

      return self.toString();
    }, TMP_62.$$arity = 0);

    Opal.alias(self, 'to_str', 'to_s');

    Opal.alias(self, 'to_sym', 'intern');

    Opal.defn(self, '$tr', TMP_63 = function $$tr(from, to) {
      var self = this;

      from = $scope.get('Opal').$coerce_to(from, $scope.get('String'), "to_str").$to_s();
      to = $scope.get('Opal').$coerce_to(to, $scope.get('String'), "to_str").$to_s();
      
      if (from.length == 0 || from === to) {
        return self;
      }

      var i, in_range, c, ch, start, end, length;
      var subs = {};
      var from_chars = from.split('');
      var from_length = from_chars.length;
      var to_chars = to.split('');
      var to_length = to_chars.length;

      var inverse = false;
      var global_sub = null;
      if (from_chars[0] === '^' && from_chars.length > 1) {
        inverse = true;
        from_chars.shift();
        global_sub = to_chars[to_length - 1]
        from_length -= 1;
      }

      var from_chars_expanded = [];
      var last_from = null;
      in_range = false;
      for (i = 0; i < from_length; i++) {
        ch = from_chars[i];
        if (last_from == null) {
          last_from = ch;
          from_chars_expanded.push(ch);
        }
        else if (ch === '-') {
          if (last_from === '-') {
            from_chars_expanded.push('-');
            from_chars_expanded.push('-');
          }
          else if (i == from_length - 1) {
            from_chars_expanded.push('-');
          }
          else {
            in_range = true;
          }
        }
        else if (in_range) {
          start = last_from.charCodeAt(0);
          end = ch.charCodeAt(0);
          if (start > end) {
            self.$raise($scope.get('ArgumentError'), "invalid range \"" + (String.fromCharCode(start)) + "-" + (String.fromCharCode(end)) + "\" in string transliteration")
          }
          for (c = start + 1; c < end; c++) {
            from_chars_expanded.push(String.fromCharCode(c));
          }
          from_chars_expanded.push(ch);
          in_range = null;
          last_from = null;
        }
        else {
          from_chars_expanded.push(ch);
        }
      }

      from_chars = from_chars_expanded;
      from_length = from_chars.length;

      if (inverse) {
        for (i = 0; i < from_length; i++) {
          subs[from_chars[i]] = true;
        }
      }
      else {
        if (to_length > 0) {
          var to_chars_expanded = [];
          var last_to = null;
          in_range = false;
          for (i = 0; i < to_length; i++) {
            ch = to_chars[i];
            if (last_to == null) {
              last_to = ch;
              to_chars_expanded.push(ch);
            }
            else if (ch === '-') {
              if (last_to === '-') {
                to_chars_expanded.push('-');
                to_chars_expanded.push('-');
              }
              else if (i == to_length - 1) {
                to_chars_expanded.push('-');
              }
              else {
                in_range = true;
              }
            }
            else if (in_range) {
              start = last_to.charCodeAt(0);
              end = ch.charCodeAt(0);
              if (start > end) {
                self.$raise($scope.get('ArgumentError'), "invalid range \"" + (String.fromCharCode(start)) + "-" + (String.fromCharCode(end)) + "\" in string transliteration")
              }
              for (c = start + 1; c < end; c++) {
                to_chars_expanded.push(String.fromCharCode(c));
              }
              to_chars_expanded.push(ch);
              in_range = null;
              last_to = null;
            }
            else {
              to_chars_expanded.push(ch);
            }
          }

          to_chars = to_chars_expanded;
          to_length = to_chars.length;
        }

        var length_diff = from_length - to_length;
        if (length_diff > 0) {
          var pad_char = (to_length > 0 ? to_chars[to_length - 1] : '');
          for (i = 0; i < length_diff; i++) {
            to_chars.push(pad_char);
          }
        }

        for (i = 0; i < from_length; i++) {
          subs[from_chars[i]] = to_chars[i];
        }
      }

      var new_str = ''
      for (i = 0, length = self.length; i < length; i++) {
        ch = self.charAt(i);
        var sub = subs[ch];
        if (inverse) {
          new_str += (sub == null ? global_sub : ch);
        }
        else {
          new_str += (sub != null ? sub : ch);
        }
      }
      return new_str;
    
    }, TMP_63.$$arity = 2);

    Opal.defn(self, '$tr_s', TMP_64 = function $$tr_s(from, to) {
      var self = this;

      from = $scope.get('Opal').$coerce_to(from, $scope.get('String'), "to_str").$to_s();
      to = $scope.get('Opal').$coerce_to(to, $scope.get('String'), "to_str").$to_s();
      
      if (from.length == 0) {
        return self;
      }

      var i, in_range, c, ch, start, end, length;
      var subs = {};
      var from_chars = from.split('');
      var from_length = from_chars.length;
      var to_chars = to.split('');
      var to_length = to_chars.length;

      var inverse = false;
      var global_sub = null;
      if (from_chars[0] === '^' && from_chars.length > 1) {
        inverse = true;
        from_chars.shift();
        global_sub = to_chars[to_length - 1]
        from_length -= 1;
      }

      var from_chars_expanded = [];
      var last_from = null;
      in_range = false;
      for (i = 0; i < from_length; i++) {
        ch = from_chars[i];
        if (last_from == null) {
          last_from = ch;
          from_chars_expanded.push(ch);
        }
        else if (ch === '-') {
          if (last_from === '-') {
            from_chars_expanded.push('-');
            from_chars_expanded.push('-');
          }
          else if (i == from_length - 1) {
            from_chars_expanded.push('-');
          }
          else {
            in_range = true;
          }
        }
        else if (in_range) {
          start = last_from.charCodeAt(0);
          end = ch.charCodeAt(0);
          if (start > end) {
            self.$raise($scope.get('ArgumentError'), "invalid range \"" + (String.fromCharCode(start)) + "-" + (String.fromCharCode(end)) + "\" in string transliteration")
          }
          for (c = start + 1; c < end; c++) {
            from_chars_expanded.push(String.fromCharCode(c));
          }
          from_chars_expanded.push(ch);
          in_range = null;
          last_from = null;
        }
        else {
          from_chars_expanded.push(ch);
        }
      }

      from_chars = from_chars_expanded;
      from_length = from_chars.length;

      if (inverse) {
        for (i = 0; i < from_length; i++) {
          subs[from_chars[i]] = true;
        }
      }
      else {
        if (to_length > 0) {
          var to_chars_expanded = [];
          var last_to = null;
          in_range = false;
          for (i = 0; i < to_length; i++) {
            ch = to_chars[i];
            if (last_from == null) {
              last_from = ch;
              to_chars_expanded.push(ch);
            }
            else if (ch === '-') {
              if (last_to === '-') {
                to_chars_expanded.push('-');
                to_chars_expanded.push('-');
              }
              else if (i == to_length - 1) {
                to_chars_expanded.push('-');
              }
              else {
                in_range = true;
              }
            }
            else if (in_range) {
              start = last_from.charCodeAt(0);
              end = ch.charCodeAt(0);
              if (start > end) {
                self.$raise($scope.get('ArgumentError'), "invalid range \"" + (String.fromCharCode(start)) + "-" + (String.fromCharCode(end)) + "\" in string transliteration")
              }
              for (c = start + 1; c < end; c++) {
                to_chars_expanded.push(String.fromCharCode(c));
              }
              to_chars_expanded.push(ch);
              in_range = null;
              last_from = null;
            }
            else {
              to_chars_expanded.push(ch);
            }
          }

          to_chars = to_chars_expanded;
          to_length = to_chars.length;
        }

        var length_diff = from_length - to_length;
        if (length_diff > 0) {
          var pad_char = (to_length > 0 ? to_chars[to_length - 1] : '');
          for (i = 0; i < length_diff; i++) {
            to_chars.push(pad_char);
          }
        }

        for (i = 0; i < from_length; i++) {
          subs[from_chars[i]] = to_chars[i];
        }
      }
      var new_str = ''
      var last_substitute = null
      for (i = 0, length = self.length; i < length; i++) {
        ch = self.charAt(i);
        var sub = subs[ch]
        if (inverse) {
          if (sub == null) {
            if (last_substitute == null) {
              new_str += global_sub;
              last_substitute = true;
            }
          }
          else {
            new_str += ch;
            last_substitute = null;
          }
        }
        else {
          if (sub != null) {
            if (last_substitute == null || last_substitute !== sub) {
              new_str += sub;
              last_substitute = sub;
            }
          }
          else {
            new_str += ch;
            last_substitute = null;
          }
        }
      }
      return new_str;
    
    }, TMP_64.$$arity = 2);

    Opal.defn(self, '$upcase', TMP_65 = function $$upcase() {
      var self = this;

      return self.toUpperCase();
    }, TMP_65.$$arity = 0);

    Opal.defn(self, '$upto', TMP_66 = function $$upto(stop, excl) {
      var self = this, $iter = TMP_66.$$p, block = $iter || nil;

      if (excl == null) {
        excl = false;
      }
      TMP_66.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("upto", stop, excl)
      };
      stop = $scope.get('Opal').$coerce_to(stop, $scope.get('String'), "to_str");
      
      var a, b, s = self.toString();

      if (s.length === 1 && stop.length === 1) {

        a = s.charCodeAt(0);
        b = stop.charCodeAt(0);

        while (a <= b) {
          if (excl && a === b) {
            break;
          }

          block(String.fromCharCode(a));

          a += 1;
        }

      } else if (parseInt(s, 10).toString() === s && parseInt(stop, 10).toString() === stop) {

        a = parseInt(s, 10);
        b = parseInt(stop, 10);

        while (a <= b) {
          if (excl && a === b) {
            break;
          }

          block(a.toString());

          a += 1;
        }

      } else {

        while (s.length <= stop.length && s <= stop) {
          if (excl && s === stop) {
            break;
          }

          block(s);

          s = (s).$succ();
        }

      }
      return self;
    
    }, TMP_66.$$arity = -2);

    
    function char_class_from_char_sets(sets) {
      function explode_sequences_in_character_set(set) {
        var result = '',
            i, len = set.length,
            curr_char,
            skip_next_dash,
            char_code_from,
            char_code_upto,
            char_code;
        for (i = 0; i < len; i++) {
          curr_char = set.charAt(i);
          if (curr_char === '-' && i > 0 && i < (len - 1) && !skip_next_dash) {
            char_code_from = set.charCodeAt(i - 1);
            char_code_upto = set.charCodeAt(i + 1);
            if (char_code_from > char_code_upto) {
              self.$raise($scope.get('ArgumentError'), "invalid range \"" + (char_code_from) + "-" + (char_code_upto) + "\" in string transliteration")
            }
            for (char_code = char_code_from + 1; char_code < char_code_upto + 1; char_code++) {
              result += String.fromCharCode(char_code);
            }
            skip_next_dash = true;
            i++;
          } else {
            skip_next_dash = (curr_char === '\\');
            result += curr_char;
          }
        }
        return result;
      }

      function intersection(setA, setB) {
        if (setA.length === 0) {
          return setB;
        }
        var result = '',
            i, len = setA.length,
            chr;
        for (i = 0; i < len; i++) {
          chr = setA.charAt(i);
          if (setB.indexOf(chr) !== -1) {
            result += chr;
          }
        }
        return result;
      }

      var i, len, set, neg, chr, tmp,
          pos_intersection = '',
          neg_intersection = '';

      for (i = 0, len = sets.length; i < len; i++) {
        set = $scope.get('Opal').$coerce_to(sets[i], $scope.get('String'), "to_str");
        neg = (set.charAt(0) === '^' && set.length > 1);
        set = explode_sequences_in_character_set(neg ? set.slice(1) : set);
        if (neg) {
          neg_intersection = intersection(neg_intersection, set);
        } else {
          pos_intersection = intersection(pos_intersection, set);
        }
      }

      if (pos_intersection.length > 0 && neg_intersection.length > 0) {
        tmp = '';
        for (i = 0, len = pos_intersection.length; i < len; i++) {
          chr = pos_intersection.charAt(i);
          if (neg_intersection.indexOf(chr) === -1) {
            tmp += chr;
          }
        }
        pos_intersection = tmp;
        neg_intersection = '';
      }

      if (pos_intersection.length > 0) {
        return '[' + $scope.get('Regexp').$escape(pos_intersection) + ']';
      }

      if (neg_intersection.length > 0) {
        return '[^' + $scope.get('Regexp').$escape(neg_intersection) + ']';
      }

      return null;
    }
  

    Opal.defn(self, '$instance_variables', TMP_67 = function $$instance_variables() {
      var self = this;

      return [];
    }, TMP_67.$$arity = 0);

    return (Opal.defs(self, '$_load', TMP_68 = function $$_load($a_rest) {
      var $b, self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      return ($b = self).$new.apply($b, Opal.to_a(args));
    }, TMP_68.$$arity = -1), nil) && '_load';
  })($scope.base, String);
  return Opal.cdecl($scope, 'Symbol', $scope.get('String'));
};
/* Generated by Opal 0.10.3 */
Opal.modules["corelib/enumerable"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$each', '$destructure', '$raise', '$new', '$yield', '$dup', '$enum_for', '$enumerator_size', '$flatten', '$map', '$proc', '$==', '$nil?', '$respond_to?', '$coerce_to!', '$>', '$*', '$coerce_to', '$try_convert', '$<', '$+', '$-', '$to_enum', '$ceil', '$/', '$size', '$===', '$<<', '$[]', '$[]=', '$inspect', '$__send__', '$<=>', '$first', '$reverse', '$sort', '$to_proc', '$compare', '$call', '$to_a', '$lambda', '$sort!', '$map!', '$zip']);
  return (function($base) {
    var $Enumerable, self = $Enumerable = $module($base, 'Enumerable');

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_4, TMP_7, TMP_10, TMP_12, TMP_15, TMP_19, TMP_21, TMP_23, TMP_24, TMP_25, TMP_27, TMP_29, TMP_31, TMP_33, TMP_35, TMP_36, TMP_38, TMP_43, TMP_44, TMP_45, TMP_48, TMP_49, TMP_51, TMP_52, TMP_53, TMP_54, TMP_56, TMP_57, TMP_59, TMP_61, TMP_62, TMP_65, TMP_68, TMP_70, TMP_72, TMP_74, TMP_76, TMP_78, TMP_83, TMP_84, TMP_86;

    Opal.defn(self, '$all?', TMP_1 = function() {try {

      var $a, $b, TMP_2, $c, TMP_3, self = this, $iter = TMP_1.$$p, block = $iter || nil;

      TMP_1.$$p = null;
      if ((block !== nil)) {
        ($a = ($b = self).$each, $a.$$p = (TMP_2 = function($c_rest){var self = TMP_2.$$s || this, value, $d;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
        if ((($d = Opal.yieldX(block, Opal.to_a(value))) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
            return nil
            } else {
            Opal.ret(false)
          }}, TMP_2.$$s = self, TMP_2.$$arity = -1, TMP_2), $a).call($b)
        } else {
        ($a = ($c = self).$each, $a.$$p = (TMP_3 = function($d_rest){var self = TMP_3.$$s || this, value, $e;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
        if ((($e = $scope.get('Opal').$destructure(value)) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
            return nil
            } else {
            Opal.ret(false)
          }}, TMP_3.$$s = self, TMP_3.$$arity = -1, TMP_3), $a).call($c)
      };
      return true;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$any?', TMP_4 = function() {try {

      var $a, $b, TMP_5, $c, TMP_6, self = this, $iter = TMP_4.$$p, block = $iter || nil;

      TMP_4.$$p = null;
      if ((block !== nil)) {
        ($a = ($b = self).$each, $a.$$p = (TMP_5 = function($c_rest){var self = TMP_5.$$s || this, value, $d;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
        if ((($d = Opal.yieldX(block, Opal.to_a(value))) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
            Opal.ret(true)
            } else {
            return nil
          }}, TMP_5.$$s = self, TMP_5.$$arity = -1, TMP_5), $a).call($b)
        } else {
        ($a = ($c = self).$each, $a.$$p = (TMP_6 = function($d_rest){var self = TMP_6.$$s || this, value, $e;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
        if ((($e = $scope.get('Opal').$destructure(value)) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
            Opal.ret(true)
            } else {
            return nil
          }}, TMP_6.$$s = self, TMP_6.$$arity = -1, TMP_6), $a).call($c)
      };
      return false;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$chunk', TMP_7 = function $$chunk(state) {
      var $a, $b, TMP_8, self = this, $iter = TMP_7.$$p, original_block = $iter || nil;

      TMP_7.$$p = null;
      if (original_block !== false && original_block !== nil && original_block != null) {
        } else {
        $scope.get('Kernel').$raise($scope.get('ArgumentError'), "no block given")
      };
      return ($a = ($b = Opal.get('Enumerator')).$new, $a.$$p = (TMP_8 = function(yielder){var self = TMP_8.$$s || this, $c, $d, TMP_9;
if (yielder == null) yielder = nil;
      
        var block, previous = nil, accumulate = [];

        if (state == undefined || state === nil) {
          block = original_block;
        } else {
          block = ($c = ($d = $scope.get('Proc')).$new, $c.$$p = (TMP_9 = function(val){var self = TMP_9.$$s || this;
if (val == null) val = nil;
        return original_block.$yield(val, state.$dup())}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9), $c).call($d)
        }

        function releaseAccumulate() {
          if (accumulate.length > 0) {
            yielder.$yield(previous, accumulate)
          }
        }

        self.$each.$$p = function(value) {
          var key = Opal.yield1(block, value);

          if (key === nil) {
            releaseAccumulate();
            accumulate = [];
            previous = nil;
          } else {
            if (previous === nil || previous === key) {
              accumulate.push(value);
            } else {
              releaseAccumulate();
              accumulate = [value];
            }

            previous = key;
          }
        }

        self.$each();

        releaseAccumulate();
      ;}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8), $a).call($b);
    }, TMP_7.$$arity = -1);

    Opal.defn(self, '$collect', TMP_10 = function $$collect() {
      var $a, $b, TMP_11, self = this, $iter = TMP_10.$$p, block = $iter || nil;

      TMP_10.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_11 = function(){var self = TMP_11.$$s || this;

        return self.$enumerator_size()}, TMP_11.$$s = self, TMP_11.$$arity = 0, TMP_11), $a).call($b, "collect")
      };
      
      var result = [];

      self.$each.$$p = function() {
        var value = Opal.yieldX(block, arguments);

        result.push(value);
      };

      self.$each();

      return result;
    
    }, TMP_10.$$arity = 0);

    Opal.defn(self, '$collect_concat', TMP_12 = function $$collect_concat() {
      var $a, $b, TMP_13, $c, TMP_14, self = this, $iter = TMP_12.$$p, block = $iter || nil;

      TMP_12.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this;

        return self.$enumerator_size()}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13), $a).call($b, "collect_concat")
      };
      return ($a = ($c = self).$map, $a.$$p = (TMP_14 = function(item){var self = TMP_14.$$s || this;
if (item == null) item = nil;
      return Opal.yield1(block, item);}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14), $a).call($c).$flatten(1);
    }, TMP_12.$$arity = 0);

    Opal.defn(self, '$count', TMP_15 = function $$count(object) {
      var $a, $b, TMP_16, $c, TMP_17, $d, TMP_18, self = this, $iter = TMP_15.$$p, block = $iter || nil, result = nil;

      TMP_15.$$p = null;
      result = 0;
      if ((($a = object != null) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        block = ($a = ($b = self).$proc, $a.$$p = (TMP_16 = function($c_rest){var self = TMP_16.$$s || this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
        return $scope.get('Opal').$destructure(args)['$=='](object)}, TMP_16.$$s = self, TMP_16.$$arity = -1, TMP_16), $a).call($b)
      } else if ((($a = block['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        block = ($a = ($c = self).$proc, $a.$$p = (TMP_17 = function(){var self = TMP_17.$$s || this;

        return true}, TMP_17.$$s = self, TMP_17.$$arity = 0, TMP_17), $a).call($c)};
      ($a = ($d = self).$each, $a.$$p = (TMP_18 = function($e_rest){var self = TMP_18.$$s || this, args, $f;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
      if ((($f = Opal.yieldX(block, args)) !== nil && $f != null && (!$f.$$is_boolean || $f == true))) {
          return result++;
          } else {
          return nil
        }}, TMP_18.$$s = self, TMP_18.$$arity = -1, TMP_18), $a).call($d);
      return result;
    }, TMP_15.$$arity = -1);

    Opal.defn(self, '$cycle', TMP_19 = function $$cycle(n) {
      var $a, $b, TMP_20, self = this, $iter = TMP_19.$$p, block = $iter || nil;

      if (n == null) {
        n = nil;
      }
      TMP_19.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_20 = function(){var self = TMP_20.$$s || this, $c;

        if (n['$=='](nil)) {
            if ((($c = self['$respond_to?']("size")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return (($scope.get('Float')).$$scope.get('INFINITY'))
              } else {
              return nil
            }
            } else {
            n = $scope.get('Opal')['$coerce_to!'](n, $scope.get('Integer'), "to_int");
            if ((($c = $rb_gt(n, 0)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return $rb_times(self.$enumerator_size(), n)
              } else {
              return 0
            };
          }}, TMP_20.$$s = self, TMP_20.$$arity = 0, TMP_20), $a).call($b, "cycle", n)
      };
      if ((($a = n['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        n = $scope.get('Opal')['$coerce_to!'](n, $scope.get('Integer'), "to_int");
        if ((($a = n <= 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil};
      };
      
      var result,
          all = [], i, length, value;

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        all.push(param);
      }

      self.$each();

      if (result !== undefined) {
        return result;
      }

      if (all.length === 0) {
        return nil;
      }

      if (n === nil) {
        while (true) {
          for (i = 0, length = all.length; i < length; i++) {
            value = Opal.yield1(block, all[i]);
          }
        }
      }
      else {
        while (n > 1) {
          for (i = 0, length = all.length; i < length; i++) {
            value = Opal.yield1(block, all[i]);
          }

          n--;
        }
      }
    
    }, TMP_19.$$arity = -1);

    Opal.defn(self, '$detect', TMP_21 = function $$detect(ifnone) {try {

      var $a, $b, TMP_22, self = this, $iter = TMP_21.$$p, block = $iter || nil;

      TMP_21.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("detect", ifnone)
      };
      ($a = ($b = self).$each, $a.$$p = (TMP_22 = function($c_rest){var self = TMP_22.$$s || this, args, $d, value = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
      value = $scope.get('Opal').$destructure(args);
        if ((($d = Opal.yield1(block, value)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          Opal.ret(value)
          } else {
          return nil
        };}, TMP_22.$$s = self, TMP_22.$$arity = -1, TMP_22), $a).call($b);
      
      if (ifnone !== undefined) {
        if (typeof(ifnone) === 'function') {
          return ifnone();
        } else {
          return ifnone;
        }
      }
    
      return nil;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_21.$$arity = -1);

    Opal.defn(self, '$drop', TMP_23 = function $$drop(number) {
      var $a, self = this;

      number = $scope.get('Opal').$coerce_to(number, $scope.get('Integer'), "to_int");
      if ((($a = number < 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "attempt to drop negative size")};
      
      var result  = [],
          current = 0;

      self.$each.$$p = function() {
        if (number <= current) {
          result.push($scope.get('Opal').$destructure(arguments));
        }

        current++;
      };

      self.$each()

      return result;
    
    }, TMP_23.$$arity = 1);

    Opal.defn(self, '$drop_while', TMP_24 = function $$drop_while() {
      var $a, self = this, $iter = TMP_24.$$p, block = $iter || nil;

      TMP_24.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("drop_while")
      };
      
      var result   = [],
          dropping = true;

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments);

        if (dropping) {
          var value = Opal.yield1(block, param);

          if ((($a = value) === nil || $a == null || ($a.$$is_boolean && $a == false))) {
            dropping = false;
            result.push(param);
          }
        }
        else {
          result.push(param);
        }
      };

      self.$each();

      return result;
    
    }, TMP_24.$$arity = 0);

    Opal.defn(self, '$each_cons', TMP_25 = function $$each_cons(n) {
      var $a, $b, TMP_26, self = this, $iter = TMP_25.$$p, block = $iter || nil;

      TMP_25.$$p = null;
      if ((($a = arguments.length != 1) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "wrong number of arguments (" + (arguments.length) + " for 1)")};
      n = $scope.get('Opal').$try_convert(n, $scope.get('Integer'), "to_int");
      if ((($a = n <= 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "invalid size")};
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_26 = function(){var self = TMP_26.$$s || this, $c, $d, enum_size = nil;

        enum_size = self.$enumerator_size();
          if ((($c = enum_size['$nil?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return nil
          } else if ((($c = ((($d = enum_size['$=='](0)) !== false && $d !== nil && $d != null) ? $d : $rb_lt(enum_size, n))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return 0
            } else {
            return $rb_plus($rb_minus(enum_size, n), 1)
          };}, TMP_26.$$s = self, TMP_26.$$arity = 0, TMP_26), $a).call($b, "each_cons", n)
      };
      
      var buffer = [], result = nil;

      self.$each.$$p = function() {
        var element = $scope.get('Opal').$destructure(arguments);
        buffer.push(element);
        if (buffer.length > n) {
          buffer.shift();
        }
        if (buffer.length == n) {
          Opal.yield1(block, buffer.slice(0, n));
        }
      }

      self.$each();

      return result;
    
    }, TMP_25.$$arity = 1);

    Opal.defn(self, '$each_entry', TMP_27 = function $$each_entry($a_rest) {
      var $b, $c, TMP_28, self = this, data, $iter = TMP_27.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      data = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        data[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_27.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($b = ($c = self).$to_enum, $b.$$p = (TMP_28 = function(){var self = TMP_28.$$s || this;

        return self.$enumerator_size()}, TMP_28.$$s = self, TMP_28.$$arity = 0, TMP_28), $b).apply($c, ["each_entry"].concat(Opal.to_a(data)))
      };
      
      self.$each.$$p = function() {
        var item = $scope.get('Opal').$destructure(arguments);

        Opal.yield1(block, item);
      }

      self.$each.apply(self, data);

      return self;
    ;
    }, TMP_27.$$arity = -1);

    Opal.defn(self, '$each_slice', TMP_29 = function $$each_slice(n) {
      var $a, $b, TMP_30, self = this, $iter = TMP_29.$$p, block = $iter || nil;

      TMP_29.$$p = null;
      n = $scope.get('Opal').$coerce_to(n, $scope.get('Integer'), "to_int");
      if ((($a = n <= 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "invalid slice size")};
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_30 = function(){var self = TMP_30.$$s || this, $c;

        if ((($c = self['$respond_to?']("size")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return ($rb_divide(self.$size(), n)).$ceil()
            } else {
            return nil
          }}, TMP_30.$$s = self, TMP_30.$$arity = 0, TMP_30), $a).call($b, "each_slice", n)
      };
      
      var result,
          slice = []

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments);

        slice.push(param);

        if (slice.length === n) {
          Opal.yield1(block, slice);
          slice = [];
        }
      };

      self.$each();

      if (result !== undefined) {
        return result;
      }

      // our "last" group, if smaller than n then won't have been yielded
      if (slice.length > 0) {
        Opal.yield1(block, slice);
      }
    ;
      return nil;
    }, TMP_29.$$arity = 1);

    Opal.defn(self, '$each_with_index', TMP_31 = function $$each_with_index($a_rest) {
      var $b, $c, TMP_32, self = this, args, $iter = TMP_31.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_31.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($b = ($c = self).$enum_for, $b.$$p = (TMP_32 = function(){var self = TMP_32.$$s || this;

        return self.$enumerator_size()}, TMP_32.$$s = self, TMP_32.$$arity = 0, TMP_32), $b).apply($c, ["each_with_index"].concat(Opal.to_a(args)))
      };
      
      var result,
          index = 0;

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments);

        block(param, index);

        index++;
      };

      self.$each.apply(self, args);

      if (result !== undefined) {
        return result;
      }
    
      return self;
    }, TMP_31.$$arity = -1);

    Opal.defn(self, '$each_with_object', TMP_33 = function $$each_with_object(object) {
      var $a, $b, TMP_34, self = this, $iter = TMP_33.$$p, block = $iter || nil;

      TMP_33.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_34 = function(){var self = TMP_34.$$s || this;

        return self.$enumerator_size()}, TMP_34.$$s = self, TMP_34.$$arity = 0, TMP_34), $a).call($b, "each_with_object", object)
      };
      
      var result;

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments);

        block(param, object);
      };

      self.$each();

      if (result !== undefined) {
        return result;
      }
    
      return object;
    }, TMP_33.$$arity = 1);

    Opal.defn(self, '$entries', TMP_35 = function $$entries($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      var result = [];

      self.$each.$$p = function() {
        result.push($scope.get('Opal').$destructure(arguments));
      };

      self.$each.apply(self, args);

      return result;
    
    }, TMP_35.$$arity = -1);

    Opal.alias(self, 'find', 'detect');

    Opal.defn(self, '$find_all', TMP_36 = function $$find_all() {
      var $a, $b, TMP_37, self = this, $iter = TMP_36.$$p, block = $iter || nil;

      TMP_36.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_37 = function(){var self = TMP_37.$$s || this;

        return self.$enumerator_size()}, TMP_37.$$s = self, TMP_37.$$arity = 0, TMP_37), $a).call($b, "find_all")
      };
      
      var result = [];

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if ((($a = value) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result.push(param);
        }
      };

      self.$each();

      return result;
    
    }, TMP_36.$$arity = 0);

    Opal.defn(self, '$find_index', TMP_38 = function $$find_index(object) {try {

      var $a, $b, TMP_39, $c, TMP_40, self = this, $iter = TMP_38.$$p, block = $iter || nil, index = nil;

      TMP_38.$$p = null;
      if ((($a = object === undefined && block === nil) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$enum_for("find_index")};
      index = 0;
      if ((($a = object != null) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        ($a = ($b = self).$each, $a.$$p = (TMP_39 = function($c_rest){var self = TMP_39.$$s || this, value;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
        if ($scope.get('Opal').$destructure(value)['$=='](object)) {
            Opal.ret(index)};
          return index += 1;}, TMP_39.$$s = self, TMP_39.$$arity = -1, TMP_39), $a).call($b)
        } else {
        ($a = ($c = self).$each, $a.$$p = (TMP_40 = function($d_rest){var self = TMP_40.$$s || this, value, $e;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
        if ((($e = Opal.yieldX(block, Opal.to_a(value))) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
            Opal.ret(index)};
          return index += 1;}, TMP_40.$$s = self, TMP_40.$$arity = -1, TMP_40), $a).call($c)
      };
      return nil;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_38.$$arity = -1);

    Opal.defn(self, '$first', TMP_43 = function $$first(number) {try {

      var $a, $b, TMP_41, $c, TMP_42, self = this, result = nil, current = nil;

      if ((($a = number === undefined) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = self).$each, $a.$$p = (TMP_41 = function(value){var self = TMP_41.$$s || this;
if (value == null) value = nil;
        Opal.ret(value)}, TMP_41.$$s = self, TMP_41.$$arity = 1, TMP_41), $a).call($b)
        } else {
        result = [];
        number = $scope.get('Opal').$coerce_to(number, $scope.get('Integer'), "to_int");
        if ((($a = number < 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('ArgumentError'), "attempt to take negative size")};
        if ((($a = number == 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return []};
        current = 0;
        ($a = ($c = self).$each, $a.$$p = (TMP_42 = function($d_rest){var self = TMP_42.$$s || this, args, $e;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
        result.push($scope.get('Opal').$destructure(args));
          if ((($e = number <= ++current) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
            Opal.ret(result)
            } else {
            return nil
          };}, TMP_42.$$s = self, TMP_42.$$arity = -1, TMP_42), $a).call($c);
        return result;
      };
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_43.$$arity = -1);

    Opal.alias(self, 'flat_map', 'collect_concat');

    Opal.defn(self, '$grep', TMP_44 = function $$grep(pattern) {
      var $a, self = this, $iter = TMP_44.$$p, block = $iter || nil;

      TMP_44.$$p = null;
      
      var result = [];

      if (block !== nil) {
        self.$each.$$p = function() {
          var param = $scope.get('Opal').$destructure(arguments),
              value = pattern['$==='](param);

          if ((($a = value) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            value = Opal.yield1(block, param);

            result.push(value);
          }
        };
      }
      else {
        self.$each.$$p = function() {
          var param = $scope.get('Opal').$destructure(arguments),
              value = pattern['$==='](param);

          if ((($a = value) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            result.push(param);
          }
        };
      }

      self.$each();

      return result;
    ;
    }, TMP_44.$$arity = 1);

    Opal.defn(self, '$group_by', TMP_45 = function $$group_by() {
      var $a, $b, TMP_46, $c, $d, self = this, $iter = TMP_45.$$p, block = $iter || nil, hash = nil;

      TMP_45.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_46 = function(){var self = TMP_46.$$s || this;

        return self.$enumerator_size()}, TMP_46.$$s = self, TMP_46.$$arity = 0, TMP_46), $a).call($b, "group_by")
      };
      hash = $scope.get('Hash').$new();
      
      var result;

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        (($a = value, $c = hash, ((($d = $c['$[]']($a)) !== false && $d !== nil && $d != null) ? $d : $c['$[]=']($a, []))))['$<<'](param);
      }

      self.$each();

      if (result !== undefined) {
        return result;
      }
    
      return hash;
    }, TMP_45.$$arity = 0);

    Opal.defn(self, '$include?', TMP_48 = function(obj) {try {

      var $a, $b, TMP_47, self = this;

      ($a = ($b = self).$each, $a.$$p = (TMP_47 = function($c_rest){var self = TMP_47.$$s || this, args;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
      if ($scope.get('Opal').$destructure(args)['$=='](obj)) {
          Opal.ret(true)
          } else {
          return nil
        }}, TMP_47.$$s = self, TMP_47.$$arity = -1, TMP_47), $a).call($b);
      return false;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_48.$$arity = 1);

    Opal.defn(self, '$inject', TMP_49 = function $$inject(object, sym) {
      var self = this, $iter = TMP_49.$$p, block = $iter || nil;

      TMP_49.$$p = null;
      
      var result = object;

      if (block !== nil && sym === undefined) {
        self.$each.$$p = function() {
          var value = $scope.get('Opal').$destructure(arguments);

          if (result === undefined) {
            result = value;
            return;
          }

          value = Opal.yieldX(block, [result, value]);

          result = value;
        };
      }
      else {
        if (sym === undefined) {
          if (!$scope.get('Symbol')['$==='](object)) {
            self.$raise($scope.get('TypeError'), "" + (object.$inspect()) + " is not a Symbol");
          }

          sym    = object;
          result = undefined;
        }

        self.$each.$$p = function() {
          var value = $scope.get('Opal').$destructure(arguments);

          if (result === undefined) {
            result = value;
            return;
          }

          result = (result).$__send__(sym, value);
        };
      }

      self.$each();

      return result == undefined ? nil : result;
    ;
    }, TMP_49.$$arity = -1);

    Opal.defn(self, '$lazy', TMP_51 = function $$lazy() {
      var $a, $b, TMP_50, self = this;

      return ($a = ($b = (($scope.get('Enumerator')).$$scope.get('Lazy'))).$new, $a.$$p = (TMP_50 = function(enum$, $c_rest){var self = TMP_50.$$s || this, args, $d;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }if (enum$ == null) enum$ = nil;
      return ($d = enum$).$yield.apply($d, Opal.to_a(args))}, TMP_50.$$s = self, TMP_50.$$arity = -2, TMP_50), $a).call($b, self, self.$enumerator_size());
    }, TMP_51.$$arity = 0);

    Opal.defn(self, '$enumerator_size', TMP_52 = function $$enumerator_size() {
      var $a, self = this;

      if ((($a = self['$respond_to?']("size")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$size()
        } else {
        return nil
      };
    }, TMP_52.$$arity = 0);

    Opal.alias(self, 'map', 'collect');

    Opal.defn(self, '$max', TMP_53 = function $$max(n) {
      var $a, $b, self = this, $iter = TMP_53.$$p, block = $iter || nil;

      TMP_53.$$p = null;
      
      if (n === undefined || n === nil) {
        var result, value;

        self.$each.$$p = function() {
          var item = $scope.get('Opal').$destructure(arguments);

          if (result === undefined) {
            result = item;
            return;
          }

          if (block !== nil) {
            value = Opal.yieldX(block, [item, result]);
          } else {
            value = (item)['$<=>'](result);
          }

          if (value === nil) {
            self.$raise($scope.get('ArgumentError'), "comparison failed");
          }

          if (value > 0) {
            result = item;
          }
        }

        self.$each();

        if (result === undefined) {
          return nil;
        } else {
          return result;
        }
      }
    
      n = $scope.get('Opal').$coerce_to(n, $scope.get('Integer'), "to_int");
      return ($a = ($b = self).$sort, $a.$$p = block.$to_proc(), $a).call($b).$reverse().$first(n);
    }, TMP_53.$$arity = -1);

    Opal.defn(self, '$max_by', TMP_54 = function $$max_by() {
      var $a, $b, TMP_55, self = this, $iter = TMP_54.$$p, block = $iter || nil;

      TMP_54.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_55 = function(){var self = TMP_55.$$s || this;

        return self.$enumerator_size()}, TMP_55.$$s = self, TMP_55.$$arity = 0, TMP_55), $a).call($b, "max_by")
      };
      
      var result,
          by;

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if (result === undefined) {
          result = param;
          by     = value;
          return;
        }

        if ((value)['$<=>'](by) > 0) {
          result = param
          by     = value;
        }
      };

      self.$each();

      return result === undefined ? nil : result;
    
    }, TMP_54.$$arity = 0);

    Opal.alias(self, 'member?', 'include?');

    Opal.defn(self, '$min', TMP_56 = function $$min() {
      var self = this, $iter = TMP_56.$$p, block = $iter || nil;

      TMP_56.$$p = null;
      
      var result;

      if (block !== nil) {
        self.$each.$$p = function() {
          var param = $scope.get('Opal').$destructure(arguments);

          if (result === undefined) {
            result = param;
            return;
          }

          var value = block(param, result);

          if (value === nil) {
            self.$raise($scope.get('ArgumentError'), "comparison failed");
          }

          if (value < 0) {
            result = param;
          }
        };
      }
      else {
        self.$each.$$p = function() {
          var param = $scope.get('Opal').$destructure(arguments);

          if (result === undefined) {
            result = param;
            return;
          }

          if ($scope.get('Opal').$compare(param, result) < 0) {
            result = param;
          }
        };
      }

      self.$each();

      return result === undefined ? nil : result;
    
    }, TMP_56.$$arity = 0);

    Opal.defn(self, '$min_by', TMP_57 = function $$min_by() {
      var $a, $b, TMP_58, self = this, $iter = TMP_57.$$p, block = $iter || nil;

      TMP_57.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_58 = function(){var self = TMP_58.$$s || this;

        return self.$enumerator_size()}, TMP_58.$$s = self, TMP_58.$$arity = 0, TMP_58), $a).call($b, "min_by")
      };
      
      var result,
          by;

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if (result === undefined) {
          result = param;
          by     = value;
          return;
        }

        if ((value)['$<=>'](by) < 0) {
          result = param
          by     = value;
        }
      };

      self.$each();

      return result === undefined ? nil : result;
    
    }, TMP_57.$$arity = 0);

    Opal.defn(self, '$minmax', TMP_59 = function $$minmax() {
      var $a, $b, $c, TMP_60, self = this, $iter = TMP_59.$$p, block = $iter || nil;

      TMP_59.$$p = null;
      ((($a = block) !== false && $a !== nil && $a != null) ? $a : block = ($b = ($c = self).$proc, $b.$$p = (TMP_60 = function(a, b){var self = TMP_60.$$s || this;
if (a == null) a = nil;if (b == null) b = nil;
      return a['$<=>'](b)}, TMP_60.$$s = self, TMP_60.$$arity = 2, TMP_60), $b).call($c));
      
      var min = nil, max = nil, first_time = true;

      self.$each.$$p = function() {
        var element = $scope.get('Opal').$destructure(arguments);
        if (first_time) {
          min = max = element;
          first_time = false;
        } else {
          var min_cmp = block.$call(min, element);

          if (min_cmp === nil) {
            self.$raise($scope.get('ArgumentError'), "comparison failed")
          } else if (min_cmp > 0) {
            min = element;
          }

          var max_cmp = block.$call(max, element);

          if (max_cmp === nil) {
            self.$raise($scope.get('ArgumentError'), "comparison failed")
          } else if (max_cmp < 0) {
            max = element;
          }
        }
      }

      self.$each();

      return [min, max];
    
    }, TMP_59.$$arity = 0);

    Opal.defn(self, '$minmax_by', TMP_61 = function $$minmax_by() {
      var self = this, $iter = TMP_61.$$p, block = $iter || nil;

      TMP_61.$$p = null;
      return self.$raise($scope.get('NotImplementedError'));
    }, TMP_61.$$arity = 0);

    Opal.defn(self, '$none?', TMP_62 = function() {try {

      var $a, $b, TMP_63, $c, TMP_64, self = this, $iter = TMP_62.$$p, block = $iter || nil;

      TMP_62.$$p = null;
      if ((block !== nil)) {
        ($a = ($b = self).$each, $a.$$p = (TMP_63 = function($c_rest){var self = TMP_63.$$s || this, value, $d;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
        if ((($d = Opal.yieldX(block, Opal.to_a(value))) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
            Opal.ret(false)
            } else {
            return nil
          }}, TMP_63.$$s = self, TMP_63.$$arity = -1, TMP_63), $a).call($b)
        } else {
        ($a = ($c = self).$each, $a.$$p = (TMP_64 = function($d_rest){var self = TMP_64.$$s || this, value, $e;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
        if ((($e = $scope.get('Opal').$destructure(value)) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
            Opal.ret(false)
            } else {
            return nil
          }}, TMP_64.$$s = self, TMP_64.$$arity = -1, TMP_64), $a).call($c)
      };
      return true;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_62.$$arity = 0);

    Opal.defn(self, '$one?', TMP_65 = function() {try {

      var $a, $b, TMP_66, $c, TMP_67, self = this, $iter = TMP_65.$$p, block = $iter || nil, count = nil;

      TMP_65.$$p = null;
      count = 0;
      if ((block !== nil)) {
        ($a = ($b = self).$each, $a.$$p = (TMP_66 = function($c_rest){var self = TMP_66.$$s || this, value, $d;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
        if ((($d = Opal.yieldX(block, Opal.to_a(value))) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
            count = $rb_plus(count, 1);
            if ((($d = $rb_gt(count, 1)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
              Opal.ret(false)
              } else {
              return nil
            };
            } else {
            return nil
          }}, TMP_66.$$s = self, TMP_66.$$arity = -1, TMP_66), $a).call($b)
        } else {
        ($a = ($c = self).$each, $a.$$p = (TMP_67 = function($d_rest){var self = TMP_67.$$s || this, value, $e;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
        if ((($e = $scope.get('Opal').$destructure(value)) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
            count = $rb_plus(count, 1);
            if ((($e = $rb_gt(count, 1)) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
              Opal.ret(false)
              } else {
              return nil
            };
            } else {
            return nil
          }}, TMP_67.$$s = self, TMP_67.$$arity = -1, TMP_67), $a).call($c)
      };
      return count['$=='](1);
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_65.$$arity = 0);

    Opal.defn(self, '$partition', TMP_68 = function $$partition() {
      var $a, $b, TMP_69, self = this, $iter = TMP_68.$$p, block = $iter || nil;

      TMP_68.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_69 = function(){var self = TMP_69.$$s || this;

        return self.$enumerator_size()}, TMP_69.$$s = self, TMP_69.$$arity = 0, TMP_69), $a).call($b, "partition")
      };
      
      var truthy = [], falsy = [], result;

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if ((($a = value) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          truthy.push(param);
        }
        else {
          falsy.push(param);
        }
      };

      self.$each();

      return [truthy, falsy];
    
    }, TMP_68.$$arity = 0);

    Opal.alias(self, 'reduce', 'inject');

    Opal.defn(self, '$reject', TMP_70 = function $$reject() {
      var $a, $b, TMP_71, self = this, $iter = TMP_70.$$p, block = $iter || nil;

      TMP_70.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_71 = function(){var self = TMP_71.$$s || this;

        return self.$enumerator_size()}, TMP_71.$$s = self, TMP_71.$$arity = 0, TMP_71), $a).call($b, "reject")
      };
      
      var result = [];

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if ((($a = value) === nil || $a == null || ($a.$$is_boolean && $a == false))) {
          result.push(param);
        }
      };

      self.$each();

      return result;
    
    }, TMP_70.$$arity = 0);

    Opal.defn(self, '$reverse_each', TMP_72 = function $$reverse_each() {
      var $a, $b, TMP_73, self = this, $iter = TMP_72.$$p, block = $iter || nil;

      TMP_72.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_73 = function(){var self = TMP_73.$$s || this;

        return self.$enumerator_size()}, TMP_73.$$s = self, TMP_73.$$arity = 0, TMP_73), $a).call($b, "reverse_each")
      };
      
      var result = [];

      self.$each.$$p = function() {
        result.push(arguments);
      };

      self.$each();

      for (var i = result.length - 1; i >= 0; i--) {
        Opal.yieldX(block, result[i]);
      }

      return result;
    
    }, TMP_72.$$arity = 0);

    Opal.alias(self, 'select', 'find_all');

    Opal.defn(self, '$slice_before', TMP_74 = function $$slice_before(pattern) {
      var $a, $b, TMP_75, self = this, $iter = TMP_74.$$p, block = $iter || nil;

      TMP_74.$$p = null;
      if ((($a = pattern === undefined && block === nil || arguments.length > 1) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "wrong number of arguments (" + (arguments.length) + " for 1)")};
      return ($a = ($b = $scope.get('Enumerator')).$new, $a.$$p = (TMP_75 = function(e){var self = TMP_75.$$s || this, $c;
if (e == null) e = nil;
      
        var slice = [];

        if (block !== nil) {
          if (pattern === undefined) {
            self.$each.$$p = function() {
              var param = $scope.get('Opal').$destructure(arguments),
                  value = Opal.yield1(block, param);

              if ((($c = value) !== nil && $c != null && (!$c.$$is_boolean || $c == true)) && slice.length > 0) {
                e['$<<'](slice);
                slice = [];
              }

              slice.push(param);
            };
          }
          else {
            self.$each.$$p = function() {
              var param = $scope.get('Opal').$destructure(arguments),
                  value = block(param, pattern.$dup());

              if ((($c = value) !== nil && $c != null && (!$c.$$is_boolean || $c == true)) && slice.length > 0) {
                e['$<<'](slice);
                slice = [];
              }

              slice.push(param);
            };
          }
        }
        else {
          self.$each.$$p = function() {
            var param = $scope.get('Opal').$destructure(arguments),
                value = pattern['$==='](param);

            if ((($c = value) !== nil && $c != null && (!$c.$$is_boolean || $c == true)) && slice.length > 0) {
              e['$<<'](slice);
              slice = [];
            }

            slice.push(param);
          };
        }

        self.$each();

        if (slice.length > 0) {
          e['$<<'](slice);
        }
      ;}, TMP_75.$$s = self, TMP_75.$$arity = 1, TMP_75), $a).call($b);
    }, TMP_74.$$arity = -1);

    Opal.defn(self, '$sort', TMP_76 = function $$sort() {
      var $a, $b, TMP_77, $c, self = this, $iter = TMP_76.$$p, block = $iter || nil, ary = nil;

      TMP_76.$$p = null;
      ary = self.$to_a();
      if ((block !== nil)) {
        } else {
        block = ($a = ($b = self).$lambda, $a.$$p = (TMP_77 = function(a, b){var self = TMP_77.$$s || this;
if (a == null) a = nil;if (b == null) b = nil;
        return a['$<=>'](b)}, TMP_77.$$s = self, TMP_77.$$arity = 2, TMP_77), $a).call($b)
      };
      return ($a = ($c = ary).$sort, $a.$$p = block.$to_proc(), $a).call($c);
    }, TMP_76.$$arity = 0);

    Opal.defn(self, '$sort_by', TMP_78 = function $$sort_by() {
      var $a, $b, TMP_79, $c, TMP_80, $d, TMP_81, $e, TMP_82, self = this, $iter = TMP_78.$$p, block = $iter || nil, dup = nil;

      TMP_78.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_79 = function(){var self = TMP_79.$$s || this;

        return self.$enumerator_size()}, TMP_79.$$s = self, TMP_79.$$arity = 0, TMP_79), $a).call($b, "sort_by")
      };
      dup = ($a = ($c = self).$map, $a.$$p = (TMP_80 = function(){var self = TMP_80.$$s || this, $yielded, arg = nil;

      arg = $scope.get('Opal').$destructure(arguments);
        ($yielded = Opal.yield1(block, arg));return [$yielded, arg];}, TMP_80.$$s = self, TMP_80.$$arity = 0, TMP_80), $a).call($c);
      ($a = ($d = dup)['$sort!'], $a.$$p = (TMP_81 = function(a, b){var self = TMP_81.$$s || this;
if (a == null) a = nil;if (b == null) b = nil;
      return (a[0])['$<=>'](b[0])}, TMP_81.$$s = self, TMP_81.$$arity = 2, TMP_81), $a).call($d);
      return ($a = ($e = dup)['$map!'], $a.$$p = (TMP_82 = function(i){var self = TMP_82.$$s || this;
if (i == null) i = nil;
      return i[1];}, TMP_82.$$s = self, TMP_82.$$arity = 1, TMP_82), $a).call($e);
    }, TMP_78.$$arity = 0);

    Opal.defn(self, '$take', TMP_83 = function $$take(num) {
      var self = this;

      return self.$first(num);
    }, TMP_83.$$arity = 1);

    Opal.defn(self, '$take_while', TMP_84 = function $$take_while() {try {

      var $a, $b, TMP_85, self = this, $iter = TMP_84.$$p, block = $iter || nil, result = nil;

      TMP_84.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        return self.$enum_for("take_while")
      };
      result = [];
      return ($a = ($b = self).$each, $a.$$p = (TMP_85 = function($c_rest){var self = TMP_85.$$s || this, args, $d, value = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
      value = $scope.get('Opal').$destructure(args);
        if ((($d = Opal.yield1(block, value)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          } else {
          Opal.ret(result)
        };
        return result.push(value);}, TMP_85.$$s = self, TMP_85.$$arity = -1, TMP_85), $a).call($b);
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_84.$$arity = 0);

    Opal.alias(self, 'to_a', 'entries');

    Opal.defn(self, '$zip', TMP_86 = function $$zip($a_rest) {
      var $b, self = this, others, $iter = TMP_86.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      others = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        others[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_86.$$p = null;
      return ($b = self.$to_a()).$zip.apply($b, Opal.to_a(others));
    }, TMP_86.$$arity = -1);
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["corelib/enumerator"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$include', '$allocate', '$new', '$to_proc', '$coerce_to', '$nil?', '$empty?', '$+', '$class', '$__send__', '$===', '$call', '$enum_for', '$size', '$destructure', '$inspect', '$[]', '$raise', '$yield', '$each', '$enumerator_size', '$respond_to?', '$try_convert', '$<', '$for']);
  self.$require("corelib/enumerable");
  return (function($base, $super) {
    function $Enumerator(){};
    var self = $Enumerator = $klass($base, $super, 'Enumerator', $Enumerator);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_7;

    def.size = def.args = def.object = def.method = nil;
    self.$include($scope.get('Enumerable'));

    def.$$is_enumerator = true;

    Opal.defs(self, '$for', TMP_1 = function(object, method, $a_rest) {
      var self = this, args, $iter = TMP_1.$$p, block = $iter || nil;

      if (method == null) {
        method = "each";
      }
      var $args_len = arguments.length, $rest_len = $args_len - 2;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 2; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 2] = arguments[$arg_idx];
      }
      TMP_1.$$p = null;
      
      var obj = self.$allocate();

      obj.object = object;
      obj.size   = block;
      obj.method = method;
      obj.args   = args;

      return obj;
    ;
    }, TMP_1.$$arity = -2);

    Opal.defn(self, '$initialize', TMP_2 = function $$initialize($a_rest) {
      var $b, $c, self = this, $iter = TMP_2.$$p, block = $iter || nil;

      TMP_2.$$p = null;
      if (block !== false && block !== nil && block != null) {
        self.object = ($b = ($c = $scope.get('Generator')).$new, $b.$$p = block.$to_proc(), $b).call($c);
        self.method = "each";
        self.args = [];
        self.size = arguments[0] || nil;
        if ((($b = self.size) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          return self.size = $scope.get('Opal').$coerce_to(self.size, $scope.get('Integer'), "to_int")
          } else {
          return nil
        };
        } else {
        self.object = arguments[0];
        self.method = arguments[1] || "each";
        self.args = $slice.call(arguments, 2);
        return self.size = nil;
      };
    }, TMP_2.$$arity = -1);

    Opal.defn(self, '$each', TMP_3 = function $$each($a_rest) {
      var $b, $c, $d, self = this, args, $iter = TMP_3.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_3.$$p = null;
      if ((($b = ($c = block['$nil?'](), $c !== false && $c !== nil && $c != null ?args['$empty?']() : $c)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        return self};
      args = $rb_plus(self.args, args);
      if ((($b = block['$nil?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        return ($b = self.$class()).$new.apply($b, [self.object, self.method].concat(Opal.to_a(args)))};
      return ($c = ($d = self.object).$__send__, $c.$$p = block.$to_proc(), $c).apply($d, [self.method].concat(Opal.to_a(args)));
    }, TMP_3.$$arity = -1);

    Opal.defn(self, '$size', TMP_4 = function $$size() {
      var $a, self = this;

      if ((($a = $scope.get('Proc')['$==='](self.size)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($a = self.size).$call.apply($a, Opal.to_a(self.args))
        } else {
        return self.size
      };
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$with_index', TMP_5 = function $$with_index(offset) {
      var $a, $b, TMP_6, self = this, $iter = TMP_5.$$p, block = $iter || nil;

      if (offset == null) {
        offset = 0;
      }
      TMP_5.$$p = null;
      if (offset !== false && offset !== nil && offset != null) {
        offset = $scope.get('Opal').$coerce_to(offset, $scope.get('Integer'), "to_int")
        } else {
        offset = 0
      };
      if (block !== false && block !== nil && block != null) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

        return self.$size()}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($b, "with_index", offset)
      };
      
      var result, index = offset;

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments),
            value = block(param, index);

        index++;

        return value;
      }

      return self.$each();
    
    }, TMP_5.$$arity = -1);

    Opal.alias(self, 'with_object', 'each_with_object');

    Opal.defn(self, '$inspect', TMP_7 = function $$inspect() {
      var $a, self = this, result = nil;

      result = "#<" + (self.$class()) + ": " + (self.object.$inspect()) + ":" + (self.method);
      if ((($a = self.args['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        result = $rb_plus(result, "(" + (self.args.$inspect()['$[]']($scope.get('Range').$new(1, -2))) + ")")
      };
      return $rb_plus(result, ">");
    }, TMP_7.$$arity = 0);

    (function($base, $super) {
      function $Generator(){};
      var self = $Generator = $klass($base, $super, 'Generator', $Generator);

      var def = self.$$proto, $scope = self.$$scope, TMP_8, TMP_9;

      def.block = nil;
      self.$include($scope.get('Enumerable'));

      Opal.defn(self, '$initialize', TMP_8 = function $$initialize() {
        var self = this, $iter = TMP_8.$$p, block = $iter || nil;

        TMP_8.$$p = null;
        if (block !== false && block !== nil && block != null) {
          } else {
          self.$raise($scope.get('LocalJumpError'), "no block given")
        };
        return self.block = block;
      }, TMP_8.$$arity = 0);

      return (Opal.defn(self, '$each', TMP_9 = function $$each($a_rest) {
        var $b, $c, self = this, args, $iter = TMP_9.$$p, block = $iter || nil, yielder = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        TMP_9.$$p = null;
        yielder = ($b = ($c = $scope.get('Yielder')).$new, $b.$$p = block.$to_proc(), $b).call($c);
        
        try {
          args.unshift(yielder);

          Opal.yieldX(self.block, args);
        }
        catch (e) {
          if (e === $breaker) {
            return $breaker.$v;
          }
          else {
            throw e;
          }
        }
      ;
        return self;
      }, TMP_9.$$arity = -1), nil) && 'each';
    })($scope.base, null);

    (function($base, $super) {
      function $Yielder(){};
      var self = $Yielder = $klass($base, $super, 'Yielder', $Yielder);

      var def = self.$$proto, $scope = self.$$scope, TMP_10, TMP_11, TMP_12;

      def.block = nil;
      Opal.defn(self, '$initialize', TMP_10 = function $$initialize() {
        var self = this, $iter = TMP_10.$$p, block = $iter || nil;

        TMP_10.$$p = null;
        return self.block = block;
      }, TMP_10.$$arity = 0);

      Opal.defn(self, '$yield', TMP_11 = function($a_rest) {
        var self = this, values;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        values = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          values[$arg_idx - 0] = arguments[$arg_idx];
        }
        
        var value = Opal.yieldX(self.block, values);

        if (value === $breaker) {
          throw $breaker;
        }

        return value;
      ;
      }, TMP_11.$$arity = -1);

      return (Opal.defn(self, '$<<', TMP_12 = function($a_rest) {
        var $b, self = this, values;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        values = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          values[$arg_idx - 0] = arguments[$arg_idx];
        }
        ($b = self).$yield.apply($b, Opal.to_a(values));
        return self;
      }, TMP_12.$$arity = -1), nil) && '<<';
    })($scope.base, null);

    return (function($base, $super) {
      function $Lazy(){};
      var self = $Lazy = $klass($base, $super, 'Lazy', $Lazy);

      var def = self.$$proto, $scope = self.$$scope, TMP_13, TMP_16, TMP_17, TMP_19, TMP_24, TMP_25, TMP_27, TMP_28, TMP_30, TMP_33, TMP_36, TMP_37, TMP_39;

      def.enumerator = nil;
      (function($base, $super) {
        function $StopLazyError(){};
        var self = $StopLazyError = $klass($base, $super, 'StopLazyError', $StopLazyError);

        var def = self.$$proto, $scope = self.$$scope;

        return nil;
      })($scope.base, $scope.get('Exception'));

      Opal.defn(self, '$initialize', TMP_13 = function $$initialize(object, size) {
        var $a, $b, TMP_14, self = this, $iter = TMP_13.$$p, block = $iter || nil;

        if (size == null) {
          size = nil;
        }
        TMP_13.$$p = null;
        if ((block !== nil)) {
          } else {
          self.$raise($scope.get('ArgumentError'), "tried to call lazy new without a block")
        };
        self.enumerator = object;
        return ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_13, false)), $a.$$p = (TMP_14 = function(yielder, $c_rest){var self = TMP_14.$$s || this, each_args, $d, $e, TMP_15;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          each_args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            each_args[$arg_idx - 1] = arguments[$arg_idx];
          }if (yielder == null) yielder = nil;
        try {
            return ($d = ($e = object).$each, $d.$$p = (TMP_15 = function($c_rest){var self = TMP_15.$$s || this, args;

              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              args = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                args[$arg_idx - 0] = arguments[$arg_idx];
              }
            
              args.unshift(yielder);

              Opal.yieldX(block, args);
            ;}, TMP_15.$$s = self, TMP_15.$$arity = -1, TMP_15), $d).apply($e, Opal.to_a(each_args))
          } catch ($err) {
            if (Opal.rescue($err, [$scope.get('Exception')])) {
              try {
                return nil
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          }}, TMP_14.$$s = self, TMP_14.$$arity = -2, TMP_14), $a).call($b, size);
      }, TMP_13.$$arity = -2);

      Opal.alias(self, 'force', 'to_a');

      Opal.defn(self, '$lazy', TMP_16 = function $$lazy() {
        var self = this;

        return self;
      }, TMP_16.$$arity = 0);

      Opal.defn(self, '$collect', TMP_17 = function $$collect() {
        var $a, $b, TMP_18, self = this, $iter = TMP_17.$$p, block = $iter || nil;

        TMP_17.$$p = null;
        if (block !== false && block !== nil && block != null) {
          } else {
          self.$raise($scope.get('ArgumentError'), "tried to call lazy map without a block")
        };
        return ($a = ($b = $scope.get('Lazy')).$new, $a.$$p = (TMP_18 = function(enum$, $c_rest){var self = TMP_18.$$s || this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }if (enum$ == null) enum$ = nil;
        
          var value = Opal.yieldX(block, args);

          enum$.$yield(value);
        }, TMP_18.$$s = self, TMP_18.$$arity = -2, TMP_18), $a).call($b, self, self.$enumerator_size());
      }, TMP_17.$$arity = 0);

      Opal.defn(self, '$collect_concat', TMP_19 = function $$collect_concat() {
        var $a, $b, TMP_20, self = this, $iter = TMP_19.$$p, block = $iter || nil;

        TMP_19.$$p = null;
        if (block !== false && block !== nil && block != null) {
          } else {
          self.$raise($scope.get('ArgumentError'), "tried to call lazy map without a block")
        };
        return ($a = ($b = $scope.get('Lazy')).$new, $a.$$p = (TMP_20 = function(enum$, $c_rest){var self = TMP_20.$$s || this, args, $d, $e, TMP_21, $f, TMP_22;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }if (enum$ == null) enum$ = nil;
        
          var value = Opal.yieldX(block, args);

          if ((value)['$respond_to?']("force") && (value)['$respond_to?']("each")) {
            ($d = ($e = (value)).$each, $d.$$p = (TMP_21 = function(v){var self = TMP_21.$$s || this;
if (v == null) v = nil;
          return enum$.$yield(v)}, TMP_21.$$s = self, TMP_21.$$arity = 1, TMP_21), $d).call($e)
          }
          else {
            var array = $scope.get('Opal').$try_convert(value, $scope.get('Array'), "to_ary");

            if (array === nil) {
              enum$.$yield(value);
            }
            else {
              ($d = ($f = (value)).$each, $d.$$p = (TMP_22 = function(v){var self = TMP_22.$$s || this;
if (v == null) v = nil;
          return enum$.$yield(v)}, TMP_22.$$s = self, TMP_22.$$arity = 1, TMP_22), $d).call($f);
            }
          }
        ;}, TMP_20.$$s = self, TMP_20.$$arity = -2, TMP_20), $a).call($b, self, nil);
      }, TMP_19.$$arity = 0);

      Opal.defn(self, '$drop', TMP_24 = function $$drop(n) {
        var $a, $b, TMP_23, self = this, current_size = nil, set_size = nil, dropped = nil;

        n = $scope.get('Opal').$coerce_to(n, $scope.get('Integer'), "to_int");
        if ((($a = $rb_lt(n, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('ArgumentError'), "attempt to drop negative size")};
        current_size = self.$enumerator_size();
        set_size = (function() {if ((($a = $scope.get('Integer')['$==='](current_size)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $rb_lt(n, current_size)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return n
            } else {
            return current_size
          }
          } else {
          return current_size
        }; return nil; })();
        dropped = 0;
        return ($a = ($b = $scope.get('Lazy')).$new, $a.$$p = (TMP_23 = function(enum$, $c_rest){var self = TMP_23.$$s || this, args, $d;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }if (enum$ == null) enum$ = nil;
        if ((($d = $rb_lt(dropped, n)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
            return dropped = $rb_plus(dropped, 1)
            } else {
            return ($d = enum$).$yield.apply($d, Opal.to_a(args))
          }}, TMP_23.$$s = self, TMP_23.$$arity = -2, TMP_23), $a).call($b, self, set_size);
      }, TMP_24.$$arity = 1);

      Opal.defn(self, '$drop_while', TMP_25 = function $$drop_while() {
        var $a, $b, TMP_26, self = this, $iter = TMP_25.$$p, block = $iter || nil, succeeding = nil;

        TMP_25.$$p = null;
        if (block !== false && block !== nil && block != null) {
          } else {
          self.$raise($scope.get('ArgumentError'), "tried to call lazy drop_while without a block")
        };
        succeeding = true;
        return ($a = ($b = $scope.get('Lazy')).$new, $a.$$p = (TMP_26 = function(enum$, $c_rest){var self = TMP_26.$$s || this, args, $d, $e;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }if (enum$ == null) enum$ = nil;
        if (succeeding !== false && succeeding !== nil && succeeding != null) {
            
            var value = Opal.yieldX(block, args);

            if ((($d = value) === nil || $d == null || ($d.$$is_boolean && $d == false))) {
              succeeding = false;

              ($d = enum$).$yield.apply($d, Opal.to_a(args));
            }
          
            } else {
            return ($e = enum$).$yield.apply($e, Opal.to_a(args))
          }}, TMP_26.$$s = self, TMP_26.$$arity = -2, TMP_26), $a).call($b, self, nil);
      }, TMP_25.$$arity = 0);

      Opal.defn(self, '$enum_for', TMP_27 = function $$enum_for(method, $a_rest) {
        var $b, $c, self = this, args, $iter = TMP_27.$$p, block = $iter || nil;

        if (method == null) {
          method = "each";
        }
        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        TMP_27.$$p = null;
        return ($b = ($c = self.$class()).$for, $b.$$p = block.$to_proc(), $b).apply($c, [self, method].concat(Opal.to_a(args)));
      }, TMP_27.$$arity = -1);

      Opal.defn(self, '$find_all', TMP_28 = function $$find_all() {
        var $a, $b, TMP_29, self = this, $iter = TMP_28.$$p, block = $iter || nil;

        TMP_28.$$p = null;
        if (block !== false && block !== nil && block != null) {
          } else {
          self.$raise($scope.get('ArgumentError'), "tried to call lazy select without a block")
        };
        return ($a = ($b = $scope.get('Lazy')).$new, $a.$$p = (TMP_29 = function(enum$, $c_rest){var self = TMP_29.$$s || this, args, $d;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }if (enum$ == null) enum$ = nil;
        
          var value = Opal.yieldX(block, args);

          if ((($d = value) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
            ($d = enum$).$yield.apply($d, Opal.to_a(args));
          }
        ;}, TMP_29.$$s = self, TMP_29.$$arity = -2, TMP_29), $a).call($b, self, nil);
      }, TMP_28.$$arity = 0);

      Opal.alias(self, 'flat_map', 'collect_concat');

      Opal.defn(self, '$grep', TMP_30 = function $$grep(pattern) {
        var $a, $b, TMP_31, $c, TMP_32, self = this, $iter = TMP_30.$$p, block = $iter || nil;

        TMP_30.$$p = null;
        if (block !== false && block !== nil && block != null) {
          return ($a = ($b = $scope.get('Lazy')).$new, $a.$$p = (TMP_31 = function(enum$, $c_rest){var self = TMP_31.$$s || this, args, $d;

            var $args_len = arguments.length, $rest_len = $args_len - 1;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 1] = arguments[$arg_idx];
            }if (enum$ == null) enum$ = nil;
          
            var param = $scope.get('Opal').$destructure(args),
                value = pattern['$==='](param);

            if ((($d = value) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
              value = Opal.yield1(block, param);

              enum$.$yield(Opal.yield1(block, param));
            }
          ;}, TMP_31.$$s = self, TMP_31.$$arity = -2, TMP_31), $a).call($b, self, nil)
          } else {
          return ($a = ($c = $scope.get('Lazy')).$new, $a.$$p = (TMP_32 = function(enum$, $d_rest){var self = TMP_32.$$s || this, args, $e;

            var $args_len = arguments.length, $rest_len = $args_len - 1;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 1] = arguments[$arg_idx];
            }if (enum$ == null) enum$ = nil;
          
            var param = $scope.get('Opal').$destructure(args),
                value = pattern['$==='](param);

            if ((($e = value) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
              enum$.$yield(param);
            }
          ;}, TMP_32.$$s = self, TMP_32.$$arity = -2, TMP_32), $a).call($c, self, nil)
        };
      }, TMP_30.$$arity = 1);

      Opal.alias(self, 'map', 'collect');

      Opal.alias(self, 'select', 'find_all');

      Opal.defn(self, '$reject', TMP_33 = function $$reject() {
        var $a, $b, TMP_34, self = this, $iter = TMP_33.$$p, block = $iter || nil;

        TMP_33.$$p = null;
        if (block !== false && block !== nil && block != null) {
          } else {
          self.$raise($scope.get('ArgumentError'), "tried to call lazy reject without a block")
        };
        return ($a = ($b = $scope.get('Lazy')).$new, $a.$$p = (TMP_34 = function(enum$, $c_rest){var self = TMP_34.$$s || this, args, $d;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }if (enum$ == null) enum$ = nil;
        
          var value = Opal.yieldX(block, args);

          if ((($d = value) === nil || $d == null || ($d.$$is_boolean && $d == false))) {
            ($d = enum$).$yield.apply($d, Opal.to_a(args));
          }
        ;}, TMP_34.$$s = self, TMP_34.$$arity = -2, TMP_34), $a).call($b, self, nil);
      }, TMP_33.$$arity = 0);

      Opal.defn(self, '$take', TMP_36 = function $$take(n) {
        var $a, $b, TMP_35, self = this, current_size = nil, set_size = nil, taken = nil;

        n = $scope.get('Opal').$coerce_to(n, $scope.get('Integer'), "to_int");
        if ((($a = $rb_lt(n, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('ArgumentError'), "attempt to take negative size")};
        current_size = self.$enumerator_size();
        set_size = (function() {if ((($a = $scope.get('Integer')['$==='](current_size)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $rb_lt(n, current_size)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return n
            } else {
            return current_size
          }
          } else {
          return current_size
        }; return nil; })();
        taken = 0;
        return ($a = ($b = $scope.get('Lazy')).$new, $a.$$p = (TMP_35 = function(enum$, $c_rest){var self = TMP_35.$$s || this, args, $d;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }if (enum$ == null) enum$ = nil;
        if ((($d = $rb_lt(taken, n)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
            ($d = enum$).$yield.apply($d, Opal.to_a(args));
            return taken = $rb_plus(taken, 1);
            } else {
            return self.$raise($scope.get('StopLazyError'))
          }}, TMP_35.$$s = self, TMP_35.$$arity = -2, TMP_35), $a).call($b, self, set_size);
      }, TMP_36.$$arity = 1);

      Opal.defn(self, '$take_while', TMP_37 = function $$take_while() {
        var $a, $b, TMP_38, self = this, $iter = TMP_37.$$p, block = $iter || nil;

        TMP_37.$$p = null;
        if (block !== false && block !== nil && block != null) {
          } else {
          self.$raise($scope.get('ArgumentError'), "tried to call lazy take_while without a block")
        };
        return ($a = ($b = $scope.get('Lazy')).$new, $a.$$p = (TMP_38 = function(enum$, $c_rest){var self = TMP_38.$$s || this, args, $d;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }if (enum$ == null) enum$ = nil;
        
          var value = Opal.yieldX(block, args);

          if ((($d = value) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
            ($d = enum$).$yield.apply($d, Opal.to_a(args));
          }
          else {
            self.$raise($scope.get('StopLazyError'));
          }
        ;}, TMP_38.$$s = self, TMP_38.$$arity = -2, TMP_38), $a).call($b, self, nil);
      }, TMP_37.$$arity = 0);

      Opal.alias(self, 'to_enum', 'enum_for');

      return (Opal.defn(self, '$inspect', TMP_39 = function $$inspect() {
        var self = this;

        return "#<" + (self.$class()) + ": " + (self.enumerator.$inspect()) + ">";
      }, TMP_39.$$arity = 0), nil) && 'inspect';
    })($scope.base, self);
  })($scope.base, null);
};
/* Generated by Opal 0.10.3 */
Opal.modules["corelib/numeric"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$include', '$instance_of?', '$class', '$Float', '$coerce', '$===', '$raise', '$__send__', '$equal?', '$coerce_to!', '$-@', '$**', '$-', '$*', '$div', '$<', '$ceil', '$to_f', '$denominator', '$to_r', '$==', '$floor', '$/', '$%', '$Complex', '$zero?', '$numerator', '$abs', '$arg', '$round', '$to_i', '$truncate', '$>']);
  self.$require("corelib/comparable");
  return (function($base, $super) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30, TMP_31, TMP_32, TMP_33, TMP_34, TMP_35, TMP_36;

    self.$include($scope.get('Comparable'));

    Opal.defn(self, '$coerce', TMP_1 = function $$coerce(other) {
      var $a, self = this;

      if ((($a = other['$instance_of?'](self.$class())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return [other, self]};
      return [self.$Float(other), self.$Float(self)];
    }, TMP_1.$$arity = 1);

    Opal.defn(self, '$__coerced__', TMP_2 = function $$__coerced__(method, other) {
      var $a, $b, self = this, a = nil, b = nil, $case = nil;

      try {
        $b = other.$coerce(self), $a = Opal.to_ary($b), a = ($a[0] == null ? nil : $a[0]), b = ($a[1] == null ? nil : $a[1]), $b
      } catch ($err) {
        if (Opal.rescue($err, [$scope.get('StandardError')])) {
          try {
            $case = method;if ("+"['$===']($case) || "-"['$===']($case) || "*"['$===']($case) || "/"['$===']($case) || "%"['$===']($case) || "&"['$===']($case) || "|"['$===']($case) || "^"['$===']($case) || "**"['$===']($case)) {self.$raise($scope.get('TypeError'), "" + (other.$class()) + " can't be coerce into Numeric")}else if (">"['$===']($case) || ">="['$===']($case) || "<"['$===']($case) || "<="['$===']($case) || "<=>"['$===']($case)) {self.$raise($scope.get('ArgumentError'), "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")}
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };
      return a.$__send__(method, b);
    }, TMP_2.$$arity = 2);

    Opal.defn(self, '$<=>', TMP_3 = function(other) {
      var $a, self = this;

      if ((($a = self['$equal?'](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return 0};
      return nil;
    }, TMP_3.$$arity = 1);

    Opal.defn(self, '$[]', TMP_4 = function(bit) {
      var self = this, min = nil, max = nil;

      bit = $scope.get('Opal')['$coerce_to!'](bit, $scope.get('Integer'), "to_int");
      min = ((2)['$**'](30))['$-@']();
      max = $rb_minus(((2)['$**'](30)), 1);
      return (bit < min || bit > max) ? 0 : (self >> bit) % 2;
    }, TMP_4.$$arity = 1);

    Opal.defn(self, '$+@', TMP_5 = function() {
      var self = this;

      return self;
    }, TMP_5.$$arity = 0);

    Opal.defn(self, '$-@', TMP_6 = function() {
      var self = this;

      return $rb_minus(0, self);
    }, TMP_6.$$arity = 0);

    Opal.defn(self, '$%', TMP_7 = function(other) {
      var self = this;

      return $rb_minus(self, $rb_times(other, self.$div(other)));
    }, TMP_7.$$arity = 1);

    Opal.defn(self, '$abs', TMP_8 = function $$abs() {
      var self = this;

      if ($rb_lt(self, 0)) {
        return self['$-@']()
        } else {
        return self
      };
    }, TMP_8.$$arity = 0);

    Opal.defn(self, '$abs2', TMP_9 = function $$abs2() {
      var self = this;

      return $rb_times(self, self);
    }, TMP_9.$$arity = 0);

    Opal.defn(self, '$angle', TMP_10 = function $$angle() {
      var self = this;

      if ($rb_lt(self, 0)) {
        return (($scope.get('Math')).$$scope.get('PI'))
        } else {
        return 0
      };
    }, TMP_10.$$arity = 0);

    Opal.alias(self, 'arg', 'angle');

    Opal.defn(self, '$ceil', TMP_11 = function $$ceil() {
      var self = this;

      return self.$to_f().$ceil();
    }, TMP_11.$$arity = 0);

    Opal.defn(self, '$conj', TMP_12 = function $$conj() {
      var self = this;

      return self;
    }, TMP_12.$$arity = 0);

    Opal.alias(self, 'conjugate', 'conj');

    Opal.defn(self, '$denominator', TMP_13 = function $$denominator() {
      var self = this;

      return self.$to_r().$denominator();
    }, TMP_13.$$arity = 0);

    Opal.defn(self, '$div', TMP_14 = function $$div(other) {
      var self = this;

      if (other['$=='](0)) {
        self.$raise($scope.get('ZeroDivisionError'), "divided by o")};
      return ($rb_divide(self, other)).$floor();
    }, TMP_14.$$arity = 1);

    Opal.defn(self, '$divmod', TMP_15 = function $$divmod(other) {
      var self = this;

      return [self.$div(other), self['$%'](other)];
    }, TMP_15.$$arity = 1);

    Opal.defn(self, '$fdiv', TMP_16 = function $$fdiv(other) {
      var self = this;

      return $rb_divide(self.$to_f(), other);
    }, TMP_16.$$arity = 1);

    Opal.defn(self, '$floor', TMP_17 = function $$floor() {
      var self = this;

      return self.$to_f().$floor();
    }, TMP_17.$$arity = 0);

    Opal.defn(self, '$i', TMP_18 = function $$i() {
      var self = this;

      return self.$Complex(0, self);
    }, TMP_18.$$arity = 0);

    Opal.defn(self, '$imag', TMP_19 = function $$imag() {
      var self = this;

      return 0;
    }, TMP_19.$$arity = 0);

    Opal.alias(self, 'imaginary', 'imag');

    Opal.defn(self, '$integer?', TMP_20 = function() {
      var self = this;

      return false;
    }, TMP_20.$$arity = 0);

    Opal.alias(self, 'magnitude', 'abs');

    Opal.alias(self, 'modulo', '%');

    Opal.defn(self, '$nonzero?', TMP_21 = function() {
      var $a, self = this;

      if ((($a = self['$zero?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return nil
        } else {
        return self
      };
    }, TMP_21.$$arity = 0);

    Opal.defn(self, '$numerator', TMP_22 = function $$numerator() {
      var self = this;

      return self.$to_r().$numerator();
    }, TMP_22.$$arity = 0);

    Opal.alias(self, 'phase', 'arg');

    Opal.defn(self, '$polar', TMP_23 = function $$polar() {
      var self = this;

      return [self.$abs(), self.$arg()];
    }, TMP_23.$$arity = 0);

    Opal.defn(self, '$quo', TMP_24 = function $$quo(other) {
      var self = this;

      return $rb_divide($scope.get('Opal')['$coerce_to!'](self, $scope.get('Rational'), "to_r"), other);
    }, TMP_24.$$arity = 1);

    Opal.defn(self, '$real', TMP_25 = function $$real() {
      var self = this;

      return self;
    }, TMP_25.$$arity = 0);

    Opal.defn(self, '$real?', TMP_26 = function() {
      var self = this;

      return true;
    }, TMP_26.$$arity = 0);

    Opal.defn(self, '$rect', TMP_27 = function $$rect() {
      var self = this;

      return [self, 0];
    }, TMP_27.$$arity = 0);

    Opal.alias(self, 'rectangular', 'rect');

    Opal.defn(self, '$round', TMP_28 = function $$round(digits) {
      var self = this;

      return self.$to_f().$round(digits);
    }, TMP_28.$$arity = -1);

    Opal.defn(self, '$to_c', TMP_29 = function $$to_c() {
      var self = this;

      return self.$Complex(self, 0);
    }, TMP_29.$$arity = 0);

    Opal.defn(self, '$to_int', TMP_30 = function $$to_int() {
      var self = this;

      return self.$to_i();
    }, TMP_30.$$arity = 0);

    Opal.defn(self, '$truncate', TMP_31 = function $$truncate() {
      var self = this;

      return self.$to_f().$truncate();
    }, TMP_31.$$arity = 0);

    Opal.defn(self, '$zero?', TMP_32 = function() {
      var self = this;

      return self['$=='](0);
    }, TMP_32.$$arity = 0);

    Opal.defn(self, '$positive?', TMP_33 = function() {
      var self = this;

      return $rb_gt(self, 0);
    }, TMP_33.$$arity = 0);

    Opal.defn(self, '$negative?', TMP_34 = function() {
      var self = this;

      return $rb_lt(self, 0);
    }, TMP_34.$$arity = 0);

    Opal.defn(self, '$dup', TMP_35 = function $$dup() {
      var self = this;

      return self.$raise($scope.get('TypeError'), "can't dup " + (self.$class()));
    }, TMP_35.$$arity = 0);

    return (Opal.defn(self, '$clone', TMP_36 = function $$clone() {
      var self = this;

      return self.$raise($scope.get('TypeError'), "can't clone " + (self.$class()));
    }, TMP_36.$$arity = 0), nil) && 'clone';
  })($scope.base, null);
};
/* Generated by Opal 0.10.3 */
Opal.modules["corelib/array"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$include', '$to_a', '$raise', '$===', '$replace', '$respond_to?', '$to_ary', '$coerce_to', '$coerce_to?', '$join', '$to_str', '$class', '$clone', '$hash', '$<=>', '$==', '$object_id', '$inspect', '$enum_for', '$coerce_to!', '$>', '$*', '$enumerator_size', '$empty?', '$size', '$eql?', '$length', '$begin', '$end', '$exclude_end?', '$flatten', '$__id__', '$[]', '$to_s', '$new', '$!', '$>=', '$**', '$delete_if', '$to_proc', '$each', '$reverse', '$rotate', '$rand', '$at', '$keep_if', '$shuffle!', '$dup', '$<', '$sort', '$sort_by', '$!=', '$times', '$[]=', '$<<', '$values', '$kind_of?', '$last', '$first', '$upto', '$reject', '$pristine']);
  self.$require("corelib/enumerable");
  self.$require("corelib/numeric");
  return (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_19, TMP_20, TMP_21, TMP_22, TMP_24, TMP_26, TMP_28, TMP_30, TMP_31, TMP_32, TMP_33, TMP_34, TMP_35, TMP_37, TMP_38, TMP_39, TMP_41, TMP_43, TMP_44, TMP_45, TMP_46, TMP_47, TMP_48, TMP_49, TMP_50, TMP_51, TMP_52, TMP_53, TMP_54, TMP_55, TMP_56, TMP_58, TMP_59, TMP_60, TMP_62, TMP_64, TMP_65, TMP_66, TMP_67, TMP_68, TMP_70, TMP_72, TMP_73, TMP_74, TMP_75, TMP_77, TMP_78, TMP_79, TMP_82, TMP_83, TMP_85, TMP_87, TMP_88, TMP_89, TMP_90, TMP_91, TMP_92, TMP_93, TMP_95, TMP_96, TMP_97, TMP_98, TMP_101, TMP_102, TMP_103, TMP_104, TMP_107, TMP_108, TMP_109, TMP_111;

    def.length = nil;
    self.$include($scope.get('Enumerable'));

    def.$$is_array = true;

    
    function toArraySubclass(obj, klass) {
      if (klass.$$name === Opal.Array) {
        return obj;
      } else {
        return klass.$allocate().$replace((obj).$to_a());
      }
    }
  

    Opal.defs(self, '$[]', TMP_1 = function($a_rest) {
      var self = this, objects;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      objects = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        objects[$arg_idx - 0] = arguments[$arg_idx];
      }
      return toArraySubclass(objects, self);
    }, TMP_1.$$arity = -1);

    Opal.defn(self, '$initialize', TMP_2 = function $$initialize(size, obj) {
      var $a, self = this, $iter = TMP_2.$$p, block = $iter || nil;

      if (size == null) {
        size = nil;
      }
      if (obj == null) {
        obj = nil;
      }
      TMP_2.$$p = null;
      if ((($a = arguments.length > 2) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "wrong number of arguments (" + (arguments.length) + " for 0..2)")};
      
      if (arguments.length === 0) {
        self.splice(0, self.length);
        return self;
      }
    
      if ((($a = arguments.length === 1) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = $scope.get('Array')['$==='](size)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$replace(size.$to_a());
          return self;
        } else if ((($a = size['$respond_to?']("to_ary")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$replace(size.$to_ary());
          return self;}};
      size = $scope.get('Opal').$coerce_to(size, $scope.get('Integer'), "to_int");
      if ((($a = size < 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "negative array size")};
      
      self.splice(0, self.length);
      var i, value;

      if (block === nil) {
        for (i = 0; i < size; i++) {
          self.push(obj);
        }
      }
      else {
        for (i = 0, value; i < size; i++) {
          value = block(i);
          self[i] = value;
        }
      }

      return self;
    
    }, TMP_2.$$arity = -1);

    Opal.defs(self, '$try_convert', TMP_3 = function $$try_convert(obj) {
      var self = this;

      return $scope.get('Opal')['$coerce_to?'](obj, $scope.get('Array'), "to_ary");
    }, TMP_3.$$arity = 1);

    Opal.defn(self, '$&', TMP_4 = function(other) {
      var $a, self = this;

      if ((($a = $scope.get('Array')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        other = other.$to_a()
        } else {
        other = $scope.get('Opal').$coerce_to(other, $scope.get('Array'), "to_ary").$to_a()
      };
      
      var result = [], hash = $hash2([], {}), i, length, item;

      for (i = 0, length = other.length; i < length; i++) {
        Opal.hash_put(hash, other[i], true);
      }

      for (i = 0, length = self.length; i < length; i++) {
        item = self[i];
        if (Opal.hash_delete(hash, item) !== undefined) {
          result.push(item);
        }
      }

      return result;
    ;
    }, TMP_4.$$arity = 1);

    Opal.defn(self, '$|', TMP_5 = function(other) {
      var $a, self = this;

      if ((($a = $scope.get('Array')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        other = other.$to_a()
        } else {
        other = $scope.get('Opal').$coerce_to(other, $scope.get('Array'), "to_ary").$to_a()
      };
      
      var hash = $hash2([], {}), i, length, item;

      for (i = 0, length = self.length; i < length; i++) {
        Opal.hash_put(hash, self[i], true);
      }

      for (i = 0, length = other.length; i < length; i++) {
        Opal.hash_put(hash, other[i], true);
      }

      return hash.$keys();
    ;
    }, TMP_5.$$arity = 1);

    Opal.defn(self, '$*', TMP_6 = function(other) {
      var $a, self = this;

      if ((($a = other['$respond_to?']("to_str")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$join(other.$to_str())};
      other = $scope.get('Opal').$coerce_to(other, $scope.get('Integer'), "to_int");
      if ((($a = other < 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "negative argument")};
      
      var result = [],
          converted = self.$to_a();

      for (var i = 0; i < other; i++) {
        result = result.concat(converted);
      }

      return toArraySubclass(result, self.$class());
    ;
    }, TMP_6.$$arity = 1);

    Opal.defn(self, '$+', TMP_7 = function(other) {
      var $a, self = this;

      if ((($a = $scope.get('Array')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        other = other.$to_a()
        } else {
        other = $scope.get('Opal').$coerce_to(other, $scope.get('Array'), "to_ary").$to_a()
      };
      return self.concat(other);
    }, TMP_7.$$arity = 1);

    Opal.defn(self, '$-', TMP_8 = function(other) {
      var $a, self = this;

      if ((($a = $scope.get('Array')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        other = other.$to_a()
        } else {
        other = $scope.get('Opal').$coerce_to(other, $scope.get('Array'), "to_ary").$to_a()
      };
      if ((($a = self.length === 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return []};
      if ((($a = other.length === 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$clone().$to_a()};
      
      var result = [], hash = $hash2([], {}), i, length, item;

      for (i = 0, length = other.length; i < length; i++) {
        Opal.hash_put(hash, other[i], true);
      }

      for (i = 0, length = self.length; i < length; i++) {
        item = self[i];
        if (Opal.hash_get(hash, item) === undefined) {
          result.push(item);
        }
      }

      return result;
    ;
    }, TMP_8.$$arity = 1);

    Opal.defn(self, '$<<', TMP_9 = function(object) {
      var self = this;

      self.push(object);
      return self;
    }, TMP_9.$$arity = 1);

    Opal.defn(self, '$<=>', TMP_10 = function(other) {
      var $a, self = this;

      if ((($a = $scope.get('Array')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        other = other.$to_a()
      } else if ((($a = other['$respond_to?']("to_ary")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        other = other.$to_ary().$to_a()
        } else {
        return nil
      };
      
      if (self.$hash() === other.$hash()) {
        return 0;
      }

      var count = Math.min(self.length, other.length);

      for (var i = 0; i < count; i++) {
        var tmp = (self[i])['$<=>'](other[i]);

        if (tmp !== 0) {
          return tmp;
        }
      }

      return (self.length)['$<=>'](other.length);
    ;
    }, TMP_10.$$arity = 1);

    Opal.defn(self, '$==', TMP_11 = function(other) {
      var self = this;

      
      var recursed = {};

      function _eqeq(array, other) {
        var i, length, a, b;

        if (array === other)
          return true;

        if (!other.$$is_array) {
          if ($scope.get('Opal')['$respond_to?'](other, "to_ary")) {
            return (other)['$=='](array);
          } else {
            return false;
          }
        }

        if (array.constructor !== Array)
          array = (array).$to_a();
        if (other.constructor !== Array)
          other = (other).$to_a();

        if (array.length !== other.length) {
          return false;
        }

        recursed[(array).$object_id()] = true;

        for (i = 0, length = array.length; i < length; i++) {
          a = array[i];
          b = other[i];
          if (a.$$is_array) {
            if (b.$$is_array && b.length !== a.length) {
              return false;
            }
            if (!recursed.hasOwnProperty((a).$object_id())) {
              if (!_eqeq(a, b)) {
                return false;
              }
            }
          } else {
            if (!(a)['$=='](b)) {
              return false;
            }
          }
        }

        return true;
      }

      return _eqeq(self, other);
    ;
    }, TMP_11.$$arity = 1);

    Opal.defn(self, '$[]', TMP_12 = function(index, length) {
      var self = this;

      
      var size = self.length,
          exclude, from, to, result;

      if (index.$$is_range) {
        exclude = index.exclude;
        from    = $scope.get('Opal').$coerce_to(index.begin, $scope.get('Integer'), "to_int");
        to      = $scope.get('Opal').$coerce_to(index.end, $scope.get('Integer'), "to_int");

        if (from < 0) {
          from += size;

          if (from < 0) {
            return nil;
          }
        }

        if (from > size) {
          return nil;
        }

        if (to < 0) {
          to += size;

          if (to < 0) {
            return [];
          }
        }

        if (!exclude) {
          to += 1;
        }

        result = self.slice(from, to)
      }
      else {
        index = $scope.get('Opal').$coerce_to(index, $scope.get('Integer'), "to_int");

        if (index < 0) {
          index += size;

          if (index < 0) {
            return nil;
          }
        }

        if (length === undefined) {
          if (index >= size || index < 0) {
            return nil;
          }

          return self[index];
        }
        else {
          length = $scope.get('Opal').$coerce_to(length, $scope.get('Integer'), "to_int");

          if (length < 0 || index > size || index < 0) {
            return nil;
          }

          result = self.slice(index, index + length);
        }
      }

      return toArraySubclass(result, self.$class())
    ;
    }, TMP_12.$$arity = -2);

    Opal.defn(self, '$[]=', TMP_13 = function(index, value, extra) {
      var $a, self = this, data = nil, length = nil;

      
      var i, size = self.length;
    
      if ((($a = $scope.get('Range')['$==='](index)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = $scope.get('Array')['$==='](value)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          data = value.$to_a()
        } else if ((($a = value['$respond_to?']("to_ary")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          data = value.$to_ary().$to_a()
          } else {
          data = [value]
        };
        
        var exclude = index.exclude,
            from    = $scope.get('Opal').$coerce_to(index.begin, $scope.get('Integer'), "to_int"),
            to      = $scope.get('Opal').$coerce_to(index.end, $scope.get('Integer'), "to_int");

        if (from < 0) {
          from += size;

          if (from < 0) {
            self.$raise($scope.get('RangeError'), "" + (index.$inspect()) + " out of range");
          }
        }

        if (to < 0) {
          to += size;
        }

        if (!exclude) {
          to += 1;
        }

        if (from > size) {
          for (i = size; i < from; i++) {
            self[i] = nil;
          }
        }

        if (to < 0) {
          self.splice.apply(self, [from, 0].concat(data));
        }
        else {
          self.splice.apply(self, [from, to - from].concat(data));
        }

        return value;
      ;
        } else {
        if ((($a = extra === undefined) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          length = 1
          } else {
          length = value;
          value = extra;
          if ((($a = $scope.get('Array')['$==='](value)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            data = value.$to_a()
          } else if ((($a = value['$respond_to?']("to_ary")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            data = value.$to_ary().$to_a()
            } else {
            data = [value]
          };
        };
        
        var old;

        index  = $scope.get('Opal').$coerce_to(index, $scope.get('Integer'), "to_int");
        length = $scope.get('Opal').$coerce_to(length, $scope.get('Integer'), "to_int");

        if (index < 0) {
          old    = index;
          index += size;

          if (index < 0) {
            self.$raise($scope.get('IndexError'), "index " + (old) + " too small for array; minimum " + (-self.length));
          }
        }

        if (length < 0) {
          self.$raise($scope.get('IndexError'), "negative length (" + (length) + ")")
        }

        if (index > size) {
          for (i = size; i < index; i++) {
            self[i] = nil;
          }
        }

        if (extra === undefined) {
          self[index] = value;
        }
        else {
          self.splice.apply(self, [index, length].concat(data));
        }

        return value;
      
      };
    }, TMP_13.$$arity = -3);

    Opal.defn(self, '$assoc', TMP_14 = function $$assoc(object) {
      var self = this;

      
      for (var i = 0, length = self.length, item; i < length; i++) {
        if (item = self[i], item.length && (item[0])['$=='](object)) {
          return item;
        }
      }

      return nil;
    
    }, TMP_14.$$arity = 1);

    Opal.defn(self, '$at', TMP_15 = function $$at(index) {
      var self = this;

      index = $scope.get('Opal').$coerce_to(index, $scope.get('Integer'), "to_int");
      
      if (index < 0) {
        index += self.length;
      }

      if (index < 0 || index >= self.length) {
        return nil;
      }

      return self[index];
    
    }, TMP_15.$$arity = 1);

    Opal.defn(self, '$bsearch', TMP_16 = function $$bsearch() {
      var self = this, $iter = TMP_16.$$p, block = $iter || nil;

      TMP_16.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("bsearch")
      };
      
      var min = 0,
          max = self.length,
          mid,
          val,
          ret,
          smaller = false,
          satisfied = nil;

      while (min < max) {
        mid = min + Math.floor((max - min) / 2);
        val = self[mid];
        ret = block(val);

        if (ret === true) {
          satisfied = val;
          smaller = true;
        }
        else if (ret === false || ret === nil) {
          smaller = false;
        }
        else if (ret.$$is_number) {
          if (ret === 0) { return val; }
          smaller = (ret < 0);
        }
        else {
          self.$raise($scope.get('TypeError'), "wrong argument type " + ((ret).$class()) + " (must be numeric, true, false or nil)")
        }

        if (smaller) { max = mid; } else { min = mid + 1; }
      }

      return satisfied;
    
    }, TMP_16.$$arity = 0);

    Opal.defn(self, '$cycle', TMP_17 = function $$cycle(n) {
      var $a, $b, TMP_18, $c, self = this, $iter = TMP_17.$$p, block = $iter || nil;

      if (n == null) {
        n = nil;
      }
      TMP_17.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_18 = function(){var self = TMP_18.$$s || this, $c;

        if (n['$=='](nil)) {
            return (($scope.get('Float')).$$scope.get('INFINITY'))
            } else {
            n = $scope.get('Opal')['$coerce_to!'](n, $scope.get('Integer'), "to_int");
            if ((($c = $rb_gt(n, 0)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return $rb_times(self.$enumerator_size(), n)
              } else {
              return 0
            };
          }}, TMP_18.$$s = self, TMP_18.$$arity = 0, TMP_18), $a).call($b, "cycle", n)
      };
      if ((($a = ((($c = self['$empty?']()) !== false && $c !== nil && $c != null) ? $c : n['$=='](0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return nil};
      
      var i, length, value;

      if (n === nil) {
        while (true) {
          for (i = 0, length = self.length; i < length; i++) {
            value = Opal.yield1(block, self[i]);
          }
        }
      }
      else {
        n = $scope.get('Opal')['$coerce_to!'](n, $scope.get('Integer'), "to_int");
        if (n <= 0) {
          return self;
        }

        while (n > 0) {
          for (i = 0, length = self.length; i < length; i++) {
            value = Opal.yield1(block, self[i]);
          }

          n--;
        }
      }
    
      return self;
    }, TMP_17.$$arity = -1);

    Opal.defn(self, '$clear', TMP_19 = function $$clear() {
      var self = this;

      self.splice(0, self.length);
      return self;
    }, TMP_19.$$arity = 0);

    Opal.defn(self, '$count', TMP_20 = function $$count(object) {
      var $a, $b, self = this, $iter = TMP_20.$$p, block = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      if (object == null) {
        object = nil;
      }
      TMP_20.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      if ((($a = ((($b = object) !== false && $b !== nil && $b != null) ? $b : block)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = self, Opal.find_super_dispatcher(self, 'count', TMP_20, false)), $a.$$p = $iter, $a).apply($b, $zuper)
        } else {
        return self.$size()
      };
    }, TMP_20.$$arity = -1);

    Opal.defn(self, '$initialize_copy', TMP_21 = function $$initialize_copy(other) {
      var self = this;

      return self.$replace(other);
    }, TMP_21.$$arity = 1);

    Opal.defn(self, '$collect', TMP_22 = function $$collect() {
      var $a, $b, TMP_23, self = this, $iter = TMP_22.$$p, block = $iter || nil;

      TMP_22.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_23 = function(){var self = TMP_23.$$s || this;

        return self.$size()}, TMP_23.$$s = self, TMP_23.$$arity = 0, TMP_23), $a).call($b, "collect")
      };
      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        var value = Opal.yield1(block, self[i]);
        result.push(value);
      }

      return result;
    
    }, TMP_22.$$arity = 0);

    Opal.defn(self, '$collect!', TMP_24 = function() {
      var $a, $b, TMP_25, self = this, $iter = TMP_24.$$p, block = $iter || nil;

      TMP_24.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_25 = function(){var self = TMP_25.$$s || this;

        return self.$size()}, TMP_25.$$s = self, TMP_25.$$arity = 0, TMP_25), $a).call($b, "collect!")
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        var value = Opal.yield1(block, self[i]);
        self[i] = value;
      }
    
      return self;
    }, TMP_24.$$arity = 0);

    
    function binomial_coefficient(n, k) {
      if (n === k || k === 0) {
        return 1;
      }

      if (k > 0 && n > k) {
        return binomial_coefficient(n - 1, k - 1) + binomial_coefficient(n - 1, k);
      }

      return 0;
    }
  

    Opal.defn(self, '$combination', TMP_26 = function $$combination(n) {
      var $a, $b, TMP_27, self = this, $iter = TMP_26.$$p, $yield = $iter || nil, num = nil;

      TMP_26.$$p = null;
      num = $scope.get('Opal')['$coerce_to!'](n, $scope.get('Integer'), "to_int");
      if (($yield !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_27 = function(){var self = TMP_27.$$s || this;

        return binomial_coefficient(self.length, num);}, TMP_27.$$s = self, TMP_27.$$arity = 0, TMP_27), $a).call($b, "combination", num)
      };
      
      var i, length, stack, chosen, lev, done, next;

      if (num === 0) {
        Opal.yield1($yield, [])
      } else if (num === 1) {
        for (i = 0, length = self.length; i < length; i++) {
          Opal.yield1($yield, [self[i]])
        }
      }
      else if (num === self.length) {
        Opal.yield1($yield, self.slice())
      }
      else if (num >= 0 && num < self.length) {
        stack = [];
        for (i = 0; i <= num + 1; i++) {
          stack.push(0);
        }

        chosen = [];
        lev = 0;
        done = false;
        stack[0] = -1;

        while (!done) {
          chosen[lev] = self[stack[lev+1]];
          while (lev < num - 1) {
            lev++;
            next = stack[lev+1] = stack[lev] + 1;
            chosen[lev] = self[next];
          }
          Opal.yield1($yield, chosen.slice())
          lev++;
          do {
            done = (lev === 0);
            stack[lev]++;
            lev--;
          } while ( stack[lev+1] + num === self.length + lev + 1 );
        }
      }
    ;
      return self;
    }, TMP_26.$$arity = 1);

    Opal.defn(self, '$repeated_combination', TMP_28 = function $$repeated_combination(n) {
      var $a, $b, TMP_29, self = this, $iter = TMP_28.$$p, $yield = $iter || nil, num = nil;

      TMP_28.$$p = null;
      num = $scope.get('Opal')['$coerce_to!'](n, $scope.get('Integer'), "to_int");
      if (($yield !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_29 = function(){var self = TMP_29.$$s || this;

        return binomial_coefficient(self.length + num - 1, num);}, TMP_29.$$s = self, TMP_29.$$arity = 0, TMP_29), $a).call($b, "repeated_combination", num)
      };
      
      function iterate(max, from, buffer, self) {
        if (buffer.length == max) {
          var copy = buffer.slice();
          Opal.yield1($yield, copy)
          return;
        }
        for (var i = from; i < self.length; i++) {
          buffer.push(self[i]);
          iterate(max, i, buffer, self);
          buffer.pop();
        }
      }

      if (num >= 0) {
        iterate(num, 0, [], self);
      }
    
      return self;
    }, TMP_28.$$arity = 1);

    Opal.defn(self, '$compact', TMP_30 = function $$compact() {
      var self = this;

      
      var result = [];

      for (var i = 0, length = self.length, item; i < length; i++) {
        if ((item = self[i]) !== nil) {
          result.push(item);
        }
      }

      return result;
    
    }, TMP_30.$$arity = 0);

    Opal.defn(self, '$compact!', TMP_31 = function() {
      var self = this;

      
      var original = self.length;

      for (var i = 0, length = self.length; i < length; i++) {
        if (self[i] === nil) {
          self.splice(i, 1);

          length--;
          i--;
        }
      }

      return self.length === original ? nil : self;
    
    }, TMP_31.$$arity = 0);

    Opal.defn(self, '$concat', TMP_32 = function $$concat(other) {
      var $a, self = this;

      if ((($a = $scope.get('Array')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        other = other.$to_a()
        } else {
        other = $scope.get('Opal').$coerce_to(other, $scope.get('Array'), "to_ary").$to_a()
      };
      
      for (var i = 0, length = other.length; i < length; i++) {
        self.push(other[i]);
      }
    
      return self;
    }, TMP_32.$$arity = 1);

    Opal.defn(self, '$delete', TMP_33 = function(object) {
      var self = this, $iter = TMP_33.$$p, $yield = $iter || nil;

      TMP_33.$$p = null;
      
      var original = self.length;

      for (var i = 0, length = original; i < length; i++) {
        if ((self[i])['$=='](object)) {
          self.splice(i, 1);

          length--;
          i--;
        }
      }

      if (self.length === original) {
        if (($yield !== nil)) {
          return Opal.yieldX($yield, []);
        }
        return nil;
      }
      return object;
    ;
    }, TMP_33.$$arity = 1);

    Opal.defn(self, '$delete_at', TMP_34 = function $$delete_at(index) {
      var self = this;

      
      index = $scope.get('Opal').$coerce_to(index, $scope.get('Integer'), "to_int");

      if (index < 0) {
        index += self.length;
      }

      if (index < 0 || index >= self.length) {
        return nil;
      }

      var result = self[index];

      self.splice(index, 1);

      return result;
    ;
    }, TMP_34.$$arity = 1);

    Opal.defn(self, '$delete_if', TMP_35 = function $$delete_if() {
      var $a, $b, TMP_36, self = this, $iter = TMP_35.$$p, block = $iter || nil;

      TMP_35.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_36 = function(){var self = TMP_36.$$s || this;

        return self.$size()}, TMP_36.$$s = self, TMP_36.$$arity = 0, TMP_36), $a).call($b, "delete_if")
      };
      
      for (var i = 0, length = self.length, value; i < length; i++) {
        value = block(self[i]);

        if (value !== false && value !== nil) {
          self.splice(i, 1);

          length--;
          i--;
        }
      }
    
      return self;
    }, TMP_35.$$arity = 0);

    Opal.defn(self, '$drop', TMP_37 = function $$drop(number) {
      var self = this;

      
      if (number < 0) {
        self.$raise($scope.get('ArgumentError'))
      }

      return self.slice(number);
    ;
    }, TMP_37.$$arity = 1);

    Opal.defn(self, '$dup', TMP_38 = function $$dup() {
      var $a, $b, self = this, $iter = TMP_38.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_38.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      
      if (
        self.$$class === Opal.Array &&
        self.$allocate.$$pristine &&
        self.$copy_instance_variables.$$pristine &&
        self.$initialize_dup.$$pristine
      ) return self.slice(0);
    
      return ($a = ($b = self, Opal.find_super_dispatcher(self, 'dup', TMP_38, false)), $a.$$p = $iter, $a).apply($b, $zuper);
    }, TMP_38.$$arity = 0);

    Opal.defn(self, '$each', TMP_39 = function $$each() {
      var $a, $b, TMP_40, self = this, $iter = TMP_39.$$p, block = $iter || nil;

      TMP_39.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_40 = function(){var self = TMP_40.$$s || this;

        return self.$size()}, TMP_40.$$s = self, TMP_40.$$arity = 0, TMP_40), $a).call($b, "each")
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        var value = Opal.yield1(block, self[i]);
      }
    
      return self;
    }, TMP_39.$$arity = 0);

    Opal.defn(self, '$each_index', TMP_41 = function $$each_index() {
      var $a, $b, TMP_42, self = this, $iter = TMP_41.$$p, block = $iter || nil;

      TMP_41.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_42 = function(){var self = TMP_42.$$s || this;

        return self.$size()}, TMP_42.$$s = self, TMP_42.$$arity = 0, TMP_42), $a).call($b, "each_index")
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        var value = Opal.yield1(block, i);
      }
    
      return self;
    }, TMP_41.$$arity = 0);

    Opal.defn(self, '$empty?', TMP_43 = function() {
      var self = this;

      return self.length === 0;
    }, TMP_43.$$arity = 0);

    Opal.defn(self, '$eql?', TMP_44 = function(other) {
      var self = this;

      
      var recursed = {};

      function _eql(array, other) {
        var i, length, a, b;

        if (!other.$$is_array) {
          return false;
        }

        other = other.$to_a();

        if (array.length !== other.length) {
          return false;
        }

        recursed[(array).$object_id()] = true;

        for (i = 0, length = array.length; i < length; i++) {
          a = array[i];
          b = other[i];
          if (a.$$is_array) {
            if (b.$$is_array && b.length !== a.length) {
              return false;
            }
            if (!recursed.hasOwnProperty((a).$object_id())) {
              if (!_eql(a, b)) {
                return false;
              }
            }
          } else {
            if (!(a)['$eql?'](b)) {
              return false;
            }
          }
        }

        return true;
      }

      return _eql(self, other);
    
    }, TMP_44.$$arity = 1);

    Opal.defn(self, '$fetch', TMP_45 = function $$fetch(index, defaults) {
      var self = this, $iter = TMP_45.$$p, block = $iter || nil;

      TMP_45.$$p = null;
      
      var original = index;

      index = $scope.get('Opal').$coerce_to(index, $scope.get('Integer'), "to_int");

      if (index < 0) {
        index += self.length;
      }

      if (index >= 0 && index < self.length) {
        return self[index];
      }

      if (block !== nil) {
        return block(original);
      }

      if (defaults != null) {
        return defaults;
      }

      if (self.length === 0) {
        self.$raise($scope.get('IndexError'), "index " + (original) + " outside of array bounds: 0...0")
      }
      else {
        self.$raise($scope.get('IndexError'), "index " + (original) + " outside of array bounds: -" + (self.length) + "..." + (self.length));
      }
    ;
    }, TMP_45.$$arity = -2);

    Opal.defn(self, '$fill', TMP_46 = function $$fill($a_rest) {
      var $b, $c, self = this, args, $iter = TMP_46.$$p, block = $iter || nil, one = nil, two = nil, obj = nil, left = nil, right = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_46.$$p = null;
      
      var i, length, value;
    
      if (block !== false && block !== nil && block != null) {
        if ((($b = args.length > 2) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          self.$raise($scope.get('ArgumentError'), "wrong number of arguments (" + (args.$length()) + " for 0..2)")};
        $c = args, $b = Opal.to_ary($c), one = ($b[0] == null ? nil : $b[0]), two = ($b[1] == null ? nil : $b[1]), $c;
        } else {
        if ((($b = args.length == 0) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          self.$raise($scope.get('ArgumentError'), "wrong number of arguments (0 for 1..3)")
        } else if ((($b = args.length > 3) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          self.$raise($scope.get('ArgumentError'), "wrong number of arguments (" + (args.$length()) + " for 1..3)")};
        $c = args, $b = Opal.to_ary($c), obj = ($b[0] == null ? nil : $b[0]), one = ($b[1] == null ? nil : $b[1]), two = ($b[2] == null ? nil : $b[2]), $c;
      };
      if ((($b = $scope.get('Range')['$==='](one)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        if (two !== false && two !== nil && two != null) {
          self.$raise($scope.get('TypeError'), "length invalid with range")};
        left = $scope.get('Opal').$coerce_to(one.$begin(), $scope.get('Integer'), "to_int");
        if ((($b = left < 0) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          left += self.length;};
        if ((($b = left < 0) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          self.$raise($scope.get('RangeError'), "" + (one.$inspect()) + " out of range")};
        right = $scope.get('Opal').$coerce_to(one.$end(), $scope.get('Integer'), "to_int");
        if ((($b = right < 0) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          right += self.length;};
        if ((($b = one['$exclude_end?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          } else {
          right += 1;
        };
        if ((($b = right <= left) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          return self};
      } else if (one !== false && one !== nil && one != null) {
        left = $scope.get('Opal').$coerce_to(one, $scope.get('Integer'), "to_int");
        if ((($b = left < 0) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          left += self.length;};
        if ((($b = left < 0) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          left = 0};
        if (two !== false && two !== nil && two != null) {
          right = $scope.get('Opal').$coerce_to(two, $scope.get('Integer'), "to_int");
          if ((($b = right == 0) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            return self};
          right += left;
          } else {
          right = self.length
        };
        } else {
        left = 0;
        right = self.length;
      };
      if ((($b = left > self.length) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        
        for (i = self.length; i < right; i++) {
          self[i] = nil;
        }
      ;};
      if ((($b = right > self.length) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        self.length = right};
      if (block !== false && block !== nil && block != null) {
        
        for (length = self.length; left < right; left++) {
          value = block(left);
          self[left] = value;
        }
      ;
        } else {
        
        for (length = self.length; left < right; left++) {
          self[left] = obj;
        }
      ;
      };
      return self;
    }, TMP_46.$$arity = -1);

    Opal.defn(self, '$first', TMP_47 = function $$first(count) {
      var self = this;

      
      if (count == null) {
        return self.length === 0 ? nil : self[0];
      }

      count = $scope.get('Opal').$coerce_to(count, $scope.get('Integer'), "to_int");

      if (count < 0) {
        self.$raise($scope.get('ArgumentError'), "negative array size");
      }

      return self.slice(0, count);
    
    }, TMP_47.$$arity = -1);

    Opal.defn(self, '$flatten', TMP_48 = function $$flatten(level) {
      var self = this;

      
      function _flatten(array, level) {
        var result = [],
            i, length,
            item, ary;

        array = (array).$to_a();

        for (i = 0, length = array.length; i < length; i++) {
          item = array[i];

          if (!$scope.get('Opal')['$respond_to?'](item, "to_ary")) {
            result.push(item);
            continue;
          }

          ary = (item).$to_ary();

          if (ary === nil) {
            result.push(item);
            continue;
          }

          if (!ary.$$is_array) {
            self.$raise($scope.get('TypeError'));
          }

          if (ary === self) {
            self.$raise($scope.get('ArgumentError'));
          }

          switch (level) {
          case undefined:
            result = result.concat(_flatten(ary));
            break;
          case 0:
            result.push(ary);
            break;
          default:
            result.push.apply(result, _flatten(ary, level - 1));
          }
        }
        return result;
      }

      if (level !== undefined) {
        level = $scope.get('Opal').$coerce_to(level, $scope.get('Integer'), "to_int");
      }

      return toArraySubclass(_flatten(self, level), self.$class());
    
    }, TMP_48.$$arity = -1);

    Opal.defn(self, '$flatten!', TMP_49 = function(level) {
      var self = this;

      
      var flattened = self.$flatten(level);

      if (self.length == flattened.length) {
        for (var i = 0, length = self.length; i < length; i++) {
          if (self[i] !== flattened[i]) {
            break;
          }
        }

        if (i == length) {
          return nil;
        }
      }

      self.$replace(flattened);
    ;
      return self;
    }, TMP_49.$$arity = -1);

    Opal.defn(self, '$hash', TMP_50 = function $$hash() {
      var self = this;

      
      var top = (Opal.hash_ids == undefined),
          result = ['A'],
          hash_id = self.$object_id(),
          item, i, key;

      try {
        if (top) {
          Opal.hash_ids = {};
        }

        if (Opal.hash_ids.hasOwnProperty(hash_id)) {
          return 'self';
        }

        for (key in Opal.hash_ids) {
          if (Opal.hash_ids.hasOwnProperty(key)) {
            item = Opal.hash_ids[key];
            if (self['$eql?'](item)) {
              return 'self';
            }
          }
        }

        Opal.hash_ids[hash_id] = self;

        for (i = 0; i < self.length; i++) {
          item = self[i];
          result.push(item.$hash());
        }

        return result.join(',');
      } finally {
        if (top) {
          delete Opal.hash_ids;
        }
      }
    
    }, TMP_50.$$arity = 0);

    Opal.defn(self, '$include?', TMP_51 = function(member) {
      var self = this;

      
      for (var i = 0, length = self.length; i < length; i++) {
        if ((self[i])['$=='](member)) {
          return true;
        }
      }

      return false;
    
    }, TMP_51.$$arity = 1);

    Opal.defn(self, '$index', TMP_52 = function $$index(object) {
      var self = this, $iter = TMP_52.$$p, block = $iter || nil;

      TMP_52.$$p = null;
      
      var i, length, value;

      if (object != null) {
        for (i = 0, length = self.length; i < length; i++) {
          if ((self[i])['$=='](object)) {
            return i;
          }
        }
      }
      else if (block !== nil) {
        for (i = 0, length = self.length; i < length; i++) {
          value = block(self[i]);

          if (value !== false && value !== nil) {
            return i;
          }
        }
      }
      else {
        return self.$enum_for("index");
      }

      return nil;
    
    }, TMP_52.$$arity = -1);

    Opal.defn(self, '$insert', TMP_53 = function $$insert(index, $a_rest) {
      var self = this, objects;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      objects = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        objects[$arg_idx - 1] = arguments[$arg_idx];
      }
      
      index = $scope.get('Opal').$coerce_to(index, $scope.get('Integer'), "to_int");

      if (objects.length > 0) {
        if (index < 0) {
          index += self.length + 1;

          if (index < 0) {
            self.$raise($scope.get('IndexError'), "" + (index) + " is out of bounds");
          }
        }
        if (index > self.length) {
          for (var i = self.length; i < index; i++) {
            self.push(nil);
          }
        }

        self.splice.apply(self, [index, 0].concat(objects));
      }
    ;
      return self;
    }, TMP_53.$$arity = -2);

    Opal.defn(self, '$inspect', TMP_54 = function $$inspect() {
      var self = this;

      
      var result = [],
          id     = self.$__id__();

      for (var i = 0, length = self.length; i < length; i++) {
        var item = self['$[]'](i);

        if ((item).$__id__() === id) {
          result.push('[...]');
        }
        else {
          result.push((item).$inspect());
        }
      }

      return '[' + result.join(', ') + ']';
    ;
    }, TMP_54.$$arity = 0);

    Opal.defn(self, '$join', TMP_55 = function $$join(sep) {
      var $a, self = this;
      if ($gvars[","] == null) $gvars[","] = nil;

      if (sep == null) {
        sep = nil;
      }
      if ((($a = self.length === 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ""};
      if ((($a = sep === nil) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        sep = $gvars[","]};
      
      var result = [];
      var i, length, item, tmp;

      for (i = 0, length = self.length; i < length; i++) {
        item = self[i];

        if ($scope.get('Opal')['$respond_to?'](item, "to_str")) {
          tmp = (item).$to_str();

          if (tmp !== nil) {
            result.push((tmp).$to_s());

            continue;
          }
        }

        if ($scope.get('Opal')['$respond_to?'](item, "to_ary")) {
          tmp = (item).$to_ary();

          if (tmp === self) {
            self.$raise($scope.get('ArgumentError'));
          }

          if (tmp !== nil) {
            result.push((tmp).$join(sep));

            continue;
          }
        }

        if ($scope.get('Opal')['$respond_to?'](item, "to_s")) {
          tmp = (item).$to_s();

          if (tmp !== nil) {
            result.push(tmp);

            continue;
          }
        }

        self.$raise($scope.get('NoMethodError').$new("" + ($scope.get('Opal').$inspect(item)) + " doesn't respond to #to_str, #to_ary or #to_s", "to_str"));
      }

      if (sep === nil) {
        return result.join('');
      }
      else {
        return result.join($scope.get('Opal')['$coerce_to!'](sep, $scope.get('String'), "to_str").$to_s());
      }
    ;
    }, TMP_55.$$arity = -1);

    Opal.defn(self, '$keep_if', TMP_56 = function $$keep_if() {
      var $a, $b, TMP_57, self = this, $iter = TMP_56.$$p, block = $iter || nil;

      TMP_56.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_57 = function(){var self = TMP_57.$$s || this;

        return self.$size()}, TMP_57.$$s = self, TMP_57.$$arity = 0, TMP_57), $a).call($b, "keep_if")
      };
      
      for (var i = 0, length = self.length, value; i < length; i++) {
        value = block(self[i]);

        if (value === false || value === nil) {
          self.splice(i, 1);

          length--;
          i--;
        }
      }
    
      return self;
    }, TMP_56.$$arity = 0);

    Opal.defn(self, '$last', TMP_58 = function $$last(count) {
      var self = this;

      
      if (count == null) {
        return self.length === 0 ? nil : self[self.length - 1];
      }

      count = $scope.get('Opal').$coerce_to(count, $scope.get('Integer'), "to_int");

      if (count < 0) {
        self.$raise($scope.get('ArgumentError'), "negative array size");
      }

      if (count > self.length) {
        count = self.length;
      }

      return self.slice(self.length - count, self.length);
    
    }, TMP_58.$$arity = -1);

    Opal.defn(self, '$length', TMP_59 = function $$length() {
      var self = this;

      return self.length;
    }, TMP_59.$$arity = 0);

    Opal.alias(self, 'map', 'collect');

    Opal.alias(self, 'map!', 'collect!');

    
    // Returns the product of from, from-1, ..., from - how_many + 1.
    function descending_factorial(from, how_many) {
      var count = how_many >= 0 ? 1 : 0;
      while (how_many) {
        count *= from;
        from--;
        how_many--;
      }
      return count;
    }
  

    Opal.defn(self, '$permutation', TMP_60 = function $$permutation(num) {
      var $a, $b, TMP_61, self = this, $iter = TMP_60.$$p, block = $iter || nil, perm = nil, used = nil;

      TMP_60.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_61 = function(){var self = TMP_61.$$s || this;

        return descending_factorial(self.length, num === undefined ? self.length : num);}, TMP_61.$$s = self, TMP_61.$$arity = 0, TMP_61), $a).call($b, "permutation", num)
      };
      
      var permute, offensive, output;

      if (num === undefined) {
        num = self.length;
      }
      else {
        num = $scope.get('Opal').$coerce_to(num, $scope.get('Integer'), "to_int")
      }

      if (num < 0 || self.length < num) {
        // no permutations, yield nothing
      }
      else if (num === 0) {
        // exactly one permutation: the zero-length array
        Opal.yield1(block, [])
      }
      else if (num === 1) {
        // this is a special, easy case
        for (var i = 0; i < self.length; i++) {
          Opal.yield1(block, [self[i]])
        }
      }
      else {
        // this is the general case
        perm = $scope.get('Array').$new(num)
        used = $scope.get('Array').$new(self.length, false)

        permute = function(num, perm, index, used, blk) {
          self = this;
          for(var i = 0; i < self.length; i++){
            if(used['$[]'](i)['$!']()) {
              perm[index] = i;
              if(index < num - 1) {
                used[i] = true;
                permute.call(self, num, perm, index + 1, used, blk);
                used[i] = false;
              }
              else {
                output = [];
                for (var j = 0; j < perm.length; j++) {
                  output.push(self[perm[j]]);
                }
                Opal.yield1(blk, output);
              }
            }
          }
        }

        if ((block !== nil)) {
          // offensive (both definitions) copy.
          offensive = self.slice();
          permute.call(offensive, num, perm, 0, used, block);
        }
        else {
          permute.call(self, num, perm, 0, used, block);
        }
      }
    ;
      return self;
    }, TMP_60.$$arity = -1);

    Opal.defn(self, '$repeated_permutation', TMP_62 = function $$repeated_permutation(n) {
      var $a, $b, TMP_63, self = this, $iter = TMP_62.$$p, $yield = $iter || nil, num = nil;

      TMP_62.$$p = null;
      num = $scope.get('Opal')['$coerce_to!'](n, $scope.get('Integer'), "to_int");
      if (($yield !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_63 = function(){var self = TMP_63.$$s || this, $c;

        if ((($c = $rb_ge(num, 0)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return self.$size()['$**'](num)
            } else {
            return 0
          }}, TMP_63.$$s = self, TMP_63.$$arity = 0, TMP_63), $a).call($b, "repeated_permutation", num)
      };
      
      function iterate(max, buffer, self) {
        if (buffer.length == max) {
          var copy = buffer.slice();
          Opal.yield1($yield, copy)
          return;
        }
        for (var i = 0; i < self.length; i++) {
          buffer.push(self[i]);
          iterate(max, buffer, self);
          buffer.pop();
        }
      }

      iterate(num, [], self.slice());
    
      return self;
    }, TMP_62.$$arity = 1);

    Opal.defn(self, '$pop', TMP_64 = function $$pop(count) {
      var $a, self = this;

      if ((($a = count === undefined) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = self.length === 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil};
        return self.pop();};
      count = $scope.get('Opal').$coerce_to(count, $scope.get('Integer'), "to_int");
      if ((($a = count < 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "negative array size")};
      if ((($a = self.length === 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return []};
      if ((($a = count > self.length) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.splice(0, self.length);
        } else {
        return self.splice(self.length - count, self.length);
      };
    }, TMP_64.$$arity = -1);

    Opal.defn(self, '$product', TMP_65 = function $$product($a_rest) {
      var self = this, args, $iter = TMP_65.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_65.$$p = null;
      
      var result = (block !== nil) ? null : [],
          n = args.length + 1,
          counters = new Array(n),
          lengths  = new Array(n),
          arrays   = new Array(n),
          i, m, subarray, len, resultlen = 1;

      arrays[0] = self;
      for (i = 1; i < n; i++) {
        arrays[i] = $scope.get('Opal').$coerce_to(args[i - 1], $scope.get('Array'), "to_ary");
      }

      for (i = 0; i < n; i++) {
        len = arrays[i].length;
        if (len === 0) {
          return result || self;
        }
        resultlen *= len;
        if (resultlen > 2147483647) {
          self.$raise($scope.get('RangeError'), "too big to product")
        }
        lengths[i] = len;
        counters[i] = 0;
      }

      outer_loop: for (;;) {
        subarray = [];
        for (i = 0; i < n; i++) {
          subarray.push(arrays[i][counters[i]]);
        }
        if (result) {
          result.push(subarray);
        } else {
          Opal.yield1(block, subarray)
        }
        m = n - 1;
        counters[m]++;
        while (counters[m] === lengths[m]) {
          counters[m] = 0;
          if (--m < 0) break outer_loop;
          counters[m]++;
        }
      }

      return result || self;
    ;
    }, TMP_65.$$arity = -1);

    Opal.defn(self, '$push', TMP_66 = function $$push($a_rest) {
      var self = this, objects;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      objects = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        objects[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      for (var i = 0, length = objects.length; i < length; i++) {
        self.push(objects[i]);
      }
    
      return self;
    }, TMP_66.$$arity = -1);

    Opal.defn(self, '$rassoc', TMP_67 = function $$rassoc(object) {
      var self = this;

      
      for (var i = 0, length = self.length, item; i < length; i++) {
        item = self[i];

        if (item.length && item[1] !== undefined) {
          if ((item[1])['$=='](object)) {
            return item;
          }
        }
      }

      return nil;
    
    }, TMP_67.$$arity = 1);

    Opal.defn(self, '$reject', TMP_68 = function $$reject() {
      var $a, $b, TMP_69, self = this, $iter = TMP_68.$$p, block = $iter || nil;

      TMP_68.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_69 = function(){var self = TMP_69.$$s || this;

        return self.$size()}, TMP_69.$$s = self, TMP_69.$$arity = 0, TMP_69), $a).call($b, "reject")
      };
      
      var result = [];

      for (var i = 0, length = self.length, value; i < length; i++) {
        value = block(self[i]);

        if (value === false || value === nil) {
          result.push(self[i]);
        }
      }
      return result;
    
    }, TMP_68.$$arity = 0);

    Opal.defn(self, '$reject!', TMP_70 = function() {
      var $a, $b, TMP_71, $c, self = this, $iter = TMP_70.$$p, block = $iter || nil, original = nil;

      TMP_70.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_71 = function(){var self = TMP_71.$$s || this;

        return self.$size()}, TMP_71.$$s = self, TMP_71.$$arity = 0, TMP_71), $a).call($b, "reject!")
      };
      original = self.$length();
      ($a = ($c = self).$delete_if, $a.$$p = block.$to_proc(), $a).call($c);
      if (self.$length()['$=='](original)) {
        return nil
        } else {
        return self
      };
    }, TMP_70.$$arity = 0);

    Opal.defn(self, '$replace', TMP_72 = function $$replace(other) {
      var $a, self = this;

      if ((($a = $scope.get('Array')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        other = other.$to_a()
        } else {
        other = $scope.get('Opal').$coerce_to(other, $scope.get('Array'), "to_ary").$to_a()
      };
      
      self.splice(0, self.length);
      self.push.apply(self, other);
    
      return self;
    }, TMP_72.$$arity = 1);

    Opal.defn(self, '$reverse', TMP_73 = function $$reverse() {
      var self = this;

      return self.slice(0).reverse();
    }, TMP_73.$$arity = 0);

    Opal.defn(self, '$reverse!', TMP_74 = function() {
      var self = this;

      return self.reverse();
    }, TMP_74.$$arity = 0);

    Opal.defn(self, '$reverse_each', TMP_75 = function $$reverse_each() {
      var $a, $b, TMP_76, $c, self = this, $iter = TMP_75.$$p, block = $iter || nil;

      TMP_75.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_76 = function(){var self = TMP_76.$$s || this;

        return self.$size()}, TMP_76.$$s = self, TMP_76.$$arity = 0, TMP_76), $a).call($b, "reverse_each")
      };
      ($a = ($c = self.$reverse()).$each, $a.$$p = block.$to_proc(), $a).call($c);
      return self;
    }, TMP_75.$$arity = 0);

    Opal.defn(self, '$rindex', TMP_77 = function $$rindex(object) {
      var self = this, $iter = TMP_77.$$p, block = $iter || nil;

      TMP_77.$$p = null;
      
      var i, value;

      if (object != null) {
        for (i = self.length - 1; i >= 0; i--) {
          if (i >= self.length) {
            break;
          }
          if ((self[i])['$=='](object)) {
            return i;
          }
        }
      }
      else if (block !== nil) {
        for (i = self.length - 1; i >= 0; i--) {
          if (i >= self.length) {
            break;
          }

          value = block(self[i]);

          if (value !== false && value !== nil) {
            return i;
          }
        }
      }
      else if (object == null) {
        return self.$enum_for("rindex");
      }

      return nil;
    
    }, TMP_77.$$arity = -1);

    Opal.defn(self, '$rotate', TMP_78 = function $$rotate(n) {
      var self = this;

      if (n == null) {
        n = 1;
      }
      n = $scope.get('Opal').$coerce_to(n, $scope.get('Integer'), "to_int");
      
      var ary, idx, firstPart, lastPart;

      if (self.length === 1) {
        return self.slice();
      }
      if (self.length === 0) {
        return [];
      }

      ary = self.slice();
      idx = n % ary.length;

      firstPart = ary.slice(idx);
      lastPart = ary.slice(0, idx);
      return firstPart.concat(lastPart);
    
    }, TMP_78.$$arity = -1);

    Opal.defn(self, '$rotate!', TMP_79 = function(cnt) {
      var self = this, ary = nil;

      if (cnt == null) {
        cnt = 1;
      }
      
      if (self.length === 0 || self.length === 1) {
        return self;
      }
    
      cnt = $scope.get('Opal').$coerce_to(cnt, $scope.get('Integer'), "to_int");
      ary = self.$rotate(cnt);
      return self.$replace(ary);
    }, TMP_79.$$arity = -1);

    (function($base, $super) {
      function $SampleRandom(){};
      var self = $SampleRandom = $klass($base, $super, 'SampleRandom', $SampleRandom);

      var def = self.$$proto, $scope = self.$$scope, TMP_80, TMP_81;

      def.rng = nil;
      Opal.defn(self, '$initialize', TMP_80 = function $$initialize(rng) {
        var self = this;

        return self.rng = rng;
      }, TMP_80.$$arity = 1);

      return (Opal.defn(self, '$rand', TMP_81 = function $$rand(size) {
        var $a, self = this, random = nil;

        random = $scope.get('Opal').$coerce_to(self.rng.$rand(size), $scope.get('Integer'), "to_int");
        if ((($a = random < 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('RangeError'), "random value must be >= 0")};
        if ((($a = random < size) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          self.$raise($scope.get('RangeError'), "random value must be less than Array size")
        };
        return random;
      }, TMP_81.$$arity = 1), nil) && 'rand';
    })($scope.base, null);

    Opal.defn(self, '$sample', TMP_82 = function $$sample(count, options) {
      var $a, $b, self = this, o = nil, rng = nil;

      if ((($a = count === undefined) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$at($scope.get('Kernel').$rand(self.length))};
      if ((($a = options === undefined) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = (o = $scope.get('Opal')['$coerce_to?'](count, $scope.get('Hash'), "to_hash"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          options = o;
          count = nil;
          } else {
          options = nil;
          count = $scope.get('Opal').$coerce_to(count, $scope.get('Integer'), "to_int");
        }
        } else {
        count = $scope.get('Opal').$coerce_to(count, $scope.get('Integer'), "to_int");
        options = $scope.get('Opal').$coerce_to(options, $scope.get('Hash'), "to_hash");
      };
      if ((($a = (($b = count !== false && count !== nil && count != null) ? count < 0 : count)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "count must be greater than 0")};
      if (options !== false && options !== nil && options != null) {
        rng = options['$[]']("random")};
      if ((($a = (($b = rng !== false && rng !== nil && rng != null) ? rng['$respond_to?']("rand") : rng)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        rng = $scope.get('SampleRandom').$new(rng)
        } else {
        rng = $scope.get('Kernel')
      };
      if (count !== false && count !== nil && count != null) {
        } else {
        return self[rng.$rand(self.length)]
      };
      

      var abandon, spin, result, i, j, k, targetIndex, oldValue;

      if (count > self.length) {
        count = self.length;
      }

      switch (count) {
        case 0:
          return [];
          break;
        case 1:
          return [self[rng.$rand(self.length)]];
          break;
        case 2:
          i = rng.$rand(self.length);
          j = rng.$rand(self.length);
          if (i === j) {
            j = i === 0 ? i + 1 : i - 1;
          }
          return [self[i], self[j]];
          break;
        default:
          if (self.length / count > 3) {
            abandon = false;
            spin = 0;

            result = $scope.get('Array').$new(count);
            i = 1;

            result[0] = rng.$rand(self.length);
            while (i < count) {
              k = rng.$rand(self.length);
              j = 0;

              while (j < i) {
                while (k === result[j]) {
                  spin++;
                  if (spin > 100) {
                    abandon = true;
                    break;
                  }
                  k = rng.$rand(self.length);
                }
                if (abandon) { break; }

                j++;
              }

              if (abandon) { break; }

              result[i] = k;

              i++;
            }

            if (!abandon) {
              i = 0;
              while (i < count) {
                result[i] = self[result[i]];
                i++;
              }

              return result;
            }
          }

          result = self.slice();

          for (var c = 0; c < count; c++) {
            targetIndex = rng.$rand(self.length);
            oldValue = result[c];
            result[c] = result[targetIndex];
            result[targetIndex] = oldValue;
          }

          return count === self.length ? result : (result)['$[]'](0, count);
      }
    
    }, TMP_82.$$arity = -1);

    Opal.defn(self, '$select', TMP_83 = function $$select() {
      var $a, $b, TMP_84, self = this, $iter = TMP_83.$$p, block = $iter || nil;

      TMP_83.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_84 = function(){var self = TMP_84.$$s || this;

        return self.$size()}, TMP_84.$$s = self, TMP_84.$$arity = 0, TMP_84), $a).call($b, "select")
      };
      
      var result = [];

      for (var i = 0, length = self.length, item, value; i < length; i++) {
        item = self[i];

        value = Opal.yield1(block, item);

        if (value !== false && value !== nil) {
          result.push(item);
        }
      }

      return result;
    
    }, TMP_83.$$arity = 0);

    Opal.defn(self, '$select!', TMP_85 = function() {
      var $a, $b, TMP_86, $c, self = this, $iter = TMP_85.$$p, block = $iter || nil;

      TMP_85.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_86 = function(){var self = TMP_86.$$s || this;

        return self.$size()}, TMP_86.$$s = self, TMP_86.$$arity = 0, TMP_86), $a).call($b, "select!")
      };
      
      var original = self.length;
      ($a = ($c = self).$keep_if, $a.$$p = block.$to_proc(), $a).call($c);
      return self.length === original ? nil : self;
    
    }, TMP_85.$$arity = 0);

    Opal.defn(self, '$shift', TMP_87 = function $$shift(count) {
      var $a, self = this;

      if ((($a = count === undefined) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = self.length === 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil};
        return self.shift();};
      count = $scope.get('Opal').$coerce_to(count, $scope.get('Integer'), "to_int");
      if ((($a = count < 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "negative array size")};
      if ((($a = self.length === 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return []};
      return self.splice(0, count);
    }, TMP_87.$$arity = -1);

    Opal.alias(self, 'size', 'length');

    Opal.defn(self, '$shuffle', TMP_88 = function $$shuffle(rng) {
      var self = this;

      return self.$dup().$to_a()['$shuffle!'](rng);
    }, TMP_88.$$arity = -1);

    Opal.defn(self, '$shuffle!', TMP_89 = function(rng) {
      var self = this;

      
      var randgen, i = self.length, j, tmp;

      if (rng !== undefined) {
        rng = $scope.get('Opal')['$coerce_to?'](rng, $scope.get('Hash'), "to_hash");

        if (rng !== nil) {
          rng = rng['$[]']("random");

          if (rng !== nil && rng['$respond_to?']("rand")) {
            randgen = rng;
          }
        }
      }

      while (i) {
        if (randgen) {
          j = randgen.$rand(i).$to_int();

          if (j < 0) {
            self.$raise($scope.get('RangeError'), "random number too small " + (j))
          }

          if (j >= i) {
            self.$raise($scope.get('RangeError'), "random number too big " + (j))
          }
        }
        else {
          j = Math.floor(Math.random() * i);
        }

        tmp = self[--i];
        self[i] = self[j];
        self[j] = tmp;
      }

      return self;
    ;
    }, TMP_89.$$arity = -1);

    Opal.alias(self, 'slice', '[]');

    Opal.defn(self, '$slice!', TMP_90 = function(index, length) {
      var $a, self = this, result = nil, range = nil, range_start = nil, range_end = nil, start = nil;

      result = nil;
      if ((($a = length === undefined) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = $scope.get('Range')['$==='](index)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          range = index;
          result = self['$[]'](range);
          range_start = $scope.get('Opal').$coerce_to(range.$begin(), $scope.get('Integer'), "to_int");
          range_end = $scope.get('Opal').$coerce_to(range.$end(), $scope.get('Integer'), "to_int");
          
          if (range_start < 0) {
            range_start += self.length;
          }

          if (range_end < 0) {
            range_end += self.length;
          } else if (range_end >= self.length) {
            range_end = self.length - 1;
            if (range.exclude) {
              range_end += 1;
            }
          }

          var range_length = range_end - range_start;
          if (range.exclude) {
            range_end -= 1;
          } else {
            range_length += 1;
          }

          if (range_start < self.length && range_start >= 0 && range_end < self.length && range_end >= 0 && range_length > 0) {
            self.splice(range_start, range_length);
          }
        
          } else {
          start = $scope.get('Opal').$coerce_to(index, $scope.get('Integer'), "to_int");
          
          if (start < 0) {
            start += self.length;
          }

          if (start < 0 || start >= self.length) {
            return nil;
          }

          result = self[start];

          if (start === 0) {
            self.shift();
          } else {
            self.splice(start, 1);
          }
        
        }
        } else {
        start = $scope.get('Opal').$coerce_to(index, $scope.get('Integer'), "to_int");
        length = $scope.get('Opal').$coerce_to(length, $scope.get('Integer'), "to_int");
        
        if (length < 0) {
          return nil;
        }

        var end = start + length;

        result = self['$[]'](start, length);

        if (start < 0) {
          start += self.length;
        }

        if (start + length > self.length) {
          length = self.length - start;
        }

        if (start < self.length && start >= 0) {
          self.splice(start, length);
        }
      
      };
      return result;
    }, TMP_90.$$arity = -2);

    Opal.defn(self, '$sort', TMP_91 = function $$sort() {
      var $a, self = this, $iter = TMP_91.$$p, block = $iter || nil;

      TMP_91.$$p = null;
      if ((($a = self.length > 1) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return self
      };
      
      if (block === nil) {
        block = function(a, b) {
          return (a)['$<=>'](b);
        };
      }

      return self.slice().sort(function(x, y) {
        var ret = block(x, y);

        if (ret === nil) {
          self.$raise($scope.get('ArgumentError'), "comparison of " + ((x).$inspect()) + " with " + ((y).$inspect()) + " failed");
        }

        return $rb_gt(ret, 0) ? 1 : ($rb_lt(ret, 0) ? -1 : 0);
      });
    ;
    }, TMP_91.$$arity = 0);

    Opal.defn(self, '$sort!', TMP_92 = function() {
      var $a, $b, self = this, $iter = TMP_92.$$p, block = $iter || nil;

      TMP_92.$$p = null;
      
      var result;

      if ((block !== nil)) {
        result = ($a = ($b = (self.slice())).$sort, $a.$$p = block.$to_proc(), $a).call($b);
      }
      else {
        result = (self.slice()).$sort();
      }

      self.length = 0;
      for(var i = 0, length = result.length; i < length; i++) {
        self.push(result[i]);
      }

      return self;
    ;
    }, TMP_92.$$arity = 0);

    Opal.defn(self, '$sort_by!', TMP_93 = function() {
      var $a, $b, TMP_94, $c, self = this, $iter = TMP_93.$$p, block = $iter || nil;

      TMP_93.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_94 = function(){var self = TMP_94.$$s || this;

        return self.$size()}, TMP_94.$$s = self, TMP_94.$$arity = 0, TMP_94), $a).call($b, "sort_by!")
      };
      return self.$replace(($a = ($c = self).$sort_by, $a.$$p = block.$to_proc(), $a).call($c));
    }, TMP_93.$$arity = 0);

    Opal.defn(self, '$take', TMP_95 = function $$take(count) {
      var self = this;

      
      if (count < 0) {
        self.$raise($scope.get('ArgumentError'));
      }

      return self.slice(0, count);
    ;
    }, TMP_95.$$arity = 1);

    Opal.defn(self, '$take_while', TMP_96 = function $$take_while() {
      var self = this, $iter = TMP_96.$$p, block = $iter || nil;

      TMP_96.$$p = null;
      
      var result = [];

      for (var i = 0, length = self.length, item, value; i < length; i++) {
        item = self[i];

        value = block(item);

        if (value === false || value === nil) {
          return result;
        }

        result.push(item);
      }

      return result;
    
    }, TMP_96.$$arity = 0);

    Opal.defn(self, '$to_a', TMP_97 = function $$to_a() {
      var self = this;

      return self;
    }, TMP_97.$$arity = 0);

    Opal.alias(self, 'to_ary', 'to_a');

    Opal.defn(self, '$to_h', TMP_98 = function $$to_h() {
      var self = this;

      
      var i, len = self.length, ary, key, val, hash = $hash2([], {});

      for (i = 0; i < len; i++) {
        ary = $scope.get('Opal')['$coerce_to?'](self[i], $scope.get('Array'), "to_ary");
        if (!ary.$$is_array) {
          self.$raise($scope.get('TypeError'), "wrong element type " + ((ary).$class()) + " at " + (i) + " (expected array)")
        }
        if (ary.length !== 2) {
          self.$raise($scope.get('ArgumentError'), "wrong array length at " + (i) + " (expected 2, was " + ((ary).$length()) + ")")
        }
        key = ary[0];
        val = ary[1];
        Opal.hash_put(hash, key, val);
      }

      return hash;
    ;
    }, TMP_98.$$arity = 0);

    Opal.alias(self, 'to_s', 'inspect');

    Opal.defn(self, '$transpose', TMP_101 = function $$transpose() {
      var $a, $b, TMP_99, self = this, result = nil, max = nil;

      if ((($a = self['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return []};
      result = [];
      max = nil;
      ($a = ($b = self).$each, $a.$$p = (TMP_99 = function(row){var self = TMP_99.$$s || this, $c, $d, TMP_100;
if (row == null) row = nil;
      if ((($c = $scope.get('Array')['$==='](row)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          row = row.$to_a()
          } else {
          row = $scope.get('Opal').$coerce_to(row, $scope.get('Array'), "to_ary").$to_a()
        };
        ((($c = max) !== false && $c !== nil && $c != null) ? $c : max = row.length);
        if ((($c = (row.length)['$!='](max)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          self.$raise($scope.get('IndexError'), "element size differs (" + (row.length) + " should be " + (max))};
        return ($c = ($d = (row.length)).$times, $c.$$p = (TMP_100 = function(i){var self = TMP_100.$$s || this, $e, $f, $g, entry = nil;
if (i == null) i = nil;
        entry = (($e = i, $f = result, ((($g = $f['$[]']($e)) !== false && $g !== nil && $g != null) ? $g : $f['$[]=']($e, []))));
          return entry['$<<'](row.$at(i));}, TMP_100.$$s = self, TMP_100.$$arity = 1, TMP_100), $c).call($d);}, TMP_99.$$s = self, TMP_99.$$arity = 1, TMP_99), $a).call($b);
      return result;
    }, TMP_101.$$arity = 0);

    Opal.defn(self, '$uniq', TMP_102 = function $$uniq() {
      var self = this, $iter = TMP_102.$$p, block = $iter || nil;

      TMP_102.$$p = null;
      
      var hash = $hash2([], {}), i, length, item, key;

      if (block === nil) {
        for (i = 0, length = self.length; i < length; i++) {
          item = self[i];
          if (Opal.hash_get(hash, item) === undefined) {
            Opal.hash_put(hash, item, item);
          }
        }
      }
      else {
        for (i = 0, length = self.length; i < length; i++) {
          item = self[i];
          key = Opal.yield1(block, item);
          if (Opal.hash_get(hash, key) === undefined) {
            Opal.hash_put(hash, key, item);
          }
        }
      }

      return toArraySubclass((hash).$values(), self.$class());
    ;
    }, TMP_102.$$arity = 0);

    Opal.defn(self, '$uniq!', TMP_103 = function() {
      var self = this, $iter = TMP_103.$$p, block = $iter || nil;

      TMP_103.$$p = null;
      
      var original_length = self.length, hash = $hash2([], {}), i, length, item, key;

      for (i = 0, length = original_length; i < length; i++) {
        item = self[i];
        key = (block === nil ? item : Opal.yield1(block, item));

        if (Opal.hash_get(hash, key) === undefined) {
          Opal.hash_put(hash, key, item);
          continue;
        }

        self.splice(i, 1);
        length--;
        i--;
      }

      return self.length === original_length ? nil : self;
    ;
    }, TMP_103.$$arity = 0);

    Opal.defn(self, '$unshift', TMP_104 = function $$unshift($a_rest) {
      var self = this, objects;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      objects = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        objects[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      for (var i = objects.length - 1; i >= 0; i--) {
        self.unshift(objects[i]);
      }
    
      return self;
    }, TMP_104.$$arity = -1);

    Opal.defn(self, '$values_at', TMP_107 = function $$values_at($a_rest) {
      var $b, $c, TMP_105, self = this, args, out = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      out = [];
      ($b = ($c = args).$each, $b.$$p = (TMP_105 = function(elem){var self = TMP_105.$$s || this, $a, $d, TMP_106, finish = nil, start = nil, i = nil;
if (elem == null) elem = nil;
      if ((($a = elem['$kind_of?']($scope.get('Range'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          finish = $scope.get('Opal').$coerce_to(elem.$last(), $scope.get('Integer'), "to_int");
          start = $scope.get('Opal').$coerce_to(elem.$first(), $scope.get('Integer'), "to_int");
          
          if (start < 0) {
            start = start + self.length;
            return nil;;
          }
        
          
          if (finish < 0) {
            finish = finish + self.length;
          }
          if (elem['$exclude_end?']()) {
            finish--;
          }
          if (finish < start) {
            return nil;;
          }
        
          return ($a = ($d = start).$upto, $a.$$p = (TMP_106 = function(i){var self = TMP_106.$$s || this;
if (i == null) i = nil;
          return out['$<<'](self.$at(i))}, TMP_106.$$s = self, TMP_106.$$arity = 1, TMP_106), $a).call($d, finish);
          } else {
          i = $scope.get('Opal').$coerce_to(elem, $scope.get('Integer'), "to_int");
          return out['$<<'](self.$at(i));
        }}, TMP_105.$$s = self, TMP_105.$$arity = 1, TMP_105), $b).call($c);
      return out;
    }, TMP_107.$$arity = -1);

    Opal.defn(self, '$zip', TMP_108 = function $$zip($a_rest) {
      var $b, self = this, others, $iter = TMP_108.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      others = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        others[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_108.$$p = null;
      
      var result = [], size = self.length, part, o, i, j, jj;

      for (j = 0, jj = others.length; j < jj; j++) {
        o = others[j];
        if (o.$$is_array) {
          continue;
        }
        if (o.$$is_enumerator) {
          if (o.$size() === Infinity) {
            others[j] = o.$take(size);
          } else {
            others[j] = o.$to_a();
          }
          continue;
        }
        others[j] = (((($b = $scope.get('Opal')['$coerce_to?'](o, $scope.get('Array'), "to_ary")) !== false && $b !== nil && $b != null) ? $b : $scope.get('Opal')['$coerce_to!'](o, $scope.get('Enumerator'), "each"))).$to_a();
      }

      for (i = 0; i < size; i++) {
        part = [self[i]];

        for (j = 0, jj = others.length; j < jj; j++) {
          o = others[j][i];

          if (o == null) {
            o = nil;
          }

          part[j + 1] = o;
        }

        result[i] = part;
      }

      if (block !== nil) {
        for (i = 0; i < size; i++) {
          block(result[i]);
        }

        return nil;
      }

      return result;
    
    }, TMP_108.$$arity = -1);

    Opal.defs(self, '$inherited', TMP_109 = function $$inherited(klass) {
      var self = this;

      
      klass.$$proto.$to_a = function() {
        return this.slice(0, this.length);
      }
    
    }, TMP_109.$$arity = 1);

    Opal.defn(self, '$instance_variables', TMP_111 = function $$instance_variables() {
      var $a, $b, TMP_110, $c, $d, self = this, $iter = TMP_111.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_111.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      return ($a = ($b = ($c = ($d = self, Opal.find_super_dispatcher(self, 'instance_variables', TMP_111, false)), $c.$$p = $iter, $c).apply($d, $zuper)).$reject, $a.$$p = (TMP_110 = function(ivar){var self = TMP_110.$$s || this, $c;
if (ivar == null) ivar = nil;
      return ((($c = /^@\d+$/.test(ivar)) !== false && $c !== nil && $c != null) ? $c : ivar['$==']("@length"))}, TMP_110.$$s = self, TMP_110.$$arity = 1, TMP_110), $a).call($b);
    }, TMP_111.$$arity = 0);

    return $scope.get('Opal').$pristine(self, "allocate", "copy_instance_variables", "initialize_dup");
  })($scope.base, Array);
};
/* Generated by Opal 0.10.3 */
Opal.modules["corelib/hash"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$include', '$coerce_to?', '$[]', '$merge!', '$allocate', '$raise', '$==', '$coerce_to!', '$lambda?', '$abs', '$arity', '$call', '$enum_for', '$size', '$inspect', '$flatten', '$eql?', '$default', '$to_proc', '$dup', '$===', '$default_proc', '$default_proc=', '$default=', '$alias_method']);
  self.$require("corelib/enumerable");
  return (function($base, $super) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_18, TMP_20, TMP_22, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30, TMP_31, TMP_32, TMP_33, TMP_34, TMP_36, TMP_37, TMP_38, TMP_39, TMP_40, TMP_41, TMP_42, TMP_44, TMP_46, TMP_47, TMP_49, TMP_51, TMP_52, TMP_53, TMP_54, TMP_55;

    self.$include($scope.get('Enumerable'));

    def.$$is_hash = true;

    Opal.defs(self, '$[]', TMP_1 = function($a_rest) {
      var self = this, argv;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      argv = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        argv[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      var hash, argc = argv.length, i;

      if (argc === 1) {
        hash = $scope.get('Opal')['$coerce_to?'](argv['$[]'](0), $scope.get('Hash'), "to_hash");
        if (hash !== nil) {
          return self.$allocate()['$merge!'](hash);
        }

        argv = $scope.get('Opal')['$coerce_to?'](argv['$[]'](0), $scope.get('Array'), "to_ary");
        if (argv === nil) {
          self.$raise($scope.get('ArgumentError'), "odd number of arguments for Hash")
        }

        argc = argv.length;
        hash = self.$allocate();

        for (i = 0; i < argc; i++) {
          if (!argv[i].$$is_array) continue;
          switch(argv[i].length) {
          case 1:
            hash.$store(argv[i][0], nil);
            break;
          case 2:
            hash.$store(argv[i][0], argv[i][1]);
            break;
          default:
            self.$raise($scope.get('ArgumentError'), "invalid number of elements (" + (argv[i].length) + " for 1..2)")
          }
        }

        return hash;
      }

      if (argc % 2 !== 0) {
        self.$raise($scope.get('ArgumentError'), "odd number of arguments for Hash")
      }

      hash = self.$allocate();

      for (i = 0; i < argc; i += 2) {
        hash.$store(argv[i], argv[i + 1]);
      }

      return hash;
    ;
    }, TMP_1.$$arity = -1);

    Opal.defs(self, '$allocate', TMP_2 = function $$allocate() {
      var self = this;

      
      var hash = new self.$$alloc();

      Opal.hash_init(hash);

      hash.$$none = nil;
      hash.$$proc = nil;

      return hash;
    
    }, TMP_2.$$arity = 0);

    Opal.defs(self, '$try_convert', TMP_3 = function $$try_convert(obj) {
      var self = this;

      return $scope.get('Opal')['$coerce_to?'](obj, $scope.get('Hash'), "to_hash");
    }, TMP_3.$$arity = 1);

    Opal.defn(self, '$initialize', TMP_4 = function $$initialize(defaults) {
      var self = this, $iter = TMP_4.$$p, block = $iter || nil;

      TMP_4.$$p = null;
      
      if (defaults !== undefined && block !== nil) {
        self.$raise($scope.get('ArgumentError'), "wrong number of arguments (1 for 0)")
      }
      self.$$none = (defaults === undefined ? nil : defaults);
      self.$$proc = block;
    ;
      return self;
    }, TMP_4.$$arity = -1);

    Opal.defn(self, '$==', TMP_5 = function(other) {
      var self = this;

      
      if (self === other) {
        return true;
      }

      if (!other.$$is_hash) {
        return false;
      }

      if (self.$$keys.length !== other.$$keys.length) {
        return false;
      }

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, other_value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
          other_value = other.$$smap[key];
        } else {
          value = key.value;
          other_value = Opal.hash_get(other, key.key);
        }

        if (other_value === undefined || !value['$eql?'](other_value)) {
          return false;
        }
      }

      return true;
    
    }, TMP_5.$$arity = 1);

    Opal.defn(self, '$[]', TMP_6 = function(key) {
      var self = this;

      
      var value = Opal.hash_get(self, key);

      if (value !== undefined) {
        return value;
      }

      return self.$default(key);
    
    }, TMP_6.$$arity = 1);

    Opal.defn(self, '$[]=', TMP_7 = function(key, value) {
      var self = this;

      
      Opal.hash_put(self, key, value);
      return value;
    
    }, TMP_7.$$arity = 2);

    Opal.defn(self, '$assoc', TMP_8 = function $$assoc(object) {
      var self = this;

      
      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          if ((key)['$=='](object)) {
            return [key, self.$$smap[key]];
          }
        } else {
          if ((key.key)['$=='](object)) {
            return [key.key, key.value];
          }
        }
      }

      return nil;
    
    }, TMP_8.$$arity = 1);

    Opal.defn(self, '$clear', TMP_9 = function $$clear() {
      var self = this;

      
      Opal.hash_init(self);
      return self;
    
    }, TMP_9.$$arity = 0);

    Opal.defn(self, '$clone', TMP_10 = function $$clone() {
      var self = this;

      
      var hash = new self.$$class.$$alloc();

      Opal.hash_init(hash);
      Opal.hash_clone(self, hash);

      return hash;
    
    }, TMP_10.$$arity = 0);

    Opal.defn(self, '$default', TMP_11 = function(key) {
      var self = this;

      
      if (key !== undefined && self.$$proc !== nil && self.$$proc !== undefined) {
        return self.$$proc.$call(self, key);
      }
      if (self.$$none === undefined) {
        return nil;
      }
      return self.$$none;
    
    }, TMP_11.$$arity = -1);

    Opal.defn(self, '$default=', TMP_12 = function(object) {
      var self = this;

      
      self.$$proc = nil;
      self.$$none = object;

      return object;
    
    }, TMP_12.$$arity = 1);

    Opal.defn(self, '$default_proc', TMP_13 = function $$default_proc() {
      var self = this;

      
      if (self.$$proc !== undefined) {
        return self.$$proc;
      }
      return nil;
    
    }, TMP_13.$$arity = 0);

    Opal.defn(self, '$default_proc=', TMP_14 = function(proc) {
      var self = this;

      
      if (proc !== nil) {
        proc = $scope.get('Opal')['$coerce_to!'](proc, $scope.get('Proc'), "to_proc");

        if (proc['$lambda?']() && proc.$arity().$abs() !== 2) {
          self.$raise($scope.get('TypeError'), "default_proc takes two arguments");
        }
      }

      self.$$none = nil;
      self.$$proc = proc;

      return proc;
    ;
    }, TMP_14.$$arity = 1);

    Opal.defn(self, '$delete', TMP_15 = function(key) {
      var self = this, $iter = TMP_15.$$p, block = $iter || nil;

      TMP_15.$$p = null;
      
      var value = Opal.hash_delete(self, key);

      if (value !== undefined) {
        return value;
      }

      if (block !== nil) {
        return block.$call(key);
      }

      return nil;
    
    }, TMP_15.$$arity = 1);

    Opal.defn(self, '$delete_if', TMP_16 = function $$delete_if() {
      var $a, $b, TMP_17, self = this, $iter = TMP_16.$$p, block = $iter || nil;

      TMP_16.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_17 = function(){var self = TMP_17.$$s || this;

        return self.$size()}, TMP_17.$$s = self, TMP_17.$$arity = 0, TMP_17), $a).call($b, "delete_if")
      };
      
      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj !== false && obj !== nil) {
          if (Opal.hash_delete(self, key) !== undefined) {
            length--;
            i--;
          }
        }
      }

      return self;
    
    }, TMP_16.$$arity = 0);

    Opal.alias(self, 'dup', 'clone');

    Opal.defn(self, '$each', TMP_18 = function $$each() {
      var $a, $b, TMP_19, self = this, $iter = TMP_18.$$p, block = $iter || nil;

      TMP_18.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_19 = function(){var self = TMP_19.$$s || this;

        return self.$size()}, TMP_19.$$s = self, TMP_19.$$arity = 0, TMP_19), $a).call($b, "each")
      };
      
      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        Opal.yield1(block, [key, value]);
      }

      return self;
    
    }, TMP_18.$$arity = 0);

    Opal.defn(self, '$each_key', TMP_20 = function $$each_key() {
      var $a, $b, TMP_21, self = this, $iter = TMP_20.$$p, block = $iter || nil;

      TMP_20.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_21 = function(){var self = TMP_21.$$s || this;

        return self.$size()}, TMP_21.$$s = self, TMP_21.$$arity = 0, TMP_21), $a).call($b, "each_key")
      };
      
      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        block(key.$$is_string ? key : key.key);
      }

      return self;
    
    }, TMP_20.$$arity = 0);

    Opal.alias(self, 'each_pair', 'each');

    Opal.defn(self, '$each_value', TMP_22 = function $$each_value() {
      var $a, $b, TMP_23, self = this, $iter = TMP_22.$$p, block = $iter || nil;

      TMP_22.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_23 = function(){var self = TMP_23.$$s || this;

        return self.$size()}, TMP_23.$$s = self, TMP_23.$$arity = 0, TMP_23), $a).call($b, "each_value")
      };
      
      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        block(key.$$is_string ? self.$$smap[key] : key.value);
      }

      return self;
    
    }, TMP_22.$$arity = 0);

    Opal.defn(self, '$empty?', TMP_24 = function() {
      var self = this;

      return self.$$keys.length === 0;
    }, TMP_24.$$arity = 0);

    Opal.alias(self, 'eql?', '==');

    Opal.defn(self, '$fetch', TMP_25 = function $$fetch(key, defaults) {
      var self = this, $iter = TMP_25.$$p, block = $iter || nil;

      TMP_25.$$p = null;
      
      var value = Opal.hash_get(self, key);

      if (value !== undefined) {
        return value;
      }

      if (block !== nil) {
        return block(key);
      }

      if (defaults !== undefined) {
        return defaults;
      }
    
      return self.$raise($scope.get('KeyError'), "key not found: " + (key.$inspect()));
    }, TMP_25.$$arity = -2);

    Opal.defn(self, '$flatten', TMP_26 = function $$flatten(level) {
      var self = this;

      if (level == null) {
        level = 1;
      }
      level = $scope.get('Opal')['$coerce_to!'](level, $scope.get('Integer'), "to_int");
      
      var result = [];

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        result.push(key);

        if (value.$$is_array) {
          if (level === 1) {
            result.push(value);
            continue;
          }

          result = result.concat((value).$flatten(level - 2));
          continue;
        }

        result.push(value);
      }

      return result;
    
    }, TMP_26.$$arity = -1);

    Opal.defn(self, '$has_key?', TMP_27 = function(key) {
      var self = this;

      return Opal.hash_get(self, key) !== undefined;
    }, TMP_27.$$arity = 1);

    Opal.defn(self, '$has_value?', TMP_28 = function(value) {
      var self = this;

      
      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        if (((key.$$is_string ? self.$$smap[key] : key.value))['$=='](value)) {
          return true;
        }
      }

      return false;
    
    }, TMP_28.$$arity = 1);

    Opal.defn(self, '$hash', TMP_29 = function $$hash() {
      var self = this;

      
      var top = (Opal.hash_ids === undefined),
          hash_id = self.$object_id(),
          result = ['Hash'],
          key, item;

      try {
        if (top) {
          Opal.hash_ids = {};
        }

        if (Opal.hash_ids.hasOwnProperty(hash_id)) {
          return 'self';
        }

        for (key in Opal.hash_ids) {
          if (Opal.hash_ids.hasOwnProperty(key)) {
            item = Opal.hash_ids[key];
            if (self['$eql?'](item)) {
              return 'self';
            }
          }
        }

        Opal.hash_ids[hash_id] = self;

        for (var i = 0, keys = self.$$keys, length = keys.length; i < length; i++) {
          key = keys[i];

          if (key.$$is_string) {
            result.push([key, self.$$smap[key].$hash()]);
          } else {
            result.push([key.key_hash, key.value.$hash()]);
          }
        }

        return result.sort().join();

      } finally {
        if (top) {
          delete Opal.hash_ids;
        }
      }
    
    }, TMP_29.$$arity = 0);

    Opal.alias(self, 'include?', 'has_key?');

    Opal.defn(self, '$index', TMP_30 = function $$index(object) {
      var self = this;

      
      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        if ((value)['$=='](object)) {
          return key;
        }
      }

      return nil;
    
    }, TMP_30.$$arity = 1);

    Opal.defn(self, '$indexes', TMP_31 = function $$indexes($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      var result = [];

      for (var i = 0, length = args.length, key, value; i < length; i++) {
        key = args[i];
        value = Opal.hash_get(self, key);

        if (value === undefined) {
          result.push(self.$default());
          continue;
        }

        result.push(value);
      }

      return result;
    
    }, TMP_31.$$arity = -1);

    Opal.alias(self, 'indices', 'indexes');

    var inspect_ids;

    Opal.defn(self, '$inspect', TMP_32 = function $$inspect() {
      var self = this;

      
      var top = (inspect_ids === undefined),
          hash_id = self.$object_id(),
          result = [];

      try {
        if (top) {
          inspect_ids = {};
        }

        if (inspect_ids.hasOwnProperty(hash_id)) {
          return '{...}';
        }

        inspect_ids[hash_id] = true;

        for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
          key = keys[i];

          if (key.$$is_string) {
            value = self.$$smap[key];
          } else {
            value = key.value;
            key = key.key;
          }

          result.push(key.$inspect() + '=>' + value.$inspect());
        }

        return '{' + result.join(', ') + '}';

      } finally {
        if (top) {
          inspect_ids = undefined;
        }
      }
    
    }, TMP_32.$$arity = 0);

    Opal.defn(self, '$invert', TMP_33 = function $$invert() {
      var self = this;

      
      var hash = Opal.hash();

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        Opal.hash_put(hash, value, key);
      }

      return hash;
    
    }, TMP_33.$$arity = 0);

    Opal.defn(self, '$keep_if', TMP_34 = function $$keep_if() {
      var $a, $b, TMP_35, self = this, $iter = TMP_34.$$p, block = $iter || nil;

      TMP_34.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_35 = function(){var self = TMP_35.$$s || this;

        return self.$size()}, TMP_35.$$s = self, TMP_35.$$arity = 0, TMP_35), $a).call($b, "keep_if")
      };
      
      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj === false || obj === nil) {
          if (Opal.hash_delete(self, key) !== undefined) {
            length--;
            i--;
          }
        }
      }

      return self;
    
    }, TMP_34.$$arity = 0);

    Opal.alias(self, 'key', 'index');

    Opal.alias(self, 'key?', 'has_key?');

    Opal.defn(self, '$keys', TMP_36 = function $$keys() {
      var self = this;

      
      var result = [];

      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          result.push(key);
        } else {
          result.push(key.key);
        }
      }

      return result;
    
    }, TMP_36.$$arity = 0);

    Opal.defn(self, '$length', TMP_37 = function $$length() {
      var self = this;

      return self.$$keys.length;
    }, TMP_37.$$arity = 0);

    Opal.alias(self, 'member?', 'has_key?');

    Opal.defn(self, '$merge', TMP_38 = function $$merge(other) {
      var $a, $b, self = this, $iter = TMP_38.$$p, block = $iter || nil;

      TMP_38.$$p = null;
      return ($a = ($b = self.$dup())['$merge!'], $a.$$p = block.$to_proc(), $a).call($b, other);
    }, TMP_38.$$arity = 1);

    Opal.defn(self, '$merge!', TMP_39 = function(other) {
      var self = this, $iter = TMP_39.$$p, block = $iter || nil;

      TMP_39.$$p = null;
      
      if (!$scope.get('Hash')['$==='](other)) {
        other = $scope.get('Opal')['$coerce_to!'](other, $scope.get('Hash'), "to_hash");
      }

      var i, other_keys = other.$$keys, length = other_keys.length, key, value, other_value;

      if (block === nil) {
        for (i = 0; i < length; i++) {
          key = other_keys[i];

          if (key.$$is_string) {
            other_value = other.$$smap[key];
          } else {
            other_value = key.value;
            key = key.key;
          }

          Opal.hash_put(self, key, other_value);
        }

        return self;
      }

      for (i = 0; i < length; i++) {
        key = other_keys[i];

        if (key.$$is_string) {
          other_value = other.$$smap[key];
        } else {
          other_value = key.value;
          key = key.key;
        }

        value = Opal.hash_get(self, key);

        if (value === undefined) {
          Opal.hash_put(self, key, other_value);
          continue;
        }

        Opal.hash_put(self, key, block(key, value, other_value));
      }

      return self;
    ;
    }, TMP_39.$$arity = 1);

    Opal.defn(self, '$rassoc', TMP_40 = function $$rassoc(object) {
      var self = this;

      
      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        if ((value)['$=='](object)) {
          return [key, value];
        }
      }

      return nil;
    
    }, TMP_40.$$arity = 1);

    Opal.defn(self, '$rehash', TMP_41 = function $$rehash() {
      var self = this;

      
      Opal.hash_rehash(self);
      return self;
    
    }, TMP_41.$$arity = 0);

    Opal.defn(self, '$reject', TMP_42 = function $$reject() {
      var $a, $b, TMP_43, self = this, $iter = TMP_42.$$p, block = $iter || nil;

      TMP_42.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_43 = function(){var self = TMP_43.$$s || this;

        return self.$size()}, TMP_43.$$s = self, TMP_43.$$arity = 0, TMP_43), $a).call($b, "reject")
      };
      
      var hash = Opal.hash();

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj === false || obj === nil) {
          Opal.hash_put(hash, key, value);
        }
      }

      return hash;
    
    }, TMP_42.$$arity = 0);

    Opal.defn(self, '$reject!', TMP_44 = function() {
      var $a, $b, TMP_45, self = this, $iter = TMP_44.$$p, block = $iter || nil;

      TMP_44.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_45 = function(){var self = TMP_45.$$s || this;

        return self.$size()}, TMP_45.$$s = self, TMP_45.$$arity = 0, TMP_45), $a).call($b, "reject!")
      };
      
      var changes_were_made = false;

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj !== false && obj !== nil) {
          if (Opal.hash_delete(self, key) !== undefined) {
            changes_were_made = true;
            length--;
            i--;
          }
        }
      }

      return changes_were_made ? self : nil;
    
    }, TMP_44.$$arity = 0);

    Opal.defn(self, '$replace', TMP_46 = function $$replace(other) {
      var $a, $b, self = this;

      other = $scope.get('Opal')['$coerce_to!'](other, $scope.get('Hash'), "to_hash");
      
      Opal.hash_init(self);

      for (var i = 0, other_keys = other.$$keys, length = other_keys.length, key, value, other_value; i < length; i++) {
        key = other_keys[i];

        if (key.$$is_string) {
          other_value = other.$$smap[key];
        } else {
          other_value = key.value;
          key = key.key;
        }

        Opal.hash_put(self, key, other_value);
      }
    
      if ((($a = other.$default_proc()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        (($a = [other.$default_proc()]), $b = self, $b['$default_proc='].apply($b, $a), $a[$a.length-1])
        } else {
        (($a = [other.$default()]), $b = self, $b['$default='].apply($b, $a), $a[$a.length-1])
      };
      return self;
    }, TMP_46.$$arity = 1);

    Opal.defn(self, '$select', TMP_47 = function $$select() {
      var $a, $b, TMP_48, self = this, $iter = TMP_47.$$p, block = $iter || nil;

      TMP_47.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_48 = function(){var self = TMP_48.$$s || this;

        return self.$size()}, TMP_48.$$s = self, TMP_48.$$arity = 0, TMP_48), $a).call($b, "select")
      };
      
      var hash = Opal.hash();

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj !== false && obj !== nil) {
          Opal.hash_put(hash, key, value);
        }
      }

      return hash;
    
    }, TMP_47.$$arity = 0);

    Opal.defn(self, '$select!', TMP_49 = function() {
      var $a, $b, TMP_50, self = this, $iter = TMP_49.$$p, block = $iter || nil;

      TMP_49.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_50 = function(){var self = TMP_50.$$s || this;

        return self.$size()}, TMP_50.$$s = self, TMP_50.$$arity = 0, TMP_50), $a).call($b, "select!")
      };
      
      var result = nil;

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj === false || obj === nil) {
          if (Opal.hash_delete(self, key) !== undefined) {
            length--;
            i--;
          }
          result = self;
        }
      }

      return result;
    
    }, TMP_49.$$arity = 0);

    Opal.defn(self, '$shift', TMP_51 = function $$shift() {
      var self = this;

      
      var keys = self.$$keys,
          key;

      if (keys.length > 0) {
        key = keys[0];

        key = key.$$is_string ? key : key.key;

        return [key, Opal.hash_delete(self, key)];
      }

      return self.$default(nil);
    
    }, TMP_51.$$arity = 0);

    Opal.alias(self, 'size', 'length');

    self.$alias_method("store", "[]=");

    Opal.defn(self, '$to_a', TMP_52 = function $$to_a() {
      var self = this;

      
      var result = [];

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        result.push([key, value]);
      }

      return result;
    
    }, TMP_52.$$arity = 0);

    Opal.defn(self, '$to_h', TMP_53 = function $$to_h() {
      var self = this;

      
      if (self.$$class === Opal.Hash) {
        return self;
      }

      var hash = new Opal.Hash.$$alloc();

      Opal.hash_init(hash);
      Opal.hash_clone(self, hash);

      return hash;
    
    }, TMP_53.$$arity = 0);

    Opal.defn(self, '$to_hash', TMP_54 = function $$to_hash() {
      var self = this;

      return self;
    }, TMP_54.$$arity = 0);

    Opal.alias(self, 'to_s', 'inspect');

    Opal.alias(self, 'update', 'merge!');

    Opal.alias(self, 'value?', 'has_value?');

    Opal.alias(self, 'values_at', 'indexes');

    return (Opal.defn(self, '$values', TMP_55 = function $$values() {
      var self = this;

      
      var result = [];

      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          result.push(self.$$smap[key]);
        } else {
          result.push(key.value);
        }
      }

      return result;
    
    }, TMP_55.$$arity = 0), nil) && 'values';
  })($scope.base, null);
};
/* Generated by Opal 0.10.3 */
Opal.modules["corelib/number"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$bridge', '$raise', '$class', '$Float', '$respond_to?', '$coerce_to!', '$__coerced__', '$===', '$!', '$>', '$**', '$new', '$<', '$to_f', '$==', '$nan?', '$infinite?', '$enum_for', '$+', '$-', '$gcd', '$lcm', '$/', '$frexp', '$to_i', '$ldexp', '$rationalize', '$*', '$<<', '$to_r', '$-@', '$size', '$<=', '$>=']);
  self.$require("corelib/numeric");
  (function($base, $super) {
    function $Number(){};
    var self = $Number = $klass($base, $super, 'Number', $Number);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30, TMP_31, TMP_33, TMP_34, TMP_35, TMP_36, TMP_37, TMP_38, TMP_39, TMP_40, TMP_41, TMP_42, TMP_43, TMP_44, TMP_45, TMP_46, TMP_47, TMP_48, TMP_49, TMP_50, TMP_51, TMP_52, TMP_54, TMP_55, TMP_56, TMP_57, TMP_58, TMP_59, TMP_61, TMP_62, TMP_63, TMP_64, TMP_65, TMP_66, TMP_67;

    $scope.get('Opal').$bridge(self, Number);

    Number.prototype.$$is_number = true;

    Opal.defn(self, '$coerce', TMP_1 = function $$coerce(other) {
      var self = this;

      
      if (other === nil) {
        self.$raise($scope.get('TypeError'), "can't convert " + (other.$class()) + " into Float");
      }
      else if (other.$$is_string) {
        return [self.$Float(other), self];
      }
      else if (other['$respond_to?']("to_f")) {
        return [$scope.get('Opal')['$coerce_to!'](other, $scope.get('Float'), "to_f"), self];
      }
      else if (other.$$is_number) {
        return [other, self];
      }
      else {
        self.$raise($scope.get('TypeError'), "can't convert " + (other.$class()) + " into Float");
      }
    ;
    }, TMP_1.$$arity = 1);

    Opal.defn(self, '$__id__', TMP_2 = function $$__id__() {
      var self = this;

      return (self * 2) + 1;
    }, TMP_2.$$arity = 0);

    Opal.alias(self, 'object_id', '__id__');

    Opal.defn(self, '$+', TMP_3 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self + other;
      }
      else {
        return self.$__coerced__("+", other);
      }
    
    }, TMP_3.$$arity = 1);

    Opal.defn(self, '$-', TMP_4 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self - other;
      }
      else {
        return self.$__coerced__("-", other);
      }
    
    }, TMP_4.$$arity = 1);

    Opal.defn(self, '$*', TMP_5 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self * other;
      }
      else {
        return self.$__coerced__("*", other);
      }
    
    }, TMP_5.$$arity = 1);

    Opal.defn(self, '$/', TMP_6 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self / other;
      }
      else {
        return self.$__coerced__("/", other);
      }
    
    }, TMP_6.$$arity = 1);

    Opal.alias(self, 'fdiv', '/');

    Opal.defn(self, '$%', TMP_7 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        if (other == -Infinity) {
          return other;
        }
        else if (other == 0) {
          self.$raise($scope.get('ZeroDivisionError'), "divided by 0");
        }
        else if (other < 0 || self < 0) {
          return (self % other + other) % other;
        }
        else {
          return self % other;
        }
      }
      else {
        return self.$__coerced__("%", other);
      }
    
    }, TMP_7.$$arity = 1);

    Opal.defn(self, '$&', TMP_8 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self & other;
      }
      else {
        return self.$__coerced__("&", other);
      }
    
    }, TMP_8.$$arity = 1);

    Opal.defn(self, '$|', TMP_9 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self | other;
      }
      else {
        return self.$__coerced__("|", other);
      }
    
    }, TMP_9.$$arity = 1);

    Opal.defn(self, '$^', TMP_10 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self ^ other;
      }
      else {
        return self.$__coerced__("^", other);
      }
    
    }, TMP_10.$$arity = 1);

    Opal.defn(self, '$<', TMP_11 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self < other;
      }
      else {
        return self.$__coerced__("<", other);
      }
    
    }, TMP_11.$$arity = 1);

    Opal.defn(self, '$<=', TMP_12 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self <= other;
      }
      else {
        return self.$__coerced__("<=", other);
      }
    
    }, TMP_12.$$arity = 1);

    Opal.defn(self, '$>', TMP_13 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self > other;
      }
      else {
        return self.$__coerced__(">", other);
      }
    
    }, TMP_13.$$arity = 1);

    Opal.defn(self, '$>=', TMP_14 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self >= other;
      }
      else {
        return self.$__coerced__(">=", other);
      }
    
    }, TMP_14.$$arity = 1);

    
    var spaceship_operator = function(self, other) {
      if (other.$$is_number) {
        if (isNaN(self) || isNaN(other)) {
          return nil;
        }

        if (self > other) {
          return 1;
        } else if (self < other) {
          return -1;
        } else {
          return 0;
        }
      }
      else {
        return self.$__coerced__("<=>", other);
      }
    }
  

    Opal.defn(self, '$<=>', TMP_15 = function(other) {
      var self = this;

      try {
        
      return spaceship_operator(self, other);
    
      } catch ($err) {
        if (Opal.rescue($err, [$scope.get('ArgumentError')])) {
          try {
            return nil
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };
    }, TMP_15.$$arity = 1);

    Opal.defn(self, '$<<', TMP_16 = function(count) {
      var self = this;

      count = $scope.get('Opal')['$coerce_to!'](count, $scope.get('Integer'), "to_int");
      return count > 0 ? self << count : self >> -count;
    }, TMP_16.$$arity = 1);

    Opal.defn(self, '$>>', TMP_17 = function(count) {
      var self = this;

      count = $scope.get('Opal')['$coerce_to!'](count, $scope.get('Integer'), "to_int");
      return count > 0 ? self >> count : self << -count;
    }, TMP_17.$$arity = 1);

    Opal.defn(self, '$[]', TMP_18 = function(bit) {
      var self = this;

      bit = $scope.get('Opal')['$coerce_to!'](bit, $scope.get('Integer'), "to_int");
      
      if (bit < 0) {
        return 0;
      }
      if (bit >= 32) {
        return self < 0 ? 1 : 0;
      }
      return (self >> bit) & 1;
    ;
    }, TMP_18.$$arity = 1);

    Opal.defn(self, '$+@', TMP_19 = function() {
      var self = this;

      return +self;
    }, TMP_19.$$arity = 0);

    Opal.defn(self, '$-@', TMP_20 = function() {
      var self = this;

      return -self;
    }, TMP_20.$$arity = 0);

    Opal.defn(self, '$~', TMP_21 = function() {
      var self = this;

      return ~self;
    }, TMP_21.$$arity = 0);

    Opal.defn(self, '$**', TMP_22 = function(other) {
      var $a, $b, $c, self = this;

      if ((($a = $scope.get('Integer')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = ((($b = ($scope.get('Integer')['$==='](self))['$!']()) !== false && $b !== nil && $b != null) ? $b : $rb_gt(other, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return Math.pow(self, other);
          } else {
          return $scope.get('Rational').$new(self, 1)['$**'](other)
        }
      } else if ((($a = (($b = $rb_lt(self, 0)) ? (((($c = $scope.get('Float')['$==='](other)) !== false && $c !== nil && $c != null) ? $c : $scope.get('Rational')['$==='](other))) : $rb_lt(self, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return $scope.get('Complex').$new(self, 0)['$**'](other.$to_f())
      } else if ((($a = other.$$is_number != null) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return Math.pow(self, other);
        } else {
        return self.$__coerced__("**", other)
      };
    }, TMP_22.$$arity = 1);

    Opal.defn(self, '$==', TMP_23 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self == Number(other);
      }
      else if (other['$respond_to?']("==")) {
        return other['$=='](self);
      }
      else {
        return false;
      }
    ;
    }, TMP_23.$$arity = 1);

    Opal.defn(self, '$abs', TMP_24 = function $$abs() {
      var self = this;

      return Math.abs(self);
    }, TMP_24.$$arity = 0);

    Opal.defn(self, '$abs2', TMP_25 = function $$abs2() {
      var self = this;

      return Math.abs(self * self);
    }, TMP_25.$$arity = 0);

    Opal.defn(self, '$angle', TMP_26 = function $$angle() {
      var $a, self = this;

      if ((($a = self['$nan?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self};
      
      if (self == 0) {
        if (1 / self > 0) {
          return 0;
        }
        else {
          return Math.PI;
        }
      }
      else if (self < 0) {
        return Math.PI;
      }
      else {
        return 0;
      }
    
    }, TMP_26.$$arity = 0);

    Opal.alias(self, 'arg', 'angle');

    Opal.alias(self, 'phase', 'angle');

    Opal.defn(self, '$bit_length', TMP_27 = function $$bit_length() {
      var $a, self = this;

      if ((($a = $scope.get('Integer')['$==='](self)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('NoMethodError').$new("undefined method `bit_length` for " + (self) + ":Float", "bit_length"))
      };
      
      if (self === 0 || self === -1) {
        return 0;
      }

      var result = 0,
          value  = self < 0 ? ~self : self;

      while (value != 0) {
        result   += 1;
        value  >>>= 1;
      }

      return result;
    
    }, TMP_27.$$arity = 0);

    Opal.defn(self, '$ceil', TMP_28 = function $$ceil() {
      var self = this;

      return Math.ceil(self);
    }, TMP_28.$$arity = 0);

    Opal.defn(self, '$chr', TMP_29 = function $$chr(encoding) {
      var self = this;

      return String.fromCharCode(self);
    }, TMP_29.$$arity = -1);

    Opal.defn(self, '$denominator', TMP_30 = function $$denominator() {
      var $a, $b, self = this, $iter = TMP_30.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_30.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      if ((($a = ((($b = self['$nan?']()) !== false && $b !== nil && $b != null) ? $b : self['$infinite?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return 1
        } else {
        return ($a = ($b = self, Opal.find_super_dispatcher(self, 'denominator', TMP_30, false)), $a.$$p = $iter, $a).apply($b, $zuper)
      };
    }, TMP_30.$$arity = 0);

    Opal.defn(self, '$downto', TMP_31 = function $$downto(stop) {
      var $a, $b, TMP_32, self = this, $iter = TMP_31.$$p, block = $iter || nil;

      TMP_31.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_32 = function(){var self = TMP_32.$$s || this, $c;

        if ((($c = $scope.get('Numeric')['$==='](stop)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            } else {
            self.$raise($scope.get('ArgumentError'), "comparison of " + (self.$class()) + " with " + (stop.$class()) + " failed")
          };
          if ((($c = $rb_gt(stop, self)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return 0
            } else {
            return $rb_plus($rb_minus(self, stop), 1)
          };}, TMP_32.$$s = self, TMP_32.$$arity = 0, TMP_32), $a).call($b, "downto", stop)
      };
      
      if (!stop.$$is_number) {
        self.$raise($scope.get('ArgumentError'), "comparison of " + (self.$class()) + " with " + (stop.$class()) + " failed")
      }
      for (var i = self; i >= stop; i--) {
        block(i);
      }
    ;
      return self;
    }, TMP_31.$$arity = 1);

    Opal.alias(self, 'eql?', '==');

    Opal.defn(self, '$equal?', TMP_33 = function(other) {
      var $a, self = this;

      return ((($a = self['$=='](other)) !== false && $a !== nil && $a != null) ? $a : isNaN(self) && isNaN(other));
    }, TMP_33.$$arity = 1);

    Opal.defn(self, '$even?', TMP_34 = function() {
      var self = this;

      return self % 2 === 0;
    }, TMP_34.$$arity = 0);

    Opal.defn(self, '$floor', TMP_35 = function $$floor() {
      var self = this;

      return Math.floor(self);
    }, TMP_35.$$arity = 0);

    Opal.defn(self, '$gcd', TMP_36 = function $$gcd(other) {
      var $a, self = this;

      if ((($a = $scope.get('Integer')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('TypeError'), "not an integer")
      };
      
      var min = Math.abs(self),
          max = Math.abs(other);

      while (min > 0) {
        var tmp = min;

        min = max % min;
        max = tmp;
      }

      return max;
    
    }, TMP_36.$$arity = 1);

    Opal.defn(self, '$gcdlcm', TMP_37 = function $$gcdlcm(other) {
      var self = this;

      return [self.$gcd(), self.$lcm()];
    }, TMP_37.$$arity = 1);

    Opal.defn(self, '$integer?', TMP_38 = function() {
      var self = this;

      return self % 1 === 0;
    }, TMP_38.$$arity = 0);

    Opal.defn(self, '$is_a?', TMP_39 = function(klass) {
      var $a, $b, self = this, $iter = TMP_39.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_39.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      if ((($a = (($b = klass['$==']($scope.get('Fixnum'))) ? $scope.get('Integer')['$==='](self) : klass['$==']($scope.get('Fixnum')))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return true};
      if ((($a = (($b = klass['$==']($scope.get('Integer'))) ? $scope.get('Integer')['$==='](self) : klass['$==']($scope.get('Integer')))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return true};
      if ((($a = (($b = klass['$==']($scope.get('Float'))) ? $scope.get('Float')['$==='](self) : klass['$==']($scope.get('Float')))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return true};
      return ($a = ($b = self, Opal.find_super_dispatcher(self, 'is_a?', TMP_39, false)), $a.$$p = $iter, $a).apply($b, $zuper);
    }, TMP_39.$$arity = 1);

    Opal.alias(self, 'kind_of?', 'is_a?');

    Opal.defn(self, '$instance_of?', TMP_40 = function(klass) {
      var $a, $b, self = this, $iter = TMP_40.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_40.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      if ((($a = (($b = klass['$==']($scope.get('Fixnum'))) ? $scope.get('Integer')['$==='](self) : klass['$==']($scope.get('Fixnum')))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return true};
      if ((($a = (($b = klass['$==']($scope.get('Integer'))) ? $scope.get('Integer')['$==='](self) : klass['$==']($scope.get('Integer')))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return true};
      if ((($a = (($b = klass['$==']($scope.get('Float'))) ? $scope.get('Float')['$==='](self) : klass['$==']($scope.get('Float')))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return true};
      return ($a = ($b = self, Opal.find_super_dispatcher(self, 'instance_of?', TMP_40, false)), $a.$$p = $iter, $a).apply($b, $zuper);
    }, TMP_40.$$arity = 1);

    Opal.defn(self, '$lcm', TMP_41 = function $$lcm(other) {
      var $a, self = this;

      if ((($a = $scope.get('Integer')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('TypeError'), "not an integer")
      };
      
      if (self == 0 || other == 0) {
        return 0;
      }
      else {
        return Math.abs(self * other / self.$gcd(other));
      }
    
    }, TMP_41.$$arity = 1);

    Opal.alias(self, 'magnitude', 'abs');

    Opal.alias(self, 'modulo', '%');

    Opal.defn(self, '$next', TMP_42 = function $$next() {
      var self = this;

      return self + 1;
    }, TMP_42.$$arity = 0);

    Opal.defn(self, '$nonzero?', TMP_43 = function() {
      var self = this;

      return self == 0 ? nil : self;
    }, TMP_43.$$arity = 0);

    Opal.defn(self, '$numerator', TMP_44 = function $$numerator() {
      var $a, $b, self = this, $iter = TMP_44.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_44.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      if ((($a = ((($b = self['$nan?']()) !== false && $b !== nil && $b != null) ? $b : self['$infinite?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self
        } else {
        return ($a = ($b = self, Opal.find_super_dispatcher(self, 'numerator', TMP_44, false)), $a.$$p = $iter, $a).apply($b, $zuper)
      };
    }, TMP_44.$$arity = 0);

    Opal.defn(self, '$odd?', TMP_45 = function() {
      var self = this;

      return self % 2 !== 0;
    }, TMP_45.$$arity = 0);

    Opal.defn(self, '$ord', TMP_46 = function $$ord() {
      var self = this;

      return self;
    }, TMP_46.$$arity = 0);

    Opal.defn(self, '$pred', TMP_47 = function $$pred() {
      var self = this;

      return self - 1;
    }, TMP_47.$$arity = 0);

    Opal.defn(self, '$quo', TMP_48 = function $$quo(other) {
      var $a, $b, self = this, $iter = TMP_48.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_48.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      if ((($a = $scope.get('Integer')['$==='](self)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = self, Opal.find_super_dispatcher(self, 'quo', TMP_48, false)), $a.$$p = $iter, $a).apply($b, $zuper)
        } else {
        return $rb_divide(self, other)
      };
    }, TMP_48.$$arity = 1);

    Opal.defn(self, '$rationalize', TMP_49 = function $$rationalize(eps) {
      var $a, $b, self = this, f = nil, n = nil;

      
      if (arguments.length > 1) {
        self.$raise($scope.get('ArgumentError'), "wrong number of arguments (" + (arguments.length) + " for 0..1)");
      }
    ;
      if ((($a = $scope.get('Integer')['$==='](self)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return $scope.get('Rational').$new(self, 1)
      } else if ((($a = self['$infinite?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$raise($scope.get('FloatDomainError'), "Infinity")
      } else if ((($a = self['$nan?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$raise($scope.get('FloatDomainError'), "NaN")
      } else if ((($a = eps == null) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        $b = $scope.get('Math').$frexp(self), $a = Opal.to_ary($b), f = ($a[0] == null ? nil : $a[0]), n = ($a[1] == null ? nil : $a[1]), $b;
        f = $scope.get('Math').$ldexp(f, (($scope.get('Float')).$$scope.get('MANT_DIG'))).$to_i();
        n = $rb_minus(n, (($scope.get('Float')).$$scope.get('MANT_DIG')));
        return $scope.get('Rational').$new($rb_times(2, f), (1)['$<<'](($rb_minus(1, n)))).$rationalize($scope.get('Rational').$new(1, (1)['$<<'](($rb_minus(1, n)))));
        } else {
        return self.$to_r().$rationalize(eps)
      };
    }, TMP_49.$$arity = -1);

    Opal.defn(self, '$round', TMP_50 = function $$round(ndigits) {
      var $a, $b, self = this, _ = nil, exp = nil;

      if ((($a = $scope.get('Integer')['$==='](self)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = ndigits == null) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self};
        if ((($a = ($b = $scope.get('Float')['$==='](ndigits), $b !== false && $b !== nil && $b != null ?ndigits['$infinite?']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('RangeError'), "Infinity")};
        ndigits = $scope.get('Opal')['$coerce_to!'](ndigits, $scope.get('Integer'), "to_int");
        if ((($a = $rb_lt(ndigits, (($scope.get('Integer')).$$scope.get('MIN')))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('RangeError'), "out of bounds")};
        if ((($a = ndigits >= 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self};
        ndigits = ndigits['$-@']();
        
        if (0.415241 * ndigits - 0.125 > self.$size()) {
          return 0;
        }

        var f = Math.pow(10, ndigits),
            x = Math.floor((Math.abs(x) + f / 2) / f) * f;

        return self < 0 ? -x : x;
      ;
        } else {
        if ((($a = ($b = self['$nan?'](), $b !== false && $b !== nil && $b != null ?ndigits == null : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('FloatDomainError'), "NaN")};
        ndigits = $scope.get('Opal')['$coerce_to!'](ndigits || 0, $scope.get('Integer'), "to_int");
        if ((($a = $rb_le(ndigits, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = self['$nan?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.$raise($scope.get('RangeError'), "NaN")
          } else if ((($a = self['$infinite?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.$raise($scope.get('FloatDomainError'), "Infinity")}
        } else if (ndigits['$=='](0)) {
          return Math.round(self)
        } else if ((($a = ((($b = self['$nan?']()) !== false && $b !== nil && $b != null) ? $b : self['$infinite?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self};
        $b = $scope.get('Math').$frexp(self), $a = Opal.to_ary($b), _ = ($a[0] == null ? nil : $a[0]), exp = ($a[1] == null ? nil : $a[1]), $b;
        if ((($a = $rb_ge(ndigits, $rb_minus(($rb_plus((($scope.get('Float')).$$scope.get('DIG')), 2)), ((function() {if ((($b = $rb_gt(exp, 0)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          return $rb_divide(exp, 4)
          } else {
          return $rb_minus($rb_divide(exp, 3), 1)
        }; return nil; })())))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self};
        if ((($a = $rb_lt(ndigits, ((function() {if ((($b = $rb_gt(exp, 0)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          return $rb_plus($rb_divide(exp, 3), 1)
          } else {
          return $rb_divide(exp, 4)
        }; return nil; })())['$-@']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return 0};
        return Math.round(self * Math.pow(10, ndigits)) / Math.pow(10, ndigits);
      };
    }, TMP_50.$$arity = -1);

    Opal.defn(self, '$step', TMP_51 = function $$step(limit, step) {
      var $a, self = this, $iter = TMP_51.$$p, block = $iter || nil;

      if (step == null) {
        step = 1;
      }
      TMP_51.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        return self.$enum_for("step", limit, step)
      };
      if ((($a = step == 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "step cannot be 0")};
      
      var value = self;

      if (limit === Infinity || limit === -Infinity) {
        block(value);
        return self;
      }

      if (step > 0) {
        while (value <= limit) {
          block(value);
          value += step;
        }
      }
      else {
        while (value >= limit) {
          block(value);
          value += step;
        }
      }
    
      return self;
    }, TMP_51.$$arity = -2);

    Opal.alias(self, 'succ', 'next');

    Opal.defn(self, '$times', TMP_52 = function $$times() {
      var $a, $b, TMP_53, self = this, $iter = TMP_52.$$p, block = $iter || nil;

      TMP_52.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_53 = function(){var self = TMP_53.$$s || this;

        return self}, TMP_53.$$s = self, TMP_53.$$arity = 0, TMP_53), $a).call($b, "times")
      };
      
      for (var i = 0; i < self; i++) {
        block(i);
      }
    
      return self;
    }, TMP_52.$$arity = 0);

    Opal.defn(self, '$to_f', TMP_54 = function $$to_f() {
      var self = this;

      return self;
    }, TMP_54.$$arity = 0);

    Opal.defn(self, '$to_i', TMP_55 = function $$to_i() {
      var self = this;

      return parseInt(self, 10);
    }, TMP_55.$$arity = 0);

    Opal.alias(self, 'to_int', 'to_i');

    Opal.defn(self, '$to_r', TMP_56 = function $$to_r() {
      var $a, $b, self = this, f = nil, e = nil;

      if ((($a = $scope.get('Integer')['$==='](self)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return $scope.get('Rational').$new(self, 1)
        } else {
        $b = $scope.get('Math').$frexp(self), $a = Opal.to_ary($b), f = ($a[0] == null ? nil : $a[0]), e = ($a[1] == null ? nil : $a[1]), $b;
        f = $scope.get('Math').$ldexp(f, (($scope.get('Float')).$$scope.get('MANT_DIG'))).$to_i();
        e = $rb_minus(e, (($scope.get('Float')).$$scope.get('MANT_DIG')));
        return ($rb_times(f, ((($scope.get('Float')).$$scope.get('RADIX'))['$**'](e)))).$to_r();
      };
    }, TMP_56.$$arity = 0);

    Opal.defn(self, '$to_s', TMP_57 = function $$to_s(base) {
      var $a, $b, self = this;

      if (base == null) {
        base = 10;
      }
      if ((($a = ((($b = $rb_lt(base, 2)) !== false && $b !== nil && $b != null) ? $b : $rb_gt(base, 36))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "base must be between 2 and 36")};
      return self.toString(base);
    }, TMP_57.$$arity = -1);

    Opal.alias(self, 'truncate', 'to_i');

    Opal.alias(self, 'inspect', 'to_s');

    Opal.defn(self, '$divmod', TMP_58 = function $$divmod(other) {
      var $a, $b, self = this, $iter = TMP_58.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_58.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      if ((($a = ((($b = self['$nan?']()) !== false && $b !== nil && $b != null) ? $b : other['$nan?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$raise($scope.get('FloatDomainError'), "NaN")
      } else if ((($a = self['$infinite?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$raise($scope.get('FloatDomainError'), "Infinity")
        } else {
        return ($a = ($b = self, Opal.find_super_dispatcher(self, 'divmod', TMP_58, false)), $a.$$p = $iter, $a).apply($b, $zuper)
      };
    }, TMP_58.$$arity = 1);

    Opal.defn(self, '$upto', TMP_59 = function $$upto(stop) {
      var $a, $b, TMP_60, self = this, $iter = TMP_59.$$p, block = $iter || nil;

      TMP_59.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_60 = function(){var self = TMP_60.$$s || this, $c;

        if ((($c = $scope.get('Numeric')['$==='](stop)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            } else {
            self.$raise($scope.get('ArgumentError'), "comparison of " + (self.$class()) + " with " + (stop.$class()) + " failed")
          };
          if ((($c = $rb_lt(stop, self)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return 0
            } else {
            return $rb_plus($rb_minus(stop, self), 1)
          };}, TMP_60.$$s = self, TMP_60.$$arity = 0, TMP_60), $a).call($b, "upto", stop)
      };
      
      if (!stop.$$is_number) {
        self.$raise($scope.get('ArgumentError'), "comparison of " + (self.$class()) + " with " + (stop.$class()) + " failed")
      }
      for (var i = self; i <= stop; i++) {
        block(i);
      }
    ;
      return self;
    }, TMP_59.$$arity = 1);

    Opal.defn(self, '$zero?', TMP_61 = function() {
      var self = this;

      return self == 0;
    }, TMP_61.$$arity = 0);

    Opal.defn(self, '$size', TMP_62 = function $$size() {
      var self = this;

      return 4;
    }, TMP_62.$$arity = 0);

    Opal.defn(self, '$nan?', TMP_63 = function() {
      var self = this;

      return isNaN(self);
    }, TMP_63.$$arity = 0);

    Opal.defn(self, '$finite?', TMP_64 = function() {
      var self = this;

      return self != Infinity && self != -Infinity && !isNaN(self);
    }, TMP_64.$$arity = 0);

    Opal.defn(self, '$infinite?', TMP_65 = function() {
      var self = this;

      
      if (self == Infinity) {
        return +1;
      }
      else if (self == -Infinity) {
        return -1;
      }
      else {
        return nil;
      }
    
    }, TMP_65.$$arity = 0);

    Opal.defn(self, '$positive?', TMP_66 = function() {
      var self = this;

      return self == Infinity || 1 / self > 0;
    }, TMP_66.$$arity = 0);

    return (Opal.defn(self, '$negative?', TMP_67 = function() {
      var self = this;

      return self == -Infinity || 1 / self < 0;
    }, TMP_67.$$arity = 0), nil) && 'negative?';
  })($scope.base, $scope.get('Numeric'));
  Opal.cdecl($scope, 'Fixnum', $scope.get('Number'));
  (function($base, $super) {
    function $Integer(){};
    var self = $Integer = $klass($base, $super, 'Integer', $Integer);

    var def = self.$$proto, $scope = self.$$scope, TMP_68;

    Opal.defs(self, '$===', TMP_68 = function(other) {
      var self = this;

      
      if (!other.$$is_number) {
        return false;
      }

      return (other % 1) === 0;
    
    }, TMP_68.$$arity = 1);

    Opal.cdecl($scope, 'MAX', Math.pow(2, 30) - 1);

    return Opal.cdecl($scope, 'MIN', -Math.pow(2, 30));
  })($scope.base, $scope.get('Numeric'));
  return (function($base, $super) {
    function $Float(){};
    var self = $Float = $klass($base, $super, 'Float', $Float);

    var def = self.$$proto, $scope = self.$$scope, TMP_69, $a;

    Opal.defs(self, '$===', TMP_69 = function(other) {
      var self = this;

      return !!other.$$is_number;
    }, TMP_69.$$arity = 1);

    Opal.cdecl($scope, 'INFINITY', Infinity);

    Opal.cdecl($scope, 'MAX', Number.MAX_VALUE);

    Opal.cdecl($scope, 'MIN', Number.MIN_VALUE);

    Opal.cdecl($scope, 'NAN', NaN);

    Opal.cdecl($scope, 'DIG', 15);

    Opal.cdecl($scope, 'MANT_DIG', 53);

    Opal.cdecl($scope, 'RADIX', 2);

    if ((($a = (typeof(Number.EPSILON) !== "undefined")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      return Opal.cdecl($scope, 'EPSILON', Number.EPSILON)
      } else {
      return Opal.cdecl($scope, 'EPSILON', 2.2204460492503130808472633361816E-16)
    };
  })($scope.base, $scope.get('Numeric'));
};
/* Generated by Opal 0.10.3 */
Opal.modules["corelib/range"] = function(Opal) {
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$include', '$attr_reader', '$<=>', '$raise', '$include?', '$<=', '$<', '$enum_for', '$upto', '$to_proc', '$succ', '$!', '$==', '$===', '$exclude_end?', '$eql?', '$begin', '$end', '$-', '$abs', '$to_i', '$inspect', '$[]']);
  self.$require("corelib/enumerable");
  return (function($base, $super) {
    function $Range(){};
    var self = $Range = $klass($base, $super, 'Range', $Range);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13;

    def.begin = def.exclude = def.end = nil;
    self.$include($scope.get('Enumerable'));

    def.$$is_range = true;

    self.$attr_reader("begin", "end");

    Opal.defn(self, '$initialize', TMP_1 = function $$initialize(first, last, exclude) {
      var $a, self = this;

      if (exclude == null) {
        exclude = false;
      }
      if ((($a = first['$<=>'](last)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'))
      };
      self.begin = first;
      self.end = last;
      return self.exclude = exclude;
    }, TMP_1.$$arity = -3);

    Opal.defn(self, '$==', TMP_2 = function(other) {
      var self = this;

      
      if (!other.$$is_range) {
        return false;
      }

      return self.exclude === other.exclude &&
             self.begin   ==  other.begin &&
             self.end     ==  other.end;
    
    }, TMP_2.$$arity = 1);

    Opal.defn(self, '$===', TMP_3 = function(value) {
      var self = this;

      return self['$include?'](value);
    }, TMP_3.$$arity = 1);

    Opal.defn(self, '$cover?', TMP_4 = function(value) {
      var $a, $b, self = this;

      return ($a = $rb_le(self.begin, value), $a !== false && $a !== nil && $a != null ?((function() {if ((($b = self.exclude) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        return $rb_lt(value, self.end)
        } else {
        return $rb_le(value, self.end)
      }; return nil; })()) : $a);
    }, TMP_4.$$arity = 1);

    Opal.defn(self, '$each', TMP_5 = function $$each() {
      var $a, $b, $c, self = this, $iter = TMP_5.$$p, block = $iter || nil, current = nil, last = nil;

      TMP_5.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("each")
      };
      
      var i, limit;

      if (self.begin.$$is_number && self.end.$$is_number) {
        if (self.begin % 1 !== 0 || self.end % 1 !== 0) {
          self.$raise($scope.get('TypeError'), "can't iterate from Float")
        }

        for (i = self.begin, limit = self.end + (function() {if ((($a = self.exclude) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return 0
        } else {
        return 1
      }; return nil; })(); i < limit; i++) {
          block(i);
        }

        return self;
      }

      if (self.begin.$$is_string && self.end.$$is_string) {
        ($a = ($b = self.begin).$upto, $a.$$p = block.$to_proc(), $a).call($b, self.end, self.exclude)
        return self;
      }
    ;
      current = self.begin;
      last = self.end;
      while ((($c = $rb_lt(current, last)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
      Opal.yield1(block, current);
      current = current.$succ();};
      if ((($a = ($c = self.exclude['$!'](), $c !== false && $c !== nil && $c != null ?current['$=='](last) : $c)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        Opal.yield1(block, current)};
      return self;
    }, TMP_5.$$arity = 0);

    Opal.defn(self, '$eql?', TMP_6 = function(other) {
      var $a, $b, self = this;

      if ((($a = $scope.get('Range')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return false
      };
      return ($a = ($b = self.exclude['$==='](other['$exclude_end?']()), $b !== false && $b !== nil && $b != null ?self.begin['$eql?'](other.$begin()) : $b), $a !== false && $a !== nil && $a != null ?self.end['$eql?'](other.$end()) : $a);
    }, TMP_6.$$arity = 1);

    Opal.defn(self, '$exclude_end?', TMP_7 = function() {
      var self = this;

      return self.exclude;
    }, TMP_7.$$arity = 0);

    Opal.alias(self, 'first', 'begin');

    Opal.alias(self, 'include?', 'cover?');

    Opal.alias(self, 'last', 'end');

    Opal.defn(self, '$max', TMP_8 = function $$max() {
      var $a, $b, self = this, $iter = TMP_8.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_8.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      if (($yield !== nil)) {
        return ($a = ($b = self, Opal.find_super_dispatcher(self, 'max', TMP_8, false)), $a.$$p = $iter, $a).apply($b, $zuper)
        } else {
        return self.exclude ? self.end - 1 : self.end;
      };
    }, TMP_8.$$arity = 0);

    Opal.alias(self, 'member?', 'cover?');

    Opal.defn(self, '$min', TMP_9 = function $$min() {
      var $a, $b, self = this, $iter = TMP_9.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_9.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      if (($yield !== nil)) {
        return ($a = ($b = self, Opal.find_super_dispatcher(self, 'min', TMP_9, false)), $a.$$p = $iter, $a).apply($b, $zuper)
        } else {
        return self.begin
      };
    }, TMP_9.$$arity = 0);

    Opal.alias(self, 'member?', 'include?');

    Opal.defn(self, '$size', TMP_10 = function $$size() {
      var $a, $b, self = this, _begin = nil, _end = nil, infinity = nil;

      _begin = self.begin;
      _end = self.end;
      if ((($a = self.exclude) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        _end = $rb_minus(_end, 1)};
      if ((($a = ($b = $scope.get('Numeric')['$==='](_begin), $b !== false && $b !== nil && $b != null ?$scope.get('Numeric')['$==='](_end) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return nil
      };
      if ((($a = $rb_lt(_end, _begin)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return 0};
      infinity = (($scope.get('Float')).$$scope.get('INFINITY'));
      if ((($a = ((($b = infinity['$=='](_begin.$abs())) !== false && $b !== nil && $b != null) ? $b : _end.$abs()['$=='](infinity))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return infinity};
      return ((Math.abs(_end - _begin) + 1)).$to_i();
    }, TMP_10.$$arity = 0);

    Opal.defn(self, '$step', TMP_11 = function $$step(n) {
      var self = this;

      if (n == null) {
        n = 1;
      }
      return self.$raise($scope.get('NotImplementedError'));
    }, TMP_11.$$arity = -1);

    Opal.defn(self, '$to_s', TMP_12 = function $$to_s() {
      var self = this;

      return self.begin.$inspect() + (self.exclude ? '...' : '..') + self.end.$inspect();
    }, TMP_12.$$arity = 0);

    Opal.alias(self, 'inspect', 'to_s');

    return (Opal.defn(self, '$marshal_load', TMP_13 = function $$marshal_load(args) {
      var self = this;

      self.begin = args['$[]']("begin");
      self.end = args['$[]']("end");
      return self.exclude = args['$[]']("excl");
    }, TMP_13.$$arity = 1), nil) && 'marshal_load';
  })($scope.base, null);
};
/* Generated by Opal 0.10.3 */
Opal.modules["corelib/proc"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$raise', '$coerce_to!']);
  return (function($base, $super) {
    function $Proc(){};
    var self = $Proc = $klass($base, $super, 'Proc', $Proc);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10;

    def.$$is_proc = true;

    def.$$is_lambda = false;

    Opal.defs(self, '$new', TMP_1 = function() {
      var self = this, $iter = TMP_1.$$p, block = $iter || nil;

      TMP_1.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        self.$raise($scope.get('ArgumentError'), "tried to create a Proc object without a block")
      };
      return block;
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$call', TMP_2 = function $$call($a_rest) {
      var self = this, args, $iter = TMP_2.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_2.$$p = null;
      
      if (block !== nil) {
        self.$$p = block;
      }

      var result, $brk = self.$$brk;

      if ($brk) {
        try {
          if (self.$$is_lambda) {
            result = self.apply(null, args);
          }
          else {
            result = Opal.yieldX(self, args);
          }
        } catch (err) {
          if (err === $brk) {
            return $brk.$v
          }
          else {
            throw err
          }
        }
      }
      else {
        if (self.$$is_lambda) {
          result = self.apply(null, args);
        }
        else {
          result = Opal.yieldX(self, args);
        }
      }

      return result;
    
    }, TMP_2.$$arity = -1);

    Opal.alias(self, '[]', 'call');

    Opal.alias(self, '===', 'call');

    Opal.alias(self, 'yield', 'call');

    Opal.defn(self, '$to_proc', TMP_3 = function $$to_proc() {
      var self = this;

      return self;
    }, TMP_3.$$arity = 0);

    Opal.defn(self, '$lambda?', TMP_4 = function() {
      var self = this;

      return !!self.$$is_lambda;
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$arity', TMP_5 = function $$arity() {
      var self = this;

      
      if (self.$$is_curried) {
        return -1;
      } else {
        return self.$$arity;
      }
    
    }, TMP_5.$$arity = 0);

    Opal.defn(self, '$source_location', TMP_6 = function $$source_location() {
      var self = this;

      if (self.$$is_curried) { return nil; }
      return nil;
    }, TMP_6.$$arity = 0);

    Opal.defn(self, '$binding', TMP_7 = function $$binding() {
      var self = this;

      if (self.$$is_curried) { self.$raise($scope.get('ArgumentError'), "Can't create Binding") };
      return nil;
    }, TMP_7.$$arity = 0);

    Opal.defn(self, '$parameters', TMP_8 = function $$parameters() {
      var self = this;

      
      if (self.$$is_curried) {
        return [["rest"]];
      } else if (self.$$parameters) {
        if (self.$$is_lambda) {
          return self.$$parameters;
        } else {
          var result = [], i, length;

          for (i = 0, length = self.$$parameters.length; i < length; i++) {
            var parameter = self.$$parameters[i];

            if (parameter[0] === 'req') {
              // required arguments always have name
              parameter = ['opt', parameter[1]];
            }

            result.push(parameter);
          }

          return result;
        }
      } else {
        return [];
      }
    ;
    }, TMP_8.$$arity = 0);

    Opal.defn(self, '$curry', TMP_9 = function $$curry(arity) {
      var self = this;

      
      if (arity === undefined) {
        arity = self.length;
      }
      else {
        arity = $scope.get('Opal')['$coerce_to!'](arity, $scope.get('Integer'), "to_int");
        if (self.$$is_lambda && arity !== self.length) {
          self.$raise($scope.get('ArgumentError'), "wrong number of arguments (" + (arity) + " for " + (self.length) + ")")
        }
      }

      function curried () {
        var args = $slice.call(arguments),
            length = args.length,
            result;

        if (length > arity && self.$$is_lambda && !self.$$is_curried) {
          self.$raise($scope.get('ArgumentError'), "wrong number of arguments (" + (length) + " for " + (arity) + ")")
        }

        if (length >= arity) {
          return self.$call.apply(self, args);
        }

        result = function () {
          return curried.apply(null,
            args.concat($slice.call(arguments)));
        }
        result.$$is_lambda = self.$$is_lambda;
        result.$$is_curried = true;

        return result;
      };

      curried.$$is_lambda = self.$$is_lambda;
      curried.$$is_curried = true;
      return curried;
    
    }, TMP_9.$$arity = -1);

    Opal.defn(self, '$dup', TMP_10 = function $$dup() {
      var self = this;

      
      var original_proc = self.$$original_proc || self,
          proc = function () {
            return original_proc.apply(this, arguments);
          };

      for (var prop in self) {
        if (self.hasOwnProperty(prop)) {
          proc[prop] = self[prop];
        }
      }

      return proc;
    
    }, TMP_10.$$arity = 0);

    return Opal.alias(self, 'clone', 'dup');
  })($scope.base, Function)
};
/* Generated by Opal 0.10.3 */
Opal.modules["corelib/method"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$attr_reader', '$class', '$arity', '$new', '$name']);
  (function($base, $super) {
    function $Method(){};
    var self = $Method = $klass($base, $super, 'Method', $Method);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7;

    def.method = def.receiver = def.owner = def.name = nil;
    self.$attr_reader("owner", "receiver", "name");

    Opal.defn(self, '$initialize', TMP_1 = function $$initialize(receiver, method, name) {
      var self = this;

      self.receiver = receiver;
      self.owner = receiver.$class();
      self.name = name;
      return self.method = method;
    }, TMP_1.$$arity = 3);

    Opal.defn(self, '$arity', TMP_2 = function $$arity() {
      var self = this;

      return self.method.$arity();
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$parameters', TMP_3 = function $$parameters() {
      var self = this;

      return self.method.$$parameters;
    }, TMP_3.$$arity = 0);

    Opal.defn(self, '$call', TMP_4 = function $$call($a_rest) {
      var self = this, args, $iter = TMP_4.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_4.$$p = null;
      
      self.method.$$p = block;

      return self.method.apply(self.receiver, args);
    ;
    }, TMP_4.$$arity = -1);

    Opal.alias(self, '[]', 'call');

    Opal.defn(self, '$unbind', TMP_5 = function $$unbind() {
      var self = this;

      return $scope.get('UnboundMethod').$new(self.owner, self.method, self.name);
    }, TMP_5.$$arity = 0);

    Opal.defn(self, '$to_proc', TMP_6 = function $$to_proc() {
      var self = this;

      
      var proc = function () { return self.$call.apply(self, $slice.call(arguments)); };
      proc.$$unbound = self.method;
      proc.$$is_lambda = true;
      return proc;
    
    }, TMP_6.$$arity = 0);

    return (Opal.defn(self, '$inspect', TMP_7 = function $$inspect() {
      var self = this;

      return "#<Method: " + (self.receiver.$class()) + "#" + (self.name) + ">";
    }, TMP_7.$$arity = 0), nil) && 'inspect';
  })($scope.base, null);
  return (function($base, $super) {
    function $UnboundMethod(){};
    var self = $UnboundMethod = $klass($base, $super, 'UnboundMethod', $UnboundMethod);

    var def = self.$$proto, $scope = self.$$scope, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12;

    def.method = def.name = def.owner = nil;
    self.$attr_reader("owner", "name");

    Opal.defn(self, '$initialize', TMP_8 = function $$initialize(owner, method, name) {
      var self = this;

      self.owner = owner;
      self.method = method;
      return self.name = name;
    }, TMP_8.$$arity = 3);

    Opal.defn(self, '$arity', TMP_9 = function $$arity() {
      var self = this;

      return self.method.$arity();
    }, TMP_9.$$arity = 0);

    Opal.defn(self, '$parameters', TMP_10 = function $$parameters() {
      var self = this;

      return self.method.$$parameters;
    }, TMP_10.$$arity = 0);

    Opal.defn(self, '$bind', TMP_11 = function $$bind(object) {
      var self = this;

      return $scope.get('Method').$new(object, self.method, self.name);
    }, TMP_11.$$arity = 1);

    return (Opal.defn(self, '$inspect', TMP_12 = function $$inspect() {
      var self = this;

      return "#<UnboundMethod: " + (self.owner.$name()) + "#" + (self.name) + ">";
    }, TMP_12.$$arity = 0), nil) && 'inspect';
  })($scope.base, null);
};
/* Generated by Opal 0.10.3 */
Opal.modules["corelib/variables"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $gvars = Opal.gvars, $hash2 = Opal.hash2;

  Opal.add_stubs(['$new']);
  $gvars["&"] = $gvars["~"] = $gvars["`"] = $gvars["'"] = nil;
  $gvars.LOADED_FEATURES = $gvars["\""] = Opal.loaded_features;
  $gvars.LOAD_PATH = $gvars[":"] = [];
  $gvars["/"] = "\n";
  $gvars[","] = nil;
  Opal.cdecl($scope, 'ARGV', []);
  Opal.cdecl($scope, 'ARGF', $scope.get('Object').$new());
  Opal.cdecl($scope, 'ENV', $hash2([], {}));
  $gvars.VERBOSE = false;
  $gvars.DEBUG = false;
  return $gvars.SAFE = 0;
};
/* Generated by Opal 0.10.3 */
Opal.modules["opal/regexp_anchors"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$==', '$new']);
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.cdecl($scope, 'REGEXP_START', (function() {if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
      return "^"}; return nil; })());

    Opal.cdecl($scope, 'REGEXP_END', (function() {if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
      return "$"}; return nil; })());

    Opal.cdecl($scope, 'FORBIDDEN_STARTING_IDENTIFIER_CHARS', "\\u0001-\\u002F\\u003A-\\u0040\\u005B-\\u005E\\u0060\\u007B-\\u007F");

    Opal.cdecl($scope, 'FORBIDDEN_ENDING_IDENTIFIER_CHARS', "\\u0001-\\u0020\\u0022-\\u002F\\u003A-\\u003E\\u0040\\u005B-\\u005E\\u0060\\u007B-\\u007F");

    Opal.cdecl($scope, 'INLINE_IDENTIFIER_REGEXP', $scope.get('Regexp').$new("[^" + ($scope.get('FORBIDDEN_STARTING_IDENTIFIER_CHARS')) + "]*[^" + ($scope.get('FORBIDDEN_ENDING_IDENTIFIER_CHARS')) + "]"));

    Opal.cdecl($scope, 'FORBIDDEN_CONST_NAME_CHARS', "\\u0001-\\u0020\\u0021-\\u002F\\u003B-\\u003F\\u0040\\u005B-\\u005E\\u0060\\u007B-\\u007F");

    Opal.cdecl($scope, 'CONST_NAME_REGEXP', $scope.get('Regexp').$new("" + ($scope.get('REGEXP_START')) + "(::)?[A-Z][^" + ($scope.get('FORBIDDEN_CONST_NAME_CHARS')) + "]*" + ($scope.get('REGEXP_END'))));
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["opal/mini"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  self.$require("opal/base");
  self.$require("corelib/nil");
  self.$require("corelib/boolean");
  self.$require("corelib/string");
  self.$require("corelib/comparable");
  self.$require("corelib/enumerable");
  self.$require("corelib/enumerator");
  self.$require("corelib/array");
  self.$require("corelib/hash");
  self.$require("corelib/number");
  self.$require("corelib/range");
  self.$require("corelib/proc");
  self.$require("corelib/method");
  self.$require("corelib/regexp");
  self.$require("corelib/variables");
  return self.$require("opal/regexp_anchors");
};
/* Generated by Opal 0.10.3 */
Opal.modules["corelib/string/inheritance"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$new', '$allocate', '$initialize', '$to_proc', '$__send__', '$class', '$clone', '$respond_to?', '$==', '$inspect', '$+', '$*', '$map', '$split', '$enum_for', '$each_line', '$to_a', '$%', '$-']);
  self.$require("corelib/string");
  (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    return (Opal.defs(self, '$inherited', TMP_1 = function $$inherited(klass) {
      var self = this, replace = nil;

      replace = $scope.get('Class').$new((($scope.get('String')).$$scope.get('Wrapper')));
      
      klass.$$proto         = replace.$$proto;
      klass.$$proto.$$class = klass;
      klass.$$alloc         = replace.$$alloc;
      klass.$$parent        = (($scope.get('String')).$$scope.get('Wrapper'));

      klass.$allocate = replace.$allocate;
      klass.$new      = replace.$new;
    
    }, TMP_1.$$arity = 1), nil) && 'inherited'
  })($scope.base, null);
  return (function($base, $super) {
    function $Wrapper(){};
    var self = $Wrapper = $klass($base, $super, 'Wrapper', $Wrapper);

    var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_15, TMP_16, TMP_17, TMP_19, TMP_20, TMP_21;

    def.literal = nil;
    def.$$is_string = true;

    Opal.defs(self, '$allocate', TMP_2 = function $$allocate(string) {
      var $a, $b, self = this, $iter = TMP_2.$$p, $yield = $iter || nil, obj = nil;

      if (string == null) {
        string = "";
      }
      TMP_2.$$p = null;
      obj = ($a = ($b = self, Opal.find_super_dispatcher(self, 'allocate', TMP_2, false, $Wrapper)), $a.$$p = null, $a).call($b);
      obj.literal = string;
      return obj;
    }, TMP_2.$$arity = -1);

    Opal.defs(self, '$new', TMP_3 = function($a_rest) {
      var $b, $c, self = this, args, $iter = TMP_3.$$p, block = $iter || nil, obj = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_3.$$p = null;
      obj = self.$allocate();
      ($b = ($c = obj).$initialize, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args));
      return obj;
    }, TMP_3.$$arity = -1);

    Opal.defs(self, '$[]', TMP_4 = function($a_rest) {
      var self = this, objects;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      objects = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        objects[$arg_idx - 0] = arguments[$arg_idx];
      }
      return self.$allocate(objects);
    }, TMP_4.$$arity = -1);

    Opal.defn(self, '$initialize', TMP_5 = function $$initialize(string) {
      var self = this;

      if (string == null) {
        string = "";
      }
      return self.literal = string;
    }, TMP_5.$$arity = -1);

    Opal.defn(self, '$method_missing', TMP_6 = function $$method_missing($a_rest) {
      var $b, $c, self = this, args, $iter = TMP_6.$$p, block = $iter || nil, result = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_6.$$p = null;
      result = ($b = ($c = self.literal).$__send__, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args));
      if ((($b = result.$$is_string != null) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        if ((($b = result == self.literal) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          return self
          } else {
          return self.$class().$allocate(result)
        }
        } else {
        return result
      };
    }, TMP_6.$$arity = -1);

    Opal.defn(self, '$initialize_copy', TMP_7 = function $$initialize_copy(other) {
      var self = this;

      return self.literal = (other.literal).$clone();
    }, TMP_7.$$arity = 1);

    Opal.defn(self, '$respond_to?', TMP_8 = function(name, $a_rest) {
      var $b, $c, $d, self = this, $iter = TMP_8.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_8.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      return ((($b = ($c = ($d = self, Opal.find_super_dispatcher(self, 'respond_to?', TMP_8, false)), $c.$$p = $iter, $c).apply($d, $zuper)) !== false && $b !== nil && $b != null) ? $b : self.literal['$respond_to?'](name));
    }, TMP_8.$$arity = -2);

    Opal.defn(self, '$==', TMP_9 = function(other) {
      var self = this;

      return self.literal['$=='](other);
    }, TMP_9.$$arity = 1);

    Opal.alias(self, 'eql?', '==');

    Opal.alias(self, '===', '==');

    Opal.defn(self, '$to_s', TMP_10 = function $$to_s() {
      var self = this;

      return self.literal;
    }, TMP_10.$$arity = 0);

    Opal.alias(self, 'to_str', 'to_s');

    Opal.defn(self, '$inspect', TMP_11 = function $$inspect() {
      var self = this;

      return self.literal.$inspect();
    }, TMP_11.$$arity = 0);

    Opal.defn(self, '$+', TMP_12 = function(other) {
      var self = this;

      return $rb_plus(self.literal, other);
    }, TMP_12.$$arity = 1);

    Opal.defn(self, '$*', TMP_13 = function(other) {
      var self = this;

      
      var result = $rb_times(self.literal, other);

      if (result.$$is_string) {
        return self.$class().$allocate(result)
      }
      else {
        return result;
      }
    ;
    }, TMP_13.$$arity = 1);

    Opal.defn(self, '$split', TMP_15 = function $$split(pattern, limit) {
      var $a, $b, TMP_14, self = this;

      return ($a = ($b = self.literal.$split(pattern, limit)).$map, $a.$$p = (TMP_14 = function(str){var self = TMP_14.$$s || this;
if (str == null) str = nil;
      return self.$class().$allocate(str)}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14), $a).call($b);
    }, TMP_15.$$arity = -1);

    Opal.defn(self, '$replace', TMP_16 = function $$replace(string) {
      var self = this;

      return self.literal = string;
    }, TMP_16.$$arity = 1);

    Opal.defn(self, '$each_line', TMP_17 = function $$each_line(separator) {
      var $a, $b, TMP_18, self = this, $iter = TMP_17.$$p, $yield = $iter || nil;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      if (separator == null) {
        separator = $gvars["/"];
      }
      TMP_17.$$p = null;
      if (($yield !== nil)) {
        } else {
        return self.$enum_for("each_line", separator)
      };
      return ($a = ($b = self.literal).$each_line, $a.$$p = (TMP_18 = function(str){var self = TMP_18.$$s || this;
if (str == null) str = nil;
      return Opal.yield1($yield, self.$class().$allocate(str));}, TMP_18.$$s = self, TMP_18.$$arity = 1, TMP_18), $a).call($b, separator);
    }, TMP_17.$$arity = -1);

    Opal.defn(self, '$lines', TMP_19 = function $$lines(separator) {
      var $a, $b, self = this, $iter = TMP_19.$$p, block = $iter || nil, e = nil;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      if (separator == null) {
        separator = $gvars["/"];
      }
      TMP_19.$$p = null;
      e = ($a = ($b = self).$each_line, $a.$$p = block.$to_proc(), $a).call($b, separator);
      if (block !== false && block !== nil && block != null) {
        return self
        } else {
        return e.$to_a()
      };
    }, TMP_19.$$arity = -1);

    Opal.defn(self, '$%', TMP_20 = function(data) {
      var self = this;

      return self.literal['$%'](data);
    }, TMP_20.$$arity = 1);

    return (Opal.defn(self, '$instance_variables', TMP_21 = function $$instance_variables() {
      var $a, $b, self = this, $iter = TMP_21.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_21.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      return $rb_minus(($a = ($b = self, Opal.find_super_dispatcher(self, 'instance_variables', TMP_21, false)), $a.$$p = $iter, $a).apply($b, $zuper), ["@literal"]);
    }, TMP_21.$$arity = 0), nil) && 'instance_variables';
  })($scope.get('String'), null);
};
/* Generated by Opal 0.10.3 */
Opal.modules["corelib/string/encoding"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var $a, $b, TMP_13, $c, TMP_16, $d, TMP_19, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$+', '$[]', '$new', '$to_proc', '$each', '$const_set', '$sub', '$upcase', '$const_get', '$===', '$==', '$name', '$include?', '$names', '$constants', '$raise', '$attr_accessor', '$attr_reader', '$register', '$length', '$bytes', '$to_a', '$each_byte', '$bytesize', '$enum_for', '$force_encoding', '$dup', '$coerce_to!', '$find', '$nil?', '$getbyte']);
  self.$require("corelib/string");
  (function($base, $super) {
    function $Encoding(){};
    var self = $Encoding = $klass($base, $super, 'Encoding', $Encoding);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12;

    def.ascii = def.dummy = def.name = nil;
    Opal.defs(self, '$register', TMP_1 = function $$register(name, options) {
      var $a, $b, $c, TMP_2, self = this, $iter = TMP_1.$$p, block = $iter || nil, names = nil, encoding = nil;

      if (options == null) {
        options = $hash2([], {});
      }
      TMP_1.$$p = null;
      names = $rb_plus([name], (((($a = options['$[]']("aliases")) !== false && $a !== nil && $a != null) ? $a : [])));
      encoding = ($a = ($b = $scope.get('Class')).$new, $a.$$p = block.$to_proc(), $a).call($b, self).$new(name, names, ((($a = options['$[]']("ascii")) !== false && $a !== nil && $a != null) ? $a : false), ((($a = options['$[]']("dummy")) !== false && $a !== nil && $a != null) ? $a : false));
      return ($a = ($c = names).$each, $a.$$p = (TMP_2 = function(name){var self = TMP_2.$$s || this;
if (name == null) name = nil;
      return self.$const_set(name.$sub("-", "_"), encoding)}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $a).call($c);
    }, TMP_1.$$arity = -2);

    Opal.defs(self, '$find', TMP_4 = function $$find(name) {try {

      var $a, $b, TMP_3, self = this, upcase = nil;

      upcase = name.$upcase();
      ($a = ($b = self.$constants()).$each, $a.$$p = (TMP_3 = function(const$){var self = TMP_3.$$s || this, $c, $d, encoding = nil;
if (const$ == null) const$ = nil;
      encoding = self.$const_get(const$);
        if ((($c = $scope.get('Encoding')['$==='](encoding)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          } else {
          return nil;
        };
        if ((($c = ((($d = encoding.$name()['$=='](upcase)) !== false && $d !== nil && $d != null) ? $d : encoding.$names()['$include?'](upcase))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          Opal.ret(encoding)
          } else {
          return nil
        };}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($b);
      return self.$raise($scope.get('ArgumentError'), "unknown encoding name - " + (name));
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_4.$$arity = 1);

    (function(self) {
      var $scope = self.$$scope, def = self.$$proto;

      return self.$attr_accessor("default_external")
    })(Opal.get_singleton_class(self));

    self.$attr_reader("name", "names");

    Opal.defn(self, '$initialize', TMP_5 = function $$initialize(name, names, ascii, dummy) {
      var self = this;

      self.name = name;
      self.names = names;
      self.ascii = ascii;
      return self.dummy = dummy;
    }, TMP_5.$$arity = 4);

    Opal.defn(self, '$ascii_compatible?', TMP_6 = function() {
      var self = this;

      return self.ascii;
    }, TMP_6.$$arity = 0);

    Opal.defn(self, '$dummy?', TMP_7 = function() {
      var self = this;

      return self.dummy;
    }, TMP_7.$$arity = 0);

    Opal.defn(self, '$to_s', TMP_8 = function $$to_s() {
      var self = this;

      return self.name;
    }, TMP_8.$$arity = 0);

    Opal.defn(self, '$inspect', TMP_9 = function $$inspect() {
      var $a, self = this;

      return "#<Encoding:" + (self.name) + ((function() {if ((($a = self.dummy) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return " (dummy)"
        } else {
        return nil
      }; return nil; })()) + ">";
    }, TMP_9.$$arity = 0);

    Opal.defn(self, '$each_byte', TMP_10 = function $$each_byte($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'));
    }, TMP_10.$$arity = -1);

    Opal.defn(self, '$getbyte', TMP_11 = function $$getbyte($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'));
    }, TMP_11.$$arity = -1);

    Opal.defn(self, '$bytesize', TMP_12 = function $$bytesize($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'));
    }, TMP_12.$$arity = -1);

    (function($base, $super) {
      function $EncodingError(){};
      var self = $EncodingError = $klass($base, $super, 'EncodingError', $EncodingError);

      var def = self.$$proto, $scope = self.$$scope;

      return nil;
    })($scope.base, $scope.get('StandardError'));

    return (function($base, $super) {
      function $CompatibilityError(){};
      var self = $CompatibilityError = $klass($base, $super, 'CompatibilityError', $CompatibilityError);

      var def = self.$$proto, $scope = self.$$scope;

      return nil;
    })($scope.base, $scope.get('EncodingError'));
  })($scope.base, null);
  ($a = ($b = $scope.get('Encoding')).$register, $a.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this, TMP_14, TMP_15;

  Opal.def(self, '$each_byte', TMP_14 = function $$each_byte(string) {
      var self = this, $iter = TMP_14.$$p, block = $iter || nil;

      TMP_14.$$p = null;
      
      for (var i = 0, length = string.length; i < length; i++) {
        var code = string.charCodeAt(i);

        if (code <= 0x7f) {
          Opal.yield1(block, code);
        }
        else {
          var encoded = encodeURIComponent(string.charAt(i)).substr(1).split('%');

          for (var j = 0, encoded_length = encoded.length; j < encoded_length; j++) {
            Opal.yield1(block, parseInt(encoded[j], 16));
          }
        }
      }
    
    }, TMP_14.$$arity = 1);
    return (Opal.def(self, '$bytesize', TMP_15 = function $$bytesize() {
      var self = this;

      return self.$bytes().$length();
    }, TMP_15.$$arity = 0), nil) && 'bytesize';}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13), $a).call($b, "UTF-8", $hash2(["aliases", "ascii"], {"aliases": ["CP65001"], "ascii": true}));
  ($a = ($c = $scope.get('Encoding')).$register, $a.$$p = (TMP_16 = function(){var self = TMP_16.$$s || this, TMP_17, TMP_18;

  Opal.def(self, '$each_byte', TMP_17 = function $$each_byte(string) {
      var self = this, $iter = TMP_17.$$p, block = $iter || nil;

      TMP_17.$$p = null;
      
      for (var i = 0, length = string.length; i < length; i++) {
        var code = string.charCodeAt(i);

        Opal.yield1(block, code & 0xff);
        Opal.yield1(block, code >> 8);
      }
    
    }, TMP_17.$$arity = 1);
    return (Opal.def(self, '$bytesize', TMP_18 = function $$bytesize() {
      var self = this;

      return self.$bytes().$length();
    }, TMP_18.$$arity = 0), nil) && 'bytesize';}, TMP_16.$$s = self, TMP_16.$$arity = 0, TMP_16), $a).call($c, "UTF-16LE");
  ($a = ($d = $scope.get('Encoding')).$register, $a.$$p = (TMP_19 = function(){var self = TMP_19.$$s || this, TMP_20, TMP_21;

  Opal.def(self, '$each_byte', TMP_20 = function $$each_byte(string) {
      var self = this, $iter = TMP_20.$$p, block = $iter || nil;

      TMP_20.$$p = null;
      
      for (var i = 0, length = string.length; i < length; i++) {
        Opal.yield1(block, string.charCodeAt(i) & 0xff);
      }
    
    }, TMP_20.$$arity = 1);
    return (Opal.def(self, '$bytesize', TMP_21 = function $$bytesize() {
      var self = this;

      return self.$bytes().$length();
    }, TMP_21.$$arity = 0), nil) && 'bytesize';}, TMP_19.$$s = self, TMP_19.$$arity = 0, TMP_19), $a).call($d, "ASCII-8BIT", $hash2(["aliases", "ascii"], {"aliases": ["BINARY"], "ascii": true}));
  return (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28;

    def.encoding = nil;
    String.prototype.encoding = (($scope.get('Encoding')).$$scope.get('UTF_16LE'));

    Opal.defn(self, '$bytes', TMP_22 = function $$bytes() {
      var self = this;

      return self.$each_byte().$to_a();
    }, TMP_22.$$arity = 0);

    Opal.defn(self, '$bytesize', TMP_23 = function $$bytesize() {
      var self = this;

      return self.encoding.$bytesize(self);
    }, TMP_23.$$arity = 0);

    Opal.defn(self, '$each_byte', TMP_24 = function $$each_byte() {
      var $a, $b, self = this, $iter = TMP_24.$$p, block = $iter || nil;

      TMP_24.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("each_byte")
      };
      ($a = ($b = self.encoding).$each_byte, $a.$$p = block.$to_proc(), $a).call($b, self);
      return self;
    }, TMP_24.$$arity = 0);

    Opal.defn(self, '$encode', TMP_25 = function $$encode(encoding) {
      var self = this;

      return self.$dup().$force_encoding(encoding);
    }, TMP_25.$$arity = 1);

    Opal.defn(self, '$encoding', TMP_26 = function $$encoding() {
      var self = this;

      return self.encoding;
    }, TMP_26.$$arity = 0);

    Opal.defn(self, '$force_encoding', TMP_27 = function $$force_encoding(encoding) {
      var $a, self = this;

      encoding = $scope.get('Opal')['$coerce_to!'](encoding, $scope.get('String'), "to_str");
      encoding = $scope.get('Encoding').$find(encoding);
      if (encoding['$=='](self.encoding)) {
        return self};
      if ((($a = encoding['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "unknown encoding name - " + (encoding))};
      
      var result = new String(self);
      result.encoding = encoding;

      return result;
    
    }, TMP_27.$$arity = 1);

    return (Opal.defn(self, '$getbyte', TMP_28 = function $$getbyte(idx) {
      var self = this;

      return self.encoding.$getbyte(self, idx);
    }, TMP_28.$$arity = 1), nil) && 'getbyte';
  })($scope.base, null);
};
/* Generated by Opal 0.10.3 */
Opal.modules["corelib/math"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$new', '$raise', '$Float', '$type_error', '$Integer', '$module_function', '$checked', '$float!', '$===', '$gamma', '$-', '$integer!', '$/', '$infinite?']);
  return (function($base) {
    var $Math, self = $Math = $module($base, 'Math');

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, $a, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28, TMP_29;

    Opal.cdecl($scope, 'E', Math.E);

    Opal.cdecl($scope, 'PI', Math.PI);

    Opal.cdecl($scope, 'DomainError', $scope.get('Class').$new($scope.get('StandardError')));

    Opal.defs(self, '$checked', TMP_1 = function $$checked(method, $a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      
      if (isNaN(args[0]) || (args.length == 2 && isNaN(args[1]))) {
        return NaN;
      }

      var result = Math[method].apply(null, args);

      if (isNaN(result)) {
        self.$raise($scope.get('DomainError'), "Numerical argument is out of domain - \"" + (method) + "\"");
      }

      return result;
    
    }, TMP_1.$$arity = -2);

    Opal.defs(self, '$float!', TMP_2 = function(value) {
      var self = this;

      try {
        return self.$Float(value)
      } catch ($err) {
        if (Opal.rescue($err, [$scope.get('ArgumentError')])) {
          try {
            return self.$raise($scope.get('Opal').$type_error(value, $scope.get('Float')))
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };
    }, TMP_2.$$arity = 1);

    Opal.defs(self, '$integer!', TMP_3 = function(value) {
      var self = this;

      try {
        return self.$Integer(value)
      } catch ($err) {
        if (Opal.rescue($err, [$scope.get('ArgumentError')])) {
          try {
            return self.$raise($scope.get('Opal').$type_error(value, $scope.get('Integer')))
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };
    }, TMP_3.$$arity = 1);

    self.$module_function();

    Opal.defn(self, '$acos', TMP_4 = function $$acos(x) {
      var self = this;

      return $scope.get('Math').$checked("acos", $scope.get('Math')['$float!'](x));
    }, TMP_4.$$arity = 1);

    if ((($a = (typeof(Math.acosh) !== "undefined")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.acosh = function(x) {
        return Math.log(x + Math.sqrt(x * x - 1));
      }
    
    };

    Opal.defn(self, '$acosh', TMP_5 = function $$acosh(x) {
      var self = this;

      return $scope.get('Math').$checked("acosh", $scope.get('Math')['$float!'](x));
    }, TMP_5.$$arity = 1);

    Opal.defn(self, '$asin', TMP_6 = function $$asin(x) {
      var self = this;

      return $scope.get('Math').$checked("asin", $scope.get('Math')['$float!'](x));
    }, TMP_6.$$arity = 1);

    if ((($a = (typeof(Math.asinh) !== "undefined")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.asinh = function(x) {
        return Math.log(x + Math.sqrt(x * x + 1))
      }
    ;
    };

    Opal.defn(self, '$asinh', TMP_7 = function $$asinh(x) {
      var self = this;

      return $scope.get('Math').$checked("asinh", $scope.get('Math')['$float!'](x));
    }, TMP_7.$$arity = 1);

    Opal.defn(self, '$atan', TMP_8 = function $$atan(x) {
      var self = this;

      return $scope.get('Math').$checked("atan", $scope.get('Math')['$float!'](x));
    }, TMP_8.$$arity = 1);

    Opal.defn(self, '$atan2', TMP_9 = function $$atan2(y, x) {
      var self = this;

      return $scope.get('Math').$checked("atan2", $scope.get('Math')['$float!'](y), $scope.get('Math')['$float!'](x));
    }, TMP_9.$$arity = 2);

    if ((($a = (typeof(Math.atanh) !== "undefined")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.atanh = function(x) {
        return 0.5 * Math.log((1 + x) / (1 - x));
      }
    
    };

    Opal.defn(self, '$atanh', TMP_10 = function $$atanh(x) {
      var self = this;

      return $scope.get('Math').$checked("atanh", $scope.get('Math')['$float!'](x));
    }, TMP_10.$$arity = 1);

    if ((($a = (typeof(Math.cbrt) !== "undefined")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.cbrt = function(x) {
        if (x == 0) {
          return 0;
        }

        if (x < 0) {
          return -Math.cbrt(-x);
        }

        var r  = x,
            ex = 0;

        while (r < 0.125) {
          r *= 8;
          ex--;
        }

        while (r > 1.0) {
          r *= 0.125;
          ex++;
        }

        r = (-0.46946116 * r + 1.072302) * r + 0.3812513;

        while (ex < 0) {
          r *= 0.5;
          ex++;
        }

        while (ex > 0) {
          r *= 2;
          ex--;
        }

        r = (2.0 / 3.0) * r + (1.0 / 3.0) * x / (r * r);
        r = (2.0 / 3.0) * r + (1.0 / 3.0) * x / (r * r);
        r = (2.0 / 3.0) * r + (1.0 / 3.0) * x / (r * r);
        r = (2.0 / 3.0) * r + (1.0 / 3.0) * x / (r * r);

        return r;
      }
    
    };

    Opal.defn(self, '$cbrt', TMP_11 = function $$cbrt(x) {
      var self = this;

      return $scope.get('Math').$checked("cbrt", $scope.get('Math')['$float!'](x));
    }, TMP_11.$$arity = 1);

    Opal.defn(self, '$cos', TMP_12 = function $$cos(x) {
      var self = this;

      return $scope.get('Math').$checked("cos", $scope.get('Math')['$float!'](x));
    }, TMP_12.$$arity = 1);

    if ((($a = (typeof(Math.cosh) !== "undefined")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.cosh = function(x) {
        return (Math.exp(x) + Math.exp(-x)) / 2;
      }
    
    };

    Opal.defn(self, '$cosh', TMP_13 = function $$cosh(x) {
      var self = this;

      return $scope.get('Math').$checked("cosh", $scope.get('Math')['$float!'](x));
    }, TMP_13.$$arity = 1);

    if ((($a = (typeof(Math.erf) !== "undefined")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.erf = function(x) {
        var A1 =  0.254829592,
            A2 = -0.284496736,
            A3 =  1.421413741,
            A4 = -1.453152027,
            A5 =  1.061405429,
            P  =  0.3275911;

        var sign = 1;

        if (x < 0) {
            sign = -1;
        }

        x = Math.abs(x);

        var t = 1.0 / (1.0 + P * x);
        var y = 1.0 - (((((A5 * t + A4) * t) + A3) * t + A2) * t + A1) * t * Math.exp(-x * x);

        return sign * y;
      }
    
    };

    Opal.defn(self, '$erf', TMP_14 = function $$erf(x) {
      var self = this;

      return $scope.get('Math').$checked("erf", $scope.get('Math')['$float!'](x));
    }, TMP_14.$$arity = 1);

    if ((($a = (typeof(Math.erfc) !== "undefined")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.erfc = function(x) {
        var z = Math.abs(x),
            t = 1.0 / (0.5 * z + 1.0);

        var A1 = t * 0.17087277 + -0.82215223,
            A2 = t * A1 + 1.48851587,
            A3 = t * A2 + -1.13520398,
            A4 = t * A3 + 0.27886807,
            A5 = t * A4 + -0.18628806,
            A6 = t * A5 + 0.09678418,
            A7 = t * A6 + 0.37409196,
            A8 = t * A7 + 1.00002368,
            A9 = t * A8,
            A10 = -z * z - 1.26551223 + A9;

        var a = t * Math.exp(A10);

        if (x < 0.0) {
          return 2.0 - a;
        }
        else {
          return a;
        }
      }
    
    };

    Opal.defn(self, '$erfc', TMP_15 = function $$erfc(x) {
      var self = this;

      return $scope.get('Math').$checked("erfc", $scope.get('Math')['$float!'](x));
    }, TMP_15.$$arity = 1);

    Opal.defn(self, '$exp', TMP_16 = function $$exp(x) {
      var self = this;

      return $scope.get('Math').$checked("exp", $scope.get('Math')['$float!'](x));
    }, TMP_16.$$arity = 1);

    Opal.defn(self, '$frexp', TMP_17 = function $$frexp(x) {
      var self = this;

      x = $scope.get('Math')['$float!'](x);
      
      if (isNaN(x)) {
        return [NaN, 0];
      }

      var ex   = Math.floor(Math.log(Math.abs(x)) / Math.log(2)) + 1,
          frac = x / Math.pow(2, ex);

      return [frac, ex];
    
    }, TMP_17.$$arity = 1);

    Opal.defn(self, '$gamma', TMP_18 = function $$gamma(n) {
      var self = this;

      n = $scope.get('Math')['$float!'](n);
      
      var i, t, x, value, result, twoN, threeN, fourN, fiveN;

      var G = 4.7421875;

      var P = [
         0.99999999999999709182,
         57.156235665862923517,
        -59.597960355475491248,
         14.136097974741747174,
        -0.49191381609762019978,
         0.33994649984811888699e-4,
         0.46523628927048575665e-4,
        -0.98374475304879564677e-4,
         0.15808870322491248884e-3,
        -0.21026444172410488319e-3,
         0.21743961811521264320e-3,
        -0.16431810653676389022e-3,
         0.84418223983852743293e-4,
        -0.26190838401581408670e-4,
         0.36899182659531622704e-5
      ];


      if (isNaN(n)) {
        return NaN;
      }

      if (n === 0 && 1 / n < 0) {
        return -Infinity;
      }

      if (n === -1 || n === -Infinity) {
        self.$raise($scope.get('DomainError'), "Numerical argument is out of domain - \"gamma\"");
      }

      if ($scope.get('Integer')['$==='](n)) {
        if (n <= 0) {
          return isFinite(n) ? Infinity : NaN;
        }

        if (n > 171) {
          return Infinity;
        }

        value  = n - 2;
        result = n - 1;

        while (value > 1) {
          result *= value;
          value--;
        }

        if (result == 0) {
          result = 1;
        }

        return result;
      }

      if (n < 0.5) {
        return Math.PI / (Math.sin(Math.PI * n) * $scope.get('Math').$gamma($rb_minus(1, n)));
      }

      if (n >= 171.35) {
        return Infinity;
      }

      if (n > 85.0) {
        twoN   = n * n;
        threeN = twoN * n;
        fourN  = threeN * n;
        fiveN  = fourN * n;

        return Math.sqrt(2 * Math.PI / n) * Math.pow((n / Math.E), n) *
          (1 + 1 / (12 * n) + 1 / (288 * twoN) - 139 / (51840 * threeN) -
          571 / (2488320 * fourN) + 163879 / (209018880 * fiveN) +
          5246819 / (75246796800 * fiveN * n));
      }

      n -= 1;
      x  = P[0];

      for (i = 1; i < P.length; ++i) {
        x += P[i] / (n + i);
      }

      t = n + G + 0.5;

      return Math.sqrt(2 * Math.PI) * Math.pow(t, n + 0.5) * Math.exp(-t) * x;
    
    }, TMP_18.$$arity = 1);

    if ((($a = (typeof(Math.hypot) !== "undefined")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.hypot = function(x, y) {
        return Math.sqrt(x * x + y * y)
      }
    ;
    };

    Opal.defn(self, '$hypot', TMP_19 = function $$hypot(x, y) {
      var self = this;

      return $scope.get('Math').$checked("hypot", $scope.get('Math')['$float!'](x), $scope.get('Math')['$float!'](y));
    }, TMP_19.$$arity = 2);

    Opal.defn(self, '$ldexp', TMP_20 = function $$ldexp(mantissa, exponent) {
      var self = this;

      mantissa = $scope.get('Math')['$float!'](mantissa);
      exponent = $scope.get('Math')['$integer!'](exponent);
      
      if (isNaN(exponent)) {
        self.$raise($scope.get('RangeError'), "float NaN out of range of integer");
      }

      return mantissa * Math.pow(2, exponent);
    ;
    }, TMP_20.$$arity = 2);

    Opal.defn(self, '$lgamma', TMP_21 = function $$lgamma(n) {
      var self = this;

      
      if (n == -1) {
        return [Infinity, 1];
      }
      else {
        return [Math.log(Math.abs($scope.get('Math').$gamma(n))), $scope.get('Math').$gamma(n) < 0 ? -1 : 1];
      }
    ;
    }, TMP_21.$$arity = 1);

    Opal.defn(self, '$log', TMP_22 = function $$log(x, base) {
      var $a, self = this;

      if ((($a = $scope.get('String')['$==='](x)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('Opal').$type_error(x, $scope.get('Float')))};
      if ((($a = base == null) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return $scope.get('Math').$checked("log", $scope.get('Math')['$float!'](x))
        } else {
        if ((($a = $scope.get('String')['$==='](base)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('Opal').$type_error(base, $scope.get('Float')))};
        return $rb_divide($scope.get('Math').$checked("log", $scope.get('Math')['$float!'](x)), $scope.get('Math').$checked("log", $scope.get('Math')['$float!'](base)));
      };
    }, TMP_22.$$arity = -2);

    if ((($a = (typeof(Math.log10) !== "undefined")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.log10 = function(x) {
        return Math.log(x) / Math.LN10;
      }
    
    };

    Opal.defn(self, '$log10', TMP_23 = function $$log10(x) {
      var $a, self = this;

      if ((($a = $scope.get('String')['$==='](x)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('Opal').$type_error(x, $scope.get('Float')))};
      return $scope.get('Math').$checked("log10", $scope.get('Math')['$float!'](x));
    }, TMP_23.$$arity = 1);

    if ((($a = (typeof(Math.log2) !== "undefined")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.log2 = function(x) {
        return Math.log(x) / Math.LN2;
      }
    
    };

    Opal.defn(self, '$log2', TMP_24 = function $$log2(x) {
      var $a, self = this;

      if ((($a = $scope.get('String')['$==='](x)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('Opal').$type_error(x, $scope.get('Float')))};
      return $scope.get('Math').$checked("log2", $scope.get('Math')['$float!'](x));
    }, TMP_24.$$arity = 1);

    Opal.defn(self, '$sin', TMP_25 = function $$sin(x) {
      var self = this;

      return $scope.get('Math').$checked("sin", $scope.get('Math')['$float!'](x));
    }, TMP_25.$$arity = 1);

    if ((($a = (typeof(Math.sinh) !== "undefined")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.sinh = function(x) {
        return (Math.exp(x) - Math.exp(-x)) / 2;
      }
    
    };

    Opal.defn(self, '$sinh', TMP_26 = function $$sinh(x) {
      var self = this;

      return $scope.get('Math').$checked("sinh", $scope.get('Math')['$float!'](x));
    }, TMP_26.$$arity = 1);

    Opal.defn(self, '$sqrt', TMP_27 = function $$sqrt(x) {
      var self = this;

      return $scope.get('Math').$checked("sqrt", $scope.get('Math')['$float!'](x));
    }, TMP_27.$$arity = 1);

    Opal.defn(self, '$tan', TMP_28 = function $$tan(x) {
      var $a, self = this;

      x = $scope.get('Math')['$float!'](x);
      if ((($a = x['$infinite?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return (($scope.get('Float')).$$scope.get('NAN'))};
      return $scope.get('Math').$checked("tan", $scope.get('Math')['$float!'](x));
    }, TMP_28.$$arity = 1);

    if ((($a = (typeof(Math.tanh) !== "undefined")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.tanh = function(x) {
        if (x == Infinity) {
          return 1;
        }
        else if (x == -Infinity) {
          return -1;
        }
        else {
          return (Math.exp(x) - Math.exp(-x)) / (Math.exp(x) + Math.exp(-x));
        }
      }
    
    };

    Opal.defn(self, '$tanh', TMP_29 = function $$tanh(x) {
      var self = this;

      return $scope.get('Math').$checked("tanh", $scope.get('Math')['$float!'](x));
    }, TMP_29.$$arity = 1);
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["corelib/complex"] = function(Opal) {
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module;

  Opal.add_stubs(['$require', '$===', '$real?', '$raise', '$new', '$*', '$cos', '$sin', '$attr_reader', '$class', '$==', '$real', '$imag', '$Complex', '$-@', '$+', '$__coerced__', '$-', '$nan?', '$/', '$conj', '$abs2', '$quo', '$polar', '$exp', '$log', '$>', '$!=', '$divmod', '$**', '$hypot', '$atan2', '$lcm', '$denominator', '$to_s', '$numerator', '$abs', '$arg', '$rationalize', '$to_f', '$to_i', '$to_r', '$inspect', '$positive?', '$infinite?']);
  self.$require("corelib/numeric");
  (function($base, $super) {
    function $Complex(){};
    var self = $Complex = $klass($base, $super, 'Complex', $Complex);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28, TMP_29;

    def.real = def.imag = nil;
    Opal.defs(self, '$rect', TMP_1 = function $$rect(real, imag) {
      var $a, $b, $c, $d, self = this;

      if (imag == null) {
        imag = 0;
      }
      if ((($a = ($b = ($c = ($d = $scope.get('Numeric')['$==='](real), $d !== false && $d !== nil && $d != null ?real['$real?']() : $d), $c !== false && $c !== nil && $c != null ?$scope.get('Numeric')['$==='](imag) : $c), $b !== false && $b !== nil && $b != null ?imag['$real?']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('TypeError'), "not a real")
      };
      return self.$new(real, imag);
    }, TMP_1.$$arity = -2);

    (function(self) {
      var $scope = self.$$scope, def = self.$$proto;

      return Opal.alias(self, 'rectangular', 'rect')
    })(Opal.get_singleton_class(self));

    Opal.defs(self, '$polar', TMP_2 = function $$polar(r, theta) {
      var $a, $b, $c, $d, self = this;

      if (theta == null) {
        theta = 0;
      }
      if ((($a = ($b = ($c = ($d = $scope.get('Numeric')['$==='](r), $d !== false && $d !== nil && $d != null ?r['$real?']() : $d), $c !== false && $c !== nil && $c != null ?$scope.get('Numeric')['$==='](theta) : $c), $b !== false && $b !== nil && $b != null ?theta['$real?']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('TypeError'), "not a real")
      };
      return self.$new($rb_times(r, $scope.get('Math').$cos(theta)), $rb_times(r, $scope.get('Math').$sin(theta)));
    }, TMP_2.$$arity = -2);

    self.$attr_reader("real", "imag");

    Opal.defn(self, '$initialize', TMP_3 = function $$initialize(real, imag) {
      var self = this;

      if (imag == null) {
        imag = 0;
      }
      self.real = real;
      return self.imag = imag;
    }, TMP_3.$$arity = -2);

    Opal.defn(self, '$coerce', TMP_4 = function $$coerce(other) {
      var $a, $b, self = this;

      if ((($a = $scope.get('Complex')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return [other, self]
      } else if ((($a = ($b = $scope.get('Numeric')['$==='](other), $b !== false && $b !== nil && $b != null ?other['$real?']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return [$scope.get('Complex').$new(other, 0), self]
        } else {
        return self.$raise($scope.get('TypeError'), "" + (other.$class()) + " can't be coerced into Complex")
      };
    }, TMP_4.$$arity = 1);

    Opal.defn(self, '$==', TMP_5 = function(other) {
      var $a, $b, self = this;

      if ((($a = $scope.get('Complex')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return (($a = self.real['$=='](other.$real())) ? self.imag['$=='](other.$imag()) : self.real['$=='](other.$real()))
      } else if ((($a = ($b = $scope.get('Numeric')['$==='](other), $b !== false && $b !== nil && $b != null ?other['$real?']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return (($a = self.real['$=='](other)) ? self.imag['$=='](0) : self.real['$=='](other))
        } else {
        return other['$=='](self)
      };
    }, TMP_5.$$arity = 1);

    Opal.defn(self, '$-@', TMP_6 = function() {
      var self = this;

      return self.$Complex(self.real['$-@'](), self.imag['$-@']());
    }, TMP_6.$$arity = 0);

    Opal.defn(self, '$+', TMP_7 = function(other) {
      var $a, $b, self = this;

      if ((($a = $scope.get('Complex')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$Complex($rb_plus(self.real, other.$real()), $rb_plus(self.imag, other.$imag()))
      } else if ((($a = ($b = $scope.get('Numeric')['$==='](other), $b !== false && $b !== nil && $b != null ?other['$real?']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$Complex($rb_plus(self.real, other), self.imag)
        } else {
        return self.$__coerced__("+", other)
      };
    }, TMP_7.$$arity = 1);

    Opal.defn(self, '$-', TMP_8 = function(other) {
      var $a, $b, self = this;

      if ((($a = $scope.get('Complex')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$Complex($rb_minus(self.real, other.$real()), $rb_minus(self.imag, other.$imag()))
      } else if ((($a = ($b = $scope.get('Numeric')['$==='](other), $b !== false && $b !== nil && $b != null ?other['$real?']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$Complex($rb_minus(self.real, other), self.imag)
        } else {
        return self.$__coerced__("-", other)
      };
    }, TMP_8.$$arity = 1);

    Opal.defn(self, '$*', TMP_9 = function(other) {
      var $a, $b, self = this;

      if ((($a = $scope.get('Complex')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$Complex($rb_minus($rb_times(self.real, other.$real()), $rb_times(self.imag, other.$imag())), $rb_plus($rb_times(self.real, other.$imag()), $rb_times(self.imag, other.$real())))
      } else if ((($a = ($b = $scope.get('Numeric')['$==='](other), $b !== false && $b !== nil && $b != null ?other['$real?']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$Complex($rb_times(self.real, other), $rb_times(self.imag, other))
        } else {
        return self.$__coerced__("*", other)
      };
    }, TMP_9.$$arity = 1);

    Opal.defn(self, '$/', TMP_10 = function(other) {
      var $a, $b, $c, $d, $e, self = this;

      if ((($a = $scope.get('Complex')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = ((($b = ((($c = ((($d = (($e = $scope.get('Number')['$==='](self.real), $e !== false && $e !== nil && $e != null ?self.real['$nan?']() : $e))) !== false && $d !== nil && $d != null) ? $d : (($e = $scope.get('Number')['$==='](self.imag), $e !== false && $e !== nil && $e != null ?self.imag['$nan?']() : $e)))) !== false && $c !== nil && $c != null) ? $c : (($d = $scope.get('Number')['$==='](other.$real()), $d !== false && $d !== nil && $d != null ?other.$real()['$nan?']() : $d)))) !== false && $b !== nil && $b != null) ? $b : (($c = $scope.get('Number')['$==='](other.$imag()), $c !== false && $c !== nil && $c != null ?other.$imag()['$nan?']() : $c)))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return $scope.get('Complex').$new((($scope.get('Float')).$$scope.get('NAN')), (($scope.get('Float')).$$scope.get('NAN')))
          } else {
          return $rb_divide($rb_times(self, other.$conj()), other.$abs2())
        }
      } else if ((($a = ($b = $scope.get('Numeric')['$==='](other), $b !== false && $b !== nil && $b != null ?other['$real?']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$Complex(self.real.$quo(other), self.imag.$quo(other))
        } else {
        return self.$__coerced__("/", other)
      };
    }, TMP_10.$$arity = 1);

    Opal.defn(self, '$**', TMP_11 = function(other) {
      var $a, $b, $c, $d, $e, self = this, r = nil, theta = nil, ore = nil, oim = nil, nr = nil, ntheta = nil, x = nil, z = nil, n = nil, div = nil, mod = nil;

      if (other['$=='](0)) {
        return $scope.get('Complex').$new(1, 0)};
      if ((($a = $scope.get('Complex')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        $b = self.$polar(), $a = Opal.to_ary($b), r = ($a[0] == null ? nil : $a[0]), theta = ($a[1] == null ? nil : $a[1]), $b;
        ore = other.$real();
        oim = other.$imag();
        nr = $scope.get('Math').$exp($rb_minus($rb_times(ore, $scope.get('Math').$log(r)), $rb_times(oim, theta)));
        ntheta = $rb_plus($rb_times(theta, ore), $rb_times(oim, $scope.get('Math').$log(r)));
        return $scope.get('Complex').$polar(nr, ntheta);
      } else if ((($a = $scope.get('Integer')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = $rb_gt(other, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          x = self;
          z = x;
          n = $rb_minus(other, 1);
          while ((($b = n['$!='](0)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          while ((($c = ($e = n.$divmod(2), $d = Opal.to_ary($e), div = ($d[0] == null ? nil : $d[0]), mod = ($d[1] == null ? nil : $d[1]), $e, mod['$=='](0))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          x = self.$Complex($rb_minus($rb_times(x.$real(), x.$real()), $rb_times(x.$imag(), x.$imag())), $rb_times($rb_times(2, x.$real()), x.$imag()));
          n = div;};
          z = $rb_times(z, x);
          n = $rb_minus(n, 1);};
          return z;
          } else {
          return ($rb_divide($scope.get('Rational').$new(1, 1), self))['$**'](other['$-@']())
        }
      } else if ((($a = ((($b = $scope.get('Float')['$==='](other)) !== false && $b !== nil && $b != null) ? $b : $scope.get('Rational')['$==='](other))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        $b = self.$polar(), $a = Opal.to_ary($b), r = ($a[0] == null ? nil : $a[0]), theta = ($a[1] == null ? nil : $a[1]), $b;
        return $scope.get('Complex').$polar(r['$**'](other), $rb_times(theta, other));
        } else {
        return self.$__coerced__("**", other)
      };
    }, TMP_11.$$arity = 1);

    Opal.defn(self, '$abs', TMP_12 = function $$abs() {
      var self = this;

      return $scope.get('Math').$hypot(self.real, self.imag);
    }, TMP_12.$$arity = 0);

    Opal.defn(self, '$abs2', TMP_13 = function $$abs2() {
      var self = this;

      return $rb_plus($rb_times(self.real, self.real), $rb_times(self.imag, self.imag));
    }, TMP_13.$$arity = 0);

    Opal.defn(self, '$angle', TMP_14 = function $$angle() {
      var self = this;

      return $scope.get('Math').$atan2(self.imag, self.real);
    }, TMP_14.$$arity = 0);

    Opal.alias(self, 'arg', 'angle');

    Opal.defn(self, '$conj', TMP_15 = function $$conj() {
      var self = this;

      return self.$Complex(self.real, self.imag['$-@']());
    }, TMP_15.$$arity = 0);

    Opal.alias(self, 'conjugate', 'conj');

    Opal.defn(self, '$denominator', TMP_16 = function $$denominator() {
      var self = this;

      return self.real.$denominator().$lcm(self.imag.$denominator());
    }, TMP_16.$$arity = 0);

    Opal.alias(self, 'divide', '/');

    Opal.defn(self, '$eql?', TMP_17 = function(other) {
      var $a, $b, self = this;

      return ($a = ($b = $scope.get('Complex')['$==='](other), $b !== false && $b !== nil && $b != null ?self.real.$class()['$=='](self.imag.$class()) : $b), $a !== false && $a !== nil && $a != null ?self['$=='](other) : $a);
    }, TMP_17.$$arity = 1);

    Opal.defn(self, '$fdiv', TMP_18 = function $$fdiv(other) {
      var $a, self = this;

      if ((($a = $scope.get('Numeric')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('TypeError'), "" + (other.$class()) + " can't be coerced into Complex")
      };
      return $rb_divide(self, other);
    }, TMP_18.$$arity = 1);

    Opal.defn(self, '$hash', TMP_19 = function $$hash() {
      var self = this;

      return "Complex:" + (self.real) + ":" + (self.imag);
    }, TMP_19.$$arity = 0);

    Opal.alias(self, 'imaginary', 'imag');

    Opal.defn(self, '$inspect', TMP_20 = function $$inspect() {
      var self = this;

      return "(" + (self.$to_s()) + ")";
    }, TMP_20.$$arity = 0);

    Opal.alias(self, 'magnitude', 'abs');

    Opal.defn(self, '$numerator', TMP_21 = function $$numerator() {
      var self = this, d = nil;

      d = self.$denominator();
      return self.$Complex($rb_times(self.real.$numerator(), ($rb_divide(d, self.real.$denominator()))), $rb_times(self.imag.$numerator(), ($rb_divide(d, self.imag.$denominator()))));
    }, TMP_21.$$arity = 0);

    Opal.alias(self, 'phase', 'arg');

    Opal.defn(self, '$polar', TMP_22 = function $$polar() {
      var self = this;

      return [self.$abs(), self.$arg()];
    }, TMP_22.$$arity = 0);

    Opal.alias(self, 'quo', '/');

    Opal.defn(self, '$rationalize', TMP_23 = function $$rationalize(eps) {
      var $a, self = this;

      
      if (arguments.length > 1) {
        self.$raise($scope.get('ArgumentError'), "wrong number of arguments (" + (arguments.length) + " for 0..1)");
      }
    ;
      if ((($a = self.imag['$!='](0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('RangeError'), "can't' convert " + (self) + " into Rational")};
      return self.$real().$rationalize(eps);
    }, TMP_23.$$arity = -1);

    Opal.defn(self, '$real?', TMP_24 = function() {
      var self = this;

      return false;
    }, TMP_24.$$arity = 0);

    Opal.defn(self, '$rect', TMP_25 = function $$rect() {
      var self = this;

      return [self.real, self.imag];
    }, TMP_25.$$arity = 0);

    Opal.alias(self, 'rectangular', 'rect');

    Opal.defn(self, '$to_f', TMP_26 = function $$to_f() {
      var self = this;

      if (self.imag['$=='](0)) {
        } else {
        self.$raise($scope.get('RangeError'), "can't convert " + (self) + " into Float")
      };
      return self.real.$to_f();
    }, TMP_26.$$arity = 0);

    Opal.defn(self, '$to_i', TMP_27 = function $$to_i() {
      var self = this;

      if (self.imag['$=='](0)) {
        } else {
        self.$raise($scope.get('RangeError'), "can't convert " + (self) + " into Integer")
      };
      return self.real.$to_i();
    }, TMP_27.$$arity = 0);

    Opal.defn(self, '$to_r', TMP_28 = function $$to_r() {
      var self = this;

      if (self.imag['$=='](0)) {
        } else {
        self.$raise($scope.get('RangeError'), "can't convert " + (self) + " into Rational")
      };
      return self.real.$to_r();
    }, TMP_28.$$arity = 0);

    Opal.defn(self, '$to_s', TMP_29 = function $$to_s() {
      var $a, $b, $c, self = this, result = nil;

      result = self.real.$inspect();
      if ((($a = ((($b = (($c = $scope.get('Number')['$==='](self.imag), $c !== false && $c !== nil && $c != null ?self.imag['$nan?']() : $c))) !== false && $b !== nil && $b != null) ? $b : self.imag['$positive?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        result = $rb_plus(result, "+")
        } else {
        result = $rb_plus(result, "-")
      };
      result = $rb_plus(result, self.imag.$abs().$inspect());
      if ((($a = ($b = $scope.get('Number')['$==='](self.imag), $b !== false && $b !== nil && $b != null ?(((($c = self.imag['$nan?']()) !== false && $c !== nil && $c != null) ? $c : self.imag['$infinite?']())) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        result = $rb_plus(result, "*")};
      return $rb_plus(result, "i");
    }, TMP_29.$$arity = 0);

    return Opal.cdecl($scope, 'I', self.$new(0, 1));
  })($scope.base, $scope.get('Numeric'));
  return (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_30;

    Opal.defn(self, '$Complex', TMP_30 = function $$Complex(real, imag) {
      var self = this;

      if (imag == null) {
        imag = nil;
      }
      if (imag !== false && imag !== nil && imag != null) {
        return $scope.get('Complex').$new(real, imag)
        } else {
        return $scope.get('Complex').$new(real, 0)
      };
    }, TMP_30.$$arity = -2)
  })($scope.base);
};
/* Generated by Opal 0.10.3 */
Opal.modules["corelib/rational"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module;

  Opal.add_stubs(['$require', '$to_i', '$==', '$raise', '$<', '$-@', '$new', '$gcd', '$/', '$nil?', '$===', '$reduce', '$to_r', '$equal?', '$!', '$coerce_to!', '$attr_reader', '$to_f', '$numerator', '$denominator', '$<=>', '$-', '$*', '$__coerced__', '$+', '$Rational', '$>', '$**', '$abs', '$ceil', '$with_precision', '$floor', '$to_s', '$<=', '$truncate', '$send', '$convert']);
  self.$require("corelib/numeric");
  (function($base, $super) {
    function $Rational(){};
    var self = $Rational = $klass($base, $super, 'Rational', $Rational);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26;

    def.num = def.den = nil;
    Opal.defs(self, '$reduce', TMP_1 = function $$reduce(num, den) {
      var $a, self = this, gcd = nil;

      num = num.$to_i();
      den = den.$to_i();
      if (den['$=='](0)) {
        self.$raise($scope.get('ZeroDivisionError'), "divided by 0")
      } else if ((($a = $rb_lt(den, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        num = num['$-@']();
        den = den['$-@']();
      } else if (den['$=='](1)) {
        return self.$new(num, den)};
      gcd = num.$gcd(den);
      return self.$new($rb_divide(num, gcd), $rb_divide(den, gcd));
    }, TMP_1.$$arity = 2);

    Opal.defs(self, '$convert', TMP_2 = function $$convert(num, den) {
      var $a, $b, $c, self = this;

      if ((($a = ((($b = num['$nil?']()) !== false && $b !== nil && $b != null) ? $b : den['$nil?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('TypeError'), "cannot convert nil into Rational")};
      if ((($a = ($b = $scope.get('Integer')['$==='](num), $b !== false && $b !== nil && $b != null ?$scope.get('Integer')['$==='](den) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$reduce(num, den)};
      if ((($a = ((($b = ((($c = $scope.get('Float')['$==='](num)) !== false && $c !== nil && $c != null) ? $c : $scope.get('String')['$==='](num))) !== false && $b !== nil && $b != null) ? $b : $scope.get('Complex')['$==='](num))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        num = num.$to_r()};
      if ((($a = ((($b = ((($c = $scope.get('Float')['$==='](den)) !== false && $c !== nil && $c != null) ? $c : $scope.get('String')['$==='](den))) !== false && $b !== nil && $b != null) ? $b : $scope.get('Complex')['$==='](den))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        den = den.$to_r()};
      if ((($a = ($b = den['$equal?'](1), $b !== false && $b !== nil && $b != null ?($scope.get('Integer')['$==='](num))['$!']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return $scope.get('Opal')['$coerce_to!'](num, $scope.get('Rational'), "to_r")
      } else if ((($a = ($b = $scope.get('Numeric')['$==='](num), $b !== false && $b !== nil && $b != null ?$scope.get('Numeric')['$==='](den) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return $rb_divide(num, den)
        } else {
        return self.$reduce(num, den)
      };
    }, TMP_2.$$arity = 2);

    self.$attr_reader("numerator", "denominator");

    Opal.defn(self, '$initialize', TMP_3 = function $$initialize(num, den) {
      var self = this;

      self.num = num;
      return self.den = den;
    }, TMP_3.$$arity = 2);

    Opal.defn(self, '$numerator', TMP_4 = function $$numerator() {
      var self = this;

      return self.num;
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$denominator', TMP_5 = function $$denominator() {
      var self = this;

      return self.den;
    }, TMP_5.$$arity = 0);

    Opal.defn(self, '$coerce', TMP_6 = function $$coerce(other) {
      var self = this, $case = nil;

      return (function() {$case = other;if ($scope.get('Rational')['$===']($case)) {return [other, self]}else if ($scope.get('Integer')['$===']($case)) {return [other.$to_r(), self]}else if ($scope.get('Float')['$===']($case)) {return [other, self.$to_f()]}else { return nil }})();
    }, TMP_6.$$arity = 1);

    Opal.defn(self, '$==', TMP_7 = function(other) {
      var $a, self = this, $case = nil;

      return (function() {$case = other;if ($scope.get('Rational')['$===']($case)) {return (($a = self.num['$=='](other.$numerator())) ? self.den['$=='](other.$denominator()) : self.num['$=='](other.$numerator()))}else if ($scope.get('Integer')['$===']($case)) {return (($a = self.num['$=='](other)) ? self.den['$=='](1) : self.num['$=='](other))}else if ($scope.get('Float')['$===']($case)) {return self.$to_f()['$=='](other)}else {return other['$=='](self)}})();
    }, TMP_7.$$arity = 1);

    Opal.defn(self, '$<=>', TMP_8 = function(other) {
      var self = this, $case = nil;

      return (function() {$case = other;if ($scope.get('Rational')['$===']($case)) {return $rb_minus($rb_times(self.num, other.$denominator()), $rb_times(self.den, other.$numerator()))['$<=>'](0)}else if ($scope.get('Integer')['$===']($case)) {return $rb_minus(self.num, $rb_times(self.den, other))['$<=>'](0)}else if ($scope.get('Float')['$===']($case)) {return self.$to_f()['$<=>'](other)}else {return self.$__coerced__("<=>", other)}})();
    }, TMP_8.$$arity = 1);

    Opal.defn(self, '$+', TMP_9 = function(other) {
      var self = this, $case = nil, num = nil, den = nil;

      return (function() {$case = other;if ($scope.get('Rational')['$===']($case)) {num = $rb_plus($rb_times(self.num, other.$denominator()), $rb_times(self.den, other.$numerator()));
      den = $rb_times(self.den, other.$denominator());
      return self.$Rational(num, den);}else if ($scope.get('Integer')['$===']($case)) {return self.$Rational($rb_plus(self.num, $rb_times(other, self.den)), self.den)}else if ($scope.get('Float')['$===']($case)) {return $rb_plus(self.$to_f(), other)}else {return self.$__coerced__("+", other)}})();
    }, TMP_9.$$arity = 1);

    Opal.defn(self, '$-', TMP_10 = function(other) {
      var self = this, $case = nil, num = nil, den = nil;

      return (function() {$case = other;if ($scope.get('Rational')['$===']($case)) {num = $rb_minus($rb_times(self.num, other.$denominator()), $rb_times(self.den, other.$numerator()));
      den = $rb_times(self.den, other.$denominator());
      return self.$Rational(num, den);}else if ($scope.get('Integer')['$===']($case)) {return self.$Rational($rb_minus(self.num, $rb_times(other, self.den)), self.den)}else if ($scope.get('Float')['$===']($case)) {return $rb_minus(self.$to_f(), other)}else {return self.$__coerced__("-", other)}})();
    }, TMP_10.$$arity = 1);

    Opal.defn(self, '$*', TMP_11 = function(other) {
      var self = this, $case = nil, num = nil, den = nil;

      return (function() {$case = other;if ($scope.get('Rational')['$===']($case)) {num = $rb_times(self.num, other.$numerator());
      den = $rb_times(self.den, other.$denominator());
      return self.$Rational(num, den);}else if ($scope.get('Integer')['$===']($case)) {return self.$Rational($rb_times(self.num, other), self.den)}else if ($scope.get('Float')['$===']($case)) {return $rb_times(self.$to_f(), other)}else {return self.$__coerced__("*", other)}})();
    }, TMP_11.$$arity = 1);

    Opal.defn(self, '$/', TMP_12 = function(other) {
      var self = this, $case = nil, num = nil, den = nil;

      return (function() {$case = other;if ($scope.get('Rational')['$===']($case)) {num = $rb_times(self.num, other.$denominator());
      den = $rb_times(self.den, other.$numerator());
      return self.$Rational(num, den);}else if ($scope.get('Integer')['$===']($case)) {if (other['$=='](0)) {
        return $rb_divide(self.$to_f(), 0.0)
        } else {
        return self.$Rational(self.num, $rb_times(self.den, other))
      }}else if ($scope.get('Float')['$===']($case)) {return $rb_divide(self.$to_f(), other)}else {return self.$__coerced__("/", other)}})();
    }, TMP_12.$$arity = 1);

    Opal.defn(self, '$**', TMP_13 = function(other) {
      var $a, $b, self = this, $case = nil;

      return (function() {$case = other;if ($scope.get('Integer')['$===']($case)) {if ((($a = (($b = self['$=='](0)) ? $rb_lt(other, 0) : self['$=='](0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return (($scope.get('Float')).$$scope.get('INFINITY'))
      } else if ((($a = $rb_gt(other, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$Rational(self.num['$**'](other), self.den['$**'](other))
      } else if ((($a = $rb_lt(other, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$Rational(self.den['$**'](other['$-@']()), self.num['$**'](other['$-@']()))
        } else {
        return self.$Rational(1, 1)
      }}else if ($scope.get('Float')['$===']($case)) {return self.$to_f()['$**'](other)}else if ($scope.get('Rational')['$===']($case)) {if (other['$=='](0)) {
        return self.$Rational(1, 1)
      } else if (other.$denominator()['$=='](1)) {
        if ((($a = $rb_lt(other, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.$Rational(self.den['$**'](other.$numerator().$abs()), self.num['$**'](other.$numerator().$abs()))
          } else {
          return self.$Rational(self.num['$**'](other.$numerator()), self.den['$**'](other.$numerator()))
        }
      } else if ((($a = (($b = self['$=='](0)) ? $rb_lt(other, 0) : self['$=='](0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$raise($scope.get('ZeroDivisionError'), "divided by 0")
        } else {
        return self.$to_f()['$**'](other)
      }}else {return self.$__coerced__("**", other)}})();
    }, TMP_13.$$arity = 1);

    Opal.defn(self, '$abs', TMP_14 = function $$abs() {
      var self = this;

      return self.$Rational(self.num.$abs(), self.den.$abs());
    }, TMP_14.$$arity = 0);

    Opal.defn(self, '$ceil', TMP_15 = function $$ceil(precision) {
      var self = this;

      if (precision == null) {
        precision = 0;
      }
      if (precision['$=='](0)) {
        return (($rb_divide(self.num['$-@'](), self.den))['$-@']()).$ceil()
        } else {
        return self.$with_precision("ceil", precision)
      };
    }, TMP_15.$$arity = -1);

    Opal.alias(self, 'divide', '/');

    Opal.defn(self, '$floor', TMP_16 = function $$floor(precision) {
      var self = this;

      if (precision == null) {
        precision = 0;
      }
      if (precision['$=='](0)) {
        return (($rb_divide(self.num['$-@'](), self.den))['$-@']()).$floor()
        } else {
        return self.$with_precision("floor", precision)
      };
    }, TMP_16.$$arity = -1);

    Opal.defn(self, '$hash', TMP_17 = function $$hash() {
      var self = this;

      return "Rational:" + (self.num) + ":" + (self.den);
    }, TMP_17.$$arity = 0);

    Opal.defn(self, '$inspect', TMP_18 = function $$inspect() {
      var self = this;

      return "(" + (self.$to_s()) + ")";
    }, TMP_18.$$arity = 0);

    Opal.alias(self, 'quo', '/');

    Opal.defn(self, '$rationalize', TMP_19 = function $$rationalize(eps) {
      var self = this;

      
      if (arguments.length > 1) {
        self.$raise($scope.get('ArgumentError'), "wrong number of arguments (" + (arguments.length) + " for 0..1)");
      }

      if (eps == null) {
        return self;
      }

      var e = eps.$abs(),
          a = $rb_minus(self, e),
          b = $rb_plus(self, e);

      var p0 = 0,
          p1 = 1,
          q0 = 1,
          q1 = 0,
          p2, q2;

      var c, k, t;

      while (true) {
        c = (a).$ceil();

        if ($rb_le(c, b)) {
          break;
        }

        k  = c - 1;
        p2 = k * p1 + p0;
        q2 = k * q1 + q0;
        t  = $rb_divide(1, ($rb_minus(b, k)));
        b  = $rb_divide(1, ($rb_minus(a, k)));
        a  = t;

        p0 = p1;
        q0 = q1;
        p1 = p2;
        q1 = q2;
      }

      return self.$Rational(c * p1 + p0, c * q1 + q0);
    ;
    }, TMP_19.$$arity = -1);

    Opal.defn(self, '$round', TMP_20 = function $$round(precision) {
      var $a, self = this, num = nil, den = nil, approx = nil;

      if (precision == null) {
        precision = 0;
      }
      if (precision['$=='](0)) {
        } else {
        return self.$with_precision("round", precision)
      };
      if (self.num['$=='](0)) {
        return 0};
      if (self.den['$=='](1)) {
        return self.num};
      num = $rb_plus($rb_times(self.num.$abs(), 2), self.den);
      den = $rb_times(self.den, 2);
      approx = ($rb_divide(num, den)).$truncate();
      if ((($a = $rb_lt(self.num, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return approx['$-@']()
        } else {
        return approx
      };
    }, TMP_20.$$arity = -1);

    Opal.defn(self, '$to_f', TMP_21 = function $$to_f() {
      var self = this;

      return $rb_divide(self.num, self.den);
    }, TMP_21.$$arity = 0);

    Opal.defn(self, '$to_i', TMP_22 = function $$to_i() {
      var self = this;

      return self.$truncate();
    }, TMP_22.$$arity = 0);

    Opal.defn(self, '$to_r', TMP_23 = function $$to_r() {
      var self = this;

      return self;
    }, TMP_23.$$arity = 0);

    Opal.defn(self, '$to_s', TMP_24 = function $$to_s() {
      var self = this;

      return "" + (self.num) + "/" + (self.den);
    }, TMP_24.$$arity = 0);

    Opal.defn(self, '$truncate', TMP_25 = function $$truncate(precision) {
      var $a, self = this;

      if (precision == null) {
        precision = 0;
      }
      if (precision['$=='](0)) {
        if ((($a = $rb_lt(self.num, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.$ceil()
          } else {
          return self.$floor()
        }
        } else {
        return self.$with_precision("truncate", precision)
      };
    }, TMP_25.$$arity = -1);

    return (Opal.defn(self, '$with_precision', TMP_26 = function $$with_precision(method, precision) {
      var $a, self = this, p = nil, s = nil;

      if ((($a = $scope.get('Integer')['$==='](precision)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('TypeError'), "not an Integer")
      };
      p = (10)['$**'](precision);
      s = $rb_times(self, p);
      if ((($a = $rb_lt(precision, 1)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($rb_divide(s.$send(method), p)).$to_i()
        } else {
        return self.$Rational(s.$send(method), p)
      };
    }, TMP_26.$$arity = 2), nil) && 'with_precision';
  })($scope.base, $scope.get('Numeric'));
  return (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_27;

    Opal.defn(self, '$Rational', TMP_27 = function $$Rational(numerator, denominator) {
      var self = this;

      if (denominator == null) {
        denominator = 1;
      }
      return $scope.get('Rational').$convert(numerator, denominator);
    }, TMP_27.$$arity = -2)
  })($scope.base);
};
/* Generated by Opal 0.10.3 */
Opal.modules["corelib/time"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$require', '$include', '$===', '$raise', '$coerce_to!', '$respond_to?', '$to_str', '$to_i', '$new', '$<=>', '$to_f', '$nil?', '$>', '$<', '$strftime', '$year', '$month', '$day', '$+', '$round', '$/', '$-', '$copy_instance_variables', '$initialize_dup', '$is_a?', '$zero?', '$wday', '$utc?', '$mon', '$yday', '$hour', '$min', '$sec', '$rjust', '$ljust', '$zone', '$to_s', '$[]', '$cweek_cyear', '$isdst', '$<=', '$!=', '$==', '$ceil']);
  self.$require("corelib/comparable");
  return (function($base, $super) {
    function $Time(){};
    var self = $Time = $klass($base, $super, 'Time', $Time);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30, TMP_31, TMP_32, TMP_33, TMP_34, TMP_35, TMP_36, TMP_37, TMP_38, TMP_39, TMP_40, TMP_41, TMP_42;

    self.$include($scope.get('Comparable'));

    
    var days_of_week = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"],
        short_days   = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
        short_months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
        long_months  = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
  ;

    Opal.defs(self, '$at', TMP_1 = function $$at(seconds, frac) {
      var self = this;

      
      var result;

      if ($scope.get('Time')['$==='](seconds)) {
        if (frac !== undefined) {
          self.$raise($scope.get('TypeError'), "can't convert Time into an exact number")
        }
        result = new Date(seconds.getTime());
        result.is_utc = seconds.is_utc;
        return result;
      }

      if (!seconds.$$is_number) {
        seconds = $scope.get('Opal')['$coerce_to!'](seconds, $scope.get('Integer'), "to_int");
      }

      if (frac === undefined) {
        return new Date(seconds * 1000);
      }

      if (!frac.$$is_number) {
        frac = $scope.get('Opal')['$coerce_to!'](frac, $scope.get('Integer'), "to_int");
      }

      return new Date(seconds * 1000 + (frac / 1000));
    ;
    }, TMP_1.$$arity = -2);

    
    function time_params(year, month, day, hour, min, sec) {
      if (year.$$is_string) {
        year = parseInt(year, 10);
      } else {
        year = $scope.get('Opal')['$coerce_to!'](year, $scope.get('Integer'), "to_int");
      }

      if (month === nil) {
        month = 1;
      } else if (!month.$$is_number) {
        if ((month)['$respond_to?']("to_str")) {
          month = (month).$to_str();
          switch (month.toLowerCase()) {
          case 'jan': month =  1; break;
          case 'feb': month =  2; break;
          case 'mar': month =  3; break;
          case 'apr': month =  4; break;
          case 'may': month =  5; break;
          case 'jun': month =  6; break;
          case 'jul': month =  7; break;
          case 'aug': month =  8; break;
          case 'sep': month =  9; break;
          case 'oct': month = 10; break;
          case 'nov': month = 11; break;
          case 'dec': month = 12; break;
          default: month = (month).$to_i();
          }
        } else {
          month = $scope.get('Opal')['$coerce_to!'](month, $scope.get('Integer'), "to_int");
        }
      }

      if (month < 1 || month > 12) {
        self.$raise($scope.get('ArgumentError'), "month out of range: " + (month))
      }
      month = month - 1;

      if (day === nil) {
        day = 1;
      } else if (day.$$is_string) {
        day = parseInt(day, 10);
      } else {
        day = $scope.get('Opal')['$coerce_to!'](day, $scope.get('Integer'), "to_int");
      }

      if (day < 1 || day > 31) {
        self.$raise($scope.get('ArgumentError'), "day out of range: " + (day))
      }

      if (hour === nil) {
        hour = 0;
      } else if (hour.$$is_string) {
        hour = parseInt(hour, 10);
      } else {
        hour = $scope.get('Opal')['$coerce_to!'](hour, $scope.get('Integer'), "to_int");
      }

      if (hour < 0 || hour > 24) {
        self.$raise($scope.get('ArgumentError'), "hour out of range: " + (hour))
      }

      if (min === nil) {
        min = 0;
      } else if (min.$$is_string) {
        min = parseInt(min, 10);
      } else {
        min = $scope.get('Opal')['$coerce_to!'](min, $scope.get('Integer'), "to_int");
      }

      if (min < 0 || min > 59) {
        self.$raise($scope.get('ArgumentError'), "min out of range: " + (min))
      }

      if (sec === nil) {
        sec = 0;
      } else if (!sec.$$is_number) {
        if (sec.$$is_string) {
          sec = parseInt(sec, 10);
        } else {
          sec = $scope.get('Opal')['$coerce_to!'](sec, $scope.get('Integer'), "to_int");
        }
      }

      if (sec < 0 || sec > 60) {
        self.$raise($scope.get('ArgumentError'), "sec out of range: " + (sec))
      }

      return [year, month, day, hour, min, sec];
    }
  ;

    Opal.defs(self, '$new', TMP_2 = function(year, month, day, hour, min, sec, utc_offset) {
      var self = this;

      if (month == null) {
        month = nil;
      }
      if (day == null) {
        day = nil;
      }
      if (hour == null) {
        hour = nil;
      }
      if (min == null) {
        min = nil;
      }
      if (sec == null) {
        sec = nil;
      }
      if (utc_offset == null) {
        utc_offset = nil;
      }
      
      var args, result;

      if (year === undefined) {
        return new Date();
      }

      if (utc_offset !== nil) {
        self.$raise($scope.get('ArgumentError'), "Opal does not support explicitly specifying UTC offset for Time")
      }

      args  = time_params(year, month, day, hour, min, sec);
      year  = args[0];
      month = args[1];
      day   = args[2];
      hour  = args[3];
      min   = args[4];
      sec   = args[5];

      result = new Date(year, month, day, hour, min, 0, sec * 1000);
      if (year < 100) {
        result.setFullYear(year);
      }
      return result;
    
    }, TMP_2.$$arity = -1);

    Opal.defs(self, '$local', TMP_3 = function $$local(year, month, day, hour, min, sec, millisecond, _dummy1, _dummy2, _dummy3) {
      var self = this;

      if (month == null) {
        month = nil;
      }
      if (day == null) {
        day = nil;
      }
      if (hour == null) {
        hour = nil;
      }
      if (min == null) {
        min = nil;
      }
      if (sec == null) {
        sec = nil;
      }
      if (millisecond == null) {
        millisecond = nil;
      }
      if (_dummy1 == null) {
        _dummy1 = nil;
      }
      if (_dummy2 == null) {
        _dummy2 = nil;
      }
      if (_dummy3 == null) {
        _dummy3 = nil;
      }
      
      var args, result;

      if (arguments.length === 10) {
        args  = $slice.call(arguments);
        year  = args[5];
        month = args[4];
        day   = args[3];
        hour  = args[2];
        min   = args[1];
        sec   = args[0];
      }

      args  = time_params(year, month, day, hour, min, sec);
      year  = args[0];
      month = args[1];
      day   = args[2];
      hour  = args[3];
      min   = args[4];
      sec   = args[5];

      result = new Date(year, month, day, hour, min, 0, sec * 1000);
      if (year < 100) {
        result.setFullYear(year);
      }
      return result;
    
    }, TMP_3.$$arity = -2);

    Opal.defs(self, '$gm', TMP_4 = function $$gm(year, month, day, hour, min, sec, millisecond, _dummy1, _dummy2, _dummy3) {
      var self = this;

      if (month == null) {
        month = nil;
      }
      if (day == null) {
        day = nil;
      }
      if (hour == null) {
        hour = nil;
      }
      if (min == null) {
        min = nil;
      }
      if (sec == null) {
        sec = nil;
      }
      if (millisecond == null) {
        millisecond = nil;
      }
      if (_dummy1 == null) {
        _dummy1 = nil;
      }
      if (_dummy2 == null) {
        _dummy2 = nil;
      }
      if (_dummy3 == null) {
        _dummy3 = nil;
      }
      
      var args, result;

      if (arguments.length === 10) {
        args  = $slice.call(arguments);
        year  = args[5];
        month = args[4];
        day   = args[3];
        hour  = args[2];
        min   = args[1];
        sec   = args[0];
      }

      args  = time_params(year, month, day, hour, min, sec);
      year  = args[0];
      month = args[1];
      day   = args[2];
      hour  = args[3];
      min   = args[4];
      sec   = args[5];

      result = new Date(Date.UTC(year, month, day, hour, min, 0, sec * 1000));
      if (year < 100) {
        result.setUTCFullYear(year);
      }
      result.is_utc = true;
      return result;
    
    }, TMP_4.$$arity = -2);

    (function(self) {
      var $scope = self.$$scope, def = self.$$proto;

      Opal.alias(self, 'mktime', 'local');
      return Opal.alias(self, 'utc', 'gm');
    })(Opal.get_singleton_class(self));

    Opal.defs(self, '$now', TMP_5 = function $$now() {
      var self = this;

      return self.$new();
    }, TMP_5.$$arity = 0);

    Opal.defn(self, '$+', TMP_6 = function(other) {
      var $a, self = this;

      if ((($a = $scope.get('Time')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('TypeError'), "time + time?")};
      
      if (!other.$$is_number) {
        other = $scope.get('Opal')['$coerce_to!'](other, $scope.get('Integer'), "to_int");
      }
      var result = new Date(self.getTime() + (other * 1000));
      result.is_utc = self.is_utc;
      return result;
    ;
    }, TMP_6.$$arity = 1);

    Opal.defn(self, '$-', TMP_7 = function(other) {
      var $a, self = this;

      if ((($a = $scope.get('Time')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return (self.getTime() - other.getTime()) / 1000};
      
      if (!other.$$is_number) {
        other = $scope.get('Opal')['$coerce_to!'](other, $scope.get('Integer'), "to_int");
      }
      var result = new Date(self.getTime() - (other * 1000));
      result.is_utc = self.is_utc;
      return result;
    ;
    }, TMP_7.$$arity = 1);

    Opal.defn(self, '$<=>', TMP_8 = function(other) {
      var $a, self = this, r = nil;

      if ((($a = $scope.get('Time')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$to_f()['$<=>'](other.$to_f())
        } else {
        r = other['$<=>'](self);
        if ((($a = r['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil
        } else if ((($a = $rb_gt(r, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return -1
        } else if ((($a = $rb_lt(r, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return 1
          } else {
          return 0
        };
      };
    }, TMP_8.$$arity = 1);

    Opal.defn(self, '$==', TMP_9 = function(other) {
      var self = this;

      return self.$to_f() === other.$to_f();
    }, TMP_9.$$arity = 1);

    Opal.defn(self, '$asctime', TMP_10 = function $$asctime() {
      var self = this;

      return self.$strftime("%a %b %e %H:%M:%S %Y");
    }, TMP_10.$$arity = 0);

    Opal.alias(self, 'ctime', 'asctime');

    Opal.defn(self, '$day', TMP_11 = function $$day() {
      var self = this;

      return self.is_utc ? self.getUTCDate() : self.getDate();
    }, TMP_11.$$arity = 0);

    Opal.defn(self, '$yday', TMP_12 = function $$yday() {
      var self = this, start_of_year = nil, start_of_day = nil, one_day = nil;

      start_of_year = $scope.get('Time').$new(self.$year()).$to_i();
      start_of_day = $scope.get('Time').$new(self.$year(), self.$month(), self.$day()).$to_i();
      one_day = 86400;
      return $rb_plus(($rb_divide(($rb_minus(start_of_day, start_of_year)), one_day)).$round(), 1);
    }, TMP_12.$$arity = 0);

    Opal.defn(self, '$isdst', TMP_13 = function $$isdst() {
      var self = this;

      
      var jan = new Date(self.getFullYear(), 0, 1),
          jul = new Date(self.getFullYear(), 6, 1);
      return self.getTimezoneOffset() < Math.max(jan.getTimezoneOffset(), jul.getTimezoneOffset());
    
    }, TMP_13.$$arity = 0);

    Opal.alias(self, 'dst?', 'isdst');

    Opal.defn(self, '$dup', TMP_14 = function $$dup() {
      var self = this, copy = nil;

      copy = new Date(self.getTime());
      copy.$copy_instance_variables(self);
      copy.$initialize_dup(self);
      return copy;
    }, TMP_14.$$arity = 0);

    Opal.defn(self, '$eql?', TMP_15 = function(other) {
      var $a, self = this;

      return ($a = other['$is_a?']($scope.get('Time')), $a !== false && $a !== nil && $a != null ?(self['$<=>'](other))['$zero?']() : $a);
    }, TMP_15.$$arity = 1);

    Opal.defn(self, '$friday?', TMP_16 = function() {
      var self = this;

      return self.$wday() == 5;
    }, TMP_16.$$arity = 0);

    Opal.defn(self, '$hash', TMP_17 = function $$hash() {
      var self = this;

      return 'Time:' + self.getTime();
    }, TMP_17.$$arity = 0);

    Opal.defn(self, '$hour', TMP_18 = function $$hour() {
      var self = this;

      return self.is_utc ? self.getUTCHours() : self.getHours();
    }, TMP_18.$$arity = 0);

    Opal.defn(self, '$inspect', TMP_19 = function $$inspect() {
      var $a, self = this;

      if ((($a = self['$utc?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$strftime("%Y-%m-%d %H:%M:%S UTC")
        } else {
        return self.$strftime("%Y-%m-%d %H:%M:%S %z")
      };
    }, TMP_19.$$arity = 0);

    Opal.alias(self, 'mday', 'day');

    Opal.defn(self, '$min', TMP_20 = function $$min() {
      var self = this;

      return self.is_utc ? self.getUTCMinutes() : self.getMinutes();
    }, TMP_20.$$arity = 0);

    Opal.defn(self, '$mon', TMP_21 = function $$mon() {
      var self = this;

      return (self.is_utc ? self.getUTCMonth() : self.getMonth()) + 1;
    }, TMP_21.$$arity = 0);

    Opal.defn(self, '$monday?', TMP_22 = function() {
      var self = this;

      return self.$wday() == 1;
    }, TMP_22.$$arity = 0);

    Opal.alias(self, 'month', 'mon');

    Opal.defn(self, '$saturday?', TMP_23 = function() {
      var self = this;

      return self.$wday() == 6;
    }, TMP_23.$$arity = 0);

    Opal.defn(self, '$sec', TMP_24 = function $$sec() {
      var self = this;

      return self.is_utc ? self.getUTCSeconds() : self.getSeconds();
    }, TMP_24.$$arity = 0);

    Opal.defn(self, '$succ', TMP_25 = function $$succ() {
      var self = this;

      
      var result = new Date(self.getTime() + 1000);
      result.is_utc = self.is_utc;
      return result;
    
    }, TMP_25.$$arity = 0);

    Opal.defn(self, '$usec', TMP_26 = function $$usec() {
      var self = this;

      return self.getMilliseconds() * 1000;
    }, TMP_26.$$arity = 0);

    Opal.defn(self, '$zone', TMP_27 = function $$zone() {
      var self = this;

      
      var string = self.toString(),
          result;

      if (string.indexOf('(') == -1) {
        result = string.match(/[A-Z]{3,4}/)[0];
      }
      else {
        result = string.match(/\([^)]+\)/)[0].match(/[A-Z]/g).join('');
      }

      if (result == "GMT" && /(GMT\W*\d{4})/.test(string)) {
        return RegExp.$1;
      }
      else {
        return result;
      }
    
    }, TMP_27.$$arity = 0);

    Opal.defn(self, '$getgm', TMP_28 = function $$getgm() {
      var self = this;

      
      var result = new Date(self.getTime());
      result.is_utc = true;
      return result;
    
    }, TMP_28.$$arity = 0);

    Opal.alias(self, 'getutc', 'getgm');

    Opal.defn(self, '$gmtime', TMP_29 = function $$gmtime() {
      var self = this;

      
      self.is_utc = true;
      return self;
    
    }, TMP_29.$$arity = 0);

    Opal.alias(self, 'utc', 'gmtime');

    Opal.defn(self, '$gmt?', TMP_30 = function() {
      var self = this;

      return self.is_utc === true;
    }, TMP_30.$$arity = 0);

    Opal.defn(self, '$gmt_offset', TMP_31 = function $$gmt_offset() {
      var self = this;

      return -self.getTimezoneOffset() * 60;
    }, TMP_31.$$arity = 0);

    Opal.defn(self, '$strftime', TMP_32 = function $$strftime(format) {
      var self = this;

      
      return format.replace(/%([\-_#^0]*:{0,2})(\d+)?([EO]*)(.)/g, function(full, flags, width, _, conv) {
        var result = "",
            zero   = flags.indexOf('0') !== -1,
            pad    = flags.indexOf('-') === -1,
            blank  = flags.indexOf('_') !== -1,
            upcase = flags.indexOf('^') !== -1,
            invert = flags.indexOf('#') !== -1,
            colons = (flags.match(':') || []).length;

        width = parseInt(width, 10);

        if (zero && blank) {
          if (flags.indexOf('0') < flags.indexOf('_')) {
            zero = false;
          }
          else {
            blank = false;
          }
        }

        switch (conv) {
          case 'Y':
            result += self.$year();
            break;

          case 'C':
            zero    = !blank;
            result += Math.round(self.$year() / 100);
            break;

          case 'y':
            zero    = !blank;
            result += (self.$year() % 100);
            break;

          case 'm':
            zero    = !blank;
            result += self.$mon();
            break;

          case 'B':
            result += long_months[self.$mon() - 1];
            break;

          case 'b':
          case 'h':
            blank   = !zero;
            result += short_months[self.$mon() - 1];
            break;

          case 'd':
            zero    = !blank
            result += self.$day();
            break;

          case 'e':
            blank   = !zero
            result += self.$day();
            break;

          case 'j':
            result += self.$yday();
            break;

          case 'H':
            zero    = !blank;
            result += self.$hour();
            break;

          case 'k':
            blank   = !zero;
            result += self.$hour();
            break;

          case 'I':
            zero    = !blank;
            result += (self.$hour() % 12 || 12);
            break;

          case 'l':
            blank   = !zero;
            result += (self.$hour() % 12 || 12);
            break;

          case 'P':
            result += (self.$hour() >= 12 ? "pm" : "am");
            break;

          case 'p':
            result += (self.$hour() >= 12 ? "PM" : "AM");
            break;

          case 'M':
            zero    = !blank;
            result += self.$min();
            break;

          case 'S':
            zero    = !blank;
            result += self.$sec()
            break;

          case 'L':
            zero    = !blank;
            width   = isNaN(width) ? 3 : width;
            result += self.getMilliseconds();
            break;

          case 'N':
            width   = isNaN(width) ? 9 : width;
            result += (self.getMilliseconds().toString()).$rjust(3, "0");
            result  = (result).$ljust(width, "0");
            break;

          case 'z':
            var offset  = self.getTimezoneOffset(),
                hours   = Math.floor(Math.abs(offset) / 60),
                minutes = Math.abs(offset) % 60;

            result += offset < 0 ? "+" : "-";
            result += hours < 10 ? "0" : "";
            result += hours;

            if (colons > 0) {
              result += ":";
            }

            result += minutes < 10 ? "0" : "";
            result += minutes;

            if (colons > 1) {
              result += ":00";
            }

            break;

          case 'Z':
            result += self.$zone();
            break;

          case 'A':
            result += days_of_week[self.$wday()];
            break;

          case 'a':
            result += short_days[self.$wday()];
            break;

          case 'u':
            result += (self.$wday() + 1);
            break;

          case 'w':
            result += self.$wday();
            break;

          case 'V':
            result += self.$cweek_cyear()['$[]'](0).$to_s().$rjust(2, "0");
            break;

          case 'G':
            result += self.$cweek_cyear()['$[]'](1);
            break;

          case 'g':
            result += self.$cweek_cyear()['$[]'](1)['$[]']($range(-2, -1, false));
            break;

          case 's':
            result += self.$to_i();
            break;

          case 'n':
            result += "\n";
            break;

          case 't':
            result += "\t";
            break;

          case '%':
            result += "%";
            break;

          case 'c':
            result += self.$strftime("%a %b %e %T %Y");
            break;

          case 'D':
          case 'x':
            result += self.$strftime("%m/%d/%y");
            break;

          case 'F':
            result += self.$strftime("%Y-%m-%d");
            break;

          case 'v':
            result += self.$strftime("%e-%^b-%4Y");
            break;

          case 'r':
            result += self.$strftime("%I:%M:%S %p");
            break;

          case 'R':
            result += self.$strftime("%H:%M");
            break;

          case 'T':
          case 'X':
            result += self.$strftime("%H:%M:%S");
            break;

          default:
            return full;
        }

        if (upcase) {
          result = result.toUpperCase();
        }

        if (invert) {
          result = result.replace(/[A-Z]/, function(c) { c.toLowerCase() }).
                          replace(/[a-z]/, function(c) { c.toUpperCase() });
        }

        if (pad && (zero || blank)) {
          result = (result).$rjust(isNaN(width) ? 2 : width, blank ? " " : "0");
        }

        return result;
      });
    
    }, TMP_32.$$arity = 1);

    Opal.defn(self, '$sunday?', TMP_33 = function() {
      var self = this;

      return self.$wday() == 0;
    }, TMP_33.$$arity = 0);

    Opal.defn(self, '$thursday?', TMP_34 = function() {
      var self = this;

      return self.$wday() == 4;
    }, TMP_34.$$arity = 0);

    Opal.defn(self, '$to_a', TMP_35 = function $$to_a() {
      var self = this;

      return [self.$sec(), self.$min(), self.$hour(), self.$day(), self.$month(), self.$year(), self.$wday(), self.$yday(), self.$isdst(), self.$zone()];
    }, TMP_35.$$arity = 0);

    Opal.defn(self, '$to_f', TMP_36 = function $$to_f() {
      var self = this;

      return self.getTime() / 1000;
    }, TMP_36.$$arity = 0);

    Opal.defn(self, '$to_i', TMP_37 = function $$to_i() {
      var self = this;

      return parseInt(self.getTime() / 1000, 10);
    }, TMP_37.$$arity = 0);

    Opal.alias(self, 'to_s', 'inspect');

    Opal.defn(self, '$tuesday?', TMP_38 = function() {
      var self = this;

      return self.$wday() == 2;
    }, TMP_38.$$arity = 0);

    Opal.alias(self, 'tv_sec', 'sec');

    Opal.alias(self, 'tv_usec', 'usec');

    Opal.alias(self, 'utc?', 'gmt?');

    Opal.alias(self, 'gmtoff', 'gmt_offset');

    Opal.alias(self, 'utc_offset', 'gmt_offset');

    Opal.defn(self, '$wday', TMP_39 = function $$wday() {
      var self = this;

      return self.is_utc ? self.getUTCDay() : self.getDay();
    }, TMP_39.$$arity = 0);

    Opal.defn(self, '$wednesday?', TMP_40 = function() {
      var self = this;

      return self.$wday() == 3;
    }, TMP_40.$$arity = 0);

    Opal.defn(self, '$year', TMP_41 = function $$year() {
      var self = this;

      return self.is_utc ? self.getUTCFullYear() : self.getFullYear();
    }, TMP_41.$$arity = 0);

    return (Opal.defn(self, '$cweek_cyear', TMP_42 = function $$cweek_cyear() {
      var $a, $b, self = this, jan01 = nil, jan01_wday = nil, first_monday = nil, year = nil, offset = nil, week = nil, dec31 = nil, dec31_wday = nil;

      jan01 = $scope.get('Time').$new(self.$year(), 1, 1);
      jan01_wday = jan01.$wday();
      first_monday = 0;
      year = self.$year();
      if ((($a = ($b = $rb_le(jan01_wday, 4), $b !== false && $b !== nil && $b != null ?jan01_wday['$!='](0) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        offset = $rb_minus(jan01_wday, 1)
        } else {
        offset = $rb_minus($rb_minus(jan01_wday, 7), 1);
        if (offset['$=='](-8)) {
          offset = -1};
      };
      week = ($rb_divide(($rb_plus(self.$yday(), offset)), 7.0)).$ceil();
      if ((($a = $rb_le(week, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return $scope.get('Time').$new($rb_minus(self.$year(), 1), 12, 31).$cweek_cyear()
      } else if (week['$=='](53)) {
        dec31 = $scope.get('Time').$new(self.$year(), 12, 31);
        dec31_wday = dec31.$wday();
        if ((($a = ($b = $rb_le(dec31_wday, 3), $b !== false && $b !== nil && $b != null ?dec31_wday['$!='](0) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          week = 1;
          year = $rb_plus(year, 1);};};
      return [week, year];
    }, TMP_42.$$arity = 0), nil) && 'cweek_cyear';
  })($scope.base, Date);
};
/* Generated by Opal 0.10.3 */
Opal.modules["corelib/struct"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$include', '$const_name!', '$unshift', '$map', '$coerce_to!', '$new', '$each', '$define_struct_attribute', '$allocate', '$initialize', '$module_eval', '$to_proc', '$const_set', '$==', '$raise', '$<<', '$members', '$define_method', '$instance_eval', '$>', '$length', '$class', '$each_with_index', '$[]=', '$[]', '$hash', '$===', '$<', '$-@', '$size', '$>=', '$include?', '$to_sym', '$instance_of?', '$__id__', '$eql?', '$enum_for', '$name', '$+', '$join', '$inspect', '$each_pair', '$inject', '$flatten', '$to_a', '$values_at']);
  self.$require("corelib/enumerable");
  return (function($base, $super) {
    function $Struct(){};
    var self = $Struct = $klass($base, $super, 'Struct', $Struct);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_8, TMP_9, TMP_11, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_23, TMP_26, TMP_28, TMP_30, TMP_32, TMP_34, TMP_35;

    self.$include($scope.get('Enumerable'));

    Opal.defs(self, '$new', TMP_1 = function(const_name, $a_rest) {
      var $b, $c, TMP_2, $d, TMP_3, $e, self = this, args, $iter = TMP_1.$$p, block = $iter || nil, klass = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      TMP_1.$$p = null;
      if (const_name !== false && const_name !== nil && const_name != null) {
        try {
          const_name = $scope.get('Opal')['$const_name!'](const_name)
        } catch ($err) {
          if (Opal.rescue($err, [$scope.get('TypeError'), $scope.get('NameError')])) {
            try {
              args.$unshift(const_name);
              const_name = nil;
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        }};
      ($b = ($c = args).$map, $b.$$p = (TMP_2 = function(arg){var self = TMP_2.$$s || this;
if (arg == null) arg = nil;
      return $scope.get('Opal')['$coerce_to!'](arg, $scope.get('String'), "to_str")}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $b).call($c);
      klass = ($b = ($d = $scope.get('Class')).$new, $b.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this, $a, $e, TMP_4;

      ($a = ($e = args).$each, $a.$$p = (TMP_4 = function(arg){var self = TMP_4.$$s || this;
if (arg == null) arg = nil;
        return self.$define_struct_attribute(arg)}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4), $a).call($e);
        return (function(self) {
          var $scope = self.$$scope, def = self.$$proto, TMP_5;

          Opal.defn(self, '$new', TMP_5 = function($a_rest) {
            var $b, self = this, args, instance = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            instance = self.$allocate();
            instance.$$data = {};;
            ($b = instance).$initialize.apply($b, Opal.to_a(args));
            return instance;
          }, TMP_5.$$arity = -1);
          return Opal.alias(self, '[]', 'new');
        })(Opal.get_singleton_class(self));}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $b).call($d, self);
      if (block !== false && block !== nil && block != null) {
        ($b = ($e = klass).$module_eval, $b.$$p = block.$to_proc(), $b).call($e)};
      if (const_name !== false && const_name !== nil && const_name != null) {
        $scope.get('Struct').$const_set(const_name, klass)};
      return klass;
    }, TMP_1.$$arity = -2);

    Opal.defs(self, '$define_struct_attribute', TMP_8 = function $$define_struct_attribute(name) {
      var $a, $b, TMP_6, $c, TMP_7, self = this;

      if (self['$==']($scope.get('Struct'))) {
        self.$raise($scope.get('ArgumentError'), "you cannot define attributes to the Struct class")};
      self.$members()['$<<'](name);
      ($a = ($b = self).$define_method, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

      return self.$$data[name];}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($b, name);
      return ($a = ($c = self).$define_method, $a.$$p = (TMP_7 = function(value){var self = TMP_7.$$s || this;
if (value == null) value = nil;
      return self.$$data[name] = value;}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $a).call($c, "" + (name) + "=");
    }, TMP_8.$$arity = 1);

    Opal.defs(self, '$members', TMP_9 = function $$members() {
      var $a, self = this;
      if (self.members == null) self.members = nil;

      if (self['$==']($scope.get('Struct'))) {
        self.$raise($scope.get('ArgumentError'), "the Struct class has no members")};
      return ((($a = self.members) !== false && $a !== nil && $a != null) ? $a : self.members = []);
    }, TMP_9.$$arity = 0);

    Opal.defs(self, '$inherited', TMP_11 = function $$inherited(klass) {
      var $a, $b, TMP_10, self = this, members = nil;
      if (self.members == null) self.members = nil;

      members = self.members;
      return ($a = ($b = klass).$instance_eval, $a.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this;

      return self.members = members}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10), $a).call($b);
    }, TMP_11.$$arity = 1);

    Opal.defn(self, '$initialize', TMP_13 = function $$initialize($a_rest) {
      var $b, $c, TMP_12, self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ((($b = $rb_gt(args.$length(), self.$class().$members().$length())) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        self.$raise($scope.get('ArgumentError'), "struct size differs")};
      return ($b = ($c = self.$class().$members()).$each_with_index, $b.$$p = (TMP_12 = function(name, index){var self = TMP_12.$$s || this;
if (name == null) name = nil;if (index == null) index = nil;
      return self['$[]='](name, args['$[]'](index))}, TMP_12.$$s = self, TMP_12.$$arity = 2, TMP_12), $b).call($c);
    }, TMP_13.$$arity = -1);

    Opal.defn(self, '$members', TMP_14 = function $$members() {
      var self = this;

      return self.$class().$members();
    }, TMP_14.$$arity = 0);

    Opal.defn(self, '$hash', TMP_15 = function $$hash() {
      var self = this;

      return $scope.get('Hash').$new(self.$$data).$hash();
    }, TMP_15.$$arity = 0);

    Opal.defn(self, '$[]', TMP_16 = function(name) {
      var $a, self = this;

      if ((($a = $scope.get('Integer')['$==='](name)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = $rb_lt(name, self.$class().$members().$size()['$-@']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('IndexError'), "offset " + (name) + " too small for struct(size:" + (self.$class().$members().$size()) + ")")};
        if ((($a = $rb_ge(name, self.$class().$members().$size())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('IndexError'), "offset " + (name) + " too large for struct(size:" + (self.$class().$members().$size()) + ")")};
        name = self.$class().$members()['$[]'](name);
      } else if ((($a = $scope.get('String')['$==='](name)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        
        if(!self.$$data.hasOwnProperty(name)) {
          self.$raise($scope.get('NameError').$new("no member '" + (name) + "' in struct", name))
        }
      ;
        } else {
        self.$raise($scope.get('TypeError'), "no implicit conversion of " + (name.$class()) + " into Integer")
      };
      name = $scope.get('Opal')['$coerce_to!'](name, $scope.get('String'), "to_str");
      return self.$$data[name];
    }, TMP_16.$$arity = 1);

    Opal.defn(self, '$[]=', TMP_17 = function(name, value) {
      var $a, self = this;

      if ((($a = $scope.get('Integer')['$==='](name)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = $rb_lt(name, self.$class().$members().$size()['$-@']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('IndexError'), "offset " + (name) + " too small for struct(size:" + (self.$class().$members().$size()) + ")")};
        if ((($a = $rb_ge(name, self.$class().$members().$size())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('IndexError'), "offset " + (name) + " too large for struct(size:" + (self.$class().$members().$size()) + ")")};
        name = self.$class().$members()['$[]'](name);
      } else if ((($a = $scope.get('String')['$==='](name)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = self.$class().$members()['$include?'](name.$to_sym())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          self.$raise($scope.get('NameError').$new("no member '" + (name) + "' in struct", name))
        }
        } else {
        self.$raise($scope.get('TypeError'), "no implicit conversion of " + (name.$class()) + " into Integer")
      };
      name = $scope.get('Opal')['$coerce_to!'](name, $scope.get('String'), "to_str");
      return self.$$data[name] = value;
    }, TMP_17.$$arity = 2);

    Opal.defn(self, '$==', TMP_18 = function(other) {
      var $a, self = this;

      if ((($a = other['$instance_of?'](self.$class())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return false
      };
      
      var recursed1 = {}, recursed2 = {};

      function _eqeq(struct, other) {
        var key, a, b;

        recursed1[(struct).$__id__()] = true;
        recursed2[(other).$__id__()] = true;

        for (key in struct.$$data) {
          a = struct.$$data[key];
          b = other.$$data[key];

          if ($scope.get('Struct')['$==='](a)) {
            if (!recursed1.hasOwnProperty((a).$__id__()) || !recursed2.hasOwnProperty((b).$__id__())) {
              if (!_eqeq(a, b)) {
                return false;
              }
            }
          } else {
            if (!(a)['$=='](b)) {
              return false;
            }
          }
        }

        return true;
      }

      return _eqeq(self, other);
    ;
    }, TMP_18.$$arity = 1);

    Opal.defn(self, '$eql?', TMP_19 = function(other) {
      var $a, self = this;

      if ((($a = other['$instance_of?'](self.$class())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return false
      };
      
      var recursed1 = {}, recursed2 = {};

      function _eqeq(struct, other) {
        var key, a, b;

        recursed1[(struct).$__id__()] = true;
        recursed2[(other).$__id__()] = true;

        for (key in struct.$$data) {
          a = struct.$$data[key];
          b = other.$$data[key];

          if ($scope.get('Struct')['$==='](a)) {
            if (!recursed1.hasOwnProperty((a).$__id__()) || !recursed2.hasOwnProperty((b).$__id__())) {
              if (!_eqeq(a, b)) {
                return false;
              }
            }
          } else {
            if (!(a)['$eql?'](b)) {
              return false;
            }
          }
        }

        return true;
      }

      return _eqeq(self, other);
    ;
    }, TMP_19.$$arity = 1);

    Opal.defn(self, '$each', TMP_20 = function $$each() {
      var $a, $b, TMP_21, $c, TMP_22, self = this, $iter = TMP_20.$$p, $yield = $iter || nil;

      TMP_20.$$p = null;
      if (($yield !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_21 = function(){var self = TMP_21.$$s || this;

        return self.$size()}, TMP_21.$$s = self, TMP_21.$$arity = 0, TMP_21), $a).call($b, "each")
      };
      ($a = ($c = self.$class().$members()).$each, $a.$$p = (TMP_22 = function(name){var self = TMP_22.$$s || this;
if (name == null) name = nil;
      return Opal.yield1($yield, self['$[]'](name));}, TMP_22.$$s = self, TMP_22.$$arity = 1, TMP_22), $a).call($c);
      return self;
    }, TMP_20.$$arity = 0);

    Opal.defn(self, '$each_pair', TMP_23 = function $$each_pair() {
      var $a, $b, TMP_24, $c, TMP_25, self = this, $iter = TMP_23.$$p, $yield = $iter || nil;

      TMP_23.$$p = null;
      if (($yield !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_24 = function(){var self = TMP_24.$$s || this;

        return self.$size()}, TMP_24.$$s = self, TMP_24.$$arity = 0, TMP_24), $a).call($b, "each_pair")
      };
      ($a = ($c = self.$class().$members()).$each, $a.$$p = (TMP_25 = function(name){var self = TMP_25.$$s || this;
if (name == null) name = nil;
      return Opal.yield1($yield, [name, self['$[]'](name)]);}, TMP_25.$$s = self, TMP_25.$$arity = 1, TMP_25), $a).call($c);
      return self;
    }, TMP_23.$$arity = 0);

    Opal.defn(self, '$length', TMP_26 = function $$length() {
      var self = this;

      return self.$class().$members().$length();
    }, TMP_26.$$arity = 0);

    Opal.alias(self, 'size', 'length');

    Opal.defn(self, '$to_a', TMP_28 = function $$to_a() {
      var $a, $b, TMP_27, self = this;

      return ($a = ($b = self.$class().$members()).$map, $a.$$p = (TMP_27 = function(name){var self = TMP_27.$$s || this;
if (name == null) name = nil;
      return self['$[]'](name)}, TMP_27.$$s = self, TMP_27.$$arity = 1, TMP_27), $a).call($b);
    }, TMP_28.$$arity = 0);

    Opal.alias(self, 'values', 'to_a');

    Opal.defn(self, '$inspect', TMP_30 = function $$inspect() {
      var $a, $b, TMP_29, self = this, result = nil;

      result = "#<struct ";
      if ((($a = ($b = $scope.get('Struct')['$==='](self), $b !== false && $b !== nil && $b != null ?self.$class().$name() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        result = $rb_plus(result, "" + (self.$class()) + " ")};
      result = $rb_plus(result, ($a = ($b = self.$each_pair()).$map, $a.$$p = (TMP_29 = function(name, value){var self = TMP_29.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
      return "" + (name) + "=" + (value.$inspect())}, TMP_29.$$s = self, TMP_29.$$arity = 2, TMP_29), $a).call($b).$join(", "));
      result = $rb_plus(result, ">");
      return result;
    }, TMP_30.$$arity = 0);

    Opal.alias(self, 'to_s', 'inspect');

    Opal.defn(self, '$to_h', TMP_32 = function $$to_h() {
      var $a, $b, TMP_31, self = this;

      return ($a = ($b = self.$class().$members()).$inject, $a.$$p = (TMP_31 = function(h, name){var self = TMP_31.$$s || this;
if (h == null) h = nil;if (name == null) name = nil;
      h['$[]='](name, self['$[]'](name));
        return h;}, TMP_31.$$s = self, TMP_31.$$arity = 2, TMP_31), $a).call($b, $hash2([], {}));
    }, TMP_32.$$arity = 0);

    Opal.defn(self, '$values_at', TMP_34 = function $$values_at($a_rest) {
      var $b, $c, TMP_33, self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      args = ($b = ($c = args).$map, $b.$$p = (TMP_33 = function(arg){var self = TMP_33.$$s || this;
if (arg == null) arg = nil;
      return arg.$$is_range ? arg.$to_a() : arg;}, TMP_33.$$s = self, TMP_33.$$arity = 1, TMP_33), $b).call($c).$flatten();
      
      var result = [];
      for (var i = 0, len = args.length; i < len; i++) {
        if (!args[i].$$is_number) {
          self.$raise($scope.get('TypeError'), "no implicit conversion of " + ((args[i]).$class()) + " into Integer")
        }
        result.push(self['$[]'](args[i]));
      }
      return result;
    ;
    }, TMP_34.$$arity = -1);

    return (Opal.defs(self, '$_load', TMP_35 = function $$_load(args) {
      var $a, $b, self = this, attributes = nil;

      attributes = ($a = args).$values_at.apply($a, Opal.to_a(self.$members()));
      return ($b = self).$new.apply($b, Opal.to_a(attributes));
    }, TMP_35.$$arity = 1), nil) && '_load';
  })($scope.base, null);
};
/* Generated by Opal 0.10.3 */
Opal.modules["corelib/io"] = function(Opal) {
  var $a, $b, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module, $gvars = Opal.gvars;

  Opal.add_stubs(['$attr_accessor', '$size', '$write', '$join', '$map', '$String', '$empty?', '$concat', '$chomp', '$getbyte', '$getc', '$raise', '$new', '$write_proc=', '$extend']);
  (function($base, $super) {
    function $IO(){};
    var self = $IO = $klass($base, $super, 'IO', $IO);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4;

    def.tty = def.closed = nil;
    Opal.cdecl($scope, 'SEEK_SET', 0);

    Opal.cdecl($scope, 'SEEK_CUR', 1);

    Opal.cdecl($scope, 'SEEK_END', 2);

    Opal.defn(self, '$tty?', TMP_1 = function() {
      var self = this;

      return self.tty;
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$closed?', TMP_2 = function() {
      var self = this;

      return self.closed;
    }, TMP_2.$$arity = 0);

    self.$attr_accessor("write_proc");

    Opal.defn(self, '$write', TMP_3 = function $$write(string) {
      var self = this;

      self.write_proc(string);
      return string.$size();
    }, TMP_3.$$arity = 1);

    self.$attr_accessor("sync", "tty");

    Opal.defn(self, '$flush', TMP_4 = function $$flush() {
      var self = this;

      return nil;
    }, TMP_4.$$arity = 0);

    (function($base) {
      var $Writable, self = $Writable = $module($base, 'Writable');

      var def = self.$$proto, $scope = self.$$scope, TMP_5, TMP_7, TMP_9;

      Opal.defn(self, '$<<', TMP_5 = function(string) {
        var self = this;

        self.$write(string);
        return self;
      }, TMP_5.$$arity = 1);

      Opal.defn(self, '$print', TMP_7 = function $$print($a_rest) {
        var $b, $c, TMP_6, self = this, args;
        if ($gvars[","] == null) $gvars[","] = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        self.$write(($b = ($c = args).$map, $b.$$p = (TMP_6 = function(arg){var self = TMP_6.$$s || this;
if (arg == null) arg = nil;
        return self.$String(arg)}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $b).call($c).$join($gvars[","]));
        return nil;
      }, TMP_7.$$arity = -1);

      Opal.defn(self, '$puts', TMP_9 = function $$puts($a_rest) {
        var $b, $c, TMP_8, self = this, args, newline = nil;
        if ($gvars["/"] == null) $gvars["/"] = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        newline = $gvars["/"];
        if ((($b = args['$empty?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          self.$write($gvars["/"])
          } else {
          self.$write(($b = ($c = args).$map, $b.$$p = (TMP_8 = function(arg){var self = TMP_8.$$s || this;
if (arg == null) arg = nil;
          return self.$String(arg).$chomp()}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8), $b).call($c).$concat([nil]).$join(newline))
        };
        return nil;
      }, TMP_9.$$arity = -1);
    })($scope.base);

    return (function($base) {
      var $Readable, self = $Readable = $module($base, 'Readable');

      var def = self.$$proto, $scope = self.$$scope, TMP_10, TMP_11, TMP_12, TMP_13;

      Opal.defn(self, '$readbyte', TMP_10 = function $$readbyte() {
        var self = this;

        return self.$getbyte();
      }, TMP_10.$$arity = 0);

      Opal.defn(self, '$readchar', TMP_11 = function $$readchar() {
        var self = this;

        return self.$getc();
      }, TMP_11.$$arity = 0);

      Opal.defn(self, '$readline', TMP_12 = function $$readline(sep) {
        var self = this;
        if ($gvars["/"] == null) $gvars["/"] = nil;

        if (sep == null) {
          sep = $gvars["/"];
        }
        return self.$raise($scope.get('NotImplementedError'));
      }, TMP_12.$$arity = -1);

      Opal.defn(self, '$readpartial', TMP_13 = function $$readpartial(integer, outbuf) {
        var self = this;

        if (outbuf == null) {
          outbuf = nil;
        }
        return self.$raise($scope.get('NotImplementedError'));
      }, TMP_13.$$arity = -2);
    })($scope.base);
  })($scope.base, null);
  Opal.cdecl($scope, 'STDERR', $gvars.stderr = $scope.get('IO').$new());
  Opal.cdecl($scope, 'STDIN', $gvars.stdin = $scope.get('IO').$new());
  Opal.cdecl($scope, 'STDOUT', $gvars.stdout = $scope.get('IO').$new());
  (($a = [typeof(process) === 'object' ? function(s){process.stdout.write(s)} : function(s){console.log(s)}]), $b = $scope.get('STDOUT'), $b['$write_proc='].apply($b, $a), $a[$a.length-1]);
  (($a = [typeof(process) === 'object' ? function(s){process.stderr.write(s)} : function(s){console.warn(s)}]), $b = $scope.get('STDERR'), $b['$write_proc='].apply($b, $a), $a[$a.length-1]);
  $scope.get('STDOUT').$extend((($scope.get('IO')).$$scope.get('Writable')));
  return $scope.get('STDERR').$extend((($scope.get('IO')).$$scope.get('Writable')));
};
/* Generated by Opal 0.10.3 */
Opal.modules["corelib/main"] = function(Opal) {
  var TMP_1, TMP_2, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$include']);
  Opal.defs(self, '$to_s', TMP_1 = function $$to_s() {
    var self = this;

    return "main";
  }, TMP_1.$$arity = 0);
  return (Opal.defs(self, '$include', TMP_2 = function $$include(mod) {
    var self = this;

    return $scope.get('Object').$include(mod);
  }, TMP_2.$$arity = 1), nil) && 'include';
};
/* Generated by Opal 0.10.3 */
Opal.modules["corelib/dir"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$[]']);
  return (function($base, $super) {
    function $Dir(){};
    var self = $Dir = $klass($base, $super, 'Dir', $Dir);

    var def = self.$$proto, $scope = self.$$scope;

    return (function(self) {
      var $scope = self.$$scope, def = self.$$proto, TMP_1, TMP_2, TMP_3;

      Opal.defn(self, '$chdir', TMP_1 = function $$chdir(dir) {
        var self = this, $iter = TMP_1.$$p, $yield = $iter || nil, prev_cwd = nil;

        TMP_1.$$p = null;
        try {
        prev_cwd = Opal.current_dir;
        Opal.current_dir = dir;
        return Opal.yieldX($yield, []);;
        } finally {
          Opal.current_dir = prev_cwd;
        };
      }, TMP_1.$$arity = 1);
      Opal.defn(self, '$pwd', TMP_2 = function $$pwd() {
        var self = this;

        return Opal.current_dir || '.';
      }, TMP_2.$$arity = 0);
      Opal.alias(self, 'getwd', 'pwd');
      return (Opal.defn(self, '$home', TMP_3 = function $$home() {
        var $a, self = this;

        return ((($a = $scope.get('ENV')['$[]']("HOME")) !== false && $a !== nil && $a != null) ? $a : ".");
      }, TMP_3.$$arity = 0), nil) && 'home';
    })(Opal.get_singleton_class(self))
  })($scope.base, null)
};
/* Generated by Opal 0.10.3 */
Opal.modules["corelib/file"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$join', '$compact', '$split', '$==', '$first', '$[]=', '$home', '$pwd', '$each', '$pop', '$<<', '$raise', '$respond_to?', '$to_path', '$class', '$nil?', '$is_a?', '$basename', '$empty?', '$rindex', '$[]', '$+', '$-', '$length', '$gsub', '$find', '$=~']);
  return (function($base, $super) {
    function $File(){};
    var self = $File = $klass($base, $super, 'File', $File);

    var def = self.$$proto, $scope = self.$$scope;

    Opal.cdecl($scope, 'Separator', Opal.cdecl($scope, 'SEPARATOR', "/"));

    Opal.cdecl($scope, 'ALT_SEPARATOR', nil);

    Opal.cdecl($scope, 'PATH_SEPARATOR', ":");

    Opal.cdecl($scope, 'FNM_SYSCASE', 0);

    return (function(self) {
      var $scope = self.$$scope, def = self.$$proto, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_8, TMP_9, TMP_10;

      Opal.defn(self, '$expand_path', TMP_2 = function $$expand_path(path, basedir) {
        var $a, $b, TMP_1, self = this, parts = nil, new_parts = nil;

        if (basedir == null) {
          basedir = nil;
        }
        path = [basedir, path].$compact().$join($scope.get('SEPARATOR'));
        parts = path.$split($scope.get('SEPARATOR'));
        new_parts = [];
        if (parts.$first()['$==']("~")) {
          parts['$[]='](0, $scope.get('Dir').$home())};
        if (parts.$first()['$=='](".")) {
          parts['$[]='](0, $scope.get('Dir').$pwd())};
        ($a = ($b = parts).$each, $a.$$p = (TMP_1 = function(part){var self = TMP_1.$$s || this;
if (part == null) part = nil;
        if (part['$==']("..")) {
            return new_parts.$pop()
            } else {
            return new_parts['$<<'](part)
          }}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $a).call($b);
        return new_parts.$join($scope.get('SEPARATOR'));
      }, TMP_2.$$arity = -2);
      Opal.alias(self, 'realpath', 'expand_path');
      
      function chompdirsep(path) {
        var last;

        while (path.length > 0) {
          if (isDirSep(path)) {
            last = path;
            path = path.substring(1, path.length);
            while (path.length > 0 && isDirSep(path)) {
              path = inc(path);
            }
            if (path.length == 0) {
              return last;
            }
          }
          else {
            path = inc(path);
          }
        }
        return path;
      }

      function inc(a) {
        return a.substring(1, a.length);
      }

      function skipprefix(path) {
        return path;
      }

      function lastSeparator(path) {
        var tmp, last;

        while (path.length > 0) {
          if (isDirSep(path)) {
            tmp = path;
            path = inc(path);

            while (path.length > 0 && isDirSep(path)) {
              path = inc(path);
            }
            if (!path) {
              break;
            }
            last = tmp;
          }
          else {
            path = inc(path);
          }
        }

        return last;
      }

      function isDirSep(sep) {
        return sep.charAt(0) === $scope.get('SEPARATOR');
      }

      function skipRoot(path) {
        while (path.length > 0 && isDirSep(path)) {
          path = inc(path);
        }
        return path;
      }

      function pointerSubtract(a, b) {
        if (a.length == 0) {
          return b.length;
        }
        return b.indexOf(a);
      }

      function handleSuffix(n, f, p, suffix, name, origName) {
        var suffixMatch;

        if (n >= 0) {
          if (suffix === nil) {
            f = n;
          }
          else {
            suffixMatch = suffix === '.*' ? '\\.\\w+' : suffix.replace(/\?/g, '\\?');
            suffixMatch = new RegExp(suffixMatch + $scope.get('Separator') + '*$').exec(p);
            if (suffixMatch) {
              f = suffixMatch.index;
            }
            else {
              f = n;
            }
          }

          if (f === origName.length) {
            return name;
          }
        }

        return p.substring(0, f);
      }
    
      Opal.defn(self, '$dirname', TMP_3 = function $$dirname(path) {
        var self = this;

        
        if (path === nil) {
          self.$raise($scope.get('TypeError'), "no implicit conversion of nil into String")
        }
        if (path['$respond_to?']("to_path")) {
          path = path.$to_path();
        }
        if (!path.$$is_string) {
          self.$raise($scope.get('TypeError'), "no implicit conversion of " + (path.$class()) + " into String")
        }

        var root, p;

        root = skipRoot(path);

        // if (root > name + 1) in the C code
        if (root.length == 0) {
          path = path.substring(path.length - 1, path.length);
        }
        else if (root.length - path.length < 0) {
          path = path.substring(path.indexOf(root)-1, path.length);
        }

        p = lastSeparator(root);
        if (!p) {
          p = root;
        }
        if (p === path) {
          return '.';
        }
        return path.substring(0, path.length - p.length);
      ;
      }, TMP_3.$$arity = 1);
      Opal.defn(self, '$basename', TMP_4 = function $$basename(name, suffix) {
        var self = this;

        if (suffix == null) {
          suffix = nil;
        }
        
        var p, q, e, f = 0, n = -1, tmp, pointerMath, origName;

        if (name === nil) {
          self.$raise($scope.get('TypeError'), "no implicit conversion of nil into String")
        }
        if (name['$respond_to?']("to_path")) {
          name = name.$to_path();
        }
        if (!name.$$is_string) {
          self.$raise($scope.get('TypeError'), "no implicit conversion of " + (name.$class()) + " into String")
        }
        if (suffix !== nil && !suffix.$$is_string) {
          self.$raise($scope.get('TypeError'), "no implicit conversion of " + (suffix.$class()) + " into String")
        }

        if (name.length == 0) {
          return name;
        }

        origName = name;
        name = skipprefix(name);

        while (isDirSep(name)) {
          tmp = name;
          name = inc(name);
        }

        if (!name) {
          p = tmp;
          f = 1;
        }
        else {
          if (!(p = lastSeparator(name))) {
            p = name;
          }
          else {
            while (isDirSep(p)) {
              p = inc(p);
            }
          }

          n = pointerSubtract(chompdirsep(p), p);

          for (q = p; pointerSubtract(q, p) < n && q.charAt(0) === '.'; q = inc(q)) {
          }

          for (e = null; pointerSubtract(q, p) < n; q = inc(q)) {
            if (q.charAt(0) === '.') {
              e = q;
            }
          }

          if (e) {
            f = pointerSubtract(e, p);
          }
          else {
            f = n;
          }
        }

        return handleSuffix(n, f, p, suffix, name, origName);
      ;
      }, TMP_4.$$arity = -2);
      Opal.defn(self, '$extname', TMP_5 = function $$extname(path) {
        var $a, $b, self = this, filename = nil, last_dot_idx = nil;

        if ((($a = path['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('TypeError'), "no implicit conversion of nil into String")};
        if ((($a = path['$respond_to?']("to_path")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          path = path.$to_path()};
        if ((($a = path['$is_a?']($scope.get('String'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          self.$raise($scope.get('TypeError'), "no implicit conversion of " + (path.$class()) + " into String")
        };
        filename = self.$basename(path);
        if ((($a = filename['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return ""};
        last_dot_idx = filename['$[]']($range(1, -1, false)).$rindex(".");
        if ((($a = (((($b = last_dot_idx['$nil?']()) !== false && $b !== nil && $b != null) ? $b : $rb_plus(last_dot_idx, 1)['$==']($rb_minus(filename.$length(), 1))))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return ""
          } else {
          return filename['$[]']($range(($rb_plus(last_dot_idx, 1)), -1, false))
        };
      }, TMP_5.$$arity = 1);
      Opal.defn(self, '$exist?', TMP_6 = function(path) {
        var self = this;

        return Opal.modules[path] != null;
      }, TMP_6.$$arity = 1);
      Opal.alias(self, 'exists?', 'exist?');
      Opal.defn(self, '$directory?', TMP_8 = function(path) {
        var $a, $b, TMP_7, self = this, files = nil, file = nil;

        files = [];
        
        for (var key in Opal.modules) {
          files.push(key)
        }
      ;
        path = path.$gsub((new RegExp("(^." + $scope.get('SEPARATOR') + "+|" + $scope.get('SEPARATOR') + "+$)")));
        file = ($a = ($b = files).$find, $a.$$p = (TMP_7 = function(file){var self = TMP_7.$$s || this;
if (file == null) file = nil;
        return file['$=~']((new RegExp("^" + path)))}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $a).call($b);
        return file;
      }, TMP_8.$$arity = 1);
      Opal.defn(self, '$join', TMP_9 = function $$join($a_rest) {
        var self = this, paths;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        paths = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          paths[$arg_idx - 0] = arguments[$arg_idx];
        }
        return paths.$join($scope.get('SEPARATOR')).$gsub((new RegExp("" + $scope.get('SEPARATOR') + "+")), $scope.get('SEPARATOR'));
      }, TMP_9.$$arity = -1);
      return (Opal.defn(self, '$split', TMP_10 = function $$split(path) {
        var self = this;

        return path.$split($scope.get('SEPARATOR'));
      }, TMP_10.$$arity = 1), nil) && 'split';
    })(Opal.get_singleton_class(self));
  })($scope.base, $scope.get('IO'))
};
/* Generated by Opal 0.10.3 */
Opal.modules["corelib/process"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$to_f', '$now', '$new']);
  (function($base, $super) {
    function $Process(){};
    var self = $Process = $klass($base, $super, 'Process', $Process);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3;

    Opal.cdecl($scope, 'CLOCK_REALTIME', 0);

    Opal.cdecl($scope, 'CLOCK_MONOTONIC', 1);

    Opal.defs(self, '$pid', TMP_1 = function $$pid() {
      var self = this;

      return 0;
    }, TMP_1.$$arity = 0);

    Opal.defs(self, '$times', TMP_2 = function $$times() {
      var self = this, t = nil;

      t = $scope.get('Time').$now().$to_f();
      return (($scope.get('Benchmark')).$$scope.get('Tms')).$new(t, t, t, t, t);
    }, TMP_2.$$arity = 0);

    return (Opal.defs(self, '$clock_gettime', TMP_3 = function $$clock_gettime(clock_id, unit) {
      var self = this;

      if (unit == null) {
        unit = nil;
      }
      return $scope.get('Time').$now().$to_f();
    }, TMP_3.$$arity = -2), nil) && 'clock_gettime';
  })($scope.base, null);
  (function($base, $super) {
    function $Signal(){};
    var self = $Signal = $klass($base, $super, 'Signal', $Signal);

    var def = self.$$proto, $scope = self.$$scope, TMP_4;

    return (Opal.defs(self, '$trap', TMP_4 = function $$trap($a_rest) {
      var self = this;

      return nil;
    }, TMP_4.$$arity = -1), nil) && 'trap'
  })($scope.base, null);
  return (function($base, $super) {
    function $GC(){};
    var self = $GC = $klass($base, $super, 'GC', $GC);

    var def = self.$$proto, $scope = self.$$scope, TMP_5;

    return (Opal.defs(self, '$start', TMP_5 = function $$start() {
      var self = this;

      return nil;
    }, TMP_5.$$arity = 0), nil) && 'start'
  })($scope.base, null);
};
/* Generated by Opal 0.10.3 */
Opal.modules["corelib/unsupported"] = function(Opal) {
  var TMP_30, TMP_31, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module;

  Opal.add_stubs(['$raise', '$warn', '$%']);
  
  var warnings = {};

  function handle_unsupported_feature(message) {
    switch (Opal.config.unsupported_features_severity) {
    case 'error':
      $scope.get('Kernel').$raise($scope.get('NotImplementedError'), message)
      break;
    case 'warning':
      warn(message)
      break;
    default: // ignore
      // noop
    }
  }

  function warn(string) {
    if (warnings[string]) {
      return;
    }

    warnings[string] = true;
    self.$warn(string);
  }

  (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18;

    var ERROR = "String#%s not supported. Mutable String methods are not supported in Opal.";

    Opal.defn(self, '$<<', TMP_1 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("<<"));
    }, TMP_1.$$arity = -1);

    Opal.defn(self, '$capitalize!', TMP_2 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("capitalize!"));
    }, TMP_2.$$arity = -1);

    Opal.defn(self, '$chomp!', TMP_3 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("chomp!"));
    }, TMP_3.$$arity = -1);

    Opal.defn(self, '$chop!', TMP_4 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("chop!"));
    }, TMP_4.$$arity = -1);

    Opal.defn(self, '$downcase!', TMP_5 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("downcase!"));
    }, TMP_5.$$arity = -1);

    Opal.defn(self, '$gsub!', TMP_6 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("gsub!"));
    }, TMP_6.$$arity = -1);

    Opal.defn(self, '$lstrip!', TMP_7 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("lstrip!"));
    }, TMP_7.$$arity = -1);

    Opal.defn(self, '$next!', TMP_8 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("next!"));
    }, TMP_8.$$arity = -1);

    Opal.defn(self, '$reverse!', TMP_9 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("reverse!"));
    }, TMP_9.$$arity = -1);

    Opal.defn(self, '$slice!', TMP_10 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("slice!"));
    }, TMP_10.$$arity = -1);

    Opal.defn(self, '$squeeze!', TMP_11 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("squeeze!"));
    }, TMP_11.$$arity = -1);

    Opal.defn(self, '$strip!', TMP_12 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("strip!"));
    }, TMP_12.$$arity = -1);

    Opal.defn(self, '$sub!', TMP_13 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("sub!"));
    }, TMP_13.$$arity = -1);

    Opal.defn(self, '$succ!', TMP_14 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("succ!"));
    }, TMP_14.$$arity = -1);

    Opal.defn(self, '$swapcase!', TMP_15 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("swapcase!"));
    }, TMP_15.$$arity = -1);

    Opal.defn(self, '$tr!', TMP_16 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("tr!"));
    }, TMP_16.$$arity = -1);

    Opal.defn(self, '$tr_s!', TMP_17 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("tr_s!"));
    }, TMP_17.$$arity = -1);

    return (Opal.defn(self, '$upcase!', TMP_18 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("upcase!"));
    }, TMP_18.$$arity = -1), nil) && 'upcase!';
  })($scope.base, null);
  (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_19, TMP_20;

    var ERROR = "Object freezing is not supported by Opal";

    Opal.defn(self, '$freeze', TMP_19 = function $$freeze() {
      var self = this;

      handle_unsupported_feature(ERROR);
      return self;
    }, TMP_19.$$arity = 0);

    Opal.defn(self, '$frozen?', TMP_20 = function() {
      var self = this;

      handle_unsupported_feature(ERROR);
      return false;
    }, TMP_20.$$arity = 0);
  })($scope.base);
  (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_21, TMP_22, TMP_23;

    var ERROR = "Object tainting is not supported by Opal";

    Opal.defn(self, '$taint', TMP_21 = function $$taint() {
      var self = this;

      handle_unsupported_feature(ERROR);
      return self;
    }, TMP_21.$$arity = 0);

    Opal.defn(self, '$untaint', TMP_22 = function $$untaint() {
      var self = this;

      handle_unsupported_feature(ERROR);
      return self;
    }, TMP_22.$$arity = 0);

    Opal.defn(self, '$tainted?', TMP_23 = function() {
      var self = this;

      handle_unsupported_feature(ERROR);
      return false;
    }, TMP_23.$$arity = 0);
  })($scope.base);
  (function($base, $super) {
    function $Module(){};
    var self = $Module = $klass($base, $super, 'Module', $Module);

    var def = self.$$proto, $scope = self.$$scope, TMP_24, TMP_25, TMP_26, TMP_27;

    Opal.defn(self, '$public', TMP_24 = function($a_rest) {
      var self = this, methods;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      methods = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        methods[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      if (methods.length === 0) {
        self.$$module_function = false;
      }

      return nil;
    
    }, TMP_24.$$arity = -1);

    Opal.alias(self, 'private', 'public');

    Opal.alias(self, 'protected', 'public');

    Opal.alias(self, 'nesting', 'public');

    Opal.defn(self, '$private_class_method', TMP_25 = function $$private_class_method($a_rest) {
      var self = this;

      return self;
    }, TMP_25.$$arity = -1);

    Opal.alias(self, 'public_class_method', 'private_class_method');

    Opal.defn(self, '$private_method_defined?', TMP_26 = function(obj) {
      var self = this;

      return false;
    }, TMP_26.$$arity = 1);

    Opal.defn(self, '$private_constant', TMP_27 = function $$private_constant($a_rest) {
      var self = this;

      return nil;
    }, TMP_27.$$arity = -1);

    Opal.alias(self, 'protected_method_defined?', 'private_method_defined?');

    Opal.alias(self, 'public_instance_methods', 'instance_methods');

    return Opal.alias(self, 'public_method_defined?', 'method_defined?');
  })($scope.base, null);
  (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_28;

    Opal.defn(self, '$private_methods', TMP_28 = function $$private_methods($a_rest) {
      var self = this;

      return [];
    }, TMP_28.$$arity = -1);

    Opal.alias(self, 'private_instance_methods', 'private_methods');
  })($scope.base);
  (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_29;

    Opal.defn(self, '$eval', TMP_29 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), "To use Kernel#eval, you must first require 'opal-parser'. " + ("See https://github.com/opal/opal/blob/" + ($scope.get('RUBY_ENGINE_VERSION')) + "/docs/opal_parser.md for details."));
    }, TMP_29.$$arity = -1)
  })($scope.base);
  Opal.defs(self, '$public', TMP_30 = function($a_rest) {
    var self = this;

    return nil;
  }, TMP_30.$$arity = -1);
  return (Opal.defs(self, '$private', TMP_31 = function($a_rest) {
    var self = this;

    return nil;
  }, TMP_31.$$arity = -1), nil) && 'private';
};
/* Generated by Opal 0.10.3 */
(function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  self.$require("opal/base");
  self.$require("opal/mini");
  self.$require("corelib/string/inheritance");
  self.$require("corelib/string/encoding");
  self.$require("corelib/math");
  self.$require("corelib/complex");
  self.$require("corelib/rational");
  self.$require("corelib/time");
  self.$require("corelib/struct");
  self.$require("corelib/io");
  self.$require("corelib/main");
  self.$require("corelib/dir");
  self.$require("corelib/file");
  self.$require("corelib/process");
  return self.$require("corelib/unsupported");
})(Opal);
!function(e){function t(r){if(n[r])return n[r].exports;var o=n[r]={exports:{},id:r,loaded:!1};return e[r].call(o.exports,o,o.exports,t),o.loaded=!0,o.exports}var n={};return t.m=e,t.c=n,t.p="/webpack/",t(0)}([function(e,t,n){console.log("Loading File called Client and Server"),ReactDOM=n(199),React=n(197),Moment=n(1),momentLocalizer=n(286),momentLocalizer(Moment)},function(e,t,n){(function(e){!function(t,n){e.exports=n()}(this,function(){"use strict";function t(){return yr.apply(null,arguments)}function r(e){yr=e}function o(e){return e instanceof Array||"[object Array]"===Object.prototype.toString.call(e)}function a(e){return null!=e&&"[object Object]"===Object.prototype.toString.call(e)}function i(e){var t;for(t in e)return!1;return!0}function s(e){return"number"==typeof e||"[object Number]"===Object.prototype.toString.call(e)}function u(e){return e instanceof Date||"[object Date]"===Object.prototype.toString.call(e)}function d(e,t){var n,r=[];for(n=0;n<e.length;++n)r.push(t(e[n],n));return r}function l(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function c(e,t){for(var n in t)l(t,n)&&(e[n]=t[n]);return l(t,"toString")&&(e.toString=t.toString),l(t,"valueOf")&&(e.valueOf=t.valueOf),e}function _(e,t,n,r){return Mt(e,t,n,r,!0).utc()}function m(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],meridiem:null}}function p(e){return null==e._pf&&(e._pf=m()),e._pf}function h(e){if(null==e._isValid){var t=p(e),n=Mr.call(t.parsedDateParts,function(e){return null!=e}),r=!isNaN(e._d.getTime())&&t.overflow<0&&!t.empty&&!t.invalidMonth&&!t.invalidWeekday&&!t.nullInput&&!t.invalidFormat&&!t.userInvalidated&&(!t.meridiem||t.meridiem&&n);if(e._strict&&(r=r&&0===t.charsLeftOver&&0===t.unusedTokens.length&&void 0===t.bigHour),null!=Object.isFrozen&&Object.isFrozen(e))return r;e._isValid=r}return e._isValid}function f(e){var t=_(NaN);return null!=e?c(p(t),e):p(t).userInvalidated=!0,t}function y(e){return void 0===e}function v(e,t){var n,r,o;if(y(t._isAMomentObject)||(e._isAMomentObject=t._isAMomentObject),y(t._i)||(e._i=t._i),y(t._f)||(e._f=t._f),y(t._l)||(e._l=t._l),y(t._strict)||(e._strict=t._strict),y(t._tzm)||(e._tzm=t._tzm),y(t._isUTC)||(e._isUTC=t._isUTC),y(t._offset)||(e._offset=t._offset),y(t._pf)||(e._pf=p(t)),y(t._locale)||(e._locale=t._locale),gr.length>0)for(n in gr)r=gr[n],o=t[r],y(o)||(e[r]=o);return e}function M(e){v(this,e),this._d=new Date(null!=e._d?e._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),Lr===!1&&(Lr=!0,t.updateOffset(this),Lr=!1)}function g(e){return e instanceof M||null!=e&&null!=e._isAMomentObject}function L(e){return e<0?Math.ceil(e)||0:Math.floor(e)}function D(e){var t=+e,n=0;return 0!==t&&isFinite(t)&&(n=L(t)),n}function Y(e,t,n){var r,o=Math.min(e.length,t.length),a=Math.abs(e.length-t.length),i=0;for(r=0;r<o;r++)(n&&e[r]!==t[r]||!n&&D(e[r])!==D(t[r]))&&i++;return i+a}function k(e){t.suppressDeprecationWarnings===!1&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+e)}function b(e,n){var r=!0;return c(function(){if(null!=t.deprecationHandler&&t.deprecationHandler(null,e),r){for(var o,a=[],i=0;i<arguments.length;i++){if(o="","object"==typeof arguments[i]){o+="\n["+i+"] ";for(var s in arguments[0])o+=s+": "+arguments[0][s]+", ";o=o.slice(0,-2)}else o=arguments[i];a.push(o)}k(e+"\nArguments: "+Array.prototype.slice.call(a).join("")+"\n"+(new Error).stack),r=!1}return n.apply(this,arguments)},n)}function T(e,n){null!=t.deprecationHandler&&t.deprecationHandler(e,n),Dr[e]||(k(n),Dr[e]=!0)}function w(e){return e instanceof Function||"[object Function]"===Object.prototype.toString.call(e)}function E(e){var t,n;for(n in e)t=e[n],w(t)?this[n]=t:this["_"+n]=t;this._config=e,this._ordinalParseLenient=new RegExp(this._ordinalParse.source+"|"+/\d{1,2}/.source)}function N(e,t){var n,r=c({},e);for(n in t)l(t,n)&&(a(e[n])&&a(t[n])?(r[n]={},c(r[n],e[n]),c(r[n],t[n])):null!=t[n]?r[n]=t[n]:delete r[n]);for(n in e)l(e,n)&&!l(t,n)&&a(e[n])&&(r[n]=c({},r[n]));return r}function S(e){null!=e&&this.set(e)}function x(e,t,n){var r=this._calendar[e]||this._calendar.sameElse;return w(r)?r.call(t,n):r}function O(e){var t=this._longDateFormat[e],n=this._longDateFormat[e.toUpperCase()];return t||!n?t:(this._longDateFormat[e]=n.replace(/MMMM|MM|DD|dddd/g,function(e){return e.slice(1)}),this._longDateFormat[e])}function C(){return this._invalidDate}function j(e){return this._ordinal.replace("%d",e)}function P(e,t,n,r){var o=this._relativeTime[n];return w(o)?o(e,t,n,r):o.replace(/%d/i,e)}function H(e,t){var n=this._relativeTime[e>0?"future":"past"];return w(n)?n(t):n.replace(/%s/i,t)}function A(e,t){var n=e.toLowerCase();Or[n]=Or[n+"s"]=Or[t]=e}function I(e){return"string"==typeof e?Or[e]||Or[e.toLowerCase()]:void 0}function R(e){var t,n,r={};for(n in e)l(e,n)&&(t=I(n),t&&(r[t]=e[n]));return r}function V(e,t){Cr[e]=t}function F(e){var t=[];for(var n in e)t.push({unit:n,priority:Cr[n]});return t.sort(function(e,t){return e.priority-t.priority}),t}function W(e,n){return function(r){return null!=r?(z(this,e,r),t.updateOffset(this,n),this):U(this,e)}}function U(e,t){return e.isValid()?e._d["get"+(e._isUTC?"UTC":"")+t]():NaN}function z(e,t,n){e.isValid()&&e._d["set"+(e._isUTC?"UTC":"")+t](n)}function B(e){return e=I(e),w(this[e])?this[e]():this}function J(e,t){if("object"==typeof e){e=R(e);for(var n=F(e),r=0;r<n.length;r++)this[n[r].unit](e[n[r].unit])}else if(e=I(e),w(this[e]))return this[e](t);return this}function q(e,t,n){var r=""+Math.abs(e),o=t-r.length,a=e>=0;return(a?n?"+":"":"-")+Math.pow(10,Math.max(0,o)).toString().substr(1)+r}function G(e,t,n,r){var o=r;"string"==typeof r&&(o=function(){return this[r]()}),e&&(Ar[e]=o),t&&(Ar[t[0]]=function(){return q(o.apply(this,arguments),t[1],t[2])}),n&&(Ar[n]=function(){return this.localeData().ordinal(o.apply(this,arguments),e)})}function K(e){return e.match(/\[[\s\S]/)?e.replace(/^\[|\]$/g,""):e.replace(/\\/g,"")}function $(e){var t,n,r=e.match(jr);for(t=0,n=r.length;t<n;t++)Ar[r[t]]?r[t]=Ar[r[t]]:r[t]=K(r[t]);return function(t){var o,a="";for(o=0;o<n;o++)a+=r[o]instanceof Function?r[o].call(t,e):r[o];return a}}function X(e,t){return e.isValid()?(t=Q(t,e.localeData()),Hr[t]=Hr[t]||$(t),Hr[t](e)):e.localeData().invalidDate()}function Q(e,t){function n(e){return t.longDateFormat(e)||e}var r=5;for(Pr.lastIndex=0;r>=0&&Pr.test(e);)e=e.replace(Pr,n),Pr.lastIndex=0,r-=1;return e}function Z(e,t,n){to[e]=w(t)?t:function(e,r){return e&&n?n:t}}function ee(e,t){return l(to,e)?to[e](t._strict,t._locale):new RegExp(te(e))}function te(e){return ne(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(e,t,n,r,o){return t||n||r||o}))}function ne(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}function re(e,t){var n,r=t;for("string"==typeof e&&(e=[e]),s(t)&&(r=function(e,n){n[t]=D(e)}),n=0;n<e.length;n++)no[e[n]]=r}function oe(e,t){re(e,function(e,n,r,o){r._w=r._w||{},t(e,r._w,r,o)})}function ae(e,t,n){null!=t&&l(no,e)&&no[e](t,n._a,n,e)}function ie(e,t){return new Date(Date.UTC(e,t+1,0)).getUTCDate()}function se(e,t){return e?o(this._months)?this._months[e.month()]:this._months[(this._months.isFormat||po).test(t)?"format":"standalone"][e.month()]:this._months}function ue(e,t){return e?o(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[po.test(t)?"format":"standalone"][e.month()]:this._monthsShort}function de(e,t,n){var r,o,a,i=e.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],r=0;r<12;++r)a=_([2e3,r]),this._shortMonthsParse[r]=this.monthsShort(a,"").toLocaleLowerCase(),this._longMonthsParse[r]=this.months(a,"").toLocaleLowerCase();return n?"MMM"===t?(o=mo.call(this._shortMonthsParse,i),o!==-1?o:null):(o=mo.call(this._longMonthsParse,i),o!==-1?o:null):"MMM"===t?(o=mo.call(this._shortMonthsParse,i),o!==-1?o:(o=mo.call(this._longMonthsParse,i),o!==-1?o:null)):(o=mo.call(this._longMonthsParse,i),o!==-1?o:(o=mo.call(this._shortMonthsParse,i),o!==-1?o:null))}function le(e,t,n){var r,o,a;if(this._monthsParseExact)return de.call(this,e,t,n);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),r=0;r<12;r++){if(o=_([2e3,r]),n&&!this._longMonthsParse[r]&&(this._longMonthsParse[r]=new RegExp("^"+this.months(o,"").replace(".","")+"$","i"),this._shortMonthsParse[r]=new RegExp("^"+this.monthsShort(o,"").replace(".","")+"$","i")),n||this._monthsParse[r]||(a="^"+this.months(o,"")+"|^"+this.monthsShort(o,""),this._monthsParse[r]=new RegExp(a.replace(".",""),"i")),n&&"MMMM"===t&&this._longMonthsParse[r].test(e))return r;if(n&&"MMM"===t&&this._shortMonthsParse[r].test(e))return r;if(!n&&this._monthsParse[r].test(e))return r}}function ce(e,t){var n;if(!e.isValid())return e;if("string"==typeof t)if(/^\d+$/.test(t))t=D(t);else if(t=e.localeData().monthsParse(t),!s(t))return e;return n=Math.min(e.date(),ie(e.year(),t)),e._d["set"+(e._isUTC?"UTC":"")+"Month"](t,n),e}function _e(e){return null!=e?(ce(this,e),t.updateOffset(this,!0),this):U(this,"Month")}function me(){return ie(this.year(),this.month())}function pe(e){return this._monthsParseExact?(l(this,"_monthsRegex")||fe.call(this),e?this._monthsShortStrictRegex:this._monthsShortRegex):(l(this,"_monthsShortRegex")||(this._monthsShortRegex=yo),this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex)}function he(e){return this._monthsParseExact?(l(this,"_monthsRegex")||fe.call(this),e?this._monthsStrictRegex:this._monthsRegex):(l(this,"_monthsRegex")||(this._monthsRegex=vo),this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex)}function fe(){function e(e,t){return t.length-e.length}var t,n,r=[],o=[],a=[];for(t=0;t<12;t++)n=_([2e3,t]),r.push(this.monthsShort(n,"")),o.push(this.months(n,"")),a.push(this.months(n,"")),a.push(this.monthsShort(n,""));for(r.sort(e),o.sort(e),a.sort(e),t=0;t<12;t++)r[t]=ne(r[t]),o[t]=ne(o[t]);for(t=0;t<24;t++)a[t]=ne(a[t]);this._monthsRegex=new RegExp("^("+a.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+o.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+r.join("|")+")","i")}function ye(e){return ve(e)?366:365}function ve(e){return e%4===0&&e%100!==0||e%400===0}function Me(){return ve(this.year())}function ge(e,t,n,r,o,a,i){var s=new Date(e,t,n,r,o,a,i);return e<100&&e>=0&&isFinite(s.getFullYear())&&s.setFullYear(e),s}function Le(e){var t=new Date(Date.UTC.apply(null,arguments));return e<100&&e>=0&&isFinite(t.getUTCFullYear())&&t.setUTCFullYear(e),t}function De(e,t,n){var r=7+t-n,o=(7+Le(e,0,r).getUTCDay()-t)%7;return-o+r-1}function Ye(e,t,n,r,o){var a,i,s=(7+n-r)%7,u=De(e,r,o),d=1+7*(t-1)+s+u;return d<=0?(a=e-1,i=ye(a)+d):d>ye(e)?(a=e+1,i=d-ye(e)):(a=e,i=d),{year:a,dayOfYear:i}}function ke(e,t,n){var r,o,a=De(e.year(),t,n),i=Math.floor((e.dayOfYear()-a-1)/7)+1;return i<1?(o=e.year()-1,r=i+be(o,t,n)):i>be(e.year(),t,n)?(r=i-be(e.year(),t,n),o=e.year()+1):(o=e.year(),r=i),{week:r,year:o}}function be(e,t,n){var r=De(e,t,n),o=De(e+1,t,n);return(ye(e)-r+o)/7}function Te(e){return ke(e,this._week.dow,this._week.doy).week}function we(){return this._week.dow}function Ee(){return this._week.doy}function Ne(e){var t=this.localeData().week(this);return null==e?t:this.add(7*(e-t),"d")}function Se(e){var t=ke(this,1,4).week;return null==e?t:this.add(7*(e-t),"d")}function xe(e,t){return"string"!=typeof e?e:isNaN(e)?(e=t.weekdaysParse(e),"number"==typeof e?e:null):parseInt(e,10)}function Oe(e,t){return"string"==typeof e?t.weekdaysParse(e)%7||7:isNaN(e)?null:e}function Ce(e,t){return e?o(this._weekdays)?this._weekdays[e.day()]:this._weekdays[this._weekdays.isFormat.test(t)?"format":"standalone"][e.day()]:this._weekdays}function je(e){return e?this._weekdaysShort[e.day()]:this._weekdaysShort}function Pe(e){return e?this._weekdaysMin[e.day()]:this._weekdaysMin}function He(e,t,n){var r,o,a,i=e.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],r=0;r<7;++r)a=_([2e3,1]).day(r),this._minWeekdaysParse[r]=this.weekdaysMin(a,"").toLocaleLowerCase(),this._shortWeekdaysParse[r]=this.weekdaysShort(a,"").toLocaleLowerCase(),this._weekdaysParse[r]=this.weekdays(a,"").toLocaleLowerCase();return n?"dddd"===t?(o=mo.call(this._weekdaysParse,i),o!==-1?o:null):"ddd"===t?(o=mo.call(this._shortWeekdaysParse,i),o!==-1?o:null):(o=mo.call(this._minWeekdaysParse,i),o!==-1?o:null):"dddd"===t?(o=mo.call(this._weekdaysParse,i),o!==-1?o:(o=mo.call(this._shortWeekdaysParse,i),o!==-1?o:(o=mo.call(this._minWeekdaysParse,i),o!==-1?o:null))):"ddd"===t?(o=mo.call(this._shortWeekdaysParse,i),o!==-1?o:(o=mo.call(this._weekdaysParse,i),o!==-1?o:(o=mo.call(this._minWeekdaysParse,i),o!==-1?o:null))):(o=mo.call(this._minWeekdaysParse,i),o!==-1?o:(o=mo.call(this._weekdaysParse,i),o!==-1?o:(o=mo.call(this._shortWeekdaysParse,i),o!==-1?o:null)))}function Ae(e,t,n){var r,o,a;if(this._weekdaysParseExact)return He.call(this,e,t,n);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),r=0;r<7;r++){if(o=_([2e3,1]).day(r),n&&!this._fullWeekdaysParse[r]&&(this._fullWeekdaysParse[r]=new RegExp("^"+this.weekdays(o,"").replace(".",".?")+"$","i"),this._shortWeekdaysParse[r]=new RegExp("^"+this.weekdaysShort(o,"").replace(".",".?")+"$","i"),this._minWeekdaysParse[r]=new RegExp("^"+this.weekdaysMin(o,"").replace(".",".?")+"$","i")),this._weekdaysParse[r]||(a="^"+this.weekdays(o,"")+"|^"+this.weekdaysShort(o,"")+"|^"+this.weekdaysMin(o,""),this._weekdaysParse[r]=new RegExp(a.replace(".",""),"i")),n&&"dddd"===t&&this._fullWeekdaysParse[r].test(e))return r;if(n&&"ddd"===t&&this._shortWeekdaysParse[r].test(e))return r;if(n&&"dd"===t&&this._minWeekdaysParse[r].test(e))return r;if(!n&&this._weekdaysParse[r].test(e))return r}}function Ie(e){if(!this.isValid())return null!=e?this:NaN;var t=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=e?(e=xe(e,this.localeData()),this.add(e-t,"d")):t}function Re(e){if(!this.isValid())return null!=e?this:NaN;var t=(this.day()+7-this.localeData()._week.dow)%7;return null==e?t:this.add(e-t,"d")}function Ve(e){if(!this.isValid())return null!=e?this:NaN;if(null!=e){var t=Oe(e,this.localeData());return this.day(this.day()%7?t:t-7)}return this.day()||7}function Fe(e){return this._weekdaysParseExact?(l(this,"_weekdaysRegex")||ze.call(this),e?this._weekdaysStrictRegex:this._weekdaysRegex):(l(this,"_weekdaysRegex")||(this._weekdaysRegex=ko),this._weekdaysStrictRegex&&e?this._weekdaysStrictRegex:this._weekdaysRegex)}function We(e){return this._weekdaysParseExact?(l(this,"_weekdaysRegex")||ze.call(this),e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(l(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=bo),this._weekdaysShortStrictRegex&&e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)}function Ue(e){return this._weekdaysParseExact?(l(this,"_weekdaysRegex")||ze.call(this),e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(l(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=To),this._weekdaysMinStrictRegex&&e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)}function ze(){function e(e,t){return t.length-e.length}var t,n,r,o,a,i=[],s=[],u=[],d=[];for(t=0;t<7;t++)n=_([2e3,1]).day(t),r=this.weekdaysMin(n,""),o=this.weekdaysShort(n,""),a=this.weekdays(n,""),i.push(r),s.push(o),u.push(a),d.push(r),d.push(o),d.push(a);for(i.sort(e),s.sort(e),u.sort(e),d.sort(e),t=0;t<7;t++)s[t]=ne(s[t]),u[t]=ne(u[t]),d[t]=ne(d[t]);this._weekdaysRegex=new RegExp("^("+d.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+u.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+s.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+i.join("|")+")","i")}function Be(){return this.hours()%12||12}function Je(){return this.hours()||24}function qe(e,t){G(e,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)})}function Ge(e,t){return t._meridiemParse}function Ke(e){return"p"===(e+"").toLowerCase().charAt(0)}function $e(e,t,n){return e>11?n?"pm":"PM":n?"am":"AM"}function Xe(e){return e?e.toLowerCase().replace("_","-"):e}function Qe(e){for(var t,n,r,o,a=0;a<e.length;){for(o=Xe(e[a]).split("-"),t=o.length,n=Xe(e[a+1]),n=n?n.split("-"):null;t>0;){if(r=Ze(o.slice(0,t).join("-")))return r;if(n&&n.length>=t&&Y(o,n,!0)>=t-1)break;t--}a++}return null}function Ze(t){var r=null;if(!xo[t]&&"undefined"!=typeof e&&e&&e.exports)try{r=wo._abbr,n(198)("./"+t),et(r)}catch(e){}return xo[t]}function et(e,t){var n;return e&&(n=y(t)?rt(e):tt(e,t),n&&(wo=n)),wo._abbr}function tt(e,t){if(null!==t){var n=So;if(t.abbr=e,null!=xo[e])T("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),n=xo[e]._config;else if(null!=t.parentLocale){if(null==xo[t.parentLocale])return Oo[t.parentLocale]||(Oo[t.parentLocale]=[]),Oo[t.parentLocale].push({name:e,config:t}),null;n=xo[t.parentLocale]._config}return xo[e]=new S(N(n,t)),Oo[e]&&Oo[e].forEach(function(e){tt(e.name,e.config)}),et(e),xo[e]}return delete xo[e],null}function nt(e,t){if(null!=t){var n,r=So;null!=xo[e]&&(r=xo[e]._config),t=N(r,t),n=new S(t),n.parentLocale=xo[e],xo[e]=n,et(e)}else null!=xo[e]&&(null!=xo[e].parentLocale?xo[e]=xo[e].parentLocale:null!=xo[e]&&delete xo[e]);return xo[e]}function rt(e){var t;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return wo;if(!o(e)){if(t=Ze(e))return t;e=[e]}return Qe(e)}function ot(){return br(xo)}function at(e){var t,n=e._a;return n&&p(e).overflow===-2&&(t=n[oo]<0||n[oo]>11?oo:n[ao]<1||n[ao]>ie(n[ro],n[oo])?ao:n[io]<0||n[io]>24||24===n[io]&&(0!==n[so]||0!==n[uo]||0!==n[lo])?io:n[so]<0||n[so]>59?so:n[uo]<0||n[uo]>59?uo:n[lo]<0||n[lo]>999?lo:-1,p(e)._overflowDayOfYear&&(t<ro||t>ao)&&(t=ao),p(e)._overflowWeeks&&t===-1&&(t=co),p(e)._overflowWeekday&&t===-1&&(t=_o),p(e).overflow=t),e}function it(e){var t,n,r,o,a,i,s=e._i,u=Co.exec(s)||jo.exec(s);if(u){for(p(e).iso=!0,t=0,n=Ho.length;t<n;t++)if(Ho[t][1].exec(u[1])){o=Ho[t][0],r=Ho[t][2]!==!1;break}if(null==o)return void(e._isValid=!1);if(u[3]){for(t=0,n=Ao.length;t<n;t++)if(Ao[t][1].exec(u[3])){a=(u[2]||" ")+Ao[t][0];break}if(null==a)return void(e._isValid=!1)}if(!r&&null!=a)return void(e._isValid=!1);if(u[4]){if(!Po.exec(u[4]))return void(e._isValid=!1);i="Z"}e._f=o+(a||"")+(i||""),_t(e)}else e._isValid=!1}function st(e){var n=Io.exec(e._i);return null!==n?void(e._d=new Date(+n[1])):(it(e),void(e._isValid===!1&&(delete e._isValid,t.createFromInputFallback(e))))}function ut(e,t,n){return null!=e?e:null!=t?t:n}function dt(e){var n=new Date(t.now());return e._useUTC?[n.getUTCFullYear(),n.getUTCMonth(),n.getUTCDate()]:[n.getFullYear(),n.getMonth(),n.getDate()]}function lt(e){var t,n,r,o,a=[];if(!e._d){for(r=dt(e),e._w&&null==e._a[ao]&&null==e._a[oo]&&ct(e),e._dayOfYear&&(o=ut(e._a[ro],r[ro]),e._dayOfYear>ye(o)&&(p(e)._overflowDayOfYear=!0),n=Le(o,0,e._dayOfYear),e._a[oo]=n.getUTCMonth(),e._a[ao]=n.getUTCDate()),t=0;t<3&&null==e._a[t];++t)e._a[t]=a[t]=r[t];for(;t<7;t++)e._a[t]=a[t]=null==e._a[t]?2===t?1:0:e._a[t];24===e._a[io]&&0===e._a[so]&&0===e._a[uo]&&0===e._a[lo]&&(e._nextDay=!0,e._a[io]=0),e._d=(e._useUTC?Le:ge).apply(null,a),null!=e._tzm&&e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),e._nextDay&&(e._a[io]=24)}}function ct(e){var t,n,r,o,a,i,s,u;if(t=e._w,null!=t.GG||null!=t.W||null!=t.E)a=1,i=4,n=ut(t.GG,e._a[ro],ke(gt(),1,4).year),r=ut(t.W,1),o=ut(t.E,1),(o<1||o>7)&&(u=!0);else{a=e._locale._week.dow,i=e._locale._week.doy;var d=ke(gt(),a,i);n=ut(t.gg,e._a[ro],d.year),r=ut(t.w,d.week),null!=t.d?(o=t.d,(o<0||o>6)&&(u=!0)):null!=t.e?(o=t.e+a,(t.e<0||t.e>6)&&(u=!0)):o=a}r<1||r>be(n,a,i)?p(e)._overflowWeeks=!0:null!=u?p(e)._overflowWeekday=!0:(s=Ye(n,r,o,a,i),e._a[ro]=s.year,e._dayOfYear=s.dayOfYear)}function _t(e){if(e._f===t.ISO_8601)return void it(e);e._a=[],p(e).empty=!0;var n,r,o,a,i,s=""+e._i,u=s.length,d=0;for(o=Q(e._f,e._locale).match(jr)||[],n=0;n<o.length;n++)a=o[n],r=(s.match(ee(a,e))||[])[0],r&&(i=s.substr(0,s.indexOf(r)),i.length>0&&p(e).unusedInput.push(i),s=s.slice(s.indexOf(r)+r.length),d+=r.length),Ar[a]?(r?p(e).empty=!1:p(e).unusedTokens.push(a),ae(a,r,e)):e._strict&&!r&&p(e).unusedTokens.push(a);p(e).charsLeftOver=u-d,s.length>0&&p(e).unusedInput.push(s),e._a[io]<=12&&p(e).bigHour===!0&&e._a[io]>0&&(p(e).bigHour=void 0),p(e).parsedDateParts=e._a.slice(0),p(e).meridiem=e._meridiem,e._a[io]=mt(e._locale,e._a[io],e._meridiem),lt(e),at(e)}function mt(e,t,n){var r;return null==n?t:null!=e.meridiemHour?e.meridiemHour(t,n):null!=e.isPM?(r=e.isPM(n),r&&t<12&&(t+=12),r||12!==t||(t=0),t):t}function pt(e){var t,n,r,o,a;if(0===e._f.length)return p(e).invalidFormat=!0,void(e._d=new Date(NaN));for(o=0;o<e._f.length;o++)a=0,t=v({},e),null!=e._useUTC&&(t._useUTC=e._useUTC),t._f=e._f[o],_t(t),h(t)&&(a+=p(t).charsLeftOver,a+=10*p(t).unusedTokens.length,p(t).score=a,(null==r||a<r)&&(r=a,n=t));c(e,n||t)}function ht(e){if(!e._d){var t=R(e._i);e._a=d([t.year,t.month,t.day||t.date,t.hour,t.minute,t.second,t.millisecond],function(e){return e&&parseInt(e,10)}),lt(e)}}function ft(e){var t=new M(at(yt(e)));return t._nextDay&&(t.add(1,"d"),t._nextDay=void 0),t}function yt(e){var t=e._i,n=e._f;return e._locale=e._locale||rt(e._l),null===t||void 0===n&&""===t?f({nullInput:!0}):("string"==typeof t&&(e._i=t=e._locale.preparse(t)),g(t)?new M(at(t)):(u(t)?e._d=t:o(n)?pt(e):n?_t(e):vt(e),h(e)||(e._d=null),e))}function vt(e){var n=e._i;void 0===n?e._d=new Date(t.now()):u(n)?e._d=new Date(n.valueOf()):"string"==typeof n?st(e):o(n)?(e._a=d(n.slice(0),function(e){return parseInt(e,10)}),lt(e)):"object"==typeof n?ht(e):s(n)?e._d=new Date(n):t.createFromInputFallback(e)}function Mt(e,t,n,r,s){var u={};return n!==!0&&n!==!1||(r=n,n=void 0),(a(e)&&i(e)||o(e)&&0===e.length)&&(e=void 0),u._isAMomentObject=!0,u._useUTC=u._isUTC=s,u._l=n,u._i=e,u._f=t,u._strict=r,ft(u)}function gt(e,t,n,r){return Mt(e,t,n,r,!1)}function Lt(e,t){var n,r;if(1===t.length&&o(t[0])&&(t=t[0]),!t.length)return gt();for(n=t[0],r=1;r<t.length;++r)t[r].isValid()&&!t[r][e](n)||(n=t[r]);return n}function Dt(){var e=[].slice.call(arguments,0);return Lt("isBefore",e)}function Yt(){var e=[].slice.call(arguments,0);return Lt("isAfter",e)}function kt(e){var t=R(e),n=t.year||0,r=t.quarter||0,o=t.month||0,a=t.week||0,i=t.day||0,s=t.hour||0,u=t.minute||0,d=t.second||0,l=t.millisecond||0;this._milliseconds=+l+1e3*d+6e4*u+1e3*s*60*60,this._days=+i+7*a,this._months=+o+3*r+12*n,this._data={},this._locale=rt(),this._bubble()}function bt(e){return e instanceof kt}function Tt(e){return e<0?Math.round(-1*e)*-1:Math.round(e)}function wt(e,t){G(e,0,0,function(){var e=this.utcOffset(),n="+";return e<0&&(e=-e,n="-"),n+q(~~(e/60),2)+t+q(~~e%60,2)})}function Et(e,t){var n=(t||"").match(e);if(null===n)return null;var r=n[n.length-1]||[],o=(r+"").match(Wo)||["-",0,0],a=+(60*o[1])+D(o[2]);return 0===a?0:"+"===o[0]?a:-a}function Nt(e,n){var r,o;return n._isUTC?(r=n.clone(),o=(g(e)||u(e)?e.valueOf():gt(e).valueOf())-r.valueOf(),r._d.setTime(r._d.valueOf()+o),t.updateOffset(r,!1),r):gt(e).local()}function St(e){return 15*-Math.round(e._d.getTimezoneOffset()/15)}function xt(e,n){var r,o=this._offset||0;if(!this.isValid())return null!=e?this:NaN;if(null!=e){if("string"==typeof e){if(e=Et(Qr,e),null===e)return this}else Math.abs(e)<16&&(e*=60);return!this._isUTC&&n&&(r=St(this)),this._offset=e,this._isUTC=!0,null!=r&&this.add(r,"m"),o!==e&&(!n||this._changeInProgress?qt(this,Wt(e-o,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,t.updateOffset(this,!0),this._changeInProgress=null)),this}return this._isUTC?o:St(this)}function Ot(e,t){return null!=e?("string"!=typeof e&&(e=-e),this.utcOffset(e,t),this):-this.utcOffset()}function Ct(e){return this.utcOffset(0,e)}function jt(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(St(this),"m")),this}function Pt(){if(null!=this._tzm)this.utcOffset(this._tzm);else if("string"==typeof this._i){var e=Et(Xr,this._i);null!=e?this.utcOffset(e):this.utcOffset(0,!0)}return this}function Ht(e){return!!this.isValid()&&(e=e?gt(e).utcOffset():0,(this.utcOffset()-e)%60===0)}function At(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()}function It(){if(!y(this._isDSTShifted))return this._isDSTShifted;var e={};if(v(e,this),e=yt(e),e._a){var t=e._isUTC?_(e._a):gt(e._a);this._isDSTShifted=this.isValid()&&Y(e._a,t.toArray())>0}else this._isDSTShifted=!1;return this._isDSTShifted}function Rt(){return!!this.isValid()&&!this._isUTC}function Vt(){return!!this.isValid()&&this._isUTC}function Ft(){return!!this.isValid()&&(this._isUTC&&0===this._offset)}function Wt(e,t){var n,r,o,a=e,i=null;return bt(e)?a={ms:e._milliseconds,d:e._days,M:e._months}:s(e)?(a={},t?a[t]=e:a.milliseconds=e):(i=Uo.exec(e))?(n="-"===i[1]?-1:1,a={y:0,d:D(i[ao])*n,h:D(i[io])*n,m:D(i[so])*n,s:D(i[uo])*n,ms:D(Tt(1e3*i[lo]))*n}):(i=zo.exec(e))?(n="-"===i[1]?-1:1,a={y:Ut(i[2],n),M:Ut(i[3],n),w:Ut(i[4],n),d:Ut(i[5],n),h:Ut(i[6],n),m:Ut(i[7],n),s:Ut(i[8],n)}):null==a?a={}:"object"==typeof a&&("from"in a||"to"in a)&&(o=Bt(gt(a.from),gt(a.to)),a={},a.ms=o.milliseconds,a.M=o.months),r=new kt(a),bt(e)&&l(e,"_locale")&&(r._locale=e._locale),r}function Ut(e,t){var n=e&&parseFloat(e.replace(",","."));return(isNaN(n)?0:n)*t}function zt(e,t){var n={milliseconds:0,months:0};return n.months=t.month()-e.month()+12*(t.year()-e.year()),e.clone().add(n.months,"M").isAfter(t)&&--n.months,n.milliseconds=+t-+e.clone().add(n.months,"M"),n}function Bt(e,t){var n;return e.isValid()&&t.isValid()?(t=Nt(t,e),e.isBefore(t)?n=zt(e,t):(n=zt(t,e),n.milliseconds=-n.milliseconds,n.months=-n.months),n):{milliseconds:0,months:0}}function Jt(e,t){return function(n,r){var o,a;return null===r||isNaN(+r)||(T(t,"moment()."+t+"(period, number) is deprecated. Please use moment()."+t+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),a=n,n=r,r=a),n="string"==typeof n?+n:n,o=Wt(n,r),qt(this,o,e),this}}function qt(e,n,r,o){var a=n._milliseconds,i=Tt(n._days),s=Tt(n._months);e.isValid()&&(o=null==o||o,a&&e._d.setTime(e._d.valueOf()+a*r),i&&z(e,"Date",U(e,"Date")+i*r),s&&ce(e,U(e,"Month")+s*r),o&&t.updateOffset(e,i||s))}function Gt(e,t){var n=e.diff(t,"days",!0);return n<-6?"sameElse":n<-1?"lastWeek":n<0?"lastDay":n<1?"sameDay":n<2?"nextDay":n<7?"nextWeek":"sameElse"}function Kt(e,n){var r=e||gt(),o=Nt(r,this).startOf("day"),a=t.calendarFormat(this,o)||"sameElse",i=n&&(w(n[a])?n[a].call(this,r):n[a]);return this.format(i||this.localeData().calendar(a,this,gt(r)))}function $t(){return new M(this)}function Xt(e,t){var n=g(e)?e:gt(e);return!(!this.isValid()||!n.isValid())&&(t=I(y(t)?"millisecond":t),"millisecond"===t?this.valueOf()>n.valueOf():n.valueOf()<this.clone().startOf(t).valueOf())}function Qt(e,t){var n=g(e)?e:gt(e);return!(!this.isValid()||!n.isValid())&&(t=I(y(t)?"millisecond":t),"millisecond"===t?this.valueOf()<n.valueOf():this.clone().endOf(t).valueOf()<n.valueOf())}function Zt(e,t,n,r){return r=r||"()",("("===r[0]?this.isAfter(e,n):!this.isBefore(e,n))&&(")"===r[1]?this.isBefore(t,n):!this.isAfter(t,n))}function en(e,t){var n,r=g(e)?e:gt(e);return!(!this.isValid()||!r.isValid())&&(t=I(t||"millisecond"),"millisecond"===t?this.valueOf()===r.valueOf():(n=r.valueOf(),this.clone().startOf(t).valueOf()<=n&&n<=this.clone().endOf(t).valueOf()))}function tn(e,t){return this.isSame(e,t)||this.isAfter(e,t)}function nn(e,t){return this.isSame(e,t)||this.isBefore(e,t)}function rn(e,t,n){var r,o,a,i;return this.isValid()?(r=Nt(e,this),r.isValid()?(o=6e4*(r.utcOffset()-this.utcOffset()),t=I(t),"year"===t||"month"===t||"quarter"===t?(i=on(this,r),"quarter"===t?i/=3:"year"===t&&(i/=12)):(a=this-r,i="second"===t?a/1e3:"minute"===t?a/6e4:"hour"===t?a/36e5:"day"===t?(a-o)/864e5:"week"===t?(a-o)/6048e5:a),n?i:L(i)):NaN):NaN}function on(e,t){var n,r,o=12*(t.year()-e.year())+(t.month()-e.month()),a=e.clone().add(o,"months");return t-a<0?(n=e.clone().add(o-1,"months"),r=(t-a)/(a-n)):(n=e.clone().add(o+1,"months"),r=(t-a)/(n-a)),-(o+r)||0}function an(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")}function sn(){var e=this.clone().utc();return 0<e.year()&&e.year()<=9999?w(Date.prototype.toISOString)?this.toDate().toISOString():X(e,"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]"):X(e,"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]")}function un(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var e="moment",t="";this.isLocal()||(e=0===this.utcOffset()?"moment.utc":"moment.parseZone",t="Z");var n="["+e+'("]',r=0<this.year()&&this.year()<=9999?"YYYY":"YYYYYY",o="-MM-DD[T]HH:mm:ss.SSS",a=t+'[")]';return this.format(n+r+o+a)}function dn(e){e||(e=this.isUtc()?t.defaultFormatUtc:t.defaultFormat);var n=X(this,e);return this.localeData().postformat(n)}function ln(e,t){return this.isValid()&&(g(e)&&e.isValid()||gt(e).isValid())?Wt({to:this,from:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()}function cn(e){return this.from(gt(),e)}function _n(e,t){return this.isValid()&&(g(e)&&e.isValid()||gt(e).isValid())?Wt({from:this,to:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()}function mn(e){return this.to(gt(),e)}function pn(e){var t;return void 0===e?this._locale._abbr:(t=rt(e),null!=t&&(this._locale=t),this)}function hn(){return this._locale}function fn(e){switch(e=I(e)){case"year":this.month(0);case"quarter":case"month":this.date(1);case"week":case"isoWeek":case"day":case"date":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return"week"===e&&this.weekday(0),"isoWeek"===e&&this.isoWeekday(1),"quarter"===e&&this.month(3*Math.floor(this.month()/3)),this}function yn(e){return e=I(e),void 0===e||"millisecond"===e?this:("date"===e&&(e="day"),this.startOf(e).add(1,"isoWeek"===e?"week":e).subtract(1,"ms"))}function vn(){return this._d.valueOf()-6e4*(this._offset||0)}function Mn(){return Math.floor(this.valueOf()/1e3)}function gn(){return new Date(this.valueOf())}function Ln(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]}function Dn(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}}function Yn(){return this.isValid()?this.toISOString():null}function kn(){return h(this)}function bn(){return c({},p(this))}function Tn(){return p(this).overflow}function wn(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}}function En(e,t){G(0,[e,e.length],0,t)}function Nn(e){return Cn.call(this,e,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)}function Sn(e){return Cn.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)}function xn(){return be(this.year(),1,4)}function On(){var e=this.localeData()._week;return be(this.year(),e.dow,e.doy)}function Cn(e,t,n,r,o){var a;return null==e?ke(this,r,o).year:(a=be(e,r,o),t>a&&(t=a),jn.call(this,e,t,n,r,o))}function jn(e,t,n,r,o){var a=Ye(e,t,n,r,o),i=Le(a.year,0,a.dayOfYear);return this.year(i.getUTCFullYear()),this.month(i.getUTCMonth()),this.date(i.getUTCDate()),this}function Pn(e){return null==e?Math.ceil((this.month()+1)/3):this.month(3*(e-1)+this.month()%3)}function Hn(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==e?t:this.add(e-t,"d")}function An(e,t){t[lo]=D(1e3*("0."+e))}function In(){return this._isUTC?"UTC":""}function Rn(){return this._isUTC?"Coordinated Universal Time":""}function Vn(e){return gt(1e3*e)}function Fn(){return gt.apply(null,arguments).parseZone();
}function Wn(e){return e}function Un(e,t,n,r){var o=rt(),a=_().set(r,t);return o[n](a,e)}function zn(e,t,n){if(s(e)&&(t=e,e=void 0),e=e||"",null!=t)return Un(e,t,n,"month");var r,o=[];for(r=0;r<12;r++)o[r]=Un(e,r,n,"month");return o}function Bn(e,t,n,r){"boolean"==typeof e?(s(t)&&(n=t,t=void 0),t=t||""):(t=e,n=t,e=!1,s(t)&&(n=t,t=void 0),t=t||"");var o=rt(),a=e?o._week.dow:0;if(null!=n)return Un(t,(n+a)%7,r,"day");var i,u=[];for(i=0;i<7;i++)u[i]=Un(t,(i+a)%7,r,"day");return u}function Jn(e,t){return zn(e,t,"months")}function qn(e,t){return zn(e,t,"monthsShort")}function Gn(e,t,n){return Bn(e,t,n,"weekdays")}function Kn(e,t,n){return Bn(e,t,n,"weekdaysShort")}function $n(e,t,n){return Bn(e,t,n,"weekdaysMin")}function Xn(){var e=this._data;return this._milliseconds=ta(this._milliseconds),this._days=ta(this._days),this._months=ta(this._months),e.milliseconds=ta(e.milliseconds),e.seconds=ta(e.seconds),e.minutes=ta(e.minutes),e.hours=ta(e.hours),e.months=ta(e.months),e.years=ta(e.years),this}function Qn(e,t,n,r){var o=Wt(t,n);return e._milliseconds+=r*o._milliseconds,e._days+=r*o._days,e._months+=r*o._months,e._bubble()}function Zn(e,t){return Qn(this,e,t,1)}function er(e,t){return Qn(this,e,t,-1)}function tr(e){return e<0?Math.floor(e):Math.ceil(e)}function nr(){var e,t,n,r,o,a=this._milliseconds,i=this._days,s=this._months,u=this._data;return a>=0&&i>=0&&s>=0||a<=0&&i<=0&&s<=0||(a+=864e5*tr(or(s)+i),i=0,s=0),u.milliseconds=a%1e3,e=L(a/1e3),u.seconds=e%60,t=L(e/60),u.minutes=t%60,n=L(t/60),u.hours=n%24,i+=L(n/24),o=L(rr(i)),s+=o,i-=tr(or(o)),r=L(s/12),s%=12,u.days=i,u.months=s,u.years=r,this}function rr(e){return 4800*e/146097}function or(e){return 146097*e/4800}function ar(e){var t,n,r=this._milliseconds;if(e=I(e),"month"===e||"year"===e)return t=this._days+r/864e5,n=this._months+rr(t),"month"===e?n:n/12;switch(t=this._days+Math.round(or(this._months)),e){case"week":return t/7+r/6048e5;case"day":return t+r/864e5;case"hour":return 24*t+r/36e5;case"minute":return 1440*t+r/6e4;case"second":return 86400*t+r/1e3;case"millisecond":return Math.floor(864e5*t)+r;default:throw new Error("Unknown unit "+e)}}function ir(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*D(this._months/12)}function sr(e){return function(){return this.as(e)}}function ur(e){return e=I(e),this[e+"s"]()}function dr(e){return function(){return this._data[e]}}function lr(){return L(this.days()/7)}function cr(e,t,n,r,o){return o.relativeTime(t||1,!!n,e,r)}function _r(e,t,n){var r=Wt(e).abs(),o=ya(r.as("s")),a=ya(r.as("m")),i=ya(r.as("h")),s=ya(r.as("d")),u=ya(r.as("M")),d=ya(r.as("y")),l=o<va.s&&["s",o]||a<=1&&["m"]||a<va.m&&["mm",a]||i<=1&&["h"]||i<va.h&&["hh",i]||s<=1&&["d"]||s<va.d&&["dd",s]||u<=1&&["M"]||u<va.M&&["MM",u]||d<=1&&["y"]||["yy",d];return l[2]=t,l[3]=+e>0,l[4]=n,cr.apply(null,l)}function mr(e){return void 0===e?ya:"function"==typeof e&&(ya=e,!0)}function pr(e,t){return void 0!==va[e]&&(void 0===t?va[e]:(va[e]=t,!0))}function hr(e){var t=this.localeData(),n=_r(this,!e,t);return e&&(n=t.pastFuture(+this,n)),t.postformat(n)}function fr(){var e,t,n,r=Ma(this._milliseconds)/1e3,o=Ma(this._days),a=Ma(this._months);e=L(r/60),t=L(e/60),r%=60,e%=60,n=L(a/12),a%=12;var i=n,s=a,u=o,d=t,l=e,c=r,_=this.asSeconds();return _?(_<0?"-":"")+"P"+(i?i+"Y":"")+(s?s+"M":"")+(u?u+"D":"")+(d||l||c?"T":"")+(d?d+"H":"")+(l?l+"M":"")+(c?c+"S":""):"P0D"}var yr,vr;vr=Array.prototype.some?Array.prototype.some:function(e){for(var t=Object(this),n=t.length>>>0,r=0;r<n;r++)if(r in t&&e.call(this,t[r],r,t))return!0;return!1};var Mr=vr,gr=t.momentProperties=[],Lr=!1,Dr={};t.suppressDeprecationWarnings=!1,t.deprecationHandler=null;var Yr;Yr=Object.keys?Object.keys:function(e){var t,n=[];for(t in e)l(e,t)&&n.push(t);return n};var kr,br=Yr,Tr={sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},wr={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},Er="Invalid date",Nr="%d",Sr=/\d{1,2}/,xr={future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},Or={},Cr={},jr=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,Pr=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,Hr={},Ar={},Ir=/\d/,Rr=/\d\d/,Vr=/\d{3}/,Fr=/\d{4}/,Wr=/[+-]?\d{6}/,Ur=/\d\d?/,zr=/\d\d\d\d?/,Br=/\d\d\d\d\d\d?/,Jr=/\d{1,3}/,qr=/\d{1,4}/,Gr=/[+-]?\d{1,6}/,Kr=/\d+/,$r=/[+-]?\d+/,Xr=/Z|[+-]\d\d:?\d\d/gi,Qr=/Z|[+-]\d\d(?::?\d\d)?/gi,Zr=/[+-]?\d+(\.\d{1,3})?/,eo=/[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,to={},no={},ro=0,oo=1,ao=2,io=3,so=4,uo=5,lo=6,co=7,_o=8;kr=Array.prototype.indexOf?Array.prototype.indexOf:function(e){var t;for(t=0;t<this.length;++t)if(this[t]===e)return t;return-1};var mo=kr;G("M",["MM",2],"Mo",function(){return this.month()+1}),G("MMM",0,0,function(e){return this.localeData().monthsShort(this,e)}),G("MMMM",0,0,function(e){return this.localeData().months(this,e)}),A("month","M"),V("month",8),Z("M",Ur),Z("MM",Ur,Rr),Z("MMM",function(e,t){return t.monthsShortRegex(e)}),Z("MMMM",function(e,t){return t.monthsRegex(e)}),re(["M","MM"],function(e,t){t[oo]=D(e)-1}),re(["MMM","MMMM"],function(e,t,n,r){var o=n._locale.monthsParse(e,r,n._strict);null!=o?t[oo]=o:p(n).invalidMonth=e});var po=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,ho="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),fo="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),yo=eo,vo=eo;G("Y",0,0,function(){var e=this.year();return e<=9999?""+e:"+"+e}),G(0,["YY",2],0,function(){return this.year()%100}),G(0,["YYYY",4],0,"year"),G(0,["YYYYY",5],0,"year"),G(0,["YYYYYY",6,!0],0,"year"),A("year","y"),V("year",1),Z("Y",$r),Z("YY",Ur,Rr),Z("YYYY",qr,Fr),Z("YYYYY",Gr,Wr),Z("YYYYYY",Gr,Wr),re(["YYYYY","YYYYYY"],ro),re("YYYY",function(e,n){n[ro]=2===e.length?t.parseTwoDigitYear(e):D(e)}),re("YY",function(e,n){n[ro]=t.parseTwoDigitYear(e)}),re("Y",function(e,t){t[ro]=parseInt(e,10)}),t.parseTwoDigitYear=function(e){return D(e)+(D(e)>68?1900:2e3)};var Mo=W("FullYear",!0);G("w",["ww",2],"wo","week"),G("W",["WW",2],"Wo","isoWeek"),A("week","w"),A("isoWeek","W"),V("week",5),V("isoWeek",5),Z("w",Ur),Z("ww",Ur,Rr),Z("W",Ur),Z("WW",Ur,Rr),oe(["w","ww","W","WW"],function(e,t,n,r){t[r.substr(0,1)]=D(e)});var go={dow:0,doy:6};G("d",0,"do","day"),G("dd",0,0,function(e){return this.localeData().weekdaysMin(this,e)}),G("ddd",0,0,function(e){return this.localeData().weekdaysShort(this,e)}),G("dddd",0,0,function(e){return this.localeData().weekdays(this,e)}),G("e",0,0,"weekday"),G("E",0,0,"isoWeekday"),A("day","d"),A("weekday","e"),A("isoWeekday","E"),V("day",11),V("weekday",11),V("isoWeekday",11),Z("d",Ur),Z("e",Ur),Z("E",Ur),Z("dd",function(e,t){return t.weekdaysMinRegex(e)}),Z("ddd",function(e,t){return t.weekdaysShortRegex(e)}),Z("dddd",function(e,t){return t.weekdaysRegex(e)}),oe(["dd","ddd","dddd"],function(e,t,n,r){var o=n._locale.weekdaysParse(e,r,n._strict);null!=o?t.d=o:p(n).invalidWeekday=e}),oe(["d","e","E"],function(e,t,n,r){t[r]=D(e)});var Lo="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),Do="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),Yo="Su_Mo_Tu_We_Th_Fr_Sa".split("_"),ko=eo,bo=eo,To=eo;G("H",["HH",2],0,"hour"),G("h",["hh",2],0,Be),G("k",["kk",2],0,Je),G("hmm",0,0,function(){return""+Be.apply(this)+q(this.minutes(),2)}),G("hmmss",0,0,function(){return""+Be.apply(this)+q(this.minutes(),2)+q(this.seconds(),2)}),G("Hmm",0,0,function(){return""+this.hours()+q(this.minutes(),2)}),G("Hmmss",0,0,function(){return""+this.hours()+q(this.minutes(),2)+q(this.seconds(),2)}),qe("a",!0),qe("A",!1),A("hour","h"),V("hour",13),Z("a",Ge),Z("A",Ge),Z("H",Ur),Z("h",Ur),Z("HH",Ur,Rr),Z("hh",Ur,Rr),Z("hmm",zr),Z("hmmss",Br),Z("Hmm",zr),Z("Hmmss",Br),re(["H","HH"],io),re(["a","A"],function(e,t,n){n._isPm=n._locale.isPM(e),n._meridiem=e}),re(["h","hh"],function(e,t,n){t[io]=D(e),p(n).bigHour=!0}),re("hmm",function(e,t,n){var r=e.length-2;t[io]=D(e.substr(0,r)),t[so]=D(e.substr(r)),p(n).bigHour=!0}),re("hmmss",function(e,t,n){var r=e.length-4,o=e.length-2;t[io]=D(e.substr(0,r)),t[so]=D(e.substr(r,2)),t[uo]=D(e.substr(o)),p(n).bigHour=!0}),re("Hmm",function(e,t,n){var r=e.length-2;t[io]=D(e.substr(0,r)),t[so]=D(e.substr(r))}),re("Hmmss",function(e,t,n){var r=e.length-4,o=e.length-2;t[io]=D(e.substr(0,r)),t[so]=D(e.substr(r,2)),t[uo]=D(e.substr(o))});var wo,Eo=/[ap]\.?m?\.?/i,No=W("Hours",!0),So={calendar:Tr,longDateFormat:wr,invalidDate:Er,ordinal:Nr,ordinalParse:Sr,relativeTime:xr,months:ho,monthsShort:fo,week:go,weekdays:Lo,weekdaysMin:Yo,weekdaysShort:Do,meridiemParse:Eo},xo={},Oo={},Co=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,jo=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,Po=/Z|[+-]\d\d(?::?\d\d)?/,Ho=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/]],Ao=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],Io=/^\/?Date\((\-?\d+)/i;t.createFromInputFallback=b("value provided is not in a recognized ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non ISO date formats are discouraged and will be removed in an upcoming major release. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))}),t.ISO_8601=function(){};var Ro=b("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=gt.apply(null,arguments);return this.isValid()&&e.isValid()?e<this?this:e:f()}),Vo=b("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=gt.apply(null,arguments);return this.isValid()&&e.isValid()?e>this?this:e:f()}),Fo=function(){return Date.now?Date.now():+new Date};wt("Z",":"),wt("ZZ",""),Z("Z",Qr),Z("ZZ",Qr),re(["Z","ZZ"],function(e,t,n){n._useUTC=!0,n._tzm=Et(Qr,e)});var Wo=/([\+\-]|\d\d)/gi;t.updateOffset=function(){};var Uo=/^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/,zo=/^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;Wt.fn=kt.prototype;var Bo=Jt(1,"add"),Jo=Jt(-1,"subtract");t.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",t.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var qo=b("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(e){return void 0===e?this.localeData():this.locale(e)});G(0,["gg",2],0,function(){return this.weekYear()%100}),G(0,["GG",2],0,function(){return this.isoWeekYear()%100}),En("gggg","weekYear"),En("ggggg","weekYear"),En("GGGG","isoWeekYear"),En("GGGGG","isoWeekYear"),A("weekYear","gg"),A("isoWeekYear","GG"),V("weekYear",1),V("isoWeekYear",1),Z("G",$r),Z("g",$r),Z("GG",Ur,Rr),Z("gg",Ur,Rr),Z("GGGG",qr,Fr),Z("gggg",qr,Fr),Z("GGGGG",Gr,Wr),Z("ggggg",Gr,Wr),oe(["gggg","ggggg","GGGG","GGGGG"],function(e,t,n,r){t[r.substr(0,2)]=D(e)}),oe(["gg","GG"],function(e,n,r,o){n[o]=t.parseTwoDigitYear(e)}),G("Q",0,"Qo","quarter"),A("quarter","Q"),V("quarter",7),Z("Q",Ir),re("Q",function(e,t){t[oo]=3*(D(e)-1)}),G("D",["DD",2],"Do","date"),A("date","D"),V("date",9),Z("D",Ur),Z("DD",Ur,Rr),Z("Do",function(e,t){return e?t._ordinalParse:t._ordinalParseLenient}),re(["D","DD"],ao),re("Do",function(e,t){t[ao]=D(e.match(Ur)[0],10)});var Go=W("Date",!0);G("DDD",["DDDD",3],"DDDo","dayOfYear"),A("dayOfYear","DDD"),V("dayOfYear",4),Z("DDD",Jr),Z("DDDD",Vr),re(["DDD","DDDD"],function(e,t,n){n._dayOfYear=D(e)}),G("m",["mm",2],0,"minute"),A("minute","m"),V("minute",14),Z("m",Ur),Z("mm",Ur,Rr),re(["m","mm"],so);var Ko=W("Minutes",!1);G("s",["ss",2],0,"second"),A("second","s"),V("second",15),Z("s",Ur),Z("ss",Ur,Rr),re(["s","ss"],uo);var $o=W("Seconds",!1);G("S",0,0,function(){return~~(this.millisecond()/100)}),G(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),G(0,["SSS",3],0,"millisecond"),G(0,["SSSS",4],0,function(){return 10*this.millisecond()}),G(0,["SSSSS",5],0,function(){return 100*this.millisecond()}),G(0,["SSSSSS",6],0,function(){return 1e3*this.millisecond()}),G(0,["SSSSSSS",7],0,function(){return 1e4*this.millisecond()}),G(0,["SSSSSSSS",8],0,function(){return 1e5*this.millisecond()}),G(0,["SSSSSSSSS",9],0,function(){return 1e6*this.millisecond()}),A("millisecond","ms"),V("millisecond",16),Z("S",Jr,Ir),Z("SS",Jr,Rr),Z("SSS",Jr,Vr);var Xo;for(Xo="SSSS";Xo.length<=9;Xo+="S")Z(Xo,Kr);for(Xo="S";Xo.length<=9;Xo+="S")re(Xo,An);var Qo=W("Milliseconds",!1);G("z",0,0,"zoneAbbr"),G("zz",0,0,"zoneName");var Zo=M.prototype;Zo.add=Bo,Zo.calendar=Kt,Zo.clone=$t,Zo.diff=rn,Zo.endOf=yn,Zo.format=dn,Zo.from=ln,Zo.fromNow=cn,Zo.to=_n,Zo.toNow=mn,Zo.get=B,Zo.invalidAt=Tn,Zo.isAfter=Xt,Zo.isBefore=Qt,Zo.isBetween=Zt,Zo.isSame=en,Zo.isSameOrAfter=tn,Zo.isSameOrBefore=nn,Zo.isValid=kn,Zo.lang=qo,Zo.locale=pn,Zo.localeData=hn,Zo.max=Vo,Zo.min=Ro,Zo.parsingFlags=bn,Zo.set=J,Zo.startOf=fn,Zo.subtract=Jo,Zo.toArray=Ln,Zo.toObject=Dn,Zo.toDate=gn,Zo.toISOString=sn,Zo.inspect=un,Zo.toJSON=Yn,Zo.toString=an,Zo.unix=Mn,Zo.valueOf=vn,Zo.creationData=wn,Zo.year=Mo,Zo.isLeapYear=Me,Zo.weekYear=Nn,Zo.isoWeekYear=Sn,Zo.quarter=Zo.quarters=Pn,Zo.month=_e,Zo.daysInMonth=me,Zo.week=Zo.weeks=Ne,Zo.isoWeek=Zo.isoWeeks=Se,Zo.weeksInYear=On,Zo.isoWeeksInYear=xn,Zo.date=Go,Zo.day=Zo.days=Ie,Zo.weekday=Re,Zo.isoWeekday=Ve,Zo.dayOfYear=Hn,Zo.hour=Zo.hours=No,Zo.minute=Zo.minutes=Ko,Zo.second=Zo.seconds=$o,Zo.millisecond=Zo.milliseconds=Qo,Zo.utcOffset=xt,Zo.utc=Ct,Zo.local=jt,Zo.parseZone=Pt,Zo.hasAlignedHourOffset=Ht,Zo.isDST=At,Zo.isLocal=Rt,Zo.isUtcOffset=Vt,Zo.isUtc=Ft,Zo.isUTC=Ft,Zo.zoneAbbr=In,Zo.zoneName=Rn,Zo.dates=b("dates accessor is deprecated. Use date instead.",Go),Zo.months=b("months accessor is deprecated. Use month instead",_e),Zo.years=b("years accessor is deprecated. Use year instead",Mo),Zo.zone=b("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",Ot),Zo.isDSTShifted=b("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",It);var ea=S.prototype;ea.calendar=x,ea.longDateFormat=O,ea.invalidDate=C,ea.ordinal=j,ea.preparse=Wn,ea.postformat=Wn,ea.relativeTime=P,ea.pastFuture=H,ea.set=E,ea.months=se,ea.monthsShort=ue,ea.monthsParse=le,ea.monthsRegex=he,ea.monthsShortRegex=pe,ea.week=Te,ea.firstDayOfYear=Ee,ea.firstDayOfWeek=we,ea.weekdays=Ce,ea.weekdaysMin=Pe,ea.weekdaysShort=je,ea.weekdaysParse=Ae,ea.weekdaysRegex=Fe,ea.weekdaysShortRegex=We,ea.weekdaysMinRegex=Ue,ea.isPM=Ke,ea.meridiem=$e,et("en",{ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10,n=1===D(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n}}),t.lang=b("moment.lang is deprecated. Use moment.locale instead.",et),t.langData=b("moment.langData is deprecated. Use moment.localeData instead.",rt);var ta=Math.abs,na=sr("ms"),ra=sr("s"),oa=sr("m"),aa=sr("h"),ia=sr("d"),sa=sr("w"),ua=sr("M"),da=sr("y"),la=dr("milliseconds"),ca=dr("seconds"),_a=dr("minutes"),ma=dr("hours"),pa=dr("days"),ha=dr("months"),fa=dr("years"),ya=Math.round,va={s:45,m:45,h:22,d:26,M:11},Ma=Math.abs,ga=kt.prototype;return ga.abs=Xn,ga.add=Zn,ga.subtract=er,ga.as=ar,ga.asMilliseconds=na,ga.asSeconds=ra,ga.asMinutes=oa,ga.asHours=aa,ga.asDays=ia,ga.asWeeks=sa,ga.asMonths=ua,ga.asYears=da,ga.valueOf=ir,ga._bubble=nr,ga.get=ur,ga.milliseconds=la,ga.seconds=ca,ga.minutes=_a,ga.hours=ma,ga.days=pa,ga.weeks=lr,ga.months=ha,ga.years=fa,ga.humanize=hr,ga.toISOString=fr,ga.toString=fr,ga.toJSON=fr,ga.locale=pn,ga.localeData=hn,ga.toIsoString=b("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",fr),ga.lang=qo,G("X",0,0,"unix"),G("x",0,0,"valueOf"),Z("x",$r),Z("X",Zr),re("X",function(e,t,n){n._d=new Date(1e3*parseFloat(e,10))}),re("x",function(e,t,n){n._d=new Date(D(e))}),t.version="2.17.1",r(gt),t.fn=Zo,t.min=Dt,t.max=Yt,t.now=Fo,t.utc=_,t.unix=Vn,t.months=Jn,t.isDate=u,t.locale=et,t.invalid=f,t.duration=Wt,t.isMoment=g,t.weekdays=Gn,t.parseZone=Fn,t.localeData=rt,t.isDuration=bt,t.monthsShort=qn,t.weekdaysMin=$n,t.defineLocale=tt,t.updateLocale=nt,t.locales=ot,t.weekdaysShort=Kn,t.normalizeUnits=I,t.relativeTimeRounding=mr,t.relativeTimeThreshold=pr,t.calendarFormat=Gt,t.prototype=Zo,t})}).call(t,n(312)(e))},function(e,t){function n(){throw new Error("setTimeout has not been defined")}function r(){throw new Error("clearTimeout has not been defined")}function o(e){if(l===setTimeout)return setTimeout(e,0);if((l===n||!l)&&setTimeout)return l=setTimeout,setTimeout(e,0);try{return l(e,0)}catch(t){try{return l.call(null,e,0)}catch(t){return l.call(this,e,0)}}}function a(e){if(c===clearTimeout)return clearTimeout(e);if((c===r||!c)&&clearTimeout)return c=clearTimeout,clearTimeout(e);try{return c(e)}catch(t){try{return c.call(null,e)}catch(t){return c.call(this,e)}}}function i(){h&&m&&(h=!1,m.length?p=m.concat(p):f=-1,p.length&&s())}function s(){if(!h){var e=o(i);h=!0;for(var t=p.length;t;){for(m=p,p=[];++f<t;)m&&m[f].run();f=-1,t=p.length}m=null,h=!1,a(e)}}function u(e,t){this.fun=e,this.array=t}function d(){}var l,c,_=e.exports={};!function(){try{l="function"==typeof setTimeout?setTimeout:n}catch(e){l=n}try{c="function"==typeof clearTimeout?clearTimeout:r}catch(e){c=r}}();var m,p=[],h=!1,f=-1;_.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];p.push(new u(e,t)),1!==p.length||h||o(s)},u.prototype.run=function(){this.fun.apply(null,this.array)},_.title="browser",_.browser=!0,_.env={},_.argv=[],_.version="",_.versions={},_.on=d,_.addListener=d,_.once=d,_.off=d,_.removeListener=d,_.removeAllListeners=d,_.emit=d,_.binding=function(e){throw new Error("process.binding is not supported")},_.cwd=function(){return"/"},_.chdir=function(e){throw new Error("process.chdir is not supported")},_.umask=function(){return 0}},function(e,t,n){(function(t){"use strict";function n(e,n,r,o,a,i,s,u){if("production"!==t.env.NODE_ENV&&void 0===n)throw new Error("invariant requires an error message argument");if(!e){var d;if(void 0===n)d=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[r,o,a,i,s,u],c=0;d=new Error(n.replace(/%s/g,function(){return l[c++]})),d.name="Invariant Violation"}throw d.framesToPop=1,d}}e.exports=n}).call(t,n(2))},function(e,t){"use strict";function n(e){for(var t=arguments.length-1,n="Minified React error #"+e+"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);n+=" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";var o=new Error(n);throw o.name="Invariant Violation",o.framesToPop=1,o}e.exports=n},function(e,t,n){(function(t){"use strict";var r=n(15),o=r;"production"!==t.env.NODE_ENV&&!function(){var e=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var o=0,a="Warning: "+e.replace(/%s/g,function(){return n[o++]});"undefined"!=typeof console&&console.error(a);try{throw new Error(a)}catch(e){}};o=function(t,n){if(void 0===n)throw new Error("`warning(condition, format, ...args)` requires a warning message argument");if(0!==n.indexOf("Failed Composite propType: ")&&!t){for(var r=arguments.length,o=Array(r>2?r-2:0),a=2;a<r;a++)o[a-2]=arguments[a];e.apply(void 0,[n].concat(o))}}}(),e.exports=o}).call(t,n(2))},function(e,t,n){(function(t){"use strict";function r(e){for(var t;t=e._renderedComponent;)e=t;return e}function o(e,t){var n=r(e);n._hostNode=t,t[f]=n}function a(e){var t=e._hostNode;t&&(delete t[f],e._hostNode=null)}function i(e,n){if(!(e._flags&h.hasCachedChildNodes)){var a=e._renderedChildren,i=n.firstChild;e:for(var s in a)if(a.hasOwnProperty(s)){var u=a[s],d=r(u)._domID;if(0!==d){for(;null!==i;i=i.nextSibling)if(1===i.nodeType&&i.getAttribute(p)===String(d)||8===i.nodeType&&i.nodeValue===" react-text: "+d+" "||8===i.nodeType&&i.nodeValue===" react-empty: "+d+" "){o(u,i);continue e}"production"!==t.env.NODE_ENV?m(!1,"Unable to find element with ID %s.",d):l("32",d)}}e._flags|=h.hasCachedChildNodes}}function s(e){if(e[f])return e[f];for(var t=[];!e[f];){if(t.push(e),!e.parentNode)return null;e=e.parentNode}for(var n,r;e&&(r=e[f]);e=t.pop())n=r,t.length&&i(r,e);return n}function u(e){var t=s(e);return null!=t&&t._hostNode===e?t:null}function d(e){if(void 0===e._hostNode?"production"!==t.env.NODE_ENV?m(!1,"getNodeFromInstance: Invalid argument."):l("33"):void 0,e._hostNode)return e._hostNode;for(var n=[];!e._hostNode;)n.push(e),e._hostParent?void 0:"production"!==t.env.NODE_ENV?m(!1,"React DOM tree root should always have a node reference."):l("34"),e=e._hostParent;for(;n.length;e=n.pop())i(e,e._hostNode);return e._hostNode}var l=n(4),c=n(16),_=n(170),m=n(3),p=c.ID_ATTRIBUTE_NAME,h=_,f="__reactInternalInstance$"+Math.random().toString(36).slice(2),y={getClosestInstanceFromNode:s,getInstanceFromNode:u,getNodeFromInstance:d,precacheChildNodes:i,precacheNode:o,uncacheNode:a};e.exports=y}).call(t,n(2))},function(e,t){"use strict";function n(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}function r(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;var r=Object.getOwnPropertyNames(t).map(function(e){return t[e]});if("0123456789"!==r.join(""))return!1;var o={};return"abcdefghijklmnopqrst".split("").forEach(function(e){o[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},o)).join("")}catch(e){return!1}}var o=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;e.exports=r()?Object.assign:function(e,t){for(var r,i,s=n(e),u=1;u<arguments.length;u++){r=Object(arguments[u]);for(var d in r)o.call(r,d)&&(s[d]=r[d]);if(Object.getOwnPropertySymbols){i=Object.getOwnPropertySymbols(r);for(var l=0;l<i.length;l++)a.call(r,i[l])&&(s[i[l]]=r[i[l]])}}return s}},function(e,t){"use strict";var n=!("undefined"==typeof window||!window.document||!window.document.createElement),r={canUseDOM:n,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:n&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:n&&!!window.screen,isInWorker:!n};e.exports=r},function(e,t,n){(function(t){"use strict";function r(e){var t=Function.prototype.toString,n=Object.prototype.hasOwnProperty,r=RegExp("^"+t.call(n).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");try{var o=t.call(e);return r.test(o)}catch(e){return!1}}function o(e){var t=d(e);if(t){var n=t.childIDs;l(e),n.forEach(o)}}function a(e,t,n){return"\n    in "+(e||"Unknown")+(t?" (at "+t.fileName.replace(/^.*[\\\/]/,"")+":"+t.lineNumber+")":n?" (created by "+n+")":"")}function i(e){return null==e?"#empty":"string"==typeof e||"number"==typeof e?"#text":"string"==typeof e.type?e.type:e.type.displayName||e.type.name||"Unknown"}function s(e){var n,r=w.getDisplayName(e),o=w.getElement(e),i=w.getOwnerID(e);return i&&(n=w.getDisplayName(i)),"production"!==t.env.NODE_ENV?v(o,"ReactComponentTreeHook: Missing React element for debugID %s when building stack",e):void 0,a(r,o&&o._source,n)}var u,d,l,c,_,m,p,h=n(19),f=n(12),y=n(20),v=n(13),M="function"==typeof Array.from&&"function"==typeof Map&&r(Map)&&null!=Map.prototype&&"function"==typeof Map.prototype.keys&&r(Map.prototype.keys)&&"function"==typeof Set&&r(Set)&&null!=Set.prototype&&"function"==typeof Set.prototype.keys&&r(Set.prototype.keys);if(M){var g=new Map,L=new Set;u=function(e,t){g.set(e,t)},d=function(e){return g.get(e)},l=function(e){g.delete(e)},c=function(){return Array.from(g.keys())},_=function(e){L.add(e)},m=function(e){L.delete(e)},p=function(){return Array.from(L.keys())}}else{var D={},Y={},k=function(e){return"."+e},b=function(e){return parseInt(e.substr(1),10)};u=function(e,t){var n=k(e);D[n]=t},d=function(e){var t=k(e);return D[t]},l=function(e){var t=k(e);delete D[t]},c=function(){return Object.keys(D).map(b)},_=function(e){var t=k(e);Y[t]=!0},m=function(e){var t=k(e);delete Y[t]},p=function(){return Object.keys(Y).map(b)}}var T=[],w={onSetChildren:function(e,n){var r=d(e);r?void 0:"production"!==t.env.NODE_ENV?y(!1,"Item must have been set"):h("144"),r.childIDs=n;for(var o=0;o<n.length;o++){var a=n[o],i=d(a);i?void 0:"production"!==t.env.NODE_ENV?y(!1,"Expected hook events to fire for the child before its parent includes it in onSetChildren()."):h("140"),null==i.childIDs&&"object"==typeof i.element&&null!=i.element?"production"!==t.env.NODE_ENV?y(!1,"Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren()."):h("141"):void 0,i.isMounted?void 0:"production"!==t.env.NODE_ENV?y(!1,"Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren()."):h("71"),null==i.parentID&&(i.parentID=e),i.parentID!==e?"production"!==t.env.NODE_ENV?y(!1,"Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).",a,i.parentID,e):h("142",a,i.parentID,e):void 0}},onBeforeMountComponent:function(e,t,n){var r={element:t,parentID:n,text:null,childIDs:[],isMounted:!1,updateCount:0};u(e,r)},onBeforeUpdateComponent:function(e,t){var n=d(e);n&&n.isMounted&&(n.element=t)},onMountComponent:function(e){var n=d(e);n?void 0:"production"!==t.env.NODE_ENV?y(!1,"Item must have been set"):h("144"),n.isMounted=!0;var r=0===n.parentID;r&&_(e)},onUpdateComponent:function(e){var t=d(e);t&&t.isMounted&&t.updateCount++},onUnmountComponent:function(e){var t=d(e);if(t){t.isMounted=!1;var n=0===t.parentID;n&&m(e)}T.push(e)},purgeUnmountedComponents:function(){if(!w._preventPurging){for(var e=0;e<T.length;e++){var t=T[e];o(t)}T.length=0}},isMounted:function(e){var t=d(e);return!!t&&t.isMounted},getCurrentStackAddendum:function(e){var t="";if(e){var n=i(e),r=e._owner;t+=a(n,e._source,r&&r.getName())}var o=f.current,s=o&&o._debugID;return t+=w.getStackAddendumByID(s)},getStackAddendumByID:function(e){for(var t="";e;)t+=s(e),e=w.getParentID(e);return t},getChildIDs:function(e){var t=d(e);return t?t.childIDs:[]},getDisplayName:function(e){var t=w.getElement(e);return t?i(t):null},getElement:function(e){var t=d(e);return t?t.element:null},getOwnerID:function(e){var t=w.getElement(e);return t&&t._owner?t._owner._debugID:null},getParentID:function(e){var t=d(e);return t?t.parentID:null},getSource:function(e){var t=d(e),n=t?t.element:null,r=null!=n?n._source:null;return r},getText:function(e){var t=w.getElement(e);return"string"==typeof t?t:"number"==typeof t?""+t:null},getUpdateCount:function(e){var t=d(e);return t?t.updateCount:0},getRootIDs:p,getRegisteredIDs:c};e.exports=w}).call(t,n(2))},function(e,t,n){(function(t){"use strict";var r=null;if("production"!==t.env.NODE_ENV){var o=n(228);r=o}e.exports={debugTool:r}}).call(t,n(2))},function(e,t,n){(function(t){"use strict";function r(){E.ReactReconcileTransaction&&D?void 0:"production"!==t.env.NODE_ENV?y(!1,"ReactUpdates: must inject a reconcile transaction class and batching strategy"):l("123")}function o(){this.reinitializeTransaction(),this.dirtyComponentsLength=null,this.callbackQueue=_.getPooled(),this.reconcileTransaction=E.ReactReconcileTransaction.getPooled(!0)}function a(e,t,n,o,a,i){return r(),D.batchedUpdates(e,t,n,o,a,i)}function i(e,t){return e._mountOrder-t._mountOrder}function s(e){var n=e.dirtyComponentsLength;n!==v.length?"production"!==t.env.NODE_ENV?y(!1,"Expected flush transaction's stored dirty-components length (%s) to match dirty-components array length (%s).",n,v.length):l("124",n,v.length):void 0,v.sort(i),M++;for(var r=0;r<n;r++){var o=v[r],a=o._pendingCallbacks;o._pendingCallbacks=null;var s;if(p.logTopLevelRenders){var u=o;o._currentElement.type.isReactTopLevelWrapper&&(u=o._renderedComponent),s="React update: "+u.getName(),console.time(s)}if(h.performUpdateIfNecessary(o,e.reconcileTransaction,M),s&&console.timeEnd(s),a)for(var d=0;d<a.length;d++)e.callbackQueue.enqueue(a[d],o.getPublicInstance())}}function u(e){return r(),D.isBatchingUpdates?(v.push(e),void(null==e._updateBatchNumber&&(e._updateBatchNumber=M+1))):void D.batchedUpdates(u,e)}function d(e,n){D.isBatchingUpdates?void 0:"production"!==t.env.NODE_ENV?y(!1,"ReactUpdates.asap: Can't enqueue an asap callback in a context whereupdates are not being batched."):l("125"),g.enqueue(e,n),L=!0}var l=n(4),c=n(7),_=n(168),m=n(17),p=n(173),h=n(22),f=n(31),y=n(3),v=[],M=0,g=_.getPooled(),L=!1,D=null,Y={initialize:function(){this.dirtyComponentsLength=v.length},close:function(){this.dirtyComponentsLength!==v.length?(v.splice(0,this.dirtyComponentsLength),T()):v.length=0}},k={initialize:function(){this.callbackQueue.reset()},close:function(){this.callbackQueue.notifyAll()}},b=[Y,k];c(o.prototype,f,{getTransactionWrappers:function(){return b},destructor:function(){this.dirtyComponentsLength=null,_.release(this.callbackQueue),this.callbackQueue=null,E.ReactReconcileTransaction.release(this.reconcileTransaction),this.reconcileTransaction=null},perform:function(e,t,n){return f.perform.call(this,this.reconcileTransaction.perform,this.reconcileTransaction,e,t,n)}}),m.addPoolingTo(o);var T=function(){for(;v.length||L;){if(v.length){var e=o.getPooled();e.perform(s,null,e),o.release(e)}if(L){L=!1;var t=g;g=_.getPooled(),t.notifyAll(),_.release(t)}}},w={injectReconcileTransaction:function(e){e?void 0:"production"!==t.env.NODE_ENV?y(!1,"ReactUpdates: must provide a reconcile transaction class"):l("126"),E.ReactReconcileTransaction=e},injectBatchingStrategy:function(e){e?void 0:"production"!==t.env.NODE_ENV?y(!1,"ReactUpdates: must provide a batching strategy"):l("127"),"function"!=typeof e.batchedUpdates?"production"!==t.env.NODE_ENV?y(!1,"ReactUpdates: must provide a batchedUpdates() function"):l("128"):void 0,"boolean"!=typeof e.isBatchingUpdates?"production"!==t.env.NODE_ENV?y(!1,"ReactUpdates: must provide an isBatchingUpdates boolean attribute"):l("129"):void 0,D=e}},E={ReactReconcileTransaction:null,batchedUpdates:a,enqueueUpdate:u,flushBatchedUpdates:T,injection:w,asap:d};e.exports=E}).call(t,n(2))},function(e,t){"use strict";var n={current:null};e.exports=n},function(e,t,n){(function(t){"use strict";var r=n(57),o=r;"production"!==t.env.NODE_ENV&&!function(){var e=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var o=0,a="Warning: "+e.replace(/%s/g,function(){return n[o++]});"undefined"!=typeof console&&console.error(a);try{throw new Error(a)}catch(e){}};o=function(t,n){if(void 0===n)throw new Error("`warning(condition, format, ...args)` requires a warning message argument");if(0!==n.indexOf("Failed Composite propType: ")&&!t){for(var r=arguments.length,o=Array(r>2?r-2:0),a=2;a<r;a++)o[a-2]=arguments[a];e.apply(void 0,[n].concat(o));
}}}(),e.exports=o}).call(t,n(2))},function(e,t,n){(function(t){"use strict";function r(e,n,r,o){"production"!==t.env.NODE_ENV&&(delete this.nativeEvent,delete this.preventDefault,delete this.stopPropagation),this.dispatchConfig=e,this._targetInst=n,this.nativeEvent=r;var a=this.constructor.Interface;for(var i in a)if(a.hasOwnProperty(i)){"production"!==t.env.NODE_ENV&&delete this[i];var u=a[i];u?this[i]=u(r):"target"===i?this.target=o:this[i]=r[i]}var d=null!=r.defaultPrevented?r.defaultPrevented:r.returnValue===!1;return d?this.isDefaultPrevented=s.thatReturnsTrue:this.isDefaultPrevented=s.thatReturnsFalse,this.isPropagationStopped=s.thatReturnsFalse,this}function o(e,n){function r(e){var t=i?"setting the method":"setting the property";return a(t,"This is effectively a no-op"),e}function o(){var e=i?"accessing the method":"accessing the property",t=i?"This is a no-op function":"This is set to null";return a(e,t),n}function a(n,r){var o=!1;"production"!==t.env.NODE_ENV?u(o,"This synthetic event is reused for performance reasons. If you're seeing this, you're %s `%s` on a released/nullified synthetic event. %s. If you must keep the original synthetic event around, use event.persist(). See https://fb.me/react-event-pooling for more information.",n,e,r):void 0}var i="function"==typeof n;return{configurable:!0,set:r,get:o}}var a=n(7),i=n(17),s=n(15),u=n(5),d=!1,l="function"==typeof Proxy,c=["dispatchConfig","_targetInst","nativeEvent","isDefaultPrevented","isPropagationStopped","_dispatchListeners","_dispatchInstances"],_={type:null,target:null,currentTarget:s.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};a(r.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=s.thatReturnsTrue)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=s.thatReturnsTrue)},persist:function(){this.isPersistent=s.thatReturnsTrue},isPersistent:s.thatReturnsFalse,destructor:function(){var e=this.constructor.Interface;for(var n in e)"production"!==t.env.NODE_ENV?Object.defineProperty(this,n,o(n,e[n])):this[n]=null;for(var r=0;r<c.length;r++)this[c[r]]=null;"production"!==t.env.NODE_ENV&&(Object.defineProperty(this,"nativeEvent",o("nativeEvent",null)),Object.defineProperty(this,"preventDefault",o("preventDefault",s)),Object.defineProperty(this,"stopPropagation",o("stopPropagation",s)))}}),r.Interface=_,"production"!==t.env.NODE_ENV&&l&&(r=new Proxy(r,{construct:function(e,t){return this.apply(e,Object.create(e.prototype),t)},apply:function(e,n,r){return new Proxy(e.apply(n,r),{set:function(e,n,r){return"isPersistent"===n||e.constructor.Interface.hasOwnProperty(n)||c.indexOf(n)!==-1||("production"!==t.env.NODE_ENV?u(d||e.isPersistent(),"This synthetic event is reused for performance reasons. If you're seeing this, you're adding a new property in the synthetic event object. The property is never released. See https://fb.me/react-event-pooling for more information."):void 0,d=!0),e[n]=r,!0}})}})),r.augmentClass=function(e,t){var n=this,r=function(){};r.prototype=n.prototype;var o=new r;a(o,e.prototype),e.prototype=o,e.prototype.constructor=e,e.Interface=a({},n.Interface,t),e.augmentClass=n.augmentClass,i.addPoolingTo(e,i.fourArgumentPooler)},i.addPoolingTo(r,i.fourArgumentPooler),e.exports=r}).call(t,n(2))},function(e,t){"use strict";function n(e){return function(){return e}}var r=function(){};r.thatReturns=n,r.thatReturnsFalse=n(!1),r.thatReturnsTrue=n(!0),r.thatReturnsNull=n(null),r.thatReturnsThis=function(){return this},r.thatReturnsArgument=function(e){return e},e.exports=r},function(e,t,n){(function(t){"use strict";function r(e,t){return(e&t)===t}var o=n(4),a=n(3),i={MUST_USE_PROPERTY:1,HAS_BOOLEAN_VALUE:4,HAS_NUMERIC_VALUE:8,HAS_POSITIVE_NUMERIC_VALUE:24,HAS_OVERLOADED_BOOLEAN_VALUE:32,injectDOMPropertyConfig:function(e){var n=i,s=e.Properties||{},d=e.DOMAttributeNamespaces||{},l=e.DOMAttributeNames||{},c=e.DOMPropertyNames||{},_=e.DOMMutationMethods||{};e.isCustomAttribute&&u._isCustomAttributeFunctions.push(e.isCustomAttribute);for(var m in s){u.properties.hasOwnProperty(m)?"production"!==t.env.NODE_ENV?a(!1,"injectDOMPropertyConfig(...): You're trying to inject DOM property '%s' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.",m):o("48",m):void 0;var p=m.toLowerCase(),h=s[m],f={attributeName:p,attributeNamespace:null,propertyName:m,mutationMethod:null,mustUseProperty:r(h,n.MUST_USE_PROPERTY),hasBooleanValue:r(h,n.HAS_BOOLEAN_VALUE),hasNumericValue:r(h,n.HAS_NUMERIC_VALUE),hasPositiveNumericValue:r(h,n.HAS_POSITIVE_NUMERIC_VALUE),hasOverloadedBooleanValue:r(h,n.HAS_OVERLOADED_BOOLEAN_VALUE)};if(f.hasBooleanValue+f.hasNumericValue+f.hasOverloadedBooleanValue<=1?void 0:"production"!==t.env.NODE_ENV?a(!1,"DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s",m):o("50",m),"production"!==t.env.NODE_ENV&&(u.getPossibleStandardName[p]=m),l.hasOwnProperty(m)){var y=l[m];f.attributeName=y,"production"!==t.env.NODE_ENV&&(u.getPossibleStandardName[y]=m)}d.hasOwnProperty(m)&&(f.attributeNamespace=d[m]),c.hasOwnProperty(m)&&(f.propertyName=c[m]),_.hasOwnProperty(m)&&(f.mutationMethod=_[m]),u.properties[m]=f}}},s=":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD",u={ID_ATTRIBUTE_NAME:"data-reactid",ROOT_ATTRIBUTE_NAME:"data-reactroot",ATTRIBUTE_NAME_START_CHAR:s,ATTRIBUTE_NAME_CHAR:s+"\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040",properties:{},getPossibleStandardName:"production"!==t.env.NODE_ENV?{autofocus:"autoFocus"}:null,_isCustomAttributeFunctions:[],isCustomAttribute:function(e){for(var t=0;t<u._isCustomAttributeFunctions.length;t++){var n=u._isCustomAttributeFunctions[t];if(n(e))return!0}return!1},injection:i};e.exports=u}).call(t,n(2))},function(e,t,n){(function(t){"use strict";var r=n(4),o=n(3),a=function(e){var t=this;if(t.instancePool.length){var n=t.instancePool.pop();return t.call(n,e),n}return new t(e)},i=function(e,t){var n=this;if(n.instancePool.length){var r=n.instancePool.pop();return n.call(r,e,t),r}return new n(e,t)},s=function(e,t,n){var r=this;if(r.instancePool.length){var o=r.instancePool.pop();return r.call(o,e,t,n),o}return new r(e,t,n)},u=function(e,t,n,r){var o=this;if(o.instancePool.length){var a=o.instancePool.pop();return o.call(a,e,t,n,r),a}return new o(e,t,n,r)},d=function(e,t,n,r,o){var a=this;if(a.instancePool.length){var i=a.instancePool.pop();return a.call(i,e,t,n,r,o),i}return new a(e,t,n,r,o)},l=function(e){var n=this;e instanceof n?void 0:"production"!==t.env.NODE_ENV?o(!1,"Trying to release an instance into a pool of a different type."):r("25"),e.destructor(),n.instancePool.length<n.poolSize&&n.instancePool.push(e)},c=10,_=a,m=function(e,t){var n=e;return n.instancePool=[],n.getPooled=t||_,n.poolSize||(n.poolSize=c),n.release=l,n},p={addPoolingTo:m,oneArgumentPooler:a,twoArgumentPooler:i,threeArgumentPooler:s,fourArgumentPooler:u,fiveArgumentPooler:d};e.exports=p}).call(t,n(2))},function(e,t,n){(function(t){"use strict";function r(e){if("production"!==t.env.NODE_ENV&&m.call(e,"ref")){var n=Object.getOwnPropertyDescriptor(e,"ref").get;if(n&&n.isReactWarning)return!1}return void 0!==e.ref}function o(e){if("production"!==t.env.NODE_ENV&&m.call(e,"key")){var n=Object.getOwnPropertyDescriptor(e,"key").get;if(n&&n.isReactWarning)return!1}return void 0!==e.key}function a(e,n){var r=function(){s||(s=!0,"production"!==t.env.NODE_ENV?c(!1,"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://fb.me/react-special-props)",n):void 0)};r.isReactWarning=!0,Object.defineProperty(e,"key",{get:r,configurable:!0})}function i(e,n){var r=function(){u||(u=!0,"production"!==t.env.NODE_ENV?c(!1,"%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://fb.me/react-special-props)",n):void 0)};r.isReactWarning=!0,Object.defineProperty(e,"ref",{get:r,configurable:!0})}var s,u,d=n(34),l=n(12),c=n(13),_=n(55),m=Object.prototype.hasOwnProperty,p=n(194),h={key:!0,ref:!0,__self:!0,__source:!0},f=function(e,n,r,o,a,i,s){var u={$$typeof:p,type:e,key:n,ref:r,props:s,_owner:i};return"production"!==t.env.NODE_ENV&&(u._store={},_?(Object.defineProperty(u._store,"validated",{configurable:!1,enumerable:!1,writable:!0,value:!1}),Object.defineProperty(u,"_self",{configurable:!1,enumerable:!1,writable:!1,value:o}),Object.defineProperty(u,"_source",{configurable:!1,enumerable:!1,writable:!1,value:a})):(u._store.validated=!1,u._self=o,u._source=a),Object.freeze&&(Object.freeze(u.props),Object.freeze(u))),u};f.createElement=function(e,n,s){var u,d={},c=null,_=null,y=null,v=null;if(null!=n){r(n)&&(_=n.ref),o(n)&&(c=""+n.key),y=void 0===n.__self?null:n.__self,v=void 0===n.__source?null:n.__source;for(u in n)m.call(n,u)&&!h.hasOwnProperty(u)&&(d[u]=n[u])}var M=arguments.length-2;if(1===M)d.children=s;else if(M>1){for(var g=Array(M),L=0;L<M;L++)g[L]=arguments[L+2];"production"!==t.env.NODE_ENV&&Object.freeze&&Object.freeze(g),d.children=g}if(e&&e.defaultProps){var D=e.defaultProps;for(u in D)void 0===d[u]&&(d[u]=D[u])}if("production"!==t.env.NODE_ENV&&(c||_)&&("undefined"==typeof d.$$typeof||d.$$typeof!==p)){var Y="function"==typeof e?e.displayName||e.name||"Unknown":e;c&&a(d,Y),_&&i(d,Y)}return f(e,c,_,y,v,l.current,d)},f.createFactory=function(e){var t=f.createElement.bind(null,e);return t.type=e,t},f.cloneAndReplaceKey=function(e,t){var n=f(e.type,t,e.ref,e._self,e._source,e._owner,e.props);return n},f.cloneElement=function(e,t,n){var a,i=d({},e.props),s=e.key,u=e.ref,c=e._self,_=e._source,p=e._owner;if(null!=t){r(t)&&(u=t.ref,p=l.current),o(t)&&(s=""+t.key);var y;e.type&&e.type.defaultProps&&(y=e.type.defaultProps);for(a in t)m.call(t,a)&&!h.hasOwnProperty(a)&&(void 0===t[a]&&void 0!==y?i[a]=y[a]:i[a]=t[a])}var v=arguments.length-2;if(1===v)i.children=n;else if(v>1){for(var M=Array(v),g=0;g<v;g++)M[g]=arguments[g+2];i.children=M}return f(e.type,s,u,c,_,p,i)},f.isValidElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===p},e.exports=f}).call(t,n(2))},function(e,t){"use strict";function n(e){for(var t=arguments.length-1,n="Minified React error #"+e+"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);n+=" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";var o=new Error(n);throw o.name="Invariant Violation",o.framesToPop=1,o}e.exports=n},function(e,t,n){(function(t){"use strict";function n(e,n,r,o,a,i,s,u){if("production"!==t.env.NODE_ENV&&void 0===n)throw new Error("invariant requires an error message argument");if(!e){var d;if(void 0===n)d=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[r,o,a,i,s,u],c=0;d=new Error(n.replace(/%s/g,function(){return l[c++]})),d.name="Invariant Violation"}throw d.framesToPop=1,d}}e.exports=n}).call(t,n(2))},function(e,t,n){"use strict";function r(e){if(f){var t=e.node,n=e.children;if(n.length)for(var r=0;r<n.length;r++)y(t,n[r],null);else null!=e.html?c(t,e.html):null!=e.text&&m(t,e.text)}}function o(e,t){e.parentNode.replaceChild(t.node,e),r(t)}function a(e,t){f?e.children.push(t):e.node.appendChild(t.node)}function i(e,t){f?e.html=t:c(e.node,t)}function s(e,t){f?e.text=t:m(e.node,t)}function u(){return this.node.nodeName}function d(e){return{node:e,children:[],html:null,text:null,toString:u}}var l=n(36),c=n(33),_=n(43),m=n(186),p=1,h=11,f="undefined"!=typeof document&&"number"==typeof document.documentMode||"undefined"!=typeof navigator&&"string"==typeof navigator.userAgent&&/\bEdge\/\d/.test(navigator.userAgent),y=_(function(e,t,n){t.node.nodeType===h||t.node.nodeType===p&&"object"===t.node.nodeName.toLowerCase()&&(null==t.node.namespaceURI||t.node.namespaceURI===l.html)?(r(t),e.insertBefore(t.node,n)):(e.insertBefore(t.node,n),r(t))});d.insertTreeBefore=y,d.replaceChildWithTree=o,d.queueChild=a,d.queueHTML=i,d.queueText=s,e.exports=d},function(e,t,n){(function(t){"use strict";function r(){o.attachRefs(this,this._currentElement)}var o=n(242),a=n(10),i=n(5),s={mountComponent:function(e,n,o,i,s,u){"production"!==t.env.NODE_ENV&&0!==e._debugID&&a.debugTool.onBeforeMountComponent(e._debugID,e._currentElement,u);var d=e.mountComponent(n,o,i,s,u);return e._currentElement&&null!=e._currentElement.ref&&n.getReactMountReady().enqueue(r,e),"production"!==t.env.NODE_ENV&&0!==e._debugID&&a.debugTool.onMountComponent(e._debugID),d},getHostNode:function(e){return e.getHostNode()},unmountComponent:function(e,n){"production"!==t.env.NODE_ENV&&0!==e._debugID&&a.debugTool.onBeforeUnmountComponent(e._debugID),o.detachRefs(e,e._currentElement),e.unmountComponent(n),"production"!==t.env.NODE_ENV&&0!==e._debugID&&a.debugTool.onUnmountComponent(e._debugID)},receiveComponent:function(e,n,i,s){var u=e._currentElement;if(n!==u||s!==e._context){"production"!==t.env.NODE_ENV&&0!==e._debugID&&a.debugTool.onBeforeUpdateComponent(e._debugID,n);var d=o.shouldUpdateRefs(u,n);d&&o.detachRefs(e,u),e.receiveComponent(n,i,s),d&&e._currentElement&&null!=e._currentElement.ref&&i.getReactMountReady().enqueue(r,e),"production"!==t.env.NODE_ENV&&0!==e._debugID&&a.debugTool.onUpdateComponent(e._debugID)}},performUpdateIfNecessary:function(e,n,r){return e._updateBatchNumber!==r?void("production"!==t.env.NODE_ENV?i(null==e._updateBatchNumber||e._updateBatchNumber===r+1,"performUpdateIfNecessary: Unexpected batch number (current %s, pending %s)",r,e._updateBatchNumber):void 0):("production"!==t.env.NODE_ENV&&0!==e._debugID&&a.debugTool.onBeforeUpdateComponent(e._debugID,e._currentElement),e.performUpdateIfNecessary(n),void("production"!==t.env.NODE_ENV&&0!==e._debugID&&a.debugTool.onUpdateComponent(e._debugID)))}};e.exports=s}).call(t,n(2))},function(e,t,n){(function(t){"use strict";var r=n(34),o=n(303),a=n(52),i=n(307),s=n(304),u=n(305),d=n(18),l=n(306),c=n(308),_=n(310),m=n(13),p=d.createElement,h=d.createFactory,f=d.cloneElement;if("production"!==t.env.NODE_ENV){var y=n(195);p=y.createElement,h=y.createFactory,f=y.cloneElement}var v=r;if("production"!==t.env.NODE_ENV){var M=!1;v=function(){return"production"!==t.env.NODE_ENV?m(M,"React.__spread is deprecated and should not be used. Use Object.assign directly or another helper function with similar semantics. You may be seeing this warning due to your compiler. See https://fb.me/react-spread-deprecation for more details."):void 0,M=!0,r.apply(null,arguments)}}var g={Children:{map:o.map,forEach:o.forEach,count:o.count,toArray:o.toArray,only:_},Component:a,PureComponent:i,createElement:p,cloneElement:f,isValidElement:d.isValidElement,PropTypes:l,createClass:s.createClass,createFactory:h,createMixin:function(e){return e},DOM:u,version:c,__spread:v};e.exports=g}).call(t,n(2))},function(e,t,n){(function(t){"use strict";function r(e){return"button"===e||"input"===e||"select"===e||"textarea"===e}function o(e,t,n){switch(e){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":return!(!n.disabled||!r(t));default:return!1}}var a=n(4),i=n(28),s=n(37),u=n(41),d=n(180),l=n(181),c=n(3),_={},m=null,p=function(e,t){e&&(s.executeDispatchesInOrder(e,t),e.isPersistent()||e.constructor.release(e))},h=function(e){return p(e,!0)},f=function(e){return p(e,!1)},y=function(e){return"."+e._rootNodeID},v={injection:{injectEventPluginOrder:i.injectEventPluginOrder,injectEventPluginsByName:i.injectEventPluginsByName},putListener:function(e,n,r){"function"!=typeof r?"production"!==t.env.NODE_ENV?c(!1,"Expected %s listener to be a function, instead got type %s",n,typeof r):a("94",n,typeof r):void 0;var o=y(e),s=_[n]||(_[n]={});s[o]=r;var u=i.registrationNameModules[n];u&&u.didPutListener&&u.didPutListener(e,n,r)},getListener:function(e,t){var n=_[t];if(o(t,e._currentElement.type,e._currentElement.props))return null;var r=y(e);return n&&n[r]},deleteListener:function(e,t){var n=i.registrationNameModules[t];n&&n.willDeleteListener&&n.willDeleteListener(e,t);var r=_[t];if(r){var o=y(e);delete r[o]}},deleteAllListeners:function(e){var t=y(e);for(var n in _)if(_.hasOwnProperty(n)&&_[n][t]){var r=i.registrationNameModules[n];r&&r.willDeleteListener&&r.willDeleteListener(e,n),delete _[n][t]}},extractEvents:function(e,t,n,r){for(var o,a=i.plugins,s=0;s<a.length;s++){var u=a[s];if(u){var l=u.extractEvents(e,t,n,r);l&&(o=d(o,l))}}return o},enqueueEvents:function(e){e&&(m=d(m,e))},processEventQueue:function(e){var n=m;m=null,e?l(n,h):l(n,f),m?"production"!==t.env.NODE_ENV?c(!1,"processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented."):a("95"):void 0,u.rethrowCaughtError()},__purge:function(){_={}},__getListenerBank:function(){return _}};e.exports=v}).call(t,n(2))},function(e,t,n){(function(t){"use strict";function r(e,t,n){var r=t.dispatchConfig.phasedRegistrationNames[n];return v(e,r)}function o(e,n,o){"production"!==t.env.NODE_ENV&&("production"!==t.env.NODE_ENV?y(e,"Dispatching inst must not be null"):void 0);var a=r(e,o,n);a&&(o._dispatchListeners=h(o._dispatchListeners,a),o._dispatchInstances=h(o._dispatchInstances,e))}function a(e){e&&e.dispatchConfig.phasedRegistrationNames&&p.traverseTwoPhase(e._targetInst,o,e)}function i(e){if(e&&e.dispatchConfig.phasedRegistrationNames){var t=e._targetInst,n=t?p.getParentInstance(t):null;p.traverseTwoPhase(n,o,e)}}function s(e,t,n){if(n&&n.dispatchConfig.registrationName){var r=n.dispatchConfig.registrationName,o=v(e,r);o&&(n._dispatchListeners=h(n._dispatchListeners,o),n._dispatchInstances=h(n._dispatchInstances,e))}}function u(e){e&&e.dispatchConfig.registrationName&&s(e._targetInst,null,e)}function d(e){f(e,a)}function l(e){f(e,i)}function c(e,t,n,r){p.traverseEnterLeave(n,r,s,e,t)}function _(e){f(e,u)}var m=n(24),p=n(37),h=n(180),f=n(181),y=n(5),v=m.getListener,M={accumulateTwoPhaseDispatches:d,accumulateTwoPhaseDispatchesSkipTarget:l,accumulateDirectDispatches:_,accumulateEnterLeaveDispatches:c};e.exports=M}).call(t,n(2))},function(e,t){"use strict";var n={remove:function(e){e._reactInternalInstance=void 0},get:function(e){return e._reactInternalInstance},has:function(e){return void 0!==e._reactInternalInstance},set:function(e,t){e._reactInternalInstance=t}};e.exports=n},function(e,t,n){"use strict";function r(e,t,n,r){return o.call(this,e,t,n,r)}var o=n(14),a=n(46),i={view:function(e){if(e.view)return e.view;var t=a(e);if(t.window===t)return t;var n=t.ownerDocument;return n?n.defaultView||n.parentWindow:window},detail:function(e){return e.detail||0}};o.augmentClass(r,i),e.exports=r},function(e,t,n){(function(t){"use strict";function r(){if(u)for(var e in d){var n=d[e],r=u.indexOf(e);if(r>-1?void 0:"production"!==t.env.NODE_ENV?s(!1,"EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.",e):i("96",e),!l.plugins[r]){n.extractEvents?void 0:"production"!==t.env.NODE_ENV?s(!1,"EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.",e):i("97",e),l.plugins[r]=n;var a=n.eventTypes;for(var c in a)o(a[c],n,c)?void 0:"production"!==t.env.NODE_ENV?s(!1,"EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.",c,e):i("98",c,e)}}}function o(e,n,r){l.eventNameDispatchConfigs.hasOwnProperty(r)?"production"!==t.env.NODE_ENV?s(!1,"EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.",r):i("99",r):void 0,l.eventNameDispatchConfigs[r]=e;var o=e.phasedRegistrationNames;if(o){for(var u in o)if(o.hasOwnProperty(u)){var d=o[u];a(d,n,r)}return!0}return!!e.registrationName&&(a(e.registrationName,n,r),!0)}function a(e,n,r){if(l.registrationNameModules[e]?"production"!==t.env.NODE_ENV?s(!1,"EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.",e):i("100",e):void 0,l.registrationNameModules[e]=n,l.registrationNameDependencies[e]=n.eventTypes[r].dependencies,"production"!==t.env.NODE_ENV){var o=e.toLowerCase();l.possibleRegistrationNames[o]=e,"onDoubleClick"===e&&(l.possibleRegistrationNames.ondblclick=e)}}var i=n(4),s=n(3),u=null,d={},l={plugins:[],eventNameDispatchConfigs:{},registrationNameModules:{},registrationNameDependencies:{},possibleRegistrationNames:"production"!==t.env.NODE_ENV?{}:null,injectEventPluginOrder:function(e){u?"production"!==t.env.NODE_ENV?s(!1,"EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React."):i("101"):void 0,u=Array.prototype.slice.call(e),r()},injectEventPluginsByName:function(e){var n=!1;for(var o in e)if(e.hasOwnProperty(o)){var a=e[o];d.hasOwnProperty(o)&&d[o]===a||(d[o]?"production"!==t.env.NODE_ENV?s(!1,"EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.",o):i("102",o):void 0,d[o]=a,n=!0)}n&&r()},getPluginModuleForEvent:function(e){var t=e.dispatchConfig;if(t.registrationName)return l.registrationNameModules[t.registrationName]||null;if(void 0!==t.phasedRegistrationNames){var n=t.phasedRegistrationNames;for(var r in n)if(n.hasOwnProperty(r)){var o=l.registrationNameModules[n[r]];if(o)return o}}return null},_resetEventPlugins:function(){u=null;for(var e in d)d.hasOwnProperty(e)&&delete d[e];l.plugins.length=0;var n=l.eventNameDispatchConfigs;for(var r in n)n.hasOwnProperty(r)&&delete n[r];var o=l.registrationNameModules;for(var a in o)o.hasOwnProperty(a)&&delete o[a];if("production"!==t.env.NODE_ENV){var i=l.possibleRegistrationNames;for(var s in i)i.hasOwnProperty(s)&&delete i[s]}}};e.exports=l}).call(t,n(2))},function(e,t,n){"use strict";function r(e){return Object.prototype.hasOwnProperty.call(e,h)||(e[h]=m++,c[e[h]]={}),c[e[h]]}var o,a=n(7),i=n(28),s=n(232),u=n(179),d=n(268),l=n(47),c={},_=!1,m=0,p={topAbort:"abort",topAnimationEnd:d("animationend")||"animationend",topAnimationIteration:d("animationiteration")||"animationiteration",topAnimationStart:d("animationstart")||"animationstart",topBlur:"blur",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topChange:"change",topClick:"click",topCompositionEnd:"compositionend",topCompositionStart:"compositionstart",topCompositionUpdate:"compositionupdate",topContextMenu:"contextmenu",topCopy:"copy",topCut:"cut",topDoubleClick:"dblclick",topDrag:"drag",topDragEnd:"dragend",topDragEnter:"dragenter",topDragExit:"dragexit",topDragLeave:"dragleave",topDragOver:"dragover",topDragStart:"dragstart",topDrop:"drop",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topFocus:"focus",topInput:"input",topKeyDown:"keydown",topKeyPress:"keypress",topKeyUp:"keyup",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topMouseDown:"mousedown",topMouseMove:"mousemove",topMouseOut:"mouseout",topMouseOver:"mouseover",topMouseUp:"mouseup",topPaste:"paste",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topScroll:"scroll",topSeeked:"seeked",topSeeking:"seeking",topSelectionChange:"selectionchange",topStalled:"stalled",topSuspend:"suspend",topTextInput:"textInput",topTimeUpdate:"timeupdate",topTouchCancel:"touchcancel",topTouchEnd:"touchend",topTouchMove:"touchmove",topTouchStart:"touchstart",topTransitionEnd:d("transitionend")||"transitionend",topVolumeChange:"volumechange",topWaiting:"waiting",topWheel:"wheel"},h="_reactListenersID"+String(Math.random()).slice(2),f=a({},s,{ReactEventListener:null,injection:{injectReactEventListener:function(e){e.setHandleTopLevel(f.handleTopLevel),f.ReactEventListener=e}},setEnabled:function(e){f.ReactEventListener&&f.ReactEventListener.setEnabled(e)},isEnabled:function(){return!(!f.ReactEventListener||!f.ReactEventListener.isEnabled())},listenTo:function(e,t){for(var n=t,o=r(n),a=i.registrationNameDependencies[e],s=0;s<a.length;s++){var u=a[s];o.hasOwnProperty(u)&&o[u]||("topWheel"===u?l("wheel")?f.ReactEventListener.trapBubbledEvent("topWheel","wheel",n):l("mousewheel")?f.ReactEventListener.trapBubbledEvent("topWheel","mousewheel",n):f.ReactEventListener.trapBubbledEvent("topWheel","DOMMouseScroll",n):"topScroll"===u?l("scroll",!0)?f.ReactEventListener.trapCapturedEvent("topScroll","scroll",n):f.ReactEventListener.trapBubbledEvent("topScroll","scroll",f.ReactEventListener.WINDOW_HANDLE):"topFocus"===u||"topBlur"===u?(l("focus",!0)?(f.ReactEventListener.trapCapturedEvent("topFocus","focus",n),f.ReactEventListener.trapCapturedEvent("topBlur","blur",n)):l("focusin")&&(f.ReactEventListener.trapBubbledEvent("topFocus","focusin",n),f.ReactEventListener.trapBubbledEvent("topBlur","focusout",n)),o.topBlur=!0,o.topFocus=!0):p.hasOwnProperty(u)&&f.ReactEventListener.trapBubbledEvent(u,p[u],n),o[u]=!0)}},trapBubbledEvent:function(e,t,n){return f.ReactEventListener.trapBubbledEvent(e,t,n)},trapCapturedEvent:function(e,t,n){return f.ReactEventListener.trapCapturedEvent(e,t,n)},supportsEventPageXY:function(){if(!document.createEvent)return!1;var e=document.createEvent("MouseEvent");return null!=e&&"pageX"in e},ensureScrollValueMonitoring:function(){if(void 0===o&&(o=f.supportsEventPageXY()),!o&&!_){var e=u.refreshScrollValues;f.ReactEventListener.monitorScrollValue(e),_=!0}}});e.exports=f},function(e,t,n){"use strict";function r(e,t,n,r){return o.call(this,e,t,n,r)}var o=n(27),a=n(179),i=n(45),s={screenX:null,screenY:null,clientX:null,clientY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:i,button:function(e){var t=e.button;return"which"in e?t:2===t?2:4===t?1:0},buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},pageX:function(e){return"pageX"in e?e.pageX:e.clientX+a.currentScrollLeft},pageY:function(e){return"pageY"in e?e.pageY:e.clientY+a.currentScrollTop}};o.augmentClass(r,s),e.exports=r},function(e,t,n){(function(t){"use strict";var r=n(4),o=n(3),a={},i={reinitializeTransaction:function(){this.transactionWrappers=this.getTransactionWrappers(),this.wrapperInitData?this.wrapperInitData.length=0:this.wrapperInitData=[],this._isInTransaction=!1},_isInTransaction:!1,getTransactionWrappers:null,isInTransaction:function(){return!!this._isInTransaction},perform:function(e,n,a,i,s,u,d,l){this.isInTransaction()?"production"!==t.env.NODE_ENV?o(!1,"Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction."):r("27"):void 0;var c,_;try{this._isInTransaction=!0,c=!0,this.initializeAll(0),_=e.call(n,a,i,s,u,d,l),c=!1}finally{try{if(c)try{this.closeAll(0)}catch(e){}else this.closeAll(0)}finally{this._isInTransaction=!1}}return _},initializeAll:function(e){for(var t=this.transactionWrappers,n=e;n<t.length;n++){var r=t[n];try{this.wrapperInitData[n]=a,this.wrapperInitData[n]=r.initialize?r.initialize.call(this):null}finally{if(this.wrapperInitData[n]===a)try{this.initializeAll(n+1)}catch(e){}}}},closeAll:function(e){this.isInTransaction()?void 0:"production"!==t.env.NODE_ENV?o(!1,"Transaction.closeAll(): Cannot close transaction when none are open."):r("28");for(var n=this.transactionWrappers,i=e;i<n.length;i++){var s,u=n[i],d=this.wrapperInitData[i];try{s=!0,d!==a&&u.close&&u.close.call(this,d),s=!1}finally{if(s)try{this.closeAll(i+1)}catch(e){}}}this.wrapperInitData.length=0}};e.exports=i}).call(t,n(2))},function(e,t){"use strict";function n(e){var t=""+e,n=o.exec(t);if(!n)return t;var r,a="",i=0,s=0;for(i=n.index;i<t.length;i++){switch(t.charCodeAt(i)){case 34:r="&quot;";break;case 38:r="&amp;";break;case 39:r="&#x27;";break;case 60:r="&lt;";break;case 62:r="&gt;";break;default:continue}s!==i&&(a+=t.substring(s,i)),s=i+1,a+=r}return s!==i?a+t.substring(s,i):a}function r(e){return"boolean"==typeof e||"number"==typeof e?""+e:n(e)}var o=/["'&<>]/;e.exports=r},function(e,t,n){"use strict";var r,o=n(8),a=n(36),i=/^[ \r\n\t\f]/,s=/<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/,u=n(43),d=u(function(e,t){if(e.namespaceURI!==a.svg||"innerHTML"in e)e.innerHTML=t;else{r=r||document.createElement("div"),r.innerHTML="<svg>"+t+"</svg>";for(var n=r.firstChild;n.firstChild;)e.appendChild(n.firstChild)}});if(o.canUseDOM){var l=document.createElement("div");l.innerHTML=" ",""===l.innerHTML&&(d=function(e,t){if(e.parentNode&&e.parentNode.replaceChild(e,e),i.test(t)||"<"===t[0]&&s.test(t)){e.innerHTML=String.fromCharCode(65279)+t;var n=e.firstChild;1===n.data.length?e.removeChild(n):n.deleteData(0,1)}else e.innerHTML=t}),l=null}e.exports=d},function(e,t){"use strict";function n(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}function r(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;var r=Object.getOwnPropertyNames(t).map(function(e){return t[e]});if("0123456789"!==r.join(""))return!1;var o={};return"abcdefghijklmnopqrst".split("").forEach(function(e){o[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},o)).join("")}catch(e){return!1}}var o=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;e.exports=r()?Object.assign:function(e,t){for(var r,i,s=n(e),u=1;u<arguments.length;u++){r=Object(arguments[u]);for(var d in r)o.call(r,d)&&(s[d]=r[d]);if(Object.getOwnPropertySymbols){i=Object.getOwnPropertySymbols(r);for(var l=0;l<i.length;l++)a.call(r,i[l])&&(s[i[l]]=r[i[l]])}}return s}},function(e,t,n){(function(t){"use strict";function r(e,t){return Array.isArray(t)&&(t=t[1]),t?t.nextSibling:e.firstChild}function o(e,t,n){l.insertTreeBefore(e,t,n)}function a(e,t,n){Array.isArray(t)?s(e,t[0],t[1],n):y(e,t,n)}function i(e,t){if(Array.isArray(t)){var n=t[1];t=t[0],u(e,t,n),e.removeChild(n)}e.removeChild(t)}function s(e,t,n,r){for(var o=t;;){var a=o.nextSibling;if(y(e,o,r),o===n)break;o=a}}function u(e,t,n){for(;;){var r=t.nextSibling;if(r===n)break;e.removeChild(r)}}function d(e,n,r){var o=e.parentNode,a=e.nextSibling;a===n?r&&y(o,document.createTextNode(r),a):r?(f(a,r),u(o,a,n)):u(o,e,n),"production"!==t.env.NODE_ENV&&m.debugTool.onHostOperation({instanceID:_.getInstanceFromNode(e)._debugID,type:"replace text",payload:r})}var l=n(21),c=n(205),_=n(6),m=n(10),p=n(43),h=n(33),f=n(186),y=p(function(e,t,n){e.insertBefore(t,n)}),v=c.dangerouslyReplaceNodeWithMarkup;"production"!==t.env.NODE_ENV&&(v=function(e,t,n){if(c.dangerouslyReplaceNodeWithMarkup(e,t),0!==n._debugID)m.debugTool.onHostOperation({instanceID:n._debugID,type:"replace with",payload:t.toString()});else{var r=_.getInstanceFromNode(t.node);0!==r._debugID&&m.debugTool.onHostOperation({instanceID:r._debugID,type:"mount",payload:t.toString()})}});var M={dangerouslyReplaceNodeWithMarkup:v,replaceDelimitedText:d,processUpdates:function(e,n){if("production"!==t.env.NODE_ENV)var s=_.getInstanceFromNode(e)._debugID;for(var u=0;u<n.length;u++){var d=n[u];switch(d.type){case"INSERT_MARKUP":o(e,d.content,r(e,d.afterNode)),"production"!==t.env.NODE_ENV&&m.debugTool.onHostOperation({instanceID:s,type:"insert child",payload:{toIndex:d.toIndex,content:d.content.toString()
}});break;case"MOVE_EXISTING":a(e,d.fromNode,r(e,d.afterNode)),"production"!==t.env.NODE_ENV&&m.debugTool.onHostOperation({instanceID:s,type:"move child",payload:{fromIndex:d.fromIndex,toIndex:d.toIndex}});break;case"SET_MARKUP":h(e,d.content),"production"!==t.env.NODE_ENV&&m.debugTool.onHostOperation({instanceID:s,type:"replace children",payload:d.content.toString()});break;case"TEXT_CONTENT":f(e,d.content),"production"!==t.env.NODE_ENV&&m.debugTool.onHostOperation({instanceID:s,type:"replace text",payload:d.content.toString()});break;case"REMOVE_NODE":i(e,d.fromNode),"production"!==t.env.NODE_ENV&&m.debugTool.onHostOperation({instanceID:s,type:"remove child",payload:{fromIndex:d.fromIndex}})}}}};e.exports=M}).call(t,n(2))},function(e,t){"use strict";var n={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};e.exports=n},function(e,t,n){(function(t){"use strict";function r(e){return"topMouseUp"===e||"topTouchEnd"===e||"topTouchCancel"===e}function o(e){return"topMouseMove"===e||"topTouchMove"===e}function a(e){return"topMouseDown"===e||"topTouchStart"===e}function i(e,t,n,r){var o=e.type||"unknown-event";e.currentTarget=g.getNodeFromInstance(r),t?f.invokeGuardedCallbackWithCatch(o,n,e):f.invokeGuardedCallback(o,n,e),e.currentTarget=null}function s(e,n){var r=e._dispatchListeners,o=e._dispatchInstances;if("production"!==t.env.NODE_ENV&&p(e),Array.isArray(r))for(var a=0;a<r.length&&!e.isPropagationStopped();a++)i(e,n,r[a],o[a]);else r&&i(e,n,r,o);e._dispatchListeners=null,e._dispatchInstances=null}function u(e){var n=e._dispatchListeners,r=e._dispatchInstances;if("production"!==t.env.NODE_ENV&&p(e),Array.isArray(n)){for(var o=0;o<n.length&&!e.isPropagationStopped();o++)if(n[o](e,r[o]))return r[o]}else if(n&&n(e,r))return r;return null}function d(e){var t=u(e);return e._dispatchInstances=null,e._dispatchListeners=null,t}function l(e){"production"!==t.env.NODE_ENV&&p(e);var n=e._dispatchListeners,r=e._dispatchInstances;Array.isArray(n)?"production"!==t.env.NODE_ENV?y(!1,"executeDirectDispatch(...): Invalid `event`."):h("103"):void 0,e.currentTarget=n?g.getNodeFromInstance(r):null;var o=n?n(e):null;return e.currentTarget=null,e._dispatchListeners=null,e._dispatchInstances=null,o}function c(e){return!!e._dispatchListeners}var _,m,p,h=n(4),f=n(41),y=n(3),v=n(5),M={injectComponentTree:function(e){_=e,"production"!==t.env.NODE_ENV&&("production"!==t.env.NODE_ENV?v(e&&e.getNodeFromInstance&&e.getInstanceFromNode,"EventPluginUtils.injection.injectComponentTree(...): Injected module is missing getNodeFromInstance or getInstanceFromNode."):void 0)},injectTreeTraversal:function(e){m=e,"production"!==t.env.NODE_ENV&&("production"!==t.env.NODE_ENV?v(e&&e.isAncestor&&e.getLowestCommonAncestor,"EventPluginUtils.injection.injectTreeTraversal(...): Injected module is missing isAncestor or getLowestCommonAncestor."):void 0)}};"production"!==t.env.NODE_ENV&&(p=function(e){var n=e._dispatchListeners,r=e._dispatchInstances,o=Array.isArray(n),a=o?n.length:n?1:0,i=Array.isArray(r),s=i?r.length:r?1:0;"production"!==t.env.NODE_ENV?v(i===o&&s===a,"EventPluginUtils: Invalid `event`."):void 0});var g={isEndish:r,isMoveish:o,isStartish:a,executeDirectDispatch:l,executeDispatchesInOrder:s,executeDispatchesInOrderStopAtTrue:d,hasDispatches:c,getInstanceFromNode:function(e){return _.getInstanceFromNode(e)},getNodeFromInstance:function(e){return _.getNodeFromInstance(e)},isAncestor:function(e,t){return m.isAncestor(e,t)},getLowestCommonAncestor:function(e,t){return m.getLowestCommonAncestor(e,t)},getParentInstance:function(e){return m.getParentInstance(e)},traverseTwoPhase:function(e,t,n){return m.traverseTwoPhase(e,t,n)},traverseEnterLeave:function(e,t,n,r,o){return m.traverseEnterLeave(e,t,n,r,o)},injection:M};e.exports=g}).call(t,n(2))},function(e,t){"use strict";function n(e){var t=/[=:]/g,n={"=":"=0",":":"=2"},r=(""+e).replace(t,function(e){return n[e]});return"$"+r}function r(e){var t=/(=0|=2)/g,n={"=0":"=","=2":":"},r="."===e[0]&&"$"===e[1]?e.substring(2):e.substring(1);return(""+r).replace(t,function(e){return n[e]})}var o={escape:n,unescape:r};e.exports=o},function(e,t,n){(function(t){"use strict";function r(e){null!=e.checkedLink&&null!=e.valueLink?"production"!==t.env.NODE_ENV?l(!1,"Cannot provide a checkedLink and a valueLink. If you want to use checkedLink, you probably don't want to use valueLink and vice versa."):s("87"):void 0}function o(e){r(e),null!=e.value||null!=e.onChange?"production"!==t.env.NODE_ENV?l(!1,"Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don't want to use valueLink."):s("88"):void 0}function a(e){r(e),null!=e.checked||null!=e.onChange?"production"!==t.env.NODE_ENV?l(!1,"Cannot provide a checkedLink and a checked property or onChange event. If you want to use checked or onChange, you probably don't want to use checkedLink"):s("89"):void 0}function i(e){if(e){var t=e.getName();if(t)return" Check the render method of `"+t+"`."}return""}var s=n(4),u=n(23),d=n(178),l=n(3),c=n(5),_={button:!0,checkbox:!0,image:!0,hidden:!0,radio:!0,reset:!0,submit:!0},m={value:function(e,t,n){return!e[t]||_[e.type]||e.onChange||e.readOnly||e.disabled?null:new Error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.")},checked:function(e,t,n){return!e[t]||e.onChange||e.readOnly||e.disabled?null:new Error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.")},onChange:u.PropTypes.func},p={},h={checkPropTypes:function(e,n,r){for(var o in m){if(m.hasOwnProperty(o))var a=m[o](n,o,e,"prop",null,d);if(a instanceof Error&&!(a.message in p)){p[a.message]=!0;var s=i(r);"production"!==t.env.NODE_ENV?c(!1,"Failed form propType: %s%s",a.message,s):void 0}}},getValue:function(e){return e.valueLink?(o(e),e.valueLink.value):e.value},getChecked:function(e){return e.checkedLink?(a(e),e.checkedLink.value):e.checked},executeOnChange:function(e,t){return e.valueLink?(o(e),e.valueLink.requestChange(t.target.value)):e.checkedLink?(a(e),e.checkedLink.requestChange(t.target.checked)):e.onChange?e.onChange.call(void 0,t):void 0}};e.exports=h}).call(t,n(2))},function(e,t,n){(function(t){"use strict";var r=n(4),o=n(3),a=!1,i={replaceNodeWithMarkup:null,processChildrenUpdates:null,injection:{injectEnvironment:function(e){a?"production"!==t.env.NODE_ENV?o(!1,"ReactCompositeComponent: injectEnvironment() can only be called once."):r("104"):void 0,i.replaceNodeWithMarkup=e.replaceNodeWithMarkup,i.processChildrenUpdates=e.processChildrenUpdates,a=!0}}};e.exports=i}).call(t,n(2))},function(e,t,n){(function(t){"use strict";function n(e,t,n){try{t(n)}catch(e){null===r&&(r=e)}}var r=null,o={invokeGuardedCallback:n,invokeGuardedCallbackWithCatch:n,rethrowCaughtError:function(){if(r){var e=r;throw r=null,e}}};if("production"!==t.env.NODE_ENV&&"undefined"!=typeof window&&"function"==typeof window.dispatchEvent&&"undefined"!=typeof document&&"function"==typeof document.createEvent){var a=document.createElement("react");o.invokeGuardedCallback=function(e,t,n){var r=t.bind(null,n),o="react-"+e;a.addEventListener(o,r,!1);var i=document.createEvent("Event");i.initEvent(o,!1,!1),a.dispatchEvent(i),a.removeEventListener(o,r,!1)}}e.exports=o}).call(t,n(2))},function(e,t,n){(function(t){"use strict";function r(e){l.enqueueUpdate(e)}function o(e){var t=typeof e;if("object"!==t)return t;var n=e.constructor&&e.constructor.name||t,r=Object.keys(e);return r.length>0&&r.length<20?n+" (keys: "+r.join(", ")+")":n}function a(e,n){var r=u.get(e);if(!r){if("production"!==t.env.NODE_ENV){var o=e.constructor;"production"!==t.env.NODE_ENV?_(!n,"%s(...): Can only update a mounted or mounting component. This usually means you called %s() on an unmounted component. This is a no-op. Please check the code for the %s component.",n,n,o&&(o.displayName||o.name)||"ReactClass"):void 0}return null}return"production"!==t.env.NODE_ENV&&("production"!==t.env.NODE_ENV?_(null==s.current,"%s(...): Cannot update during an existing state transition (such as within `render` or another component's constructor). Render methods should be a pure function of props and state; constructor side-effects are an anti-pattern, but can be moved to `componentWillMount`.",n):void 0),r}var i=n(4),s=n(12),u=n(26),d=n(10),l=n(11),c=n(3),_=n(5),m={isMounted:function(e){if("production"!==t.env.NODE_ENV){var n=s.current;null!==n&&("production"!==t.env.NODE_ENV?_(n._warnedAboutRefsInRender,"%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.",n.getName()||"A component"):void 0,n._warnedAboutRefsInRender=!0)}var r=u.get(e);return!!r&&!!r._renderedComponent},enqueueCallback:function(e,t,n){m.validateCallback(t,n);var o=a(e);return o?(o._pendingCallbacks?o._pendingCallbacks.push(t):o._pendingCallbacks=[t],void r(o)):null},enqueueCallbackInternal:function(e,t){e._pendingCallbacks?e._pendingCallbacks.push(t):e._pendingCallbacks=[t],r(e)},enqueueForceUpdate:function(e){var t=a(e,"forceUpdate");t&&(t._pendingForceUpdate=!0,r(t))},enqueueReplaceState:function(e,t){var n=a(e,"replaceState");n&&(n._pendingStateQueue=[t],n._pendingReplaceState=!0,r(n))},enqueueSetState:function(e,n){"production"!==t.env.NODE_ENV&&(d.debugTool.onSetState(),"production"!==t.env.NODE_ENV?_(null!=n,"setState(...): You passed an undefined or null state object; instead, use forceUpdate()."):void 0);var o=a(e,"setState");if(o){var i=o._pendingStateQueue||(o._pendingStateQueue=[]);i.push(n),r(o)}},enqueueElementInternal:function(e,t,n){e._pendingElement=t,e._context=n,r(e)},validateCallback:function(e,n){e&&"function"!=typeof e?"production"!==t.env.NODE_ENV?c(!1,"%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.",n,o(e)):i("122",n,o(e)):void 0}};e.exports=m}).call(t,n(2))},function(e,t){"use strict";var n=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction(function(){return e(t,n,r,o)})}:e};e.exports=n},function(e,t){"use strict";function n(e){var t,n=e.keyCode;return"charCode"in e?(t=e.charCode,0===t&&13===n&&(t=13)):t=n,t>=32||13===t?t:0}e.exports=n},function(e,t){"use strict";function n(e){var t=this,n=t.nativeEvent;if(n.getModifierState)return n.getModifierState(e);var r=o[e];return!!r&&!!n[r]}function r(e){return n}var o={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};e.exports=r},function(e,t){"use strict";function n(e){var t=e.target||e.srcElement||window;return t.correspondingUseElement&&(t=t.correspondingUseElement),3===t.nodeType?t.parentNode:t}e.exports=n},function(e,t,n){"use strict";/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
function r(e,t){if(!a.canUseDOM||t&&!("addEventListener"in document))return!1;var n="on"+e,r=n in document;if(!r){var i=document.createElement("div");i.setAttribute(n,"return;"),r="function"==typeof i[n]}return!r&&o&&"wheel"===e&&(r=document.implementation.hasFeature("Events.wheel","3.0")),r}var o,a=n(8);a.canUseDOM&&(o=document.implementation&&document.implementation.hasFeature&&document.implementation.hasFeature("","")!==!0),e.exports=r},function(e,t){"use strict";function n(e,t){var n=null===e||e===!1,r=null===t||t===!1;if(n||r)return n===r;var o=typeof e,a=typeof t;return"string"===o||"number"===o?"string"===a||"number"===a:"object"===a&&e.type===t.type&&e.key===t.key}e.exports=n},function(e,t,n){(function(t){"use strict";var r=n(7),o=n(15),a=n(5),i=o;if("production"!==t.env.NODE_ENV){var s=["address","applet","area","article","aside","base","basefont","bgsound","blockquote","body","br","button","caption","center","col","colgroup","dd","details","dir","div","dl","dt","embed","fieldset","figcaption","figure","footer","form","frame","frameset","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","iframe","img","input","isindex","li","link","listing","main","marquee","menu","menuitem","meta","nav","noembed","noframes","noscript","object","ol","p","param","plaintext","pre","script","section","select","source","style","summary","table","tbody","td","template","textarea","tfoot","th","thead","title","tr","track","ul","wbr","xmp"],u=["applet","caption","html","table","td","th","marquee","object","template","foreignObject","desc","title"],d=u.concat(["button"]),l=["dd","dt","li","option","optgroup","p","rp","rt"],c={current:null,formTag:null,aTagInScope:null,buttonTagInScope:null,nobrTagInScope:null,pTagInButtonScope:null,listItemTagAutoclosing:null,dlItemTagAutoclosing:null},_=function(e,t,n){var o=r({},e||c),a={tag:t,instance:n};return u.indexOf(t)!==-1&&(o.aTagInScope=null,o.buttonTagInScope=null,o.nobrTagInScope=null),d.indexOf(t)!==-1&&(o.pTagInButtonScope=null),s.indexOf(t)!==-1&&"address"!==t&&"div"!==t&&"p"!==t&&(o.listItemTagAutoclosing=null,o.dlItemTagAutoclosing=null),o.current=a,"form"===t&&(o.formTag=a),"a"===t&&(o.aTagInScope=a),"button"===t&&(o.buttonTagInScope=a),"nobr"===t&&(o.nobrTagInScope=a),"p"===t&&(o.pTagInButtonScope=a),"li"===t&&(o.listItemTagAutoclosing=a),"dd"!==t&&"dt"!==t||(o.dlItemTagAutoclosing=a),o},m=function(e,t){switch(t){case"select":return"option"===e||"optgroup"===e||"#text"===e;case"optgroup":return"option"===e||"#text"===e;case"option":return"#text"===e;case"tr":return"th"===e||"td"===e||"style"===e||"script"===e||"template"===e;case"tbody":case"thead":case"tfoot":return"tr"===e||"style"===e||"script"===e||"template"===e;case"colgroup":return"col"===e||"template"===e;case"table":return"caption"===e||"colgroup"===e||"tbody"===e||"tfoot"===e||"thead"===e||"style"===e||"script"===e||"template"===e;case"head":return"base"===e||"basefont"===e||"bgsound"===e||"link"===e||"meta"===e||"title"===e||"noscript"===e||"noframes"===e||"style"===e||"script"===e||"template"===e;case"html":return"head"===e||"body"===e;case"#document":return"html"===e}switch(e){case"h1":case"h2":case"h3":case"h4":case"h5":case"h6":return"h1"!==t&&"h2"!==t&&"h3"!==t&&"h4"!==t&&"h5"!==t&&"h6"!==t;case"rp":case"rt":return l.indexOf(t)===-1;case"body":case"caption":case"col":case"colgroup":case"frame":case"head":case"html":case"tbody":case"td":case"tfoot":case"th":case"thead":case"tr":return null==t}return!0},p=function(e,t){switch(e){case"address":case"article":case"aside":case"blockquote":case"center":case"details":case"dialog":case"dir":case"div":case"dl":case"fieldset":case"figcaption":case"figure":case"footer":case"header":case"hgroup":case"main":case"menu":case"nav":case"ol":case"p":case"section":case"summary":case"ul":case"pre":case"listing":case"table":case"hr":case"xmp":case"h1":case"h2":case"h3":case"h4":case"h5":case"h6":return t.pTagInButtonScope;case"form":return t.formTag||t.pTagInButtonScope;case"li":return t.listItemTagAutoclosing;case"dd":case"dt":return t.dlItemTagAutoclosing;case"button":return t.buttonTagInScope;case"a":return t.aTagInScope;case"nobr":return t.nobrTagInScope}return null},h=function(e){if(!e)return[];var t=[];do t.push(e);while(e=e._currentElement._owner);return t.reverse(),t},f={};i=function(e,n,r,o){o=o||c;var i=o.current,s=i&&i.tag;null!=n&&("production"!==t.env.NODE_ENV?a(null==e,"validateDOMNesting: when childText is passed, childTag should be null"):void 0,e="#text");var u=m(e,s)?null:i,d=u?null:p(e,o),l=u||d;if(l){var _,y=l.tag,v=l.instance,M=r&&r._currentElement._owner,g=v&&v._currentElement._owner,L=h(M),D=h(g),Y=Math.min(L.length,D.length),k=-1;for(_=0;_<Y&&L[_]===D[_];_++)k=_;var b="(unknown)",T=L.slice(k+1).map(function(e){return e.getName()||b}),w=D.slice(k+1).map(function(e){return e.getName()||b}),E=[].concat(k!==-1?L[k].getName()||b:[],w,y,d?["..."]:[],T,e).join(" > "),N=!!u+"|"+e+"|"+y+"|"+E;if(f[N])return;f[N]=!0;var S=e,x="";if("#text"===e?/\S/.test(n)?S="Text nodes":(S="Whitespace text nodes",x=" Make sure you don't have any extra whitespace between tags on each line of your source code."):S="<"+e+">",u){var O="";"table"===y&&"tr"===e&&(O+=" Add a <tbody> to your code to match the DOM tree generated by the browser."),"production"!==t.env.NODE_ENV?a(!1,"validateDOMNesting(...): %s cannot appear as a child of <%s>.%s See %s.%s",S,y,x,E,O):void 0}else"production"!==t.env.NODE_ENV?a(!1,"validateDOMNesting(...): %s cannot appear as a descendant of <%s>. See %s.",S,y,E):void 0}},i.updatedAncestorInfo=_,i.isTagValidInContext=function(e,t){t=t||c;var n=t.current,r=n&&n.tag;return m(e,r)&&!p(e,t)}}e.exports=i}).call(t,n(2))},function(e,t){"use strict";function n(e,t){return e===t?0!==e||0!==t||1/e===1/t:e!==e&&t!==t}function r(e,t){if(n(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var r=Object.keys(e),a=Object.keys(t);if(r.length!==a.length)return!1;for(var i=0;i<r.length;i++)if(!o.call(t,r[i])||!n(e[r[i]],t[r[i]]))return!1;return!0}var o=Object.prototype.hasOwnProperty;e.exports=r},function(e,t){"use strict";e.exports=!("undefined"==typeof window||!window.document||!window.document.createElement)},function(e,t,n){(function(t){"use strict";function r(e,t,n){this.props=e,this.context=t,this.refs=s,this.updater=n||a}var o=n(19),a=n(53),i=n(55),s=n(58),u=n(20),d=n(13);if(r.prototype.isReactComponent={},r.prototype.setState=function(e,n){"object"!=typeof e&&"function"!=typeof e&&null!=e?"production"!==t.env.NODE_ENV?u(!1,"setState(...): takes an object of state variables to update or a function which returns an object of state variables."):o("85"):void 0,this.updater.enqueueSetState(this,e),n&&this.updater.enqueueCallback(this,n,"setState")},r.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this),e&&this.updater.enqueueCallback(this,e,"forceUpdate")},"production"!==t.env.NODE_ENV){var l={isMounted:["isMounted","Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],replaceState:["replaceState","Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]},c=function(e,n){i&&Object.defineProperty(r.prototype,e,{get:function(){"production"!==t.env.NODE_ENV?d(!1,"%s(...) is deprecated in plain JavaScript React classes. %s",n[0],n[1]):void 0}})};for(var _ in l)l.hasOwnProperty(_)&&c(_,l[_])}e.exports=r}).call(t,n(2))},function(e,t,n){(function(t){"use strict";function r(e,n){if("production"!==t.env.NODE_ENV){var r=e.constructor;"production"!==t.env.NODE_ENV?o(!1,"%s(...): Can only update a mounted or mounting component. This usually means you called %s() on an unmounted component. This is a no-op. Please check the code for the %s component.",n,n,r&&(r.displayName||r.name)||"ReactClass"):void 0}}var o=n(13),a={isMounted:function(e){return!1},enqueueCallback:function(e,t){},enqueueForceUpdate:function(e){r(e,"forceUpdate")},enqueueReplaceState:function(e,t){r(e,"replaceState")},enqueueSetState:function(e,t){r(e,"setState")}};e.exports=a}).call(t,n(2))},function(e,t,n){(function(t){"use strict";var n={};"production"!==t.env.NODE_ENV&&(n={prop:"prop",context:"context",childContext:"child context"}),e.exports=n}).call(t,n(2))},function(e,t,n){(function(t){"use strict";var n=!1;if("production"!==t.env.NODE_ENV)try{Object.defineProperty({},"x",{get:function(){}}),n=!0}catch(e){}e.exports=n}).call(t,n(2))},function(e,t){"use strict";function n(e){var t=e&&(r&&e[r]||e[o]);if("function"==typeof t)return t}var r="function"==typeof Symbol&&Symbol.iterator,o="@@iterator";e.exports=n},function(e,t){"use strict";function n(e){return function(){return e}}var r=function(){};r.thatReturns=n,r.thatReturnsFalse=n(!1),r.thatReturnsTrue=n(!0),r.thatReturnsNull=n(null),r.thatReturnsThis=function(){return this},r.thatReturnsArgument=function(e){return e},e.exports=r},function(e,t,n){(function(t){"use strict";var n={};"production"!==t.env.NODE_ENV&&Object.freeze(n),e.exports=n}).call(t,n(2))},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("af",{months:"Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des".split("_"),weekdays:"Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag".split("_"),weekdaysShort:"Son_Maa_Din_Woe_Don_Vry_Sat".split("_"),weekdaysMin:"So_Ma_Di_Wo_Do_Vr_Sa".split("_"),meridiemParse:/vm|nm/i,isPM:function(e){return/^nm$/i.test(e)},meridiem:function(e,t,n){return e<12?n?"vm":"VM":n?"nm":"NM"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Vandag om] LT",nextDay:"[Môre om] LT",nextWeek:"dddd [om] LT",lastDay:"[Gister om] LT",lastWeek:"[Laas] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oor %s",past:"%s gelede",s:"'n paar sekondes",m:"'n minuut",mm:"%d minute",h:"'n uur",hh:"%d ure",d:"'n dag",dd:"%d dae",M:"'n maand",MM:"%d maande",y:"'n jaar",yy:"%d jaar"},ordinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("ar-dz",{months:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"أح_إث_ثلا_أر_خم_جم_سب".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:0,doy:4}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t={1:"1",2:"2",3:"3",4:"4",5:"5",6:"6",7:"7",8:"8",9:"9",0:"0"},n=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},r={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},o=function(e){return function(t,o,a,i){var s=n(t),u=r[e][n(t)];return 2===s&&(u=u[o?0:1]),u.replace(/%d/i,t)}},a=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"],i=e.defineLocale("ar-ly",{months:a,monthsShort:a,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:o("s"),m:o("m"),mm:o("m"),h:o("h"),hh:o("h"),d:o("d"),dd:o("d"),M:o("M"),MM:o("M"),y:o("y"),yy:o("y")},preparse:function(e){return e.replace(/\u200f/g,"").replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]}).replace(/,/g,"،")},week:{dow:6,doy:12}});return i})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("ar-ma",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:6,doy:12}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},r=e.defineLocale("ar-sa",{months:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,function(e){return n[e]}).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]}).replace(/,/g,"،")},week:{dow:0,doy:6}});return r})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("ar-tn",{months:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:1,doy:4}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},r=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},o={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},a=function(e){return function(t,n,a,i){var s=r(t),u=o[e][r(t)];return 2===s&&(u=u[n?0:1]),u.replace(/%d/i,t)}},i=["كانون الثاني يناير","شباط فبراير","آذار مارس","نيسان أبريل","أيار مايو","حزيران يونيو","تموز يوليو","آب أغسطس","أيلول سبتمبر","تشرين الأول أكتوبر","تشرين الثاني نوفمبر","كانون الأول ديسمبر"],s=e.defineLocale("ar",{months:i,monthsShort:i,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:a("s"),m:a("m"),mm:a("m"),h:a("h"),hh:a("h"),d:a("d"),dd:a("d"),M:a("M"),MM:a("M"),y:a("y"),yy:a("y")},preparse:function(e){return e.replace(/\u200f/g,"").replace(/[١٢٣٤٥٦٧٨٩٠]/g,function(e){return n[e]}).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]}).replace(/,/g,"،")},week:{dow:6,doy:12}});return s})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t={1:"-inci",5:"-inci",8:"-inci",70:"-inci",80:"-inci",2:"-nci",7:"-nci",20:"-nci",50:"-nci",3:"-üncü",4:"-üncü",100:"-üncü",6:"-ncı",9:"-uncu",10:"-uncu",30:"-uncu",60:"-ıncı",90:"-ıncı"},n=e.defineLocale("az",{months:"yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr".split("_"),monthsShort:"yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek".split("_"),weekdays:"Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə".split("_"),weekdaysShort:"Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən".split("_"),weekdaysMin:"Bz_BE_ÇA_Çə_CA_Cü_Şə".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[sabah saat] LT",nextWeek:"[gələn həftə] dddd [saat] LT",lastDay:"[dünən] LT",lastWeek:"[keçən həftə] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s əvvəl",s:"birneçə saniyyə",m:"bir dəqiqə",mm:"%d dəqiqə",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir il",yy:"%d il"},meridiemParse:/gecə|səhər|gündüz|axşam/,isPM:function(e){return/^(gündüz|axşam)$/.test(e)},meridiem:function(e,t,n){return e<4?"gecə":e<12?"səhər":e<17?"gündüz":"axşam"},ordinalParse:/\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,ordinal:function(e){if(0===e)return e+"-ıncı";var n=e%10,r=e%100-n,o=e>=100?100:null;return e+(t[n]||t[r]||t[o])},week:{dow:1,doy:7}});return n})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";function t(e,t){var n=e.split("_");return t%10===1&&t%100!==11?n[0]:t%10>=2&&t%10<=4&&(t%100<10||t%100>=20)?n[1]:n[2]}function n(e,n,r){var o={mm:n?"хвіліна_хвіліны_хвілін":"хвіліну_хвіліны_хвілін",hh:n?"гадзіна_гадзіны_гадзін":"гадзіну_гадзіны_гадзін",dd:"дзень_дні_дзён",MM:"месяц_месяцы_месяцаў",yy:"год_гады_гадоў"};return"m"===r?n?"хвіліна":"хвіліну":"h"===r?n?"гадзіна":"гадзіну":e+" "+t(o[r],+e)}var r=e.defineLocale("be",{months:{format:"студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня".split("_"),standalone:"студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань".split("_")},monthsShort:"студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж".split("_"),weekdays:{format:"нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу".split("_"),standalone:"нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота".split("_"),isFormat:/\[ ?[Вв] ?(?:мінулую|наступную)? ?\] ?dddd/},weekdaysShort:"нд_пн_ат_ср_чц_пт_сб".split("_"),weekdaysMin:"нд_пн_ат_ср_чц_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., HH:mm",LLLL:"dddd, D MMMM YYYY г., HH:mm"},calendar:{sameDay:"[Сёння ў] LT",nextDay:"[Заўтра ў] LT",lastDay:"[Учора ў] LT",nextWeek:function(){return"[У] dddd [ў] LT"},lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return"[У мінулую] dddd [ў] LT";case 1:case 2:case 4:return"[У мінулы] dddd [ў] LT"}},sameElse:"L"},relativeTime:{future:"праз %s",past:"%s таму",s:"некалькі секунд",m:n,mm:n,h:n,hh:n,d:"дзень",dd:n,M:"месяц",MM:n,y:"год",yy:n},meridiemParse:/ночы|раніцы|дня|вечара/,isPM:function(e){return/^(дня|вечара)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночы":e<12?"раніцы":e<17?"дня":"вечара"},ordinalParse:/\d{1,2}-(і|ы|га)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e%10!==2&&e%10!==3||e%100===12||e%100===13?e+"-ы":e+"-і";case"D":return e+"-га";default:return e}},week:{dow:1,doy:7}});return r})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("bg",{months:"януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split("_"),monthsShort:"янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split("_"),weekdays:"неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split("_"),weekdaysShort:"нед_пон_вто_сря_чет_пет_съб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Днес в] LT",nextDay:"[Утре в] LT",nextWeek:"dddd [в] LT",lastDay:"[Вчера в] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[В изминалата] dddd [в] LT";case 1:case 2:case 4:case 5:return"[В изминалия] dddd [в] LT"}},sameElse:"L"},relativeTime:{future:"след %s",past:"преди %s",s:"няколко секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дни",M:"месец",MM:"%d месеца",y:"година",yy:"%d години"},ordinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,n=e%100;return 0===e?e+"-ев":0===n?e+"-ен":n>10&&n<20?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t={1:"১",2:"২",3:"৩",4:"৪",5:"৫",6:"৬",7:"৭",8:"৮",9:"৯",0:"০"},n={"১":"1","২":"2","৩":"3","৪":"4","৫":"5","৬":"6","৭":"7","৮":"8","৯":"9","০":"0"},r=e.defineLocale("bn",{months:"জানুয়ারী_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),monthsShort:"জানু_ফেব_মার্চ_এপ্র_মে_জুন_জুল_আগ_সেপ্ট_অক্টো_নভে_ডিসে".split("_"),weekdays:"রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"),weekdaysShort:"রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"),weekdaysMin:"রবি_সোম_মঙ্গ_বুধ_বৃহঃ_শুক্র_শনি".split("_"),longDateFormat:{LT:"A h:mm সময়",LTS:"A h:mm:ss সময়",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm সময়",LLLL:"dddd, D MMMM YYYY, A h:mm সময়"},calendar:{sameDay:"[আজ] LT",nextDay:"[আগামীকাল] LT",nextWeek:"dddd, LT",lastDay:"[গতকাল] LT",lastWeek:"[গত] dddd, LT",sameElse:"L"},relativeTime:{future:"%s পরে",past:"%s আগে",s:"কয়েক সেকেন্ড",m:"এক মিনিট",mm:"%d মিনিট",h:"এক ঘন্টা",hh:"%d ঘন্টা",d:"এক দিন",dd:"%d দিন",M:"এক মাস",MM:"%d মাস",y:"এক বছর",yy:"%d বছর"},preparse:function(e){return e.replace(/[১২৩৪৫৬৭৮৯০]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/রাত|সকাল|দুপুর|বিকাল|রাত/,meridiemHour:function(e,t){return 12===e&&(e=0),"রাত"===t&&e>=4||"দুপুর"===t&&e<5||"বিকাল"===t?e+12:e},meridiem:function(e,t,n){return e<4?"রাত":e<10?"সকাল":e<17?"দুপুর":e<20?"বিকাল":"রাত"},week:{dow:0,doy:6}});return r})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t={1:"༡",2:"༢",3:"༣",4:"༤",5:"༥",6:"༦",7:"༧",8:"༨",9:"༩",0:"༠"},n={"༡":"1","༢":"2","༣":"3","༤":"4","༥":"5","༦":"6","༧":"7","༨":"8","༩":"9","༠":"0"},r=e.defineLocale("bo",{months:"ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),monthsShort:"ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),weekdays:"གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་".split("_"),weekdaysShort:"ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),weekdaysMin:"ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[དི་རིང] LT",nextDay:"[སང་ཉིན] LT",nextWeek:"[བདུན་ཕྲག་རྗེས་མ], LT",lastDay:"[ཁ་སང] LT",lastWeek:"[བདུན་ཕྲག་མཐའ་མ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ལ་",past:"%s སྔན་ལ",s:"ལམ་སང",m:"སྐར་མ་གཅིག",mm:"%d སྐར་མ",h:"ཆུ་ཚོད་གཅིག",hh:"%d ཆུ་ཚོད",d:"ཉིན་གཅིག",dd:"%d ཉིན་",M:"ཟླ་བ་གཅིག",MM:"%d ཟླ་བ",y:"ལོ་གཅིག",yy:"%d ལོ"},preparse:function(e){return e.replace(/[༡༢༣༤༥༦༧༨༩༠]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,meridiemHour:function(e,t){return 12===e&&(e=0),"མཚན་མོ"===t&&e>=4||"ཉིན་གུང"===t&&e<5||"དགོང་དག"===t?e+12:e},meridiem:function(e,t,n){return e<4?"མཚན་མོ":e<10?"ཞོགས་ཀས":e<17?"ཉིན་གུང":e<20?"དགོང་དག":"མཚན་མོ"},week:{dow:0,doy:6}});return r})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";function t(e,t,n){var r={mm:"munutenn",MM:"miz",dd:"devezh"};return e+" "+o(r[n],e)}function n(e){switch(r(e)){case 1:case 3:case 4:case 5:case 9:return e+" bloaz";default:return e+" vloaz"}}function r(e){return e>9?r(e%10):e}function o(e,t){return 2===t?a(e):e}function a(e){var t={m:"v",b:"v",d:"z"};return void 0===t[e.charAt(0)]?e:t[e.charAt(0)]+e.substring(1)}var i=e.defineLocale("br",{months:"Genver_C'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split("_"),monthsShort:"Gen_C'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split("_"),weekdays:"Sul_Lun_Meurzh_Merc'her_Yaou_Gwener_Sadorn".split("_"),weekdaysShort:"Sul_Lun_Meu_Mer_Yao_Gwe_Sad".split("_"),weekdaysMin:"Su_Lu_Me_Mer_Ya_Gw_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h[e]mm A",LTS:"h[e]mm:ss A",L:"DD/MM/YYYY",LL:"D [a viz] MMMM YYYY",LLL:"D [a viz] MMMM YYYY h[e]mm A",LLLL:"dddd, D [a viz] MMMM YYYY h[e]mm A"},calendar:{sameDay:"[Hiziv da] LT",nextDay:"[Warc'hoazh da] LT",nextWeek:"dddd [da] LT",lastDay:"[Dec'h da] LT",lastWeek:"dddd [paset da] LT",sameElse:"L"},relativeTime:{future:"a-benn %s",past:"%s 'zo",s:"un nebeud segondennoù",m:"ur vunutenn",mm:t,h:"un eur",hh:"%d eur",d:"un devezh",dd:t,M:"ur miz",MM:t,y:"ur bloaz",yy:n},ordinalParse:/\d{1,2}(añ|vet)/,ordinal:function(e){var t=1===e?"añ":"vet";return e+t},week:{dow:1,doy:4}});return i})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";function t(e,t,n){var r=e+" ";switch(n){case"m":return t?"jedna minuta":"jedne minute";case"mm":return r+=1===e?"minuta":2===e||3===e||4===e?"minute":"minuta";case"h":return t?"jedan sat":"jednog sata";case"hh":return r+=1===e?"sat":2===e||3===e||4===e?"sata":"sati";case"dd":return r+=1===e?"dan":"dana";case"MM":return r+=1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci";case"yy":return r+=1===e?"godina":2===e||3===e||4===e?"godine":"godina"}}var n=e.defineLocale("bs",{months:"januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",m:t,mm:t,h:t,hh:t,d:"dan",dd:t,M:"mjesec",MM:t,y:"godinu",yy:t},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}});return n})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("ca",{months:"gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"),monthsShort:"gen._febr._mar._abr._mai._jun._jul._ag._set._oct._nov._des.".split("_"),monthsParseExact:!0,weekdays:"diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dt._dc._dj._dv._ds.".split("_"),weekdaysMin:"Dg_Dl_Dt_Dc_Dj_Dv_Ds".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd D MMMM YYYY H:mm"},calendar:{sameDay:function(){return"[avui a "+(1!==this.hours()?"les":"la")+"] LT"},nextDay:function(){return"[demà a "+(1!==this.hours()?"les":"la")+"] LT"},nextWeek:function(){return"dddd [a "+(1!==this.hours()?"les":"la")+"] LT"},lastDay:function(){return"[ahir a "+(1!==this.hours()?"les":"la")+"] LT"},lastWeek:function(){return"[el] dddd [passat a "+(1!==this.hours()?"les":"la")+"] LT"},sameElse:"L"},relativeTime:{future:"d'aquí %s",past:"fa %s",s:"uns segons",m:"un minut",mm:"%d minuts",h:"una hora",hh:"%d hores",d:"un dia",dd:"%d dies",M:"un mes",MM:"%d mesos",y:"un any",yy:"%d anys"},ordinalParse:/\d{1,2}(r|n|t|è|a)/,ordinal:function(e,t){var n=1===e?"r":2===e?"n":3===e?"r":4===e?"t":"è";return"w"!==t&&"W"!==t||(n="a"),e+n},week:{dow:1,doy:4}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";function t(e){return e>1&&e<5&&1!==~~(e/10)}function n(e,n,r,o){var a=e+" ";switch(r){case"s":return n||o?"pár sekund":"pár sekundami";case"m":return n?"minuta":o?"minutu":"minutou";case"mm":return n||o?a+(t(e)?"minuty":"minut"):a+"minutami";case"h":return n?"hodina":o?"hodinu":"hodinou";case"hh":return n||o?a+(t(e)?"hodiny":"hodin"):a+"hodinami";case"d":return n||o?"den":"dnem";
case"dd":return n||o?a+(t(e)?"dny":"dní"):a+"dny";case"M":return n||o?"měsíc":"měsícem";case"MM":return n||o?a+(t(e)?"měsíce":"měsíců"):a+"měsíci";case"y":return n||o?"rok":"rokem";case"yy":return n||o?a+(t(e)?"roky":"let"):a+"lety"}}var r="leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split("_"),o="led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split("_"),a=e.defineLocale("cs",{months:r,monthsShort:o,monthsParse:function(e,t){var n,r=[];for(n=0;n<12;n++)r[n]=new RegExp("^"+e[n]+"$|^"+t[n]+"$","i");return r}(r,o),shortMonthsParse:function(e){var t,n=[];for(t=0;t<12;t++)n[t]=new RegExp("^"+e[t]+"$","i");return n}(o),longMonthsParse:function(e){var t,n=[];for(t=0;t<12;t++)n[t]=new RegExp("^"+e[t]+"$","i");return n}(r),weekdays:"neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split("_"),weekdaysShort:"ne_po_út_st_čt_pá_so".split("_"),weekdaysMin:"ne_po_út_st_čt_pá_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm",l:"D. M. YYYY"},calendar:{sameDay:"[dnes v] LT",nextDay:"[zítra v] LT",nextWeek:function(){switch(this.day()){case 0:return"[v neděli v] LT";case 1:case 2:return"[v] dddd [v] LT";case 3:return"[ve středu v] LT";case 4:return"[ve čtvrtek v] LT";case 5:return"[v pátek v] LT";case 6:return"[v sobotu v] LT"}},lastDay:"[včera v] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulou neděli v] LT";case 1:case 2:return"[minulé] dddd [v] LT";case 3:return"[minulou středu v] LT";case 4:case 5:return"[minulý] dddd [v] LT";case 6:return"[minulou sobotu v] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"před %s",s:n,m:n,mm:n,h:n,hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});return a})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("cv",{months:"кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав".split("_"),monthsShort:"кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш".split("_"),weekdays:"вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун".split("_"),weekdaysShort:"выр_тун_ытл_юн_кӗҫ_эрн_шӑм".split("_"),weekdaysMin:"вр_тн_ыт_юн_кҫ_эр_шм".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]",LLL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm",LLLL:"dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm"},calendar:{sameDay:"[Паян] LT [сехетре]",nextDay:"[Ыран] LT [сехетре]",lastDay:"[Ӗнер] LT [сехетре]",nextWeek:"[Ҫитес] dddd LT [сехетре]",lastWeek:"[Иртнӗ] dddd LT [сехетре]",sameElse:"L"},relativeTime:{future:function(e){var t=/сехет$/i.exec(e)?"рен":/ҫул$/i.exec(e)?"тан":"ран";return e+t},past:"%s каялла",s:"пӗр-ик ҫеккунт",m:"пӗр минут",mm:"%d минут",h:"пӗр сехет",hh:"%d сехет",d:"пӗр кун",dd:"%d кун",M:"пӗр уйӑх",MM:"%d уйӑх",y:"пӗр ҫул",yy:"%d ҫул"},ordinalParse:/\d{1,2}-мӗш/,ordinal:"%d-мӗш",week:{dow:1,doy:7}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("cy",{months:"Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr".split("_"),monthsShort:"Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag".split("_"),weekdays:"Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn".split("_"),weekdaysShort:"Sul_Llun_Maw_Mer_Iau_Gwe_Sad".split("_"),weekdaysMin:"Su_Ll_Ma_Me_Ia_Gw_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Heddiw am] LT",nextDay:"[Yfory am] LT",nextWeek:"dddd [am] LT",lastDay:"[Ddoe am] LT",lastWeek:"dddd [diwethaf am] LT",sameElse:"L"},relativeTime:{future:"mewn %s",past:"%s yn ôl",s:"ychydig eiliadau",m:"munud",mm:"%d munud",h:"awr",hh:"%d awr",d:"diwrnod",dd:"%d diwrnod",M:"mis",MM:"%d mis",y:"blwyddyn",yy:"%d flynedd"},ordinalParse:/\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,ordinal:function(e){var t=e,n="",r=["","af","il","ydd","ydd","ed","ed","ed","fed","fed","fed","eg","fed","eg","eg","fed","eg","eg","fed","eg","fed"];return t>20?n=40===t||50===t||60===t||80===t||100===t?"fed":"ain":t>0&&(n=r[t]),e+n},week:{dow:1,doy:4}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("da",{months:"januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"søn_man_tir_ons_tor_fre_lør".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd [d.] D. MMMM YYYY HH:mm"},calendar:{sameDay:"[I dag kl.] LT",nextDay:"[I morgen kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[I går kl.] LT",lastWeek:"[sidste] dddd [kl] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"få sekunder",m:"et minut",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dage",M:"en måned",MM:"%d måneder",y:"et år",yy:"%d år"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";function t(e,t,n,r){var o={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?o[n][0]:o[n][1]}var n=e.defineLocale("de-at",{months:"Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jän._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,M:t,MM:t,y:t,yy:t},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});return n})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";function t(e,t,n,r){var o={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?o[n][0]:o[n][1]}var n=e.defineLocale("de",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,M:t,MM:t,y:t,yy:t},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});return n})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=["ޖެނުއަރީ","ފެބްރުއަރީ","މާރިޗު","އޭޕްރީލު","މޭ","ޖޫން","ޖުލައި","އޯގަސްޓު","ސެޕްޓެމްބަރު","އޮކްޓޯބަރު","ނޮވެމްބަރު","ޑިސެމްބަރު"],n=["އާދިއްތަ","ހޯމަ","އަންގާރަ","ބުދަ","ބުރާސްފަތި","ހުކުރު","ހޮނިހިރު"],r=e.defineLocale("dv",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:"އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/M/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/މކ|މފ/,isPM:function(e){return"މފ"===e},meridiem:function(e,t,n){return e<12?"މކ":"މފ"},calendar:{sameDay:"[މިއަދު] LT",nextDay:"[މާދަމާ] LT",nextWeek:"dddd LT",lastDay:"[އިއްޔެ] LT",lastWeek:"[ފާއިތުވި] dddd LT",sameElse:"L"},relativeTime:{future:"ތެރޭގައި %s",past:"ކުރިން %s",s:"ސިކުންތުކޮޅެއް",m:"މިނިޓެއް",mm:"މިނިޓު %d",h:"ގަޑިއިރެއް",hh:"ގަޑިއިރު %d",d:"ދުވަހެއް",dd:"ދުވަސް %d",M:"މަހެއް",MM:"މަސް %d",y:"އަހަރެއް",yy:"އަހަރު %d"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:7,doy:12}});return r})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";function t(e){return e instanceof Function||"[object Function]"===Object.prototype.toString.call(e)}var n=e.defineLocale("el",{monthsNominativeEl:"Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split("_"),monthsGenitiveEl:"Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split("_"),months:function(e,t){return/D/.test(t.substring(0,t.indexOf("MMMM")))?this._monthsGenitiveEl[e.month()]:this._monthsNominativeEl[e.month()]},monthsShort:"Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split("_"),weekdays:"Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split("_"),weekdaysShort:"Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"),weekdaysMin:"Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"),meridiem:function(e,t,n){return e>11?n?"μμ":"ΜΜ":n?"πμ":"ΠΜ"},isPM:function(e){return"μ"===(e+"").toLowerCase()[0]},meridiemParse:/[ΠΜ]\.?Μ?\.?/i,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendarEl:{sameDay:"[Σήμερα {}] LT",nextDay:"[Αύριο {}] LT",nextWeek:"dddd [{}] LT",lastDay:"[Χθες {}] LT",lastWeek:function(){switch(this.day()){case 6:return"[το προηγούμενο] dddd [{}] LT";default:return"[την προηγούμενη] dddd [{}] LT"}},sameElse:"L"},calendar:function(e,n){var r=this._calendarEl[e],o=n&&n.hours();return t(r)&&(r=r.apply(n)),r.replace("{}",o%12===1?"στη":"στις")},relativeTime:{future:"σε %s",past:"%s πριν",s:"λίγα δευτερόλεπτα",m:"ένα λεπτό",mm:"%d λεπτά",h:"μία ώρα",hh:"%d ώρες",d:"μία μέρα",dd:"%d μέρες",M:"ένας μήνας",MM:"%d μήνες",y:"ένας χρόνος",yy:"%d χρόνια"},ordinalParse:/\d{1,2}η/,ordinal:"%dη",week:{dow:1,doy:4}});return n})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("en-au",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,n=1===~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n},week:{dow:1,doy:4}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("en-ca",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"YYYY-MM-DD",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,n=1===~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("en-gb",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,n=1===~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n},week:{dow:1,doy:4}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("en-ie",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,n=1===~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n},week:{dow:1,doy:4}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("en-nz",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,n=1===~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n},week:{dow:1,doy:4}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("eo",{months:"januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec".split("_"),weekdays:"Dimanĉo_Lundo_Mardo_Merkredo_Ĵaŭdo_Vendredo_Sabato".split("_"),weekdaysShort:"Dim_Lun_Mard_Merk_Ĵaŭ_Ven_Sab".split("_"),weekdaysMin:"Di_Lu_Ma_Me_Ĵa_Ve_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D[-an de] MMMM, YYYY",LLL:"D[-an de] MMMM, YYYY HH:mm",LLLL:"dddd, [la] D[-an de] MMMM, YYYY HH:mm"},meridiemParse:/[ap]\.t\.m/i,isPM:function(e){return"p"===e.charAt(0).toLowerCase()},meridiem:function(e,t,n){return e>11?n?"p.t.m.":"P.T.M.":n?"a.t.m.":"A.T.M."},calendar:{sameDay:"[Hodiaŭ je] LT",nextDay:"[Morgaŭ je] LT",nextWeek:"dddd [je] LT",lastDay:"[Hieraŭ je] LT",lastWeek:"[pasinta] dddd [je] LT",sameElse:"L"},relativeTime:{future:"je %s",past:"antaŭ %s",s:"sekundoj",m:"minuto",mm:"%d minutoj",h:"horo",hh:"%d horoj",d:"tago",dd:"%d tagoj",M:"monato",MM:"%d monatoj",y:"jaro",yy:"%d jaroj"},ordinalParse:/\d{1,2}a/,ordinal:"%da",week:{dow:1,doy:7}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=e.defineLocale("es-do",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return/-MMM-/.test(r)?n[e.month()]:t[e.month()]},monthsParseExact:!0,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},ordinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}});return r})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=e.defineLocale("es",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return/-MMM-/.test(r)?n[e.month()]:t[e.month()]},monthsParseExact:!0,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},ordinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}});return r})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";function t(e,t,n,r){var o={s:["mõne sekundi","mõni sekund","paar sekundit"],m:["ühe minuti","üks minut"],mm:[e+" minuti",e+" minutit"],h:["ühe tunni","tund aega","üks tund"],hh:[e+" tunni",e+" tundi"],d:["ühe päeva","üks päev"],M:["kuu aja","kuu aega","üks kuu"],MM:[e+" kuu",e+" kuud"],y:["ühe aasta","aasta","üks aasta"],yy:[e+" aasta",e+" aastat"]};return t?o[n][2]?o[n][2]:o[n][1]:r?o[n][0]:o[n][1]}var n=e.defineLocale("et",{months:"jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember".split("_"),monthsShort:"jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets".split("_"),weekdays:"pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev".split("_"),weekdaysShort:"P_E_T_K_N_R_L".split("_"),weekdaysMin:"P_E_T_K_N_R_L".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[Täna,] LT",nextDay:"[Homme,] LT",nextWeek:"[Järgmine] dddd LT",lastDay:"[Eile,] LT",lastWeek:"[Eelmine] dddd LT",sameElse:"L"},relativeTime:{future:"%s pärast",past:"%s tagasi",s:t,m:t,mm:t,h:t,hh:t,d:t,dd:"%d päeva",M:t,MM:t,y:t,yy:t},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});return n})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("eu",{months:"urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split("_"),monthsShort:"urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split("_"),monthsParseExact:!0,weekdays:"igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split("_"),weekdaysShort:"ig._al._ar._az._og._ol._lr.".split("_"),weekdaysMin:"ig_al_ar_az_og_ol_lr".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY[ko] MMMM[ren] D[a]",LLL:"YYYY[ko] MMMM[ren] D[a] HH:mm",LLLL:"dddd, YYYY[ko] MMMM[ren] D[a] HH:mm",l:"YYYY-M-D",ll:"YYYY[ko] MMM D[a]",lll:"YYYY[ko] MMM D[a] HH:mm",llll:"ddd, YYYY[ko] MMM D[a] HH:mm"},calendar:{sameDay:"[gaur] LT[etan]",nextDay:"[bihar] LT[etan]",nextWeek:"dddd LT[etan]",lastDay:"[atzo] LT[etan]",lastWeek:"[aurreko] dddd LT[etan]",sameElse:"L"},relativeTime:{future:"%s barru",past:"duela %s",s:"segundo batzuk",m:"minutu bat",mm:"%d minutu",h:"ordu bat",hh:"%d ordu",d:"egun bat",dd:"%d egun",M:"hilabete bat",MM:"%d hilabete",y:"urte bat",yy:"%d urte"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t={1:"۱",2:"۲",3:"۳",4:"۴",5:"۵",6:"۶",7:"۷",8:"۸",9:"۹",0:"۰"},n={"۱":"1","۲":"2","۳":"3","۴":"4","۵":"5","۶":"6","۷":"7","۸":"8","۹":"9","۰":"0"},r=e.defineLocale("fa",{months:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),monthsShort:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),weekdays:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysShort:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysMin:"ی_د_س_چ_پ_ج_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/قبل از ظهر|بعد از ظهر/,isPM:function(e){return/بعد از ظهر/.test(e)},meridiem:function(e,t,n){return e<12?"قبل از ظهر":"بعد از ظهر"},calendar:{sameDay:"[امروز ساعت] LT",nextDay:"[فردا ساعت] LT",nextWeek:"dddd [ساعت] LT",lastDay:"[دیروز ساعت] LT",lastWeek:"dddd [پیش] [ساعت] LT",sameElse:"L"},relativeTime:{future:"در %s",past:"%s پیش",s:"چندین ثانیه",m:"یک دقیقه",mm:"%d دقیقه",h:"یک ساعت",hh:"%d ساعت",d:"یک روز",dd:"%d روز",M:"یک ماه",MM:"%d ماه",y:"یک سال",yy:"%d سال"},preparse:function(e){return e.replace(/[۰-۹]/g,function(e){return n[e]}).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]}).replace(/,/g,"،")},ordinalParse:/\d{1,2}م/,ordinal:"%dم",week:{dow:6,doy:12}});return r})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";function t(e,t,r,o){var a="";switch(r){case"s":return o?"muutaman sekunnin":"muutama sekunti";case"m":return o?"minuutin":"minuutti";case"mm":a=o?"minuutin":"minuuttia";break;case"h":return o?"tunnin":"tunti";case"hh":a=o?"tunnin":"tuntia";break;case"d":return o?"päivän":"päivä";case"dd":a=o?"päivän":"päivää";break;case"M":return o?"kuukauden":"kuukausi";case"MM":a=o?"kuukauden":"kuukautta";break;case"y":return o?"vuoden":"vuosi";case"yy":a=o?"vuoden":"vuotta"}return a=n(e,o)+" "+a}function n(e,t){return e<10?t?o[e]:r[e]:e}var r="nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän".split(" "),o=["nolla","yhden","kahden","kolmen","neljän","viiden","kuuden",r[7],r[8],r[9]],a=e.defineLocale("fi",{months:"tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"),monthsShort:"tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split("_"),weekdays:"sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"),weekdaysShort:"su_ma_ti_ke_to_pe_la".split("_"),weekdaysMin:"su_ma_ti_ke_to_pe_la".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"Do MMMM[ta] YYYY",LLL:"Do MMMM[ta] YYYY, [klo] HH.mm",LLLL:"dddd, Do MMMM[ta] YYYY, [klo] HH.mm",l:"D.M.YYYY",ll:"Do MMM YYYY",lll:"Do MMM YYYY, [klo] HH.mm",llll:"ddd, Do MMM YYYY, [klo] HH.mm"},calendar:{sameDay:"[tänään] [klo] LT",nextDay:"[huomenna] [klo] LT",nextWeek:"dddd [klo] LT",lastDay:"[eilen] [klo] LT",lastWeek:"[viime] dddd[na] [klo] LT",sameElse:"L"},relativeTime:{future:"%s päästä",past:"%s sitten",s:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});return a})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("fo",{months:"januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur".split("_"),weekdaysShort:"sun_mán_týs_mik_hós_frí_ley".split("_"),weekdaysMin:"su_má_tý_mi_hó_fr_le".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D. MMMM, YYYY HH:mm"},calendar:{sameDay:"[Í dag kl.] LT",nextDay:"[Í morgin kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[Í gjár kl.] LT",lastWeek:"[síðstu] dddd [kl] LT",sameElse:"L"},relativeTime:{future:"um %s",past:"%s síðani",s:"fá sekund",m:"ein minutt",mm:"%d minuttir",h:"ein tími",hh:"%d tímar",d:"ein dagur",dd:"%d dagar",M:"ein mánaði",MM:"%d mánaðir",y:"eitt ár",yy:"%d ár"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("fr-ca",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"Di_Lu_Ma_Me_Je_Ve_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd'hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},ordinalParse:/\d{1,2}(er|e)/,ordinal:function(e){return e+(1===e?"er":"e")}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("fr-ch",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"Di_Lu_Ma_Me_Je_Ve_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd'hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},ordinalParse:/\d{1,2}(er|e)/,ordinal:function(e){return e+(1===e?"er":"e")},week:{dow:1,doy:4}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("fr",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"Di_Lu_Ma_Me_Je_Ve_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd'hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},ordinalParse:/\d{1,2}(er|)/,ordinal:function(e){return e+(1===e?"er":"")},week:{dow:1,doy:4}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t="jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.".split("_"),n="jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),r=e.defineLocale("fy",{months:"jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber".split("_"),monthsShort:function(e,r){return/-MMM-/.test(r)?n[e.month()]:t[e.month()]},monthsParseExact:!0,weekdays:"snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon".split("_"),weekdaysShort:"si._mo._ti._wo._to._fr._so.".split("_"),weekdaysMin:"Si_Mo_Ti_Wo_To_Fr_So".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[hjoed om] LT",nextDay:"[moarn om] LT",nextWeek:"dddd [om] LT",lastDay:"[juster om] LT",lastWeek:"[ôfrûne] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oer %s",past:"%s lyn",s:"in pear sekonden",m:"ien minút",mm:"%d minuten",h:"ien oere",hh:"%d oeren",d:"ien dei",dd:"%d dagen",M:"ien moanne",MM:"%d moannen",y:"ien jier",yy:"%d jierren"},ordinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de");
},week:{dow:1,doy:4}});return r})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=["Am Faoilleach","An Gearran","Am Màrt","An Giblean","An Cèitean","An t-Ògmhios","An t-Iuchar","An Lùnastal","An t-Sultain","An Dàmhair","An t-Samhain","An Dùbhlachd"],n=["Faoi","Gear","Màrt","Gibl","Cèit","Ògmh","Iuch","Lùn","Sult","Dàmh","Samh","Dùbh"],r=["Didòmhnaich","Diluain","Dimàirt","Diciadain","Diardaoin","Dihaoine","Disathairne"],o=["Did","Dil","Dim","Dic","Dia","Dih","Dis"],a=["Dò","Lu","Mà","Ci","Ar","Ha","Sa"],i=e.defineLocale("gd",{months:t,monthsShort:n,monthsParseExact:!0,weekdays:r,weekdaysShort:o,weekdaysMin:a,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[An-diugh aig] LT",nextDay:"[A-màireach aig] LT",nextWeek:"dddd [aig] LT",lastDay:"[An-dè aig] LT",lastWeek:"dddd [seo chaidh] [aig] LT",sameElse:"L"},relativeTime:{future:"ann an %s",past:"bho chionn %s",s:"beagan diogan",m:"mionaid",mm:"%d mionaidean",h:"uair",hh:"%d uairean",d:"latha",dd:"%d latha",M:"mìos",MM:"%d mìosan",y:"bliadhna",yy:"%d bliadhna"},ordinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(e){var t=1===e?"d":e%10===2?"na":"mh";return e+t},week:{dow:1,doy:4}});return i})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("gl",{months:"xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro".split("_"),monthsShort:"xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"domingo_luns_martes_mércores_xoves_venres_sábado".split("_"),weekdaysShort:"dom._lun._mar._mér._xov._ven._sáb.".split("_"),weekdaysMin:"do_lu_ma_mé_xo_ve_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoxe "+(1!==this.hours()?"ás":"á")+"] LT"},nextDay:function(){return"[mañá "+(1!==this.hours()?"ás":"á")+"] LT"},nextWeek:function(){return"dddd ["+(1!==this.hours()?"ás":"a")+"] LT"},lastDay:function(){return"[onte "+(1!==this.hours()?"á":"a")+"] LT"},lastWeek:function(){return"[o] dddd [pasado "+(1!==this.hours()?"ás":"a")+"] LT"},sameElse:"L"},relativeTime:{future:function(e){return 0===e.indexOf("un")?"n"+e:"en "+e},past:"hai %s",s:"uns segundos",m:"un minuto",mm:"%d minutos",h:"unha hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un ano",yy:"%d anos"},ordinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("he",{months:"ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split("_"),monthsShort:"ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split("_"),weekdays:"ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"),weekdaysShort:"א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"),weekdaysMin:"א_ב_ג_ד_ה_ו_ש".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [ב]MMMM YYYY",LLL:"D [ב]MMMM YYYY HH:mm",LLLL:"dddd, D [ב]MMMM YYYY HH:mm",l:"D/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[היום ב־]LT",nextDay:"[מחר ב־]LT",nextWeek:"dddd [בשעה] LT",lastDay:"[אתמול ב־]LT",lastWeek:"[ביום] dddd [האחרון בשעה] LT",sameElse:"L"},relativeTime:{future:"בעוד %s",past:"לפני %s",s:"מספר שניות",m:"דקה",mm:"%d דקות",h:"שעה",hh:function(e){return 2===e?"שעתיים":e+" שעות"},d:"יום",dd:function(e){return 2===e?"יומיים":e+" ימים"},M:"חודש",MM:function(e){return 2===e?"חודשיים":e+" חודשים"},y:"שנה",yy:function(e){return 2===e?"שנתיים":e%10===0&&10!==e?e+" שנה":e+" שנים"}},meridiemParse:/אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,isPM:function(e){return/^(אחה"צ|אחרי הצהריים|בערב)$/.test(e)},meridiem:function(e,t,n){return e<5?"לפנות בוקר":e<10?"בבוקר":e<12?n?'לפנה"צ':"לפני הצהריים":e<18?n?'אחה"צ':"אחרי הצהריים":"בערב"}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"},r=e.defineLocale("hi",{months:"जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"),monthsShort:"जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"),monthsParseExact:!0,weekdays:"रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm बजे",LTS:"A h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm बजे",LLLL:"dddd, D MMMM YYYY, A h:mm बजे"},calendar:{sameDay:"[आज] LT",nextDay:"[कल] LT",nextWeek:"dddd, LT",lastDay:"[कल] LT",lastWeek:"[पिछले] dddd, LT",sameElse:"L"},relativeTime:{future:"%s में",past:"%s पहले",s:"कुछ ही क्षण",m:"एक मिनट",mm:"%d मिनट",h:"एक घंटा",hh:"%d घंटे",d:"एक दिन",dd:"%d दिन",M:"एक महीने",MM:"%d महीने",y:"एक वर्ष",yy:"%d वर्ष"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/रात|सुबह|दोपहर|शाम/,meridiemHour:function(e,t){return 12===e&&(e=0),"रात"===t?e<4?e:e+12:"सुबह"===t?e:"दोपहर"===t?e>=10?e:e+12:"शाम"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"रात":e<10?"सुबह":e<17?"दोपहर":e<20?"शाम":"रात"},week:{dow:0,doy:6}});return r})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";function t(e,t,n){var r=e+" ";switch(n){case"m":return t?"jedna minuta":"jedne minute";case"mm":return r+=1===e?"minuta":2===e||3===e||4===e?"minute":"minuta";case"h":return t?"jedan sat":"jednog sata";case"hh":return r+=1===e?"sat":2===e||3===e||4===e?"sata":"sati";case"dd":return r+=1===e?"dan":"dana";case"MM":return r+=1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci";case"yy":return r+=1===e?"godina":2===e||3===e||4===e?"godine":"godina"}}var n=e.defineLocale("hr",{months:{format:"siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca".split("_"),standalone:"siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_")},monthsShort:"sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",m:t,mm:t,h:t,hh:t,d:"dan",dd:t,M:"mjesec",MM:t,y:"godinu",yy:t},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}});return n})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";function t(e,t,n,r){var o=e;switch(n){case"s":return r||t?"néhány másodperc":"néhány másodperce";case"m":return"egy"+(r||t?" perc":" perce");case"mm":return o+(r||t?" perc":" perce");case"h":return"egy"+(r||t?" óra":" órája");case"hh":return o+(r||t?" óra":" órája");case"d":return"egy"+(r||t?" nap":" napja");case"dd":return o+(r||t?" nap":" napja");case"M":return"egy"+(r||t?" hónap":" hónapja");case"MM":return o+(r||t?" hónap":" hónapja");case"y":return"egy"+(r||t?" év":" éve");case"yy":return o+(r||t?" év":" éve")}return""}function n(e){return(e?"":"[múlt] ")+"["+r[this.day()]+"] LT[-kor]"}var r="vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton".split(" "),o=e.defineLocale("hu",{months:"január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split("_"),monthsShort:"jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec".split("_"),weekdays:"vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split("_"),weekdaysShort:"vas_hét_kedd_sze_csüt_pén_szo".split("_"),weekdaysMin:"v_h_k_sze_cs_p_szo".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY. MMMM D.",LLL:"YYYY. MMMM D. H:mm",LLLL:"YYYY. MMMM D., dddd H:mm"},meridiemParse:/de|du/i,isPM:function(e){return"u"===e.charAt(1).toLowerCase()},meridiem:function(e,t,n){return e<12?n===!0?"de":"DE":n===!0?"du":"DU"},calendar:{sameDay:"[ma] LT[-kor]",nextDay:"[holnap] LT[-kor]",nextWeek:function(){return n.call(this,!0)},lastDay:"[tegnap] LT[-kor]",lastWeek:function(){return n.call(this,!1)},sameElse:"L"},relativeTime:{future:"%s múlva",past:"%s",s:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});return o})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("hy-am",{months:{format:"հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի".split("_"),standalone:"հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր".split("_")},monthsShort:"հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ".split("_"),weekdays:"կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ".split("_"),weekdaysShort:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),weekdaysMin:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY թ.",LLL:"D MMMM YYYY թ., HH:mm",LLLL:"dddd, D MMMM YYYY թ., HH:mm"},calendar:{sameDay:"[այսօր] LT",nextDay:"[վաղը] LT",lastDay:"[երեկ] LT",nextWeek:function(){return"dddd [օրը ժամը] LT"},lastWeek:function(){return"[անցած] dddd [օրը ժամը] LT"},sameElse:"L"},relativeTime:{future:"%s հետո",past:"%s առաջ",s:"մի քանի վայրկյան",m:"րոպե",mm:"%d րոպե",h:"ժամ",hh:"%d ժամ",d:"օր",dd:"%d օր",M:"ամիս",MM:"%d ամիս",y:"տարի",yy:"%d տարի"},meridiemParse:/գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,isPM:function(e){return/^(ցերեկվա|երեկոյան)$/.test(e)},meridiem:function(e){return e<4?"գիշերվա":e<12?"առավոտվա":e<17?"ցերեկվա":"երեկոյան"},ordinalParse:/\d{1,2}|\d{1,2}-(ին|րդ)/,ordinal:function(e,t){switch(t){case"DDD":case"w":case"W":case"DDDo":return 1===e?e+"-ին":e+"-րդ";default:return e}},week:{dow:1,doy:7}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("id",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des".split("_"),weekdays:"Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"),weekdaysShort:"Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|siang|sore|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"siang"===t?e>=11?e:e+12:"sore"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"siang":e<19?"sore":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Besok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kemarin pukul] LT",lastWeek:"dddd [lalu pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lalu",s:"beberapa detik",m:"semenit",mm:"%d menit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";function t(e){return e%100===11||e%10!==1}function n(e,n,r,o){var a=e+" ";switch(r){case"s":return n||o?"nokkrar sekúndur":"nokkrum sekúndum";case"m":return n?"mínúta":"mínútu";case"mm":return t(e)?a+(n||o?"mínútur":"mínútum"):n?a+"mínúta":a+"mínútu";case"hh":return t(e)?a+(n||o?"klukkustundir":"klukkustundum"):a+"klukkustund";case"d":return n?"dagur":o?"dag":"degi";case"dd":return t(e)?n?a+"dagar":a+(o?"daga":"dögum"):n?a+"dagur":a+(o?"dag":"degi");case"M":return n?"mánuður":o?"mánuð":"mánuði";case"MM":return t(e)?n?a+"mánuðir":a+(o?"mánuði":"mánuðum"):n?a+"mánuður":a+(o?"mánuð":"mánuði");case"y":return n||o?"ár":"ári";case"yy":return t(e)?a+(n||o?"ár":"árum"):a+(n||o?"ár":"ári")}}var r=e.defineLocale("is",{months:"janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split("_"),monthsShort:"jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split("_"),weekdays:"sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split("_"),weekdaysShort:"sun_mán_þri_mið_fim_fös_lau".split("_"),weekdaysMin:"Su_Má_Þr_Mi_Fi_Fö_La".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd, D. MMMM YYYY [kl.] H:mm"},calendar:{sameDay:"[í dag kl.] LT",nextDay:"[á morgun kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[í gær kl.] LT",lastWeek:"[síðasta] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"eftir %s",past:"fyrir %s síðan",s:n,m:n,mm:n,h:"klukkustund",hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});return r})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("it",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"Domenica_Lunedì_Martedì_Mercoledì_Giovedì_Venerdì_Sabato".split("_"),weekdaysShort:"Dom_Lun_Mar_Mer_Gio_Ven_Sab".split("_"),weekdaysMin:"Do_Lu_Ma_Me_Gi_Ve_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Oggi alle] LT",nextDay:"[Domani alle] LT",nextWeek:"dddd [alle] LT",lastDay:"[Ieri alle] LT",lastWeek:function(){switch(this.day()){case 0:return"[la scorsa] dddd [alle] LT";default:return"[lo scorso] dddd [alle] LT"}},sameElse:"L"},relativeTime:{future:function(e){return(/^[0-9].+$/.test(e)?"tra":"in")+" "+e},past:"%s fa",s:"alcuni secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},ordinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("ja",{months:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"),weekdaysShort:"日_月_火_水_木_金_土".split("_"),weekdaysMin:"日_月_火_水_木_金_土".split("_"),longDateFormat:{LT:"Ah時m分",LTS:"Ah時m分s秒",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日Ah時m分",LLLL:"YYYY年M月D日Ah時m分 dddd"},meridiemParse:/午前|午後/i,isPM:function(e){return"午後"===e},meridiem:function(e,t,n){return e<12?"午前":"午後"},calendar:{sameDay:"[今日] LT",nextDay:"[明日] LT",nextWeek:"[来週]dddd LT",lastDay:"[昨日] LT",lastWeek:"[前週]dddd LT",sameElse:"L"},ordinalParse:/\d{1,2}日/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"数秒",m:"1分",mm:"%d分",h:"1時間",hh:"%d時間",d:"1日",dd:"%d日",M:"1ヶ月",MM:"%dヶ月",y:"1年",yy:"%d年"}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("jv",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des".split("_"),weekdays:"Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu".split("_"),weekdaysShort:"Min_Sen_Sel_Reb_Kem_Jem_Sep".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sp".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/enjing|siyang|sonten|ndalu/,meridiemHour:function(e,t){return 12===e&&(e=0),"enjing"===t?e:"siyang"===t?e>=11?e:e+12:"sonten"===t||"ndalu"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"enjing":e<15?"siyang":e<19?"sonten":"ndalu"},calendar:{sameDay:"[Dinten puniko pukul] LT",nextDay:"[Mbenjang pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kala wingi pukul] LT",lastWeek:"dddd [kepengker pukul] LT",sameElse:"L"},relativeTime:{future:"wonten ing %s",past:"%s ingkang kepengker",s:"sawetawis detik",m:"setunggal menit",mm:"%d menit",h:"setunggal jam",hh:"%d jam",d:"sedinten",dd:"%d dinten",M:"sewulan",MM:"%d wulan",y:"setaun",yy:"%d taun"},week:{dow:1,doy:7}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("ka",{months:{standalone:"იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი".split("_"),format:"იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს".split("_")},monthsShort:"იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ".split("_"),weekdays:{standalone:"კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი".split("_"),format:"კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს".split("_"),isFormat:/(წინა|შემდეგ)/},weekdaysShort:"კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ".split("_"),weekdaysMin:"კვ_ორ_სა_ოთ_ხუ_პა_შა".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[დღეს] LT[-ზე]",nextDay:"[ხვალ] LT[-ზე]",lastDay:"[გუშინ] LT[-ზე]",nextWeek:"[შემდეგ] dddd LT[-ზე]",lastWeek:"[წინა] dddd LT-ზე",sameElse:"L"},relativeTime:{future:function(e){return/(წამი|წუთი|საათი|წელი)/.test(e)?e.replace(/ი$/,"ში"):e+"ში"},past:function(e){return/(წამი|წუთი|საათი|დღე|თვე)/.test(e)?e.replace(/(ი|ე)$/,"ის წინ"):/წელი/.test(e)?e.replace(/წელი$/,"წლის წინ"):void 0},s:"რამდენიმე წამი",m:"წუთი",mm:"%d წუთი",h:"საათი",hh:"%d საათი",d:"დღე",dd:"%d დღე",M:"თვე",MM:"%d თვე",y:"წელი",yy:"%d წელი"},ordinalParse:/0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,ordinal:function(e){return 0===e?e:1===e?e+"-ლი":e<20||e<=100&&e%20===0||e%100===0?"მე-"+e:e+"-ე"},week:{dow:1,doy:7}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t={0:"-ші",1:"-ші",2:"-ші",3:"-ші",4:"-ші",5:"-ші",6:"-шы",7:"-ші",8:"-ші",9:"-шы",10:"-шы",20:"-шы",30:"-шы",40:"-шы",50:"-ші",60:"-шы",70:"-ші",80:"-ші",90:"-шы",100:"-ші"},n=e.defineLocale("kk",{months:"қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан".split("_"),monthsShort:"қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел".split("_"),weekdays:"жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі".split("_"),weekdaysShort:"жек_дүй_сей_сәр_бей_жұм_сен".split("_"),weekdaysMin:"жк_дй_сй_ср_бй_жм_сн".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгін сағат] LT",nextDay:"[Ертең сағат] LT",nextWeek:"dddd [сағат] LT",lastDay:"[Кеше сағат] LT",lastWeek:"[Өткен аптаның] dddd [сағат] LT",sameElse:"L"},relativeTime:{future:"%s ішінде",past:"%s бұрын",s:"бірнеше секунд",m:"бір минут",mm:"%d минут",h:"бір сағат",hh:"%d сағат",d:"бір күн",dd:"%d күн",M:"бір ай",MM:"%d ай",y:"бір жыл",yy:"%d жыл"},ordinalParse:/\d{1,2}-(ші|шы)/,ordinal:function(e){var n=e%10,r=e>=100?100:null;return e+(t[e]||t[n]||t[r])},week:{dow:1,doy:7}});return n})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("km",{months:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),monthsShort:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),weekdays:"អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),weekdaysShort:"អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),weekdaysMin:"អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[ថ្ងៃនេះ ម៉ោង] LT",nextDay:"[ស្អែក ម៉ោង] LT",nextWeek:"dddd [ម៉ោង] LT",lastDay:"[ម្សិលមិញ ម៉ោង] LT",lastWeek:"dddd [សប្តាហ៍មុន] [ម៉ោង] LT",sameElse:"L"},relativeTime:{future:"%sទៀត",past:"%sមុន",s:"ប៉ុន្មានវិនាទី",m:"មួយនាទី",mm:"%d នាទី",h:"មួយម៉ោង",hh:"%d ម៉ោង",d:"មួយថ្ងៃ",dd:"%d ថ្ងៃ",M:"មួយខែ",MM:"%d ខែ",y:"មួយឆ្នាំ",yy:"%d ឆ្នាំ"},week:{dow:1,doy:4}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("ko",{months:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),monthsShort:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),weekdays:"일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"),weekdaysShort:"일_월_화_수_목_금_토".split("_"),weekdaysMin:"일_월_화_수_목_금_토".split("_"),longDateFormat:{LT:"A h시 m분",LTS:"A h시 m분 s초",L:"YYYY.MM.DD",LL:"YYYY년 MMMM D일",LLL:"YYYY년 MMMM D일 A h시 m분",LLLL:"YYYY년 MMMM D일 dddd A h시 m분"},calendar:{sameDay:"오늘 LT",nextDay:"내일 LT",nextWeek:"dddd LT",lastDay:"어제 LT",lastWeek:"지난주 dddd LT",sameElse:"L"},relativeTime:{future:"%s 후",past:"%s 전",s:"몇 초",ss:"%d초",m:"일분",mm:"%d분",h:"한 시간",hh:"%d시간",d:"하루",dd:"%d일",M:"한 달",MM:"%d달",y:"일 년",yy:"%d년"},ordinalParse:/\d{1,2}일/,ordinal:"%d일",meridiemParse:/오전|오후/,isPM:function(e){return"오후"===e},meridiem:function(e,t,n){return e<12?"오전":"오후"}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t={0:"-чү",1:"-чи",2:"-чи",3:"-чү",4:"-чү",5:"-чи",6:"-чы",7:"-чи",8:"-чи",9:"-чу",10:"-чу",20:"-чы",30:"-чу",40:"-чы",50:"-чү",60:"-чы",70:"-чи",80:"-чи",90:"-чу",100:"-чү"},n=e.defineLocale("ky",{months:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"),monthsShort:"янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек".split("_"),weekdays:"Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби".split("_"),weekdaysShort:"Жек_Дүй_Шей_Шар_Бей_Жум_Ише".split("_"),weekdaysMin:"Жк_Дй_Шй_Шр_Бй_Жм_Иш".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгүн саат] LT",nextDay:"[Эртең саат] LT",nextWeek:"dddd [саат] LT",lastDay:"[Кече саат] LT",lastWeek:"[Өткен аптанын] dddd [күнү] [саат] LT",sameElse:"L"},relativeTime:{future:"%s ичинде",past:"%s мурун",s:"бирнече секунд",m:"бир мүнөт",mm:"%d мүнөт",h:"бир саат",hh:"%d саат",d:"бир күн",dd:"%d күн",M:"бир ай",MM:"%d ай",y:"бир жыл",yy:"%d жыл"},ordinalParse:/\d{1,2}-(чи|чы|чү|чу)/,ordinal:function(e){var n=e%10,r=e>=100?100:null;return e+(t[e]||t[n]||t[r])},week:{dow:1,doy:7}});return n})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";function t(e,t,n,r){var o={m:["eng Minutt","enger Minutt"],h:["eng Stonn","enger Stonn"],d:["een Dag","engem Dag"],M:["ee Mount","engem Mount"],y:["ee Joer","engem Joer"]};return t?o[n][0]:o[n][1]}function n(e){var t=e.substr(0,e.indexOf(" "));return o(t)?"a "+e:"an "+e}function r(e){var t=e.substr(0,e.indexOf(" "));return o(t)?"viru "+e:"virun "+e}function o(e){if(e=parseInt(e,10),isNaN(e))return!1;if(e<0)return!0;if(e<10)return 4<=e&&e<=7;if(e<100){var t=e%10,n=e/10;return o(0===t?n:t)}if(e<1e4){for(;e>=10;)e/=10;return o(e)}return e/=1e3,o(e)}var a=e.defineLocale("lb",{months:"Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg".split("_"),weekdaysShort:"So._Mé._Dë._Më._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mé_Dë_Më_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm [Auer]",LTS:"H:mm:ss [Auer]",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm [Auer]",LLLL:"dddd, D. MMMM YYYY H:mm [Auer]"},calendar:{sameDay:"[Haut um] LT",sameElse:"L",nextDay:"[Muer um] LT",nextWeek:"dddd [um] LT",lastDay:"[Gëschter um] LT",lastWeek:function(){switch(this.day()){case 2:case 4:return"[Leschten] dddd [um] LT";default:return"[Leschte] dddd [um] LT"}}},relativeTime:{future:n,past:r,s:"e puer Sekonnen",m:t,mm:"%d Minutten",h:t,hh:"%d Stonnen",d:t,dd:"%d Deeg",M:t,MM:"%d Méint",y:t,yy:"%d Joer"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});return a})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("lo",{months:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),monthsShort:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),weekdays:"ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysShort:"ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysMin:"ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"ວັນdddd D MMMM YYYY HH:mm"},meridiemParse:/ຕອນເຊົ້າ|ຕອນແລງ/,isPM:function(e){return"ຕອນແລງ"===e},meridiem:function(e,t,n){return e<12?"ຕອນເຊົ້າ":"ຕອນແລງ"},calendar:{sameDay:"[ມື້ນີ້ເວລາ] LT",nextDay:"[ມື້ອື່ນເວລາ] LT",nextWeek:"[ວັນ]dddd[ໜ້າເວລາ] LT",lastDay:"[ມື້ວານນີ້ເວລາ] LT",lastWeek:"[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT",sameElse:"L"},relativeTime:{future:"ອີກ %s",past:"%sຜ່ານມາ",s:"ບໍ່ເທົ່າໃດວິນາທີ",m:"1 ນາທີ",mm:"%d ນາທີ",h:"1 ຊົ່ວໂມງ",hh:"%d ຊົ່ວໂມງ",d:"1 ມື້",dd:"%d ມື້",M:"1 ເດືອນ",MM:"%d ເດືອນ",y:"1 ປີ",yy:"%d ປີ"},ordinalParse:/(ທີ່)\d{1,2}/,ordinal:function(e){return"ທີ່"+e}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";function t(e,t,n,r){return t?"kelios sekundės":r?"kelių sekundžių":"kelias sekundes"}function n(e,t,n,r){return t?o(n)[0]:r?o(n)[1]:o(n)[2]}function r(e){return e%10===0||e>10&&e<20}function o(e){return i[e].split("_")}function a(e,t,a,i){var s=e+" ";return 1===e?s+n(e,t,a[0],i):t?s+(r(e)?o(a)[1]:o(a)[0]):i?s+o(a)[1]:s+(r(e)?o(a)[1]:o(a)[2])}var i={m:"minutė_minutės_minutę",mm:"minutės_minučių_minutes",h:"valanda_valandos_valandą",hh:"valandos_valandų_valandas",d:"diena_dienos_dieną",dd:"dienos_dienų_dienas",M:"mėnuo_mėnesio_mėnesį",MM:"mėnesiai_mėnesių_mėnesius",y:"metai_metų_metus",yy:"metai_metų_metus"},s=e.defineLocale("lt",{months:{format:"sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio".split("_"),standalone:"sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis".split("_"),isFormat:/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/},monthsShort:"sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"),weekdays:{format:"sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį".split("_"),standalone:"sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis".split("_"),isFormat:/dddd HH:mm/},weekdaysShort:"Sek_Pir_Ant_Tre_Ket_Pen_Šeš".split("_"),weekdaysMin:"S_P_A_T_K_Pn_Š".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY [m.] MMMM D [d.]",LLL:"YYYY [m.] MMMM D [d.], HH:mm [val.]",LLLL:"YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]",l:"YYYY-MM-DD",ll:"YYYY [m.] MMMM D [d.]",lll:"YYYY [m.] MMMM D [d.], HH:mm [val.]",llll:"YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]"},calendar:{sameDay:"[Šiandien] LT",nextDay:"[Rytoj] LT",nextWeek:"dddd LT",lastDay:"[Vakar] LT",lastWeek:"[Praėjusį] dddd LT",sameElse:"L"},relativeTime:{future:"po %s",past:"prieš %s",s:t,m:n,mm:a,h:n,hh:a,d:n,dd:a,M:n,MM:a,y:n,yy:a},ordinalParse:/\d{1,2}-oji/,ordinal:function(e){return e+"-oji"},week:{dow:1,doy:4}});return s})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";function t(e,t,n){return n?t%10===1&&t%100!==11?e[2]:e[3]:t%10===1&&t%100!==11?e[0]:e[1]}function n(e,n,r){return e+" "+t(a[r],e,n)}function r(e,n,r){return t(a[r],e,n)}function o(e,t){return t?"dažas sekundes":"dažām sekundēm"}var a={m:"minūtes_minūtēm_minūte_minūtes".split("_"),mm:"minūtes_minūtēm_minūte_minūtes".split("_"),h:"stundas_stundām_stunda_stundas".split("_"),hh:"stundas_stundām_stunda_stundas".split("_"),d:"dienas_dienām_diena_dienas".split("_"),dd:"dienas_dienām_diena_dienas".split("_"),M:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),MM:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),y:"gada_gadiem_gads_gadi".split("_"),yy:"gada_gadiem_gads_gadi".split("_")},i=e.defineLocale("lv",{months:"janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split("_"),monthsShort:"jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split("_"),weekdays:"svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split("_"),weekdaysShort:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysMin:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY.",LL:"YYYY. [gada] D. MMMM",LLL:"YYYY. [gada] D. MMMM, HH:mm",LLLL:"YYYY. [gada] D. MMMM, dddd, HH:mm"},calendar:{sameDay:"[Šodien pulksten] LT",nextDay:"[Rīt pulksten] LT",nextWeek:"dddd [pulksten] LT",lastDay:"[Vakar pulksten] LT",lastWeek:"[Pagājušā] dddd [pulksten] LT",sameElse:"L"},relativeTime:{future:"pēc %s",past:"pirms %s",s:o,m:r,mm:n,h:r,hh:n,d:r,dd:n,M:r,MM:n,y:r,yy:n},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});return i})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t={words:{m:["jedan minut","jednog minuta"],mm:["minut","minuta","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mjesec","mjeseca","mjeseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,r){var o=t.words[r];return 1===r.length?n?o[0]:o[1]:e+" "+t.correctGrammaticalCase(e,o)}},n=e.defineLocale("me",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sjutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){var e=["[prošle] [nedjelje] [u] LT","[prošlog] [ponedjeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srijede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"];return e[this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"nekoliko sekundi",m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"dan",dd:t.translate,M:"mjesec",MM:t.translate,y:"godinu",yy:t.translate},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}});return n})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("mi",{months:"Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea".split("_"),monthsShort:"Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki".split("_"),monthsRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
monthsStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,weekdays:"Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei".split("_"),weekdaysShort:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),weekdaysMin:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [i] HH:mm",LLLL:"dddd, D MMMM YYYY [i] HH:mm"},calendar:{sameDay:"[i teie mahana, i] LT",nextDay:"[apopo i] LT",nextWeek:"dddd [i] LT",lastDay:"[inanahi i] LT",lastWeek:"dddd [whakamutunga i] LT",sameElse:"L"},relativeTime:{future:"i roto i %s",past:"%s i mua",s:"te hēkona ruarua",m:"he meneti",mm:"%d meneti",h:"te haora",hh:"%d haora",d:"he ra",dd:"%d ra",M:"he marama",MM:"%d marama",y:"he tau",yy:"%d tau"},ordinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("mk",{months:"јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември".split("_"),monthsShort:"јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек".split("_"),weekdays:"недела_понеделник_вторник_среда_четврток_петок_сабота".split("_"),weekdaysShort:"нед_пон_вто_сре_чет_пет_саб".split("_"),weekdaysMin:"нe_пo_вт_ср_че_пе_сa".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Денес во] LT",nextDay:"[Утре во] LT",nextWeek:"[Во] dddd [во] LT",lastDay:"[Вчера во] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[Изминатата] dddd [во] LT";case 1:case 2:case 4:case 5:return"[Изминатиот] dddd [во] LT"}},sameElse:"L"},relativeTime:{future:"после %s",past:"пред %s",s:"неколку секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дена",M:"месец",MM:"%d месеци",y:"година",yy:"%d години"},ordinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,n=e%100;return 0===e?e+"-ев":0===n?e+"-ен":n>10&&n<20?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("ml",{months:"ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ".split("_"),monthsShort:"ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.".split("_"),monthsParseExact:!0,weekdays:"ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച".split("_"),weekdaysShort:"ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി".split("_"),weekdaysMin:"ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ".split("_"),longDateFormat:{LT:"A h:mm -നു",LTS:"A h:mm:ss -നു",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm -നു",LLLL:"dddd, D MMMM YYYY, A h:mm -നു"},calendar:{sameDay:"[ഇന്ന്] LT",nextDay:"[നാളെ] LT",nextWeek:"dddd, LT",lastDay:"[ഇന്നലെ] LT",lastWeek:"[കഴിഞ്ഞ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s കഴിഞ്ഞ്",past:"%s മുൻപ്",s:"അൽപ നിമിഷങ്ങൾ",m:"ഒരു മിനിറ്റ്",mm:"%d മിനിറ്റ്",h:"ഒരു മണിക്കൂർ",hh:"%d മണിക്കൂർ",d:"ഒരു ദിവസം",dd:"%d ദിവസം",M:"ഒരു മാസം",MM:"%d മാസം",y:"ഒരു വർഷം",yy:"%d വർഷം"},meridiemParse:/രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,meridiemHour:function(e,t){return 12===e&&(e=0),"രാത്രി"===t&&e>=4||"ഉച്ച കഴിഞ്ഞ്"===t||"വൈകുന്നേരം"===t?e+12:e},meridiem:function(e,t,n){return e<4?"രാത്രി":e<12?"രാവിലെ":e<17?"ഉച്ച കഴിഞ്ഞ്":e<20?"വൈകുന്നേരം":"രാത്രി"}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";function t(e,t,n,r){var o="";if(t)switch(n){case"s":o="काही सेकंद";break;case"m":o="एक मिनिट";break;case"mm":o="%d मिनिटे";break;case"h":o="एक तास";break;case"hh":o="%d तास";break;case"d":o="एक दिवस";break;case"dd":o="%d दिवस";break;case"M":o="एक महिना";break;case"MM":o="%d महिने";break;case"y":o="एक वर्ष";break;case"yy":o="%d वर्षे"}else switch(n){case"s":o="काही सेकंदां";break;case"m":o="एका मिनिटा";break;case"mm":o="%d मिनिटां";break;case"h":o="एका तासा";break;case"hh":o="%d तासां";break;case"d":o="एका दिवसा";break;case"dd":o="%d दिवसां";break;case"M":o="एका महिन्या";break;case"MM":o="%d महिन्यां";break;case"y":o="एका वर्षा";break;case"yy":o="%d वर्षां"}return o.replace(/%d/i,e)}var n={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},r={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"},o=e.defineLocale("mr",{months:"जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),monthsShort:"जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),monthsParseExact:!0,weekdays:"रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm वाजता",LTS:"A h:mm:ss वाजता",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm वाजता",LLLL:"dddd, D MMMM YYYY, A h:mm वाजता"},calendar:{sameDay:"[आज] LT",nextDay:"[उद्या] LT",nextWeek:"dddd, LT",lastDay:"[काल] LT",lastWeek:"[मागील] dddd, LT",sameElse:"L"},relativeTime:{future:"%sमध्ये",past:"%sपूर्वी",s:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,function(e){return r[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return n[e]})},meridiemParse:/रात्री|सकाळी|दुपारी|सायंकाळी/,meridiemHour:function(e,t){return 12===e&&(e=0),"रात्री"===t?e<4?e:e+12:"सकाळी"===t?e:"दुपारी"===t?e>=10?e:e+12:"सायंकाळी"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"रात्री":e<10?"सकाळी":e<17?"दुपारी":e<20?"सायंकाळी":"रात्री"},week:{dow:0,doy:6}});return o})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("ms-my",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("ms",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t={1:"၁",2:"၂",3:"၃",4:"၄",5:"၅",6:"၆",7:"၇",8:"၈",9:"၉",0:"၀"},n={"၁":"1","၂":"2","၃":"3","၄":"4","၅":"5","၆":"6","၇":"7","၈":"8","၉":"9","၀":"0"},r=e.defineLocale("my",{months:"ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ".split("_"),monthsShort:"ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ".split("_"),weekdays:"တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ".split("_"),weekdaysShort:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),weekdaysMin:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ယနေ.] LT [မှာ]",nextDay:"[မနက်ဖြန်] LT [မှာ]",nextWeek:"dddd LT [မှာ]",lastDay:"[မနေ.က] LT [မှာ]",lastWeek:"[ပြီးခဲ့သော] dddd LT [မှာ]",sameElse:"L"},relativeTime:{future:"လာမည့် %s မှာ",past:"လွန်ခဲ့သော %s က",s:"စက္ကန်.အနည်းငယ်",m:"တစ်မိနစ်",mm:"%d မိနစ်",h:"တစ်နာရီ",hh:"%d နာရီ",d:"တစ်ရက်",dd:"%d ရက်",M:"တစ်လ",MM:"%d လ",y:"တစ်နှစ်",yy:"%d နှစ်"},preparse:function(e){return e.replace(/[၁၂၃၄၅၆၇၈၉၀]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},week:{dow:1,doy:4}});return r})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("nb",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.".split("_"),monthsParseExact:!0,weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"sø._ma._ti._on._to._fr._lø.".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] HH:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[forrige] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"noen sekunder",m:"ett minutt",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dager",M:"en måned",MM:"%d måneder",y:"ett år",yy:"%d år"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"},r=e.defineLocale("ne",{months:"जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर".split("_"),monthsShort:"जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.".split("_"),monthsParseExact:!0,weekdays:"आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार".split("_"),weekdaysShort:"आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.".split("_"),weekdaysMin:"आ._सो._मं._बु._बि._शु._श.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"Aको h:mm बजे",LTS:"Aको h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, Aको h:mm बजे",LLLL:"dddd, D MMMM YYYY, Aको h:mm बजे"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/राति|बिहान|दिउँसो|साँझ/,meridiemHour:function(e,t){return 12===e&&(e=0),"राति"===t?e<4?e:e+12:"बिहान"===t?e:"दिउँसो"===t?e>=10?e:e+12:"साँझ"===t?e+12:void 0},meridiem:function(e,t,n){return e<3?"राति":e<12?"बिहान":e<16?"दिउँसो":e<20?"साँझ":"राति"},calendar:{sameDay:"[आज] LT",nextDay:"[भोलि] LT",nextWeek:"[आउँदो] dddd[,] LT",lastDay:"[हिजो] LT",lastWeek:"[गएको] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%sमा",past:"%s अगाडि",s:"केही क्षण",m:"एक मिनेट",mm:"%d मिनेट",h:"एक घण्टा",hh:"%d घण्टा",d:"एक दिन",dd:"%d दिन",M:"एक महिना",MM:"%d महिना",y:"एक बर्ष",yy:"%d बर्ष"},week:{dow:0,doy:6}});return r})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),n="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),r=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],o=/^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,a=e.defineLocale("nl-be",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,r){return/-MMM-/.test(r)?n[e.month()]:t[e.month()]},monthsRegex:o,monthsShortRegex:o,monthsStrictRegex:/^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"Zo_Ma_Di_Wo_Do_Vr_Za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},ordinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}});return a})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),n="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),r=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],o=/^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,a=e.defineLocale("nl",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,r){return/-MMM-/.test(r)?n[e.month()]:t[e.month()]},monthsRegex:o,monthsShortRegex:o,monthsStrictRegex:/^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"Zo_Ma_Di_Wo_Do_Vr_Za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},ordinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}});return a})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("nn",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag".split("_"),weekdaysShort:"sun_mån_tys_ons_tor_fre_lau".split("_"),weekdaysMin:"su_må_ty_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[I dag klokka] LT",nextDay:"[I morgon klokka] LT",nextWeek:"dddd [klokka] LT",lastDay:"[I går klokka] LT",lastWeek:"[Føregåande] dddd [klokka] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s sidan",s:"nokre sekund",m:"eit minutt",mm:"%d minutt",h:"ein time",hh:"%d timar",d:"ein dag",dd:"%d dagar",M:"ein månad",MM:"%d månader",y:"eit år",yy:"%d år"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t={1:"੧",2:"੨",3:"੩",4:"੪",5:"੫",6:"੬",7:"੭",8:"੮",9:"੯",0:"੦"},n={"੧":"1","੨":"2","੩":"3","੪":"4","੫":"5","੬":"6","੭":"7","੮":"8","੯":"9","੦":"0"},r=e.defineLocale("pa-in",{months:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),monthsShort:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),weekdays:"ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ".split("_"),weekdaysShort:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),weekdaysMin:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),longDateFormat:{LT:"A h:mm ਵਜੇ",LTS:"A h:mm:ss ਵਜੇ",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm ਵਜੇ",LLLL:"dddd, D MMMM YYYY, A h:mm ਵਜੇ"},calendar:{sameDay:"[ਅਜ] LT",nextDay:"[ਕਲ] LT",nextWeek:"dddd, LT",lastDay:"[ਕਲ] LT",lastWeek:"[ਪਿਛਲੇ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ਵਿੱਚ",past:"%s ਪਿਛਲੇ",s:"ਕੁਝ ਸਕਿੰਟ",m:"ਇਕ ਮਿੰਟ",mm:"%d ਮਿੰਟ",h:"ਇੱਕ ਘੰਟਾ",hh:"%d ਘੰਟੇ",d:"ਇੱਕ ਦਿਨ",dd:"%d ਦਿਨ",M:"ਇੱਕ ਮਹੀਨਾ",MM:"%d ਮਹੀਨੇ",y:"ਇੱਕ ਸਾਲ",yy:"%d ਸਾਲ"},preparse:function(e){return e.replace(/[੧੨੩੪੫੬੭੮੯੦]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,meridiemHour:function(e,t){return 12===e&&(e=0),"ਰਾਤ"===t?e<4?e:e+12:"ਸਵੇਰ"===t?e:"ਦੁਪਹਿਰ"===t?e>=10?e:e+12:"ਸ਼ਾਮ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"ਰਾਤ":e<10?"ਸਵੇਰ":e<17?"ਦੁਪਹਿਰ":e<20?"ਸ਼ਾਮ":"ਰਾਤ"},week:{dow:0,doy:6}});return r})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";function t(e){return e%10<5&&e%10>1&&~~(e/10)%10!==1}function n(e,n,r){var o=e+" ";switch(r){case"m":return n?"minuta":"minutę";case"mm":return o+(t(e)?"minuty":"minut");case"h":return n?"godzina":"godzinę";case"hh":return o+(t(e)?"godziny":"godzin");case"MM":return o+(t(e)?"miesiące":"miesięcy");case"yy":return o+(t(e)?"lata":"lat")}}var r="styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split("_"),o="stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split("_"),a=e.defineLocale("pl",{months:function(e,t){return""===t?"("+o[e.month()]+"|"+r[e.month()]+")":/D MMMM/.test(t)?o[e.month()]:r[e.month()]},monthsShort:"sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split("_"),weekdays:"niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split("_"),weekdaysShort:"ndz_pon_wt_śr_czw_pt_sob".split("_"),weekdaysMin:"Nd_Pn_Wt_Śr_Cz_Pt_So".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Dziś o] LT",nextDay:"[Jutro o] LT",nextWeek:"[W] dddd [o] LT",lastDay:"[Wczoraj o] LT",lastWeek:function(){switch(this.day()){case 0:return"[W zeszłą niedzielę o] LT";case 3:return"[W zeszłą środę o] LT";case 6:return"[W zeszłą sobotę o] LT";default:return"[W zeszły] dddd [o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"%s temu",s:"kilka sekund",m:n,mm:n,h:n,hh:n,d:"1 dzień",dd:"%d dni",M:"miesiąc",MM:n,y:"rok",yy:n},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});return a})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("pt-br",{months:"Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Dom_2ª_3ª_4ª_5ª_6ª_Sáb".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY [às] HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY [às] HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"%s atrás",s:"poucos segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},ordinalParse:/\d{1,2}º/,ordinal:"%dº"});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("pt",{months:"Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingo_Segunda-Feira_Terça-Feira_Quarta-Feira_Quinta-Feira_Sexta-Feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Dom_2ª_3ª_4ª_5ª_6ª_Sáb".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},ordinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";function t(e,t,n){var r={mm:"minute",hh:"ore",dd:"zile",MM:"luni",yy:"ani"},o=" ";return(e%100>=20||e>=100&&e%100===0)&&(o=" de "),e+o+r[n]}var n=e.defineLocale("ro",{months:"ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"),monthsShort:"ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"duminică_luni_marți_miercuri_joi_vineri_sâmbătă".split("_"),weekdaysShort:"Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"),weekdaysMin:"Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[azi la] LT",nextDay:"[mâine la] LT",nextWeek:"dddd [la] LT",lastDay:"[ieri la] LT",lastWeek:"[fosta] dddd [la] LT",sameElse:"L"},relativeTime:{future:"peste %s",past:"%s în urmă",s:"câteva secunde",m:"un minut",mm:t,h:"o oră",hh:t,d:"o zi",dd:t,M:"o lună",MM:t,y:"un an",yy:t},week:{dow:1,doy:7}});return n})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";function t(e,t){var n=e.split("_");return t%10===1&&t%100!==11?n[0]:t%10>=2&&t%10<=4&&(t%100<10||t%100>=20)?n[1]:n[2]}function n(e,n,r){var o={mm:n?"минута_минуты_минут":"минуту_минуты_минут",hh:"час_часа_часов",dd:"день_дня_дней",MM:"месяц_месяца_месяцев",yy:"год_года_лет"};return"m"===r?n?"минута":"минуту":e+" "+t(o[r],+e)}var r=[/^янв/i,/^фев/i,/^мар/i,/^апр/i,/^ма[йя]/i,/^июн/i,/^июл/i,/^авг/i,/^сен/i,/^окт/i,/^ноя/i,/^дек/i],o=e.defineLocale("ru",{months:{format:"января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_"),standalone:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_")},monthsShort:{format:"янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.".split("_"),standalone:"янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.".split("_")},weekdays:{standalone:"воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"),format:"воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу".split("_"),isFormat:/\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/},weekdaysShort:"вс_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"вс_пн_вт_ср_чт_пт_сб".split("_"),monthsParse:r,longMonthsParse:r,shortMonthsParse:r,monthsRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsShortRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsStrictRegex:/^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,monthsShortStrictRegex:/^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., HH:mm",LLLL:"dddd, D MMMM YYYY г., HH:mm"},calendar:{sameDay:"[Сегодня в] LT",nextDay:"[Завтра в] LT",lastDay:"[Вчера в] LT",nextWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd [в] LT":"[В] dddd [в] LT";switch(this.day()){case 0:return"[В следующее] dddd [в] LT";case 1:case 2:case 4:return"[В следующий] dddd [в] LT";case 3:case 5:case 6:return"[В следующую] dddd [в] LT"}},lastWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd [в] LT":"[В] dddd [в] LT";switch(this.day()){case 0:return"[В прошлое] dddd [в] LT";case 1:case 2:case 4:return"[В прошлый] dddd [в] LT";case 3:case 5:case 6:return"[В прошлую] dddd [в] LT"}},sameElse:"L"},relativeTime:{future:"через %s",past:"%s назад",s:"несколько секунд",m:n,mm:n,h:"час",hh:n,d:"день",dd:n,M:"месяц",MM:n,y:"год",yy:n},meridiemParse:/ночи|утра|дня|вечера/i,isPM:function(e){return/^(дня|вечера)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночи":e<12?"утра":e<17?"дня":"вечера"},ordinalParse:/\d{1,2}-(й|го|я)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":return e+"-й";case"D":return e+"-го";case"w":case"W":return e+"-я";default:return e}},week:{dow:1,doy:7}});return o})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("se",{months:"ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu".split("_"),monthsShort:"ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov".split("_"),weekdays:"sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat".split("_"),weekdaysShort:"sotn_vuos_maŋ_gask_duor_bear_láv".split("_"),weekdaysMin:"s_v_m_g_d_b_L".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"MMMM D. [b.] YYYY",LLL:"MMMM D. [b.] YYYY [ti.] HH:mm",LLLL:"dddd, MMMM D. [b.] YYYY [ti.] HH:mm"},calendar:{sameDay:"[otne ti] LT",nextDay:"[ihttin ti] LT",nextWeek:"dddd [ti] LT",lastDay:"[ikte ti] LT",lastWeek:"[ovddit] dddd [ti] LT",sameElse:"L"},relativeTime:{future:"%s geažes",past:"maŋit %s",s:"moadde sekunddat",m:"okta minuhta",mm:"%d minuhtat",h:"okta diimmu",hh:"%d diimmut",d:"okta beaivi",dd:"%d beaivvit",M:"okta mánnu",MM:"%d mánut",y:"okta jahki",yy:"%d jagit"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("si",{months:"ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්".split("_"),monthsShort:"ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ".split("_"),weekdays:"ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා".split("_"),weekdaysShort:"ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන".split("_"),weekdaysMin:"ඉ_ස_අ_බ_බ්‍ර_සි_සෙ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"a h:mm",LTS:"a h:mm:ss",L:"YYYY/MM/DD",LL:"YYYY MMMM D",LLL:"YYYY MMMM D, a h:mm",LLLL:"YYYY MMMM D [වැනි] dddd, a h:mm:ss"},calendar:{sameDay:"[අද] LT[ට]",nextDay:"[හෙට] LT[ට]",nextWeek:"dddd LT[ට]",lastDay:"[ඊයේ] LT[ට]",lastWeek:"[පසුගිය] dddd LT[ට]",sameElse:"L"},relativeTime:{future:"%sකින්",past:"%sකට පෙර",s:"තත්පර කිහිපය",m:"මිනිත්තුව",mm:"මිනිත්තු %d",h:"පැය",hh:"පැය %d",d:"දිනය",dd:"දින %d",M:"මාසය",MM:"මාස %d",y:"වසර",yy:"වසර %d"},ordinalParse:/\d{1,2} වැනි/,ordinal:function(e){return e+" වැනි"},meridiemParse:/පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,isPM:function(e){return"ප.ව."===e||"පස් වරු"===e},meridiem:function(e,t,n){return e>11?n?"ප.ව.":"පස් වරු":n?"පෙ.ව.":"පෙර වරු"}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";function t(e){return e>1&&e<5}function n(e,n,r,o){var a=e+" ";switch(r){case"s":return n||o?"pár sekúnd":"pár sekundami";case"m":return n?"minúta":o?"minútu":"minútou";case"mm":return n||o?a+(t(e)?"minúty":"minút"):a+"minútami";case"h":return n?"hodina":o?"hodinu":"hodinou";case"hh":return n||o?a+(t(e)?"hodiny":"hodín"):a+"hodinami";case"d":return n||o?"deň":"dňom";case"dd":return n||o?a+(t(e)?"dni":"dní"):a+"dňami";case"M":return n||o?"mesiac":"mesiacom";case"MM":return n||o?a+(t(e)?"mesiace":"mesiacov"):a+"mesiacmi";case"y":return n||o?"rok":"rokom";case"yy":return n||o?a+(t(e)?"roky":"rokov"):a+"rokmi"}}var r="január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split("_"),o="jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split("_"),a=e.defineLocale("sk",{months:r,monthsShort:o,weekdays:"nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split("_"),weekdaysShort:"ne_po_ut_st_št_pi_so".split("_"),weekdaysMin:"ne_po_ut_st_št_pi_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm"},calendar:{sameDay:"[dnes o] LT",nextDay:"[zajtra o] LT",nextWeek:function(){switch(this.day()){case 0:return"[v nedeľu o] LT";case 1:case 2:return"[v] dddd [o] LT";case 3:return"[v stredu o] LT";case 4:return"[vo štvrtok o] LT";case 5:return"[v piatok o] LT";case 6:return"[v sobotu o] LT"}},lastDay:"[včera o] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulú nedeľu o] LT";case 1:case 2:return"[minulý] dddd [o] LT";case 3:return"[minulú stredu o] LT";case 4:case 5:return"[minulý] dddd [o] LT";case 6:return"[minulú sobotu o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"pred %s",s:n,m:n,mm:n,h:n,hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});return a})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";function t(e,t,n,r){var o=e+" ";switch(n){case"s":return t||r?"nekaj sekund":"nekaj sekundami";case"m":return t?"ena minuta":"eno minuto";case"mm":return o+=1===e?t?"minuta":"minuto":2===e?t||r?"minuti":"minutama":e<5?t||r?"minute":"minutami":t||r?"minut":"minutami";case"h":return t?"ena ura":"eno uro";case"hh":return o+=1===e?t?"ura":"uro":2===e?t||r?"uri":"urama":e<5?t||r?"ure":"urami":t||r?"ur":"urami";case"d":return t||r?"en dan":"enim dnem";case"dd":return o+=1===e?t||r?"dan":"dnem":2===e?t||r?"dni":"dnevoma":t||r?"dni":"dnevi";case"M":return t||r?"en mesec":"enim mesecem";case"MM":return o+=1===e?t||r?"mesec":"mesecem":2===e?t||r?"meseca":"mesecema":e<5?t||r?"mesece":"meseci":t||r?"mesecev":"meseci";case"y":return t||r?"eno leto":"enim letom";case"yy":return o+=1===e?t||r?"leto":"letom":2===e?t||r?"leti":"letoma":e<5?t||r?"leta":"leti":t||r?"let":"leti";
}}var n=e.defineLocale("sl",{months:"januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split("_"),weekdaysShort:"ned._pon._tor._sre._čet._pet._sob.".split("_"),weekdaysMin:"ne_po_to_sr_če_pe_so".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danes ob] LT",nextDay:"[jutri ob] LT",nextWeek:function(){switch(this.day()){case 0:return"[v] [nedeljo] [ob] LT";case 3:return"[v] [sredo] [ob] LT";case 6:return"[v] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[v] dddd [ob] LT"}},lastDay:"[včeraj ob] LT",lastWeek:function(){switch(this.day()){case 0:return"[prejšnjo] [nedeljo] [ob] LT";case 3:return"[prejšnjo] [sredo] [ob] LT";case 6:return"[prejšnjo] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[prejšnji] dddd [ob] LT"}},sameElse:"L"},relativeTime:{future:"čez %s",past:"pred %s",s:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}});return n})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("sq",{months:"Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor".split("_"),monthsShort:"Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj".split("_"),weekdays:"E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë".split("_"),weekdaysShort:"Die_Hën_Mar_Mër_Enj_Pre_Sht".split("_"),weekdaysMin:"D_H_Ma_Më_E_P_Sh".split("_"),weekdaysParseExact:!0,meridiemParse:/PD|MD/,isPM:function(e){return"M"===e.charAt(0)},meridiem:function(e,t,n){return e<12?"PD":"MD"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Sot në] LT",nextDay:"[Nesër në] LT",nextWeek:"dddd [në] LT",lastDay:"[Dje në] LT",lastWeek:"dddd [e kaluar në] LT",sameElse:"L"},relativeTime:{future:"në %s",past:"%s më parë",s:"disa sekonda",m:"një minutë",mm:"%d minuta",h:"një orë",hh:"%d orë",d:"një ditë",dd:"%d ditë",M:"një muaj",MM:"%d muaj",y:"një vit",yy:"%d vite"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t={words:{m:["један минут","једне минуте"],mm:["минут","минуте","минута"],h:["један сат","једног сата"],hh:["сат","сата","сати"],dd:["дан","дана","дана"],MM:["месец","месеца","месеци"],yy:["година","године","година"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,r){var o=t.words[r];return 1===r.length?n?o[0]:o[1]:e+" "+t.correctGrammaticalCase(e,o)}},n=e.defineLocale("sr-cyrl",{months:"јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар".split("_"),monthsShort:"јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.".split("_"),monthsParseExact:!0,weekdays:"недеља_понедељак_уторак_среда_четвртак_петак_субота".split("_"),weekdaysShort:"нед._пон._уто._сре._чет._пет._суб.".split("_"),weekdaysMin:"не_по_ут_ср_че_пе_су".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[данас у] LT",nextDay:"[сутра у] LT",nextWeek:function(){switch(this.day()){case 0:return"[у] [недељу] [у] LT";case 3:return"[у] [среду] [у] LT";case 6:return"[у] [суботу] [у] LT";case 1:case 2:case 4:case 5:return"[у] dddd [у] LT"}},lastDay:"[јуче у] LT",lastWeek:function(){var e=["[прошле] [недеље] [у] LT","[прошлог] [понедељка] [у] LT","[прошлог] [уторка] [у] LT","[прошле] [среде] [у] LT","[прошлог] [четвртка] [у] LT","[прошлог] [петка] [у] LT","[прошле] [суботе] [у] LT"];return e[this.day()]},sameElse:"L"},relativeTime:{future:"за %s",past:"пре %s",s:"неколико секунди",m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"дан",dd:t.translate,M:"месец",MM:t.translate,y:"годину",yy:t.translate},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}});return n})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t={words:{m:["jedan minut","jedne minute"],mm:["minut","minute","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mesec","meseca","meseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,r){var o=t.words[r];return 1===r.length?n?o[0]:o[1]:e+" "+t.correctGrammaticalCase(e,o)}},n=e.defineLocale("sr",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sre._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedelju] [u] LT";case 3:return"[u] [sredu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){var e=["[prošle] [nedelje] [u] LT","[prošlog] [ponedeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"];return e[this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"pre %s",s:"nekoliko sekundi",m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"dan",dd:t.translate,M:"mesec",MM:t.translate,y:"godinu",yy:t.translate},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}});return n})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("ss",{months:"Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split("_"),monthsShort:"Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo".split("_"),weekdays:"Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo".split("_"),weekdaysShort:"Lis_Umb_Lsb_Les_Lsi_Lsh_Umg".split("_"),weekdaysMin:"Li_Us_Lb_Lt_Ls_Lh_Ug".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Namuhla nga] LT",nextDay:"[Kusasa nga] LT",nextWeek:"dddd [nga] LT",lastDay:"[Itolo nga] LT",lastWeek:"dddd [leliphelile] [nga] LT",sameElse:"L"},relativeTime:{future:"nga %s",past:"wenteka nga %s",s:"emizuzwana lomcane",m:"umzuzu",mm:"%d emizuzu",h:"lihora",hh:"%d emahora",d:"lilanga",dd:"%d emalanga",M:"inyanga",MM:"%d tinyanga",y:"umnyaka",yy:"%d iminyaka"},meridiemParse:/ekuseni|emini|entsambama|ebusuku/,meridiem:function(e,t,n){return e<11?"ekuseni":e<15?"emini":e<19?"entsambama":"ebusuku"},meridiemHour:function(e,t){return 12===e&&(e=0),"ekuseni"===t?e:"emini"===t?e>=11?e:e+12:"entsambama"===t||"ebusuku"===t?0===e?0:e+12:void 0},ordinalParse:/\d{1,2}/,ordinal:"%d",week:{dow:1,doy:4}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("sv",{months:"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),weekdaysShort:"sön_mån_tis_ons_tor_fre_lör".split("_"),weekdaysMin:"sö_må_ti_on_to_fr_lö".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [kl.] HH:mm",LLLL:"dddd D MMMM YYYY [kl.] HH:mm",lll:"D MMM YYYY HH:mm",llll:"ddd D MMM YYYY HH:mm"},calendar:{sameDay:"[Idag] LT",nextDay:"[Imorgon] LT",lastDay:"[Igår] LT",nextWeek:"[På] dddd LT",lastWeek:"[I] dddd[s] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"för %s sedan",s:"några sekunder",m:"en minut",mm:"%d minuter",h:"en timme",hh:"%d timmar",d:"en dag",dd:"%d dagar",M:"en månad",MM:"%d månader",y:"ett år",yy:"%d år"},ordinalParse:/\d{1,2}(e|a)/,ordinal:function(e){var t=e%10,n=1===~~(e%100/10)?"e":1===t?"a":2===t?"a":"e";return e+n},week:{dow:1,doy:4}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("sw",{months:"Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des".split("_"),weekdays:"Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi".split("_"),weekdaysShort:"Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos".split("_"),weekdaysMin:"J2_J3_J4_J5_Al_Ij_J1".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[leo saa] LT",nextDay:"[kesho saa] LT",nextWeek:"[wiki ijayo] dddd [saat] LT",lastDay:"[jana] LT",lastWeek:"[wiki iliyopita] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s baadaye",past:"tokea %s",s:"hivi punde",m:"dakika moja",mm:"dakika %d",h:"saa limoja",hh:"masaa %d",d:"siku moja",dd:"masiku %d",M:"mwezi mmoja",MM:"miezi %d",y:"mwaka mmoja",yy:"miaka %d"},week:{dow:1,doy:7}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t={1:"௧",2:"௨",3:"௩",4:"௪",5:"௫",6:"௬",7:"௭",8:"௮",9:"௯",0:"௦"},n={"௧":"1","௨":"2","௩":"3","௪":"4","௫":"5","௬":"6","௭":"7","௮":"8","௯":"9","௦":"0"},r=e.defineLocale("ta",{months:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),monthsShort:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),weekdays:"ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை".split("_"),weekdaysShort:"ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி".split("_"),weekdaysMin:"ஞா_தி_செ_பு_வி_வெ_ச".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, HH:mm",LLLL:"dddd, D MMMM YYYY, HH:mm"},calendar:{sameDay:"[இன்று] LT",nextDay:"[நாளை] LT",nextWeek:"dddd, LT",lastDay:"[நேற்று] LT",lastWeek:"[கடந்த வாரம்] dddd, LT",sameElse:"L"},relativeTime:{future:"%s இல்",past:"%s முன்",s:"ஒரு சில விநாடிகள்",m:"ஒரு நிமிடம்",mm:"%d நிமிடங்கள்",h:"ஒரு மணி நேரம்",hh:"%d மணி நேரம்",d:"ஒரு நாள்",dd:"%d நாட்கள்",M:"ஒரு மாதம்",MM:"%d மாதங்கள்",y:"ஒரு வருடம்",yy:"%d ஆண்டுகள்"},ordinalParse:/\d{1,2}வது/,ordinal:function(e){return e+"வது"},preparse:function(e){return e.replace(/[௧௨௩௪௫௬௭௮௯௦]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,meridiem:function(e,t,n){return e<2?" யாமம்":e<6?" வைகறை":e<10?" காலை":e<14?" நண்பகல்":e<18?" எற்பாடு":e<22?" மாலை":" யாமம்"},meridiemHour:function(e,t){return 12===e&&(e=0),"யாமம்"===t?e<2?e:e+12:"வைகறை"===t||"காலை"===t?e:"நண்பகல்"===t&&e>=10?e:e+12},week:{dow:0,doy:6}});return r})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("te",{months:"జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జూలై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్".split("_"),monthsShort:"జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జూలై_ఆగ._సెప్._అక్టో._నవ._డిసె.".split("_"),monthsParseExact:!0,weekdays:"ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం".split("_"),weekdaysShort:"ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని".split("_"),weekdaysMin:"ఆ_సో_మం_బు_గు_శు_శ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[నేడు] LT",nextDay:"[రేపు] LT",nextWeek:"dddd, LT",lastDay:"[నిన్న] LT",lastWeek:"[గత] dddd, LT",sameElse:"L"},relativeTime:{future:"%s లో",past:"%s క్రితం",s:"కొన్ని క్షణాలు",m:"ఒక నిమిషం",mm:"%d నిమిషాలు",h:"ఒక గంట",hh:"%d గంటలు",d:"ఒక రోజు",dd:"%d రోజులు",M:"ఒక నెల",MM:"%d నెలలు",y:"ఒక సంవత్సరం",yy:"%d సంవత్సరాలు"},ordinalParse:/\d{1,2}వ/,ordinal:"%dవ",meridiemParse:/రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,meridiemHour:function(e,t){return 12===e&&(e=0),"రాత్రి"===t?e<4?e:e+12:"ఉదయం"===t?e:"మధ్యాహ్నం"===t?e>=10?e:e+12:"సాయంత్రం"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"రాత్రి":e<10?"ఉదయం":e<17?"మధ్యాహ్నం":e<20?"సాయంత్రం":"రాత్రి"},week:{dow:0,doy:6}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("tet",{months:"Janeiru_Fevereiru_Marsu_Abril_Maiu_Juniu_Juliu_Augustu_Setembru_Outubru_Novembru_Dezembru".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Aug_Set_Out_Nov_Dez".split("_"),weekdays:"Domingu_Segunda_Tersa_Kuarta_Kinta_Sexta_Sabadu".split("_"),weekdaysShort:"Dom_Seg_Ters_Kua_Kint_Sext_Sab".split("_"),weekdaysMin:"Do_Seg_Te_Ku_Ki_Sex_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Ohin iha] LT",nextDay:"[Aban iha] LT",nextWeek:"dddd [iha] LT",lastDay:"[Horiseik iha] LT",lastWeek:"dddd [semana kotuk] [iha] LT",sameElse:"L"},relativeTime:{future:"iha %s",past:"%s liuba",s:"minutu balun",m:"minutu ida",mm:"minutus %d",h:"horas ida",hh:"horas %d",d:"loron ida",dd:"loron %d",M:"fulan ida",MM:"fulan %d",y:"tinan ida",yy:"tinan %d"},ordinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,n=1===~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n},week:{dow:1,doy:4}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("th",{months:"มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split("_"),monthsShort:"ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.".split("_"),monthsParseExact:!0,weekdays:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split("_"),weekdaysShort:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split("_"),weekdaysMin:"อา._จ._อ._พ._พฤ._ศ._ส.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"YYYY/MM/DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY เวลา H:mm",LLLL:"วันddddที่ D MMMM YYYY เวลา H:mm"},meridiemParse:/ก่อนเที่ยง|หลังเที่ยง/,isPM:function(e){return"หลังเที่ยง"===e},meridiem:function(e,t,n){return e<12?"ก่อนเที่ยง":"หลังเที่ยง"},calendar:{sameDay:"[วันนี้ เวลา] LT",nextDay:"[พรุ่งนี้ เวลา] LT",nextWeek:"dddd[หน้า เวลา] LT",lastDay:"[เมื่อวานนี้ เวลา] LT",lastWeek:"[วัน]dddd[ที่แล้ว เวลา] LT",sameElse:"L"},relativeTime:{future:"อีก %s",past:"%sที่แล้ว",s:"ไม่กี่วินาที",m:"1 นาที",mm:"%d นาที",h:"1 ชั่วโมง",hh:"%d ชั่วโมง",d:"1 วัน",dd:"%d วัน",M:"1 เดือน",MM:"%d เดือน",y:"1 ปี",yy:"%d ปี"}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("tl-ph",{months:"Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),monthsShort:"Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),weekdays:"Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),weekdaysShort:"Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),weekdaysMin:"Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"MM/D/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY HH:mm",LLLL:"dddd, MMMM DD, YYYY HH:mm"},calendar:{sameDay:"LT [ngayong araw]",nextDay:"[Bukas ng] LT",nextWeek:"LT [sa susunod na] dddd",lastDay:"LT [kahapon]",lastWeek:"LT [noong nakaraang] dddd",sameElse:"L"},relativeTime:{future:"sa loob ng %s",past:"%s ang nakalipas",s:"ilang segundo",m:"isang minuto",mm:"%d minuto",h:"isang oras",hh:"%d oras",d:"isang araw",dd:"%d araw",M:"isang buwan",MM:"%d buwan",y:"isang taon",yy:"%d taon"},ordinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";function t(e){var t=e;return t=e.indexOf("jaj")!==-1?t.slice(0,-3)+"leS":e.indexOf("jar")!==-1?t.slice(0,-3)+"waQ":e.indexOf("DIS")!==-1?t.slice(0,-3)+"nem":t+" pIq"}function n(e){var t=e;return t=e.indexOf("jaj")!==-1?t.slice(0,-3)+"Hu’":e.indexOf("jar")!==-1?t.slice(0,-3)+"wen":e.indexOf("DIS")!==-1?t.slice(0,-3)+"ben":t+" ret"}function r(e,t,n,r){var a=o(e);switch(n){case"mm":return a+" tup";case"hh":return a+" rep";case"dd":return a+" jaj";case"MM":return a+" jar";case"yy":return a+" DIS"}}function o(e){var t=Math.floor(e%1e3/100),n=Math.floor(e%100/10),r=e%10,o="";return t>0&&(o+=a[t]+"vatlh"),n>0&&(o+=(""!==o?" ":"")+a[n]+"maH"),r>0&&(o+=(""!==o?" ":"")+a[r]),""===o?"pagh":o}var a="pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut".split("_"),i=e.defineLocale("tlh",{months:"tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’".split("_"),monthsShort:"jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’".split("_"),monthsParseExact:!0,weekdays:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysShort:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysMin:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[DaHjaj] LT",nextDay:"[wa’leS] LT",nextWeek:"LLL",lastDay:"[wa’Hu’] LT",lastWeek:"LLL",sameElse:"L"},relativeTime:{future:t,past:n,s:"puS lup",m:"wa’ tup",mm:r,h:"wa’ rep",hh:r,d:"wa’ jaj",dd:r,M:"wa’ jar",MM:r,y:"wa’ DIS",yy:r},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});return i})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t={1:"'inci",5:"'inci",8:"'inci",70:"'inci",80:"'inci",2:"'nci",7:"'nci",20:"'nci",50:"'nci",3:"'üncü",4:"'üncü",100:"'üncü",6:"'ncı",9:"'uncu",10:"'uncu",30:"'uncu",60:"'ıncı",90:"'ıncı"},n=e.defineLocale("tr",{months:"Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"),monthsShort:"Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"),weekdays:"Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"),weekdaysShort:"Paz_Pts_Sal_Çar_Per_Cum_Cts".split("_"),weekdaysMin:"Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[yarın saat] LT",nextWeek:"[haftaya] dddd [saat] LT",lastDay:"[dün] LT",lastWeek:"[geçen hafta] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s önce",s:"birkaç saniye",m:"bir dakika",mm:"%d dakika",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir yıl",yy:"%d yıl"},ordinalParse:/\d{1,2}'(inci|nci|üncü|ncı|uncu|ıncı)/,ordinal:function(e){if(0===e)return e+"'ıncı";var n=e%10,r=e%100-n,o=e>=100?100:null;return e+(t[n]||t[r]||t[o])},week:{dow:1,doy:7}});return n})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";function t(e,t,n,r){var o={s:["viensas secunds","'iensas secunds"],m:["'n míut","'iens míut"],mm:[e+" míuts",""+e+" míuts"],h:["'n þora","'iensa þora"],hh:[e+" þoras",""+e+" þoras"],d:["'n ziua","'iensa ziua"],dd:[e+" ziuas",""+e+" ziuas"],M:["'n mes","'iens mes"],MM:[e+" mesen",""+e+" mesen"],y:["'n ar","'iens ar"],yy:[e+" ars",""+e+" ars"]};return r?o[n][0]:t?o[n][0]:o[n][1]}var n=e.defineLocale("tzl",{months:"Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar".split("_"),monthsShort:"Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec".split("_"),weekdays:"Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi".split("_"),weekdaysShort:"Súl_Lún_Mai_Már_Xhú_Vié_Sát".split("_"),weekdaysMin:"Sú_Lú_Ma_Má_Xh_Vi_Sá".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"D. MMMM [dallas] YYYY",LLL:"D. MMMM [dallas] YYYY HH.mm",LLLL:"dddd, [li] D. MMMM [dallas] YYYY HH.mm"},meridiemParse:/d\'o|d\'a/i,isPM:function(e){return"d'o"===e.toLowerCase()},meridiem:function(e,t,n){return e>11?n?"d'o":"D'O":n?"d'a":"D'A"},calendar:{sameDay:"[oxhi à] LT",nextDay:"[demà à] LT",nextWeek:"dddd [à] LT",lastDay:"[ieiri à] LT",lastWeek:"[sür el] dddd [lasteu à] LT",sameElse:"L"},relativeTime:{future:"osprei %s",past:"ja%s",s:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});return n})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("tzm-latn",{months:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),monthsShort:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),weekdays:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysShort:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysMin:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[asdkh g] LT",nextDay:"[aska g] LT",nextWeek:"dddd [g] LT",lastDay:"[assant g] LT",lastWeek:"dddd [g] LT",sameElse:"L"},relativeTime:{future:"dadkh s yan %s",past:"yan %s",s:"imik",m:"minuḍ",mm:"%d minuḍ",h:"saɛa",hh:"%d tassaɛin",d:"ass",dd:"%d ossan",M:"ayowr",MM:"%d iyyirn",y:"asgas",yy:"%d isgasn"},week:{dow:6,doy:12}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("tzm",{months:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),monthsShort:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),weekdays:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysShort:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysMin:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ⴰⵙⴷⵅ ⴴ] LT",nextDay:"[ⴰⵙⴽⴰ ⴴ] LT",nextWeek:"dddd [ⴴ] LT",lastDay:"[ⴰⵚⴰⵏⵜ ⴴ] LT",lastWeek:"dddd [ⴴ] LT",sameElse:"L"},relativeTime:{future:"ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s",past:"ⵢⴰⵏ %s",s:"ⵉⵎⵉⴽ",m:"ⵎⵉⵏⵓⴺ",mm:"%d ⵎⵉⵏⵓⴺ",h:"ⵙⴰⵄⴰ",hh:"%d ⵜⴰⵙⵙⴰⵄⵉⵏ",d:"ⴰⵙⵙ",dd:"%d oⵙⵙⴰⵏ",M:"ⴰⵢoⵓⵔ",MM:"%d ⵉⵢⵢⵉⵔⵏ",y:"ⴰⵙⴳⴰⵙ",yy:"%d ⵉⵙⴳⴰⵙⵏ"},week:{dow:6,doy:12}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";function t(e,t){var n=e.split("_");return t%10===1&&t%100!==11?n[0]:t%10>=2&&t%10<=4&&(t%100<10||t%100>=20)?n[1]:n[2]}function n(e,n,r){var o={mm:n?"хвилина_хвилини_хвилин":"хвилину_хвилини_хвилин",hh:n?"година_години_годин":"годину_години_годин",dd:"день_дні_днів",MM:"місяць_місяці_місяців",yy:"рік_роки_років"};return"m"===r?n?"хвилина":"хвилину":"h"===r?n?"година":"годину":e+" "+t(o[r],+e)}function r(e,t){var n={nominative:"неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота".split("_"),accusative:"неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу".split("_"),genitive:"неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи".split("_")},r=/(\[[ВвУу]\]) ?dddd/.test(t)?"accusative":/\[?(?:минулої|наступної)? ?\] ?dddd/.test(t)?"genitive":"nominative";return n[r][e.day()]}function o(e){return function(){return e+"о"+(11===this.hours()?"б":"")+"] LT"}}var a=e.defineLocale("uk",{months:{format:"січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня".split("_"),standalone:"січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень".split("_")},monthsShort:"січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"),weekdays:r,weekdaysShort:"нд_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY р.",LLL:"D MMMM YYYY р., HH:mm",LLLL:"dddd, D MMMM YYYY р., HH:mm"},calendar:{sameDay:o("[Сьогодні "),nextDay:o("[Завтра "),lastDay:o("[Вчора "),nextWeek:o("[У] dddd ["),lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return o("[Минулої] dddd [").call(this);case 1:case 2:case 4:return o("[Минулого] dddd [").call(this)}},sameElse:"L"},relativeTime:{future:"за %s",past:"%s тому",s:"декілька секунд",m:n,mm:n,h:"годину",hh:n,d:"день",dd:n,M:"місяць",MM:n,y:"рік",yy:n},meridiemParse:/ночі|ранку|дня|вечора/,isPM:function(e){return/^(дня|вечора)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночі":e<12?"ранку":e<17?"дня":"вечора"},ordinalParse:/\d{1,2}-(й|го)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e+"-й";case"D":return e+"-го";default:return e}},week:{dow:1,doy:7}});return a})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("uz",{months:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_"),monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба".split("_"),weekdaysShort:"Якш_Душ_Сеш_Чор_Пай_Жум_Шан".split("_"),weekdaysMin:"Як_Ду_Се_Чо_Па_Жу_Ша".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Бугун соат] LT [да]",nextDay:"[Эртага] LT [да]",nextWeek:"dddd [куни соат] LT [да]",lastDay:"[Кеча соат] LT [да]",lastWeek:"[Утган] dddd [куни соат] LT [да]",sameElse:"L"},relativeTime:{future:"Якин %s ичида",past:"Бир неча %s олдин",s:"фурсат",m:"бир дакика",mm:"%d дакика",h:"бир соат",hh:"%d соат",d:"бир кун",dd:"%d кун",M:"бир ой",MM:"%d ой",y:"бир йил",yy:"%d йил"},week:{dow:1,doy:7}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("vi",{months:"tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"),monthsShort:"Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12".split("_"),monthsParseExact:!0,weekdays:"chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"),weekdaysShort:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysMin:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysParseExact:!0,meridiemParse:/sa|ch/i,isPM:function(e){return/^ch$/i.test(e)},meridiem:function(e,t,n){return e<12?n?"sa":"SA":n?"ch":"CH"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [năm] YYYY",LLL:"D MMMM [năm] YYYY HH:mm",LLLL:"dddd, D MMMM [năm] YYYY HH:mm",l:"DD/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[Hôm nay lúc] LT",nextDay:"[Ngày mai lúc] LT",nextWeek:"dddd [tuần tới lúc] LT",lastDay:"[Hôm qua lúc] LT",lastWeek:"dddd [tuần rồi lúc] LT",sameElse:"L"},relativeTime:{future:"%s tới",past:"%s trước",s:"vài giây",m:"một phút",mm:"%d phút",h:"một giờ",hh:"%d giờ",d:"một ngày",dd:"%d ngày",M:"một tháng",MM:"%d tháng",y:"một năm",yy:"%d năm"},ordinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("x-pseudo",{months:"J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér".split("_"),monthsShort:"J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc".split("_"),monthsParseExact:!0,weekdays:"S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý".split("_"),weekdaysShort:"S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát".split("_"),weekdaysMin:"S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[T~ódá~ý át] LT",nextDay:"[T~ómó~rró~w át] LT",nextWeek:"dddd [át] LT",lastDay:"[Ý~ést~érdá~ý át] LT",lastWeek:"[L~ást] dddd [át] LT",sameElse:"L"},relativeTime:{future:"í~ñ %s",past:"%s á~gó",s:"á ~féw ~sécó~ñds",m:"á ~míñ~úté",mm:"%d m~íñú~tés",h:"á~ñ hó~úr",hh:"%d h~óúrs",d:"á ~dáý",dd:"%d d~áýs",M:"á ~móñ~th",MM:"%d m~óñt~hs",y:"á ~ýéár",yy:"%d ý~éárs"},ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10,n=1===~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n},week:{dow:1,doy:4}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("yo",{months:"Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀".split("_"),monthsShort:"Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀".split("_"),weekdays:"Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta".split("_"),weekdaysShort:"Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá".split("_"),weekdaysMin:"Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Ònì ni] LT",nextDay:"[Ọ̀la ni] LT",nextWeek:"dddd [Ọsẹ̀ tón'bọ] [ni] LT",lastDay:"[Àna ni] LT",lastWeek:"dddd [Ọsẹ̀ tólọ́] [ni] LT",sameElse:"L"},relativeTime:{future:"ní %s",past:"%s kọjá",s:"ìsẹjú aayá die",m:"ìsẹjú kan",mm:"ìsẹjú %d",h:"wákati kan",hh:"wákati %d",d:"ọjọ́ kan",dd:"ọjọ́ %d",M:"osù kan",MM:"osù %d",y:"ọdún kan",yy:"ọdún %d"},ordinalParse:/ọjọ́\s\d{1,2}/,ordinal:"ọjọ́ %d",week:{dow:1,doy:4}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("zh-cn",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"周日_周一_周二_周三_周四_周五_周六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"Ah点mm分",LTS:"Ah点m分s秒",L:"YYYY-MM-DD",LL:"YYYY年MMMD日",LLL:"YYYY年MMMD日Ah点mm分",LLLL:"YYYY年MMMD日ddddAh点mm分",l:"YYYY-MM-DD",ll:"YYYY年MMMD日",lll:"YYYY年MMMD日Ah点mm分",llll:"YYYY年MMMD日ddddAh点mm分"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"下午"===t||"晚上"===t?e+12:e>=11?e:e+12},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:function(){return 0===this.minutes()?"[今天]Ah[点整]":"[今天]LT"},nextDay:function(){return 0===this.minutes()?"[明天]Ah[点整]":"[明天]LT"},lastDay:function(){return 0===this.minutes()?"[昨天]Ah[点整]":"[昨天]LT"},nextWeek:function(){var t,n;return t=e().startOf("week"),n=this.diff(t,"days")>=7?"[下]":"[本]",0===this.minutes()?n+"dddAh点整":n+"dddAh点mm"},lastWeek:function(){var t,n;return t=e().startOf("week"),n=this.unix()<t.unix()?"[上]":"[本]",0===this.minutes()?n+"dddAh点整":n+"dddAh点mm"},sameElse:"LL"},ordinalParse:/\d{1,2}(日|月|周)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"周";default:return e}},relativeTime:{future:"%s内",past:"%s前",s:"几秒",m:"1 分钟",mm:"%d 分钟",h:"1 小时",hh:"%d 小时",d:"1 天",dd:"%d 天",M:"1 个月",MM:"%d 个月",y:"1 年",yy:"%d 年"},week:{dow:1,doy:4}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("zh-hk",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"Ah點mm分",LTS:"Ah點m分s秒",L:"YYYY年MMMD日",LL:"YYYY年MMMD日",LLL:"YYYY年MMMD日Ah點mm分",LLLL:"YYYY年MMMD日ddddAh點mm分",l:"YYYY年MMMD日",ll:"YYYY年MMMD日",lll:"YYYY年MMMD日Ah點mm分",
llll:"YYYY年MMMD日ddddAh點mm分"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},ordinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s內",past:"%s前",s:"幾秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}});return t})},function(e,t,n){!function(e,t){t(n(1))}(this,function(e){"use strict";var t=e.defineLocale("zh-tw",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"Ah點mm分",LTS:"Ah點m分s秒",L:"YYYY年MMMD日",LL:"YYYY年MMMD日",LLL:"YYYY年MMMD日Ah點mm分",LLLL:"YYYY年MMMD日ddddAh點mm分",l:"YYYY年MMMD日",ll:"YYYY年MMMD日",lll:"YYYY年MMMD日Ah點mm分",llll:"YYYY年MMMD日ddddAh點mm分"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},ordinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s內",past:"%s前",s:"幾秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}});return t})},function(e,t){"use strict";function n(e,t){return e+t.charAt(0).toUpperCase()+t.substring(1)}var r={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridColumn:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},o=["Webkit","ms","Moz","O"];Object.keys(r).forEach(function(e){o.forEach(function(t){r[n(t,e)]=r[e]})});var a={background:{backgroundAttachment:!0,backgroundColor:!0,backgroundImage:!0,backgroundPositionX:!0,backgroundPositionY:!0,backgroundRepeat:!0},backgroundPosition:{backgroundPositionX:!0,backgroundPositionY:!0},border:{borderWidth:!0,borderStyle:!0,borderColor:!0},borderBottom:{borderBottomWidth:!0,borderBottomStyle:!0,borderBottomColor:!0},borderLeft:{borderLeftWidth:!0,borderLeftStyle:!0,borderLeftColor:!0},borderRight:{borderRightWidth:!0,borderRightStyle:!0,borderRightColor:!0},borderTop:{borderTopWidth:!0,borderTopStyle:!0,borderTopColor:!0},font:{fontStyle:!0,fontVariant:!0,fontWeight:!0,fontSize:!0,lineHeight:!0,fontFamily:!0},outline:{outlineWidth:!0,outlineStyle:!0,outlineColor:!0}},i={isUnitlessNumber:r,shorthandPropertyExpansions:a};e.exports=i},function(e,t,n){(function(t){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var o=n(4),a=n(17),i=n(3),s=function(){function e(t){r(this,e),this._callbacks=null,this._contexts=null,this._arg=t}return e.prototype.enqueue=function(e,t){this._callbacks=this._callbacks||[],this._callbacks.push(e),this._contexts=this._contexts||[],this._contexts.push(t)},e.prototype.notifyAll=function(){var e=this._callbacks,n=this._contexts,r=this._arg;if(e&&n){e.length!==n.length?"production"!==t.env.NODE_ENV?i(!1,"Mismatched list of contexts in callback queue"):o("24"):void 0,this._callbacks=null,this._contexts=null;for(var a=0;a<e.length;a++)e[a].call(n[a],r);e.length=0,n.length=0}},e.prototype.checkpoint=function(){return this._callbacks?this._callbacks.length:0},e.prototype.rollback=function(e){this._callbacks&&this._contexts&&(this._callbacks.length=e,this._contexts.length=e)},e.prototype.reset=function(){this._callbacks=null,this._contexts=null},e.prototype.destructor=function(){this.reset()},e}();e.exports=a.addPoolingTo(s)}).call(t,n(2))},function(e,t,n){(function(t){"use strict";function r(e){return!!_.hasOwnProperty(e)||!c.hasOwnProperty(e)&&(l.test(e)?(_[e]=!0,!0):(c[e]=!0,"production"!==t.env.NODE_ENV?d(!1,"Invalid attribute name: `%s`",e):void 0,!1))}function o(e,t){return null==t||e.hasBooleanValue&&!t||e.hasNumericValue&&isNaN(t)||e.hasPositiveNumericValue&&t<1||e.hasOverloadedBooleanValue&&t===!1}var a=n(16),i=n(6),s=n(10),u=n(269),d=n(5),l=new RegExp("^["+a.ATTRIBUTE_NAME_START_CHAR+"]["+a.ATTRIBUTE_NAME_CHAR+"]*$"),c={},_={},m={createMarkupForID:function(e){return a.ID_ATTRIBUTE_NAME+"="+u(e)},setAttributeForID:function(e,t){e.setAttribute(a.ID_ATTRIBUTE_NAME,t)},createMarkupForRoot:function(){return a.ROOT_ATTRIBUTE_NAME+'=""'},setAttributeForRoot:function(e){e.setAttribute(a.ROOT_ATTRIBUTE_NAME,"")},createMarkupForProperty:function(e,t){var n=a.properties.hasOwnProperty(e)?a.properties[e]:null;if(n){if(o(n,t))return"";var r=n.attributeName;return n.hasBooleanValue||n.hasOverloadedBooleanValue&&t===!0?r+'=""':r+"="+u(t)}return a.isCustomAttribute(e)?null==t?"":e+"="+u(t):null},createMarkupForCustomAttribute:function(e,t){return r(e)&&null!=t?e+"="+u(t):""},setValueForProperty:function(e,n,r){var u=a.properties.hasOwnProperty(n)?a.properties[n]:null;if(u){var d=u.mutationMethod;if(d)d(e,r);else{if(o(u,r))return void this.deleteValueForProperty(e,n);if(u.mustUseProperty)e[u.propertyName]=r;else{var l=u.attributeName,c=u.attributeNamespace;c?e.setAttributeNS(c,l,""+r):u.hasBooleanValue||u.hasOverloadedBooleanValue&&r===!0?e.setAttribute(l,""):e.setAttribute(l,""+r)}}}else if(a.isCustomAttribute(n))return void m.setValueForAttribute(e,n,r);if("production"!==t.env.NODE_ENV){var _={};_[n]=r,s.debugTool.onHostOperation({instanceID:i.getInstanceFromNode(e)._debugID,type:"update attribute",payload:_})}},setValueForAttribute:function(e,n,o){if(r(n)&&(null==o?e.removeAttribute(n):e.setAttribute(n,""+o),"production"!==t.env.NODE_ENV)){var a={};a[n]=o,s.debugTool.onHostOperation({instanceID:i.getInstanceFromNode(e)._debugID,type:"update attribute",payload:a})}},deleteValueForAttribute:function(e,n){e.removeAttribute(n),"production"!==t.env.NODE_ENV&&s.debugTool.onHostOperation({instanceID:i.getInstanceFromNode(e)._debugID,type:"remove attribute",payload:n})},deleteValueForProperty:function(e,n){var r=a.properties.hasOwnProperty(n)?a.properties[n]:null;if(r){var o=r.mutationMethod;if(o)o(e,void 0);else if(r.mustUseProperty){var u=r.propertyName;r.hasBooleanValue?e[u]=!1:e[u]=""}else e.removeAttribute(r.attributeName)}else a.isCustomAttribute(n)&&e.removeAttribute(n);"production"!==t.env.NODE_ENV&&s.debugTool.onHostOperation({instanceID:i.getInstanceFromNode(e)._debugID,type:"remove attribute",payload:n})}};e.exports=m}).call(t,n(2))},function(e,t){"use strict";var n={hasCachedChildNodes:1};e.exports=n},function(e,t,n){(function(t){"use strict";function r(){if(this._rootNodeID&&this._wrapperState.pendingUpdate){this._wrapperState.pendingUpdate=!1;var e=this._currentElement.props,t=d.getValue(e);null!=t&&i(this,Boolean(e.multiple),t)}}function o(e){if(e){var t=e.getName();if(t)return" Check the render method of `"+t+"`."}return""}function a(e,n){var r=e._currentElement._owner;d.checkPropTypes("select",n,r),void 0===n.valueLink||m||("production"!==t.env.NODE_ENV?_(!1,"`valueLink` prop on `select` is deprecated; set `value` and `onChange` instead."):void 0,m=!0);for(var a=0;a<h.length;a++){var i=h[a];if(null!=n[i]){var s=Array.isArray(n[i]);n.multiple&&!s?"production"!==t.env.NODE_ENV?_(!1,"The `%s` prop supplied to <select> must be an array if `multiple` is true.%s",i,o(r)):void 0:!n.multiple&&s&&("production"!==t.env.NODE_ENV?_(!1,"The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s",i,o(r)):void 0)}}}function i(e,t,n){var r,o,a=l.getNodeFromInstance(e).options;if(t){for(r={},o=0;o<n.length;o++)r[""+n[o]]=!0;for(o=0;o<a.length;o++){var i=r.hasOwnProperty(a[o].value);a[o].selected!==i&&(a[o].selected=i)}}else{for(r=""+n,o=0;o<a.length;o++)if(a[o].value===r)return void(a[o].selected=!0);a.length&&(a[0].selected=!0)}}function s(e){var t=this._currentElement.props,n=d.executeOnChange(t,e);return this._rootNodeID&&(this._wrapperState.pendingUpdate=!0),c.asap(r,this),n}var u=n(7),d=n(39),l=n(6),c=n(11),_=n(5),m=!1,p=!1,h=["value","defaultValue"],f={getHostProps:function(e,t){return u({},t,{onChange:e._wrapperState.onChange,value:void 0})},mountWrapper:function(e,n){"production"!==t.env.NODE_ENV&&a(e,n);var r=d.getValue(n);e._wrapperState={pendingUpdate:!1,initialValue:null!=r?r:n.defaultValue,listeners:null,onChange:s.bind(e),wasMultiple:Boolean(n.multiple)},void 0===n.value||void 0===n.defaultValue||p||("production"!==t.env.NODE_ENV?_(!1,"Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://fb.me/react-controlled-components"):void 0,p=!0)},getSelectValueContext:function(e){return e._wrapperState.initialValue},postUpdateWrapper:function(e){var t=e._currentElement.props;e._wrapperState.initialValue=void 0;var n=e._wrapperState.wasMultiple;e._wrapperState.wasMultiple=Boolean(t.multiple);var r=d.getValue(t);null!=r?(e._wrapperState.pendingUpdate=!1,i(e,Boolean(t.multiple),r)):n!==Boolean(t.multiple)&&(null!=t.defaultValue?i(e,Boolean(t.multiple),t.defaultValue):i(e,Boolean(t.multiple),t.multiple?[]:""))}};e.exports=f}).call(t,n(2))},function(e,t){"use strict";var n,r={injectEmptyComponentFactory:function(e){n=e}},o={create:function(e){return n(e)}};o.injection=r,e.exports=o},function(e,t){"use strict";var n={logTopLevelRenders:!1};e.exports=n},function(e,t,n){(function(t){"use strict";function r(e){return d?void 0:"production"!==t.env.NODE_ENV?u(!1,"There is no registered component for the tag %s",e.type):i("111",e.type),new d(e)}function o(e){return new c(e)}function a(e){return e instanceof c}var i=n(4),s=n(7),u=n(3),d=null,l={},c=null,_={injectGenericComponentClass:function(e){d=e},injectTextComponentClass:function(e){c=e},injectComponentClasses:function(e){s(l,e)}},m={createInternalComponent:r,createInstanceForText:o,isTextComponent:a,injection:_};e.exports=m}).call(t,n(2))},function(e,t,n){"use strict";function r(e){return a(document.documentElement,e)}var o=n(223),a=n(273),i=n(190),s=n(191),u={hasSelectionCapabilities:function(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&"text"===e.type||"textarea"===t||"true"===e.contentEditable)},getSelectionInformation:function(){var e=s();return{focusedElem:e,selectionRange:u.hasSelectionCapabilities(e)?u.getSelection(e):null}},restoreSelection:function(e){var t=s(),n=e.focusedElem,o=e.selectionRange;t!==n&&r(n)&&(u.hasSelectionCapabilities(n)&&u.setSelection(n,o),i(n))},getSelection:function(e){var t;if("selectionStart"in e)t={start:e.selectionStart,end:e.selectionEnd};else if(document.selection&&e.nodeName&&"input"===e.nodeName.toLowerCase()){var n=document.selection.createRange();n.parentElement()===e&&(t={start:-n.moveStart("character",-e.value.length),end:-n.moveEnd("character",-e.value.length)})}else t=o.getOffsets(e);return t||{start:0,end:0}},setSelection:function(e,t){var n=t.start,r=t.end;if(void 0===r&&(r=n),"selectionStart"in e)e.selectionStart=n,e.selectionEnd=Math.min(r,e.value.length);else if(document.selection&&e.nodeName&&"input"===e.nodeName.toLowerCase()){var a=e.createTextRange();a.collapse(!0),a.moveStart("character",n),a.moveEnd("character",r-n),a.select()}else o.setOffsets(e,t)}};e.exports=u},function(e,t,n){(function(t){"use strict";function r(e,t){for(var n=Math.min(e.length,t.length),r=0;r<n;r++)if(e.charAt(r)!==t.charAt(r))return r;return e.length===t.length?-1:n}function o(e){return e?e.nodeType===V?e.documentElement:e.firstChild:null}function a(e){return e.getAttribute&&e.getAttribute(A)||""}function i(e,t,n,r,o){var a;if(k.logTopLevelRenders){var i=e._currentElement.props.child,s=i.type;a="React mount: "+("string"==typeof s?s:s.displayName||s.name),console.time(a)}var u=E.mountComponent(e,n,null,D(e,t),o,0);a&&console.timeEnd(a),e._renderedComponent._topLevelWrapper=e,B._mountImageIntoNode(u,t,e,r,n)}function s(e,t,n,r){var o=S.ReactReconcileTransaction.getPooled(!n&&Y.useCreateElement);o.perform(i,null,e,t,o,n,r),S.ReactReconcileTransaction.release(o)}function u(e,n,r){for("production"!==t.env.NODE_ENV&&T.debugTool.onBeginFlush(),E.unmountComponent(e,r),"production"!==t.env.NODE_ENV&&T.debugTool.onEndFlush(),n.nodeType===V&&(n=n.documentElement);n.lastChild;)n.removeChild(n.lastChild)}function d(e){var t=o(e);if(t){var n=L.getInstanceFromNode(t);return!(!n||!n._hostParent)}}function l(e){var t=o(e);return!(!t||!_(t)||L.getInstanceFromNode(t))}function c(e){return!(!e||e.nodeType!==R&&e.nodeType!==V&&e.nodeType!==F)}function _(e){return c(e)&&(e.hasAttribute(I)||e.hasAttribute(A))}function m(e){var t=o(e),n=t&&L.getInstanceFromNode(t);return n&&!n._hostParent?n:null}function p(e){var t=m(e);return t?t._hostContainerInfo._topLevelWrapper:null}var h=n(4),f=n(21),y=n(16),v=n(23),M=n(29),g=n(12),L=n(6),D=n(215),Y=n(217),k=n(173),b=n(26),T=n(10),w=n(237),E=n(22),N=n(42),S=n(11),x=n(189),O=n(184),C=n(3),j=n(33),P=n(48),H=n(5),A=y.ID_ATTRIBUTE_NAME,I=y.ROOT_ATTRIBUTE_NAME,R=1,V=9,F=11,W={},U=1,z=function(){this.rootID=U++};z.prototype.isReactComponent={},"production"!==t.env.NODE_ENV&&(z.displayName="TopLevelWrapper"),z.prototype.render=function(){return this.props.child},z.isReactTopLevelWrapper=!0;var B={TopLevelWrapper:z,_instancesByReactRootID:W,scrollMonitor:function(e,t){t()},_updateRootComponent:function(e,t,n,r,o){return B.scrollMonitor(r,function(){N.enqueueElementInternal(e,t,n),o&&N.enqueueCallbackInternal(e,o)}),e},_renderNewRootComponent:function(e,n,r,o){"production"!==t.env.NODE_ENV?H(null==g.current,"_renderNewRootComponent(): Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate. Check the render method of %s.",g.current&&g.current.getName()||"ReactCompositeComponent"):void 0,c(n)?void 0:"production"!==t.env.NODE_ENV?C(!1,"_registerComponent(...): Target container is not a DOM element."):h("37"),M.ensureScrollValueMonitoring();var a=O(e,!1);S.batchedUpdates(s,a,n,r,o);var i=a._instance.rootID;return W[i]=a,a},renderSubtreeIntoContainer:function(e,n,r,o){return null!=e&&b.has(e)?void 0:"production"!==t.env.NODE_ENV?C(!1,"parentComponent must be a valid React Component"):h("38"),B._renderSubtreeIntoContainer(e,n,r,o)},_renderSubtreeIntoContainer:function(e,n,r,i){N.validateCallback(i,"ReactDOM.render"),v.isValidElement(n)?void 0:"production"!==t.env.NODE_ENV?C(!1,"ReactDOM.render(): Invalid component element.%s","string"==typeof n?" Instead of passing a string like 'div', pass React.createElement('div') or <div />.":"function"==typeof n?" Instead of passing a class like Foo, pass React.createElement(Foo) or <Foo />.":null!=n&&void 0!==n.props?" This may be caused by unintentionally loading two independent copies of React.":""):h("39","string"==typeof n?" Instead of passing a string like 'div', pass React.createElement('div') or <div />.":"function"==typeof n?" Instead of passing a class like Foo, pass React.createElement(Foo) or <Foo />.":null!=n&&void 0!==n.props?" This may be caused by unintentionally loading two independent copies of React.":""),"production"!==t.env.NODE_ENV?H(!r||!r.tagName||"BODY"!==r.tagName.toUpperCase(),"render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app."):void 0;var s,u=v.createElement(z,{child:n});if(e){var l=b.get(e);s=l._processChildContext(l._context)}else s=x;var c=p(r);if(c){var _=c._currentElement,m=_.props.child;if(P(m,n)){var f=c._renderedComponent.getPublicInstance(),y=i&&function(){i.call(f)};return B._updateRootComponent(c,u,s,r,y),f}B.unmountComponentAtNode(r)}var M=o(r),g=M&&!!a(M),L=d(r);if("production"!==t.env.NODE_ENV&&("production"!==t.env.NODE_ENV?H(!L,"render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render."):void 0,!g||M.nextSibling))for(var D=M;D;){if(a(D)){"production"!==t.env.NODE_ENV?H(!1,"render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup."):void 0;break}D=D.nextSibling}var Y=g&&!c&&!L,k=B._renderNewRootComponent(u,r,Y,s)._renderedComponent.getPublicInstance();return i&&i.call(k),k},render:function(e,t,n){return B._renderSubtreeIntoContainer(null,e,t,n)},unmountComponentAtNode:function(e){"production"!==t.env.NODE_ENV?H(null==g.current,"unmountComponentAtNode(): Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate. Check the render method of %s.",g.current&&g.current.getName()||"ReactCompositeComponent"):void 0,c(e)?void 0:"production"!==t.env.NODE_ENV?C(!1,"unmountComponentAtNode(...): Target container is not a DOM element."):h("40"),"production"!==t.env.NODE_ENV&&("production"!==t.env.NODE_ENV?H(!l(e),"unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React."):void 0);var n=p(e);if(!n){var r=d(e),o=1===e.nodeType&&e.hasAttribute(I);return"production"!==t.env.NODE_ENV&&("production"!==t.env.NODE_ENV?H(!r,"unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s",o?"You may have accidentally passed in a React root node instead of its container.":"Instead, have the parent component update its state and rerender in order to remove this component."):void 0),!1}return delete W[n._instance.rootID],S.batchedUpdates(u,n,e,!1),!0},_mountImageIntoNode:function(e,n,a,i,s){if(c(n)?void 0:"production"!==t.env.NODE_ENV?C(!1,"mountComponentIntoNode(...): Target container is not valid."):h("41"),i){var u=o(n);if(w.canReuseMarkup(e,u))return void L.precacheNode(a,u);var d=u.getAttribute(w.CHECKSUM_ATTR_NAME);u.removeAttribute(w.CHECKSUM_ATTR_NAME);var l=u.outerHTML;u.setAttribute(w.CHECKSUM_ATTR_NAME,d);var _=e;if("production"!==t.env.NODE_ENV){var m;n.nodeType===R?(m=document.createElement("div"),m.innerHTML=e,_=m.innerHTML):(m=document.createElement("iframe"),document.body.appendChild(m),m.contentDocument.write(e),_=m.contentDocument.documentElement.outerHTML,document.body.removeChild(m))}var p=r(_,l),y=" (client) "+_.substring(p-20,p+20)+"\n (server) "+l.substring(p-20,p+20);n.nodeType===V?"production"!==t.env.NODE_ENV?C(!1,"You're trying to render a component to the document using server rendering but the checksum was invalid. This usually means you rendered a different component type or props on the client from the one on the server, or your render() methods are impure. React cannot handle this case due to cross-browser quirks by rendering at the document root. You should look for environment dependent code in your components and ensure the props are the same client and server side:\n%s",y):h("42",y):void 0,"production"!==t.env.NODE_ENV&&("production"!==t.env.NODE_ENV?H(!1,"React attempted to reuse markup in a container but the checksum was invalid. This generally means that you are using server rendering and the markup generated on the server was not what the client was expecting. React injected new markup to compensate which works but you have lost many of the benefits of server rendering. Instead, figure out why the markup being generated is different on the client or server:\n%s",y):void 0)}if(n.nodeType===V?"production"!==t.env.NODE_ENV?C(!1,"You're trying to render a component to the document but you didn't use server rendering. We can't do this without using server rendering due to cross-browser quirks. See ReactDOMServer.renderToString() for server rendering."):h("43"):void 0,s.useCreateElement){for(;n.lastChild;)n.removeChild(n.lastChild);f.insertTreeBefore(n,e,null)}else j(n,e),L.precacheNode(a,n.firstChild);if("production"!==t.env.NODE_ENV){var v=L.getInstanceFromNode(n.firstChild);0!==v._debugID&&T.debugTool.onHostOperation({instanceID:v._debugID,type:"mount",payload:e.toString()})}}};e.exports=B}).call(t,n(2))},function(e,t,n){(function(t){"use strict";var r=n(4),o=n(23),a=n(3),i={HOST:0,COMPOSITE:1,EMPTY:2,getType:function(e){return null===e||e===!1?i.EMPTY:o.isValidElement(e)?"function"==typeof e.type?i.COMPOSITE:i.HOST:void("production"!==t.env.NODE_ENV?a(!1,"Unexpected node: %s",e):r("26",e))}};e.exports=i}).call(t,n(2))},function(e,t){"use strict";var n="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";e.exports=n},function(e,t){"use strict";var n={currentScrollLeft:0,currentScrollTop:0,refreshScrollValues:function(e){n.currentScrollLeft=e.x,n.currentScrollTop=e.y}};e.exports=n},function(e,t,n){(function(t){"use strict";function r(e,n){return null==n?"production"!==t.env.NODE_ENV?a(!1,"accumulateInto(...): Accumulated items must not be null or undefined."):o("30"):void 0,null==e?n:Array.isArray(e)?Array.isArray(n)?(e.push.apply(e,n),e):(e.push(n),e):Array.isArray(n)?[e].concat(n):[e,n]}var o=n(4),a=n(3);e.exports=r}).call(t,n(2))},function(e,t){"use strict";function n(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}e.exports=n},function(e,t,n){"use strict";function r(e){for(var t;(t=e._renderedNodeType)===o.COMPOSITE;)e=e._renderedComponent;return t===o.HOST?e._renderedComponent:t===o.EMPTY?null:void 0}var o=n(177);e.exports=r},function(e,t,n){"use strict";function r(){return!a&&o.canUseDOM&&(a="textContent"in document.documentElement?"textContent":"innerText"),a}var o=n(8),a=null;e.exports=r},function(e,t,n){(function(t){"use strict";function r(e){if(e){var t=e.getName();if(t)return" Check the render method of `"+t+"`."}return""}function o(e){return"function"==typeof e&&"undefined"!=typeof e.prototype&&"function"==typeof e.prototype.mountComponent&&"function"==typeof e.prototype.receiveComponent}function a(e,n){var s;if(null===e||e===!1)s=d.create(a);else if("object"==typeof e){var u=e;!u||"function"!=typeof u.type&&"string"!=typeof u.type?"production"!==t.env.NODE_ENV?_(!1,"Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s",null==u.type?u.type:typeof u.type,r(u._owner)):i("130",null==u.type?u.type:typeof u.type,r(u._owner)):void 0,"string"==typeof u.type?s=l.createInternalComponent(u):o(u.type)?(s=new u.type(u),s.getHostNode||(s.getHostNode=s.getNativeNode)):s=new p(u)}else"string"==typeof e||"number"==typeof e?s=l.createInstanceForText(e):"production"!==t.env.NODE_ENV?_(!1,"Encountered invalid React node of type %s",typeof e):i("131",typeof e);return"production"!==t.env.NODE_ENV&&("production"!==t.env.NODE_ENV?m("function"==typeof s.mountComponent&&"function"==typeof s.receiveComponent&&"function"==typeof s.getHostNode&&"function"==typeof s.unmountComponent,"Only React Components can be mounted."):void 0),s._mountIndex=0,s._mountImage=null,"production"!==t.env.NODE_ENV&&(s._debugID=n?c():0),"production"!==t.env.NODE_ENV&&Object.preventExtensions&&Object.preventExtensions(s),s}var i=n(4),s=n(7),u=n(212),d=n(172),l=n(174),c=n(266),_=n(3),m=n(5),p=function(e){this.construct(e)};s(p.prototype,u,{_instantiateReactComponent:a}),e.exports=a}).call(t,n(2))},function(e,t){"use strict";function n(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!r[e.type]:"textarea"===t}var r={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};e.exports=n},function(e,t,n){"use strict";var r=n(8),o=n(32),a=n(33),i=function(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t};r.canUseDOM&&("textContent"in document.documentElement||(i=function(e,t){return 3===e.nodeType?void(e.nodeValue=t):void a(e,o(t))})),e.exports=i},function(e,t,n){(function(t){"use strict";function r(e,t){return e&&"object"==typeof e&&null!=e.key?c.escape(e.key):t.toString(36)}function o(e,n,a,f){var y=typeof e;if("undefined"!==y&&"boolean"!==y||(e=null),null===e||"string"===y||"number"===y||"object"===y&&e.$$typeof===u)return a(f,e,""===n?m+r(e,0):n),1;var v,M,g=0,L=""===n?m:n+p;if(Array.isArray(e))for(var D=0;D<e.length;D++)v=e[D],M=L+r(v,D),g+=o(v,M,a,f);else{var Y=d(e);if(Y){var k,b=Y.call(e);if(Y!==e.entries)for(var T=0;!(k=b.next()).done;)v=k.value,M=L+r(v,T++),g+=o(v,M,a,f);else{if("production"!==t.env.NODE_ENV){var w="";if(s.current){var E=s.current.getName();E&&(w=" Check the render method of `"+E+"`.")}"production"!==t.env.NODE_ENV?_(h,"Using Maps as children is not yet fully supported. It is an experimental feature that might be removed. Convert it to a sequence / iterable of keyed ReactElements instead.%s",w):void 0,h=!0}for(;!(k=b.next()).done;){var N=k.value;N&&(v=N[1],M=L+c.escape(N[0])+p+r(v,0),g+=o(v,M,a,f))}}}else if("object"===y){var S="";if("production"!==t.env.NODE_ENV&&(S=" If you meant to render a collection of children, use an array instead or wrap the object using createFragment(object) from the React add-ons.",e._isReactElement&&(S=" It looks like you're using an element created by a different version of React. Make sure to use only one copy of React."),s.current)){var x=s.current.getName();x&&(S+=" Check the render method of `"+x+"`.")}var O=String(e);"production"!==t.env.NODE_ENV?l(!1,"Objects are not valid as a React child (found: %s).%s","[object Object]"===O?"object with keys {"+Object.keys(e).join(", ")+"}":O,S):i("31","[object Object]"===O?"object with keys {"+Object.keys(e).join(", ")+"}":O,S)}}return g}function a(e,t,n){return null==e?0:o(e,"",t,n)}var i=n(4),s=n(12),u=n(231),d=n(265),l=n(3),c=n(38),_=n(5),m=".",p=":",h=!1;e.exports=a}).call(t,n(2))},function(e,t,n){(function(t){"use strict";var r=n(15),o={listen:function(e,t,n){return e.addEventListener?(e.addEventListener(t,n,!1),{remove:function(){e.removeEventListener(t,n,!1)}}):e.attachEvent?(e.attachEvent("on"+t,n),{remove:function(){e.detachEvent("on"+t,n)}}):void 0},capture:function(e,n,o){return e.addEventListener?(e.addEventListener(n,o,!0),{remove:function(){e.removeEventListener(n,o,!0)}}):("production"!==t.env.NODE_ENV&&console.error("Attempted to listen to events during the capture phase on a browser that does not support the capture phase. Your application will not receive some events."),{remove:r})},registerDefault:function(){}};e.exports=o}).call(t,n(2))},function(e,t,n){(function(t){"use strict";var n={};"production"!==t.env.NODE_ENV&&Object.freeze(n),e.exports=n}).call(t,n(2))},function(e,t){"use strict";function n(e){try{e.focus()}catch(e){}}e.exports=n},function(e,t){"use strict";function n(){if("undefined"==typeof document)return null;try{return document.activeElement||document.body}catch(e){return document.body}}e.exports=n},function(e,t,n){"use strict";var r=n(298),o=/^-ms-/;e.exports=function(e){return r(e.replace(o,"ms-"))}},function(e,t){"use strict";var n=/([A-Z])/g;e.exports=function(e){return e.replace(n,"-$1").toLowerCase()}},function(e,t){"use strict";var n="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103;e.exports=n},function(e,t,n){(function(t){"use strict";function r(){if(u.current){var e=u.current.getName();if(e)return" Check the render method of `"+e+"`."}return""}function o(e){var t=r();if(!t){var n="string"==typeof e?e:e.displayName||e.name;n&&(t=" Check the top-level render call using <"+n+">.")}return t}function a(e,n){if(e._store&&!e._store.validated&&null==e.key){e._store.validated=!0;var r=h.uniqueKey||(h.uniqueKey={}),a=o(n);if(!r[a]){r[a]=!0;var i="";e&&e._owner&&e._owner!==u.current&&(i=" It was passed a child from "+e._owner.getName()+"."),"production"!==t.env.NODE_ENV?p(!1,'Each child in an array or iterator should have a unique "key" prop.%s%s See https://fb.me/react-warning-keys for more information.%s',a,i,d.getCurrentStackAddendum(e)):void 0}}}function i(e,t){if("object"==typeof e)if(Array.isArray(e))for(var n=0;n<e.length;n++){var r=e[n];l.isValidElement(r)&&a(r,t)}else if(l.isValidElement(e))e._store&&(e._store.validated=!0);else if(e){var o=m(e);if(o&&o!==e.entries)for(var i,s=o.call(e);!(i=s.next()).done;)l.isValidElement(i.value)&&a(i.value,t)}}function s(e){var n=e.type;if("function"==typeof n){var r=n.displayName||n.name;n.propTypes&&c(n.propTypes,e.props,"prop",r,e,null),"function"==typeof n.getDefaultProps&&("production"!==t.env.NODE_ENV?p(n.getDefaultProps.isReactClassApproved,"getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead."):void 0)}}var u=n(12),d=n(9),l=n(18),c=n(309),_=n(55),m=n(56),p=n(13),h={},f={createElement:function(e,n,o){var a="string"==typeof e||"function"==typeof e;a||("production"!==t.env.NODE_ENV?p(!1,"React.createElement: type should not be null, undefined, boolean, or number. It should be a string (for DOM elements) or a ReactClass (for composite components).%s",r()):void 0);var u=l.createElement.apply(this,arguments);if(null==u)return u;if(a)for(var d=2;d<arguments.length;d++)i(arguments[d],e);return s(u),u},createFactory:function(e){var n=f.createElement.bind(null,e);return n.type=e,"production"!==t.env.NODE_ENV&&_&&Object.defineProperty(n,"type",{enumerable:!1,get:function(){return"production"!==t.env.NODE_ENV?p(!1,"Factory.type is deprecated. Access the class directly before passing it to createFactory."):void 0,Object.defineProperty(this,"type",{value:e}),e}}),n},cloneElement:function(e,t,n){for(var r=l.cloneElement.apply(this,arguments),o=2;o<arguments.length;o++)i(arguments[o],r.type);return s(r),r}};e.exports=f}).call(t,n(2))},function(e,t){"use strict";var n="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";e.exports=n},function(e,t,n){"use strict";e.exports=n(23)},function(e,t,n){function r(e){return n(o(e))}function o(e){return a[e]||function(){throw new Error("Cannot find module '"+e+"'.")}()}var a={"./af":59,"./af.js":59,"./ar":65,"./ar-dz":60,"./ar-dz.js":60,"./ar-ly":61,"./ar-ly.js":61,"./ar-ma":62,"./ar-ma.js":62,"./ar-sa":63,"./ar-sa.js":63,"./ar-tn":64,"./ar-tn.js":64,"./ar.js":65,"./az":66,"./az.js":66,"./be":67,"./be.js":67,"./bg":68,"./bg.js":68,"./bn":69,"./bn.js":69,"./bo":70,"./bo.js":70,"./br":71,"./br.js":71,"./bs":72,"./bs.js":72,"./ca":73,"./ca.js":73,"./cs":74,"./cs.js":74,"./cv":75,"./cv.js":75,"./cy":76,"./cy.js":76,"./da":77,"./da.js":77,"./de":79,"./de-at":78,"./de-at.js":78,"./de.js":79,"./dv":80,"./dv.js":80,"./el":81,"./el.js":81,"./en-au":82,"./en-au.js":82,"./en-ca":83,"./en-ca.js":83,"./en-gb":84,"./en-gb.js":84,"./en-ie":85,"./en-ie.js":85,"./en-nz":86,"./en-nz.js":86,"./eo":87,"./eo.js":87,"./es":89,"./es-do":88,"./es-do.js":88,"./es.js":89,"./et":90,"./et.js":90,"./eu":91,"./eu.js":91,"./fa":92,"./fa.js":92,"./fi":93,"./fi.js":93,"./fo":94,"./fo.js":94,"./fr":97,"./fr-ca":95,"./fr-ca.js":95,"./fr-ch":96,"./fr-ch.js":96,
"./fr.js":97,"./fy":98,"./fy.js":98,"./gd":99,"./gd.js":99,"./gl":100,"./gl.js":100,"./he":101,"./he.js":101,"./hi":102,"./hi.js":102,"./hr":103,"./hr.js":103,"./hu":104,"./hu.js":104,"./hy-am":105,"./hy-am.js":105,"./id":106,"./id.js":106,"./is":107,"./is.js":107,"./it":108,"./it.js":108,"./ja":109,"./ja.js":109,"./jv":110,"./jv.js":110,"./ka":111,"./ka.js":111,"./kk":112,"./kk.js":112,"./km":113,"./km.js":113,"./ko":114,"./ko.js":114,"./ky":115,"./ky.js":115,"./lb":116,"./lb.js":116,"./lo":117,"./lo.js":117,"./lt":118,"./lt.js":118,"./lv":119,"./lv.js":119,"./me":120,"./me.js":120,"./mi":121,"./mi.js":121,"./mk":122,"./mk.js":122,"./ml":123,"./ml.js":123,"./mr":124,"./mr.js":124,"./ms":126,"./ms-my":125,"./ms-my.js":125,"./ms.js":126,"./my":127,"./my.js":127,"./nb":128,"./nb.js":128,"./ne":129,"./ne.js":129,"./nl":131,"./nl-be":130,"./nl-be.js":130,"./nl.js":131,"./nn":132,"./nn.js":132,"./pa-in":133,"./pa-in.js":133,"./pl":134,"./pl.js":134,"./pt":136,"./pt-br":135,"./pt-br.js":135,"./pt.js":136,"./ro":137,"./ro.js":137,"./ru":138,"./ru.js":138,"./se":139,"./se.js":139,"./si":140,"./si.js":140,"./sk":141,"./sk.js":141,"./sl":142,"./sl.js":142,"./sq":143,"./sq.js":143,"./sr":145,"./sr-cyrl":144,"./sr-cyrl.js":144,"./sr.js":145,"./ss":146,"./ss.js":146,"./sv":147,"./sv.js":147,"./sw":148,"./sw.js":148,"./ta":149,"./ta.js":149,"./te":150,"./te.js":150,"./tet":151,"./tet.js":151,"./th":152,"./th.js":152,"./tl-ph":153,"./tl-ph.js":153,"./tlh":154,"./tlh.js":154,"./tr":155,"./tr.js":155,"./tzl":156,"./tzl.js":156,"./tzm":158,"./tzm-latn":157,"./tzm-latn.js":157,"./tzm.js":158,"./uk":159,"./uk.js":159,"./uz":160,"./uz.js":160,"./vi":161,"./vi.js":161,"./x-pseudo":162,"./x-pseudo.js":162,"./yo":163,"./yo.js":163,"./zh-cn":164,"./zh-cn.js":164,"./zh-hk":165,"./zh-hk.js":165,"./zh-tw":166,"./zh-tw.js":166};r.keys=function(){return Object.keys(a)},r.resolve=o,e.exports=r,r.id=198},function(e,t,n){"use strict";e.exports=n(213)},function(e,t){"use strict";var n={Properties:{"aria-current":0,"aria-details":0,"aria-disabled":0,"aria-hidden":0,"aria-invalid":0,"aria-keyshortcuts":0,"aria-label":0,"aria-roledescription":0,"aria-autocomplete":0,"aria-checked":0,"aria-expanded":0,"aria-haspopup":0,"aria-level":0,"aria-modal":0,"aria-multiline":0,"aria-multiselectable":0,"aria-orientation":0,"aria-placeholder":0,"aria-pressed":0,"aria-readonly":0,"aria-required":0,"aria-selected":0,"aria-sort":0,"aria-valuemax":0,"aria-valuemin":0,"aria-valuenow":0,"aria-valuetext":0,"aria-atomic":0,"aria-busy":0,"aria-live":0,"aria-relevant":0,"aria-dropeffect":0,"aria-grabbed":0,"aria-activedescendant":0,"aria-colcount":0,"aria-colindex":0,"aria-colspan":0,"aria-controls":0,"aria-describedby":0,"aria-errormessage":0,"aria-flowto":0,"aria-labelledby":0,"aria-owns":0,"aria-posinset":0,"aria-rowcount":0,"aria-rowindex":0,"aria-rowspan":0,"aria-setsize":0},DOMAttributeNames:{},DOMPropertyNames:{}};e.exports=n},function(e,t,n){"use strict";var r=n(6),o=n(190),a={focusDOMComponent:function(){o(r.getNodeFromInstance(this))}};e.exports=a},function(e,t,n){"use strict";function r(){var e=window.opera;return"object"==typeof e&&"function"==typeof e.version&&parseInt(e.version(),10)<=12}function o(e){return(e.ctrlKey||e.altKey||e.metaKey)&&!(e.ctrlKey&&e.altKey)}function a(e){switch(e){case"topCompositionStart":return T.compositionStart;case"topCompositionEnd":return T.compositionEnd;case"topCompositionUpdate":return T.compositionUpdate}}function i(e,t){return"topKeyDown"===e&&t.keyCode===M}function s(e,t){switch(e){case"topKeyUp":return v.indexOf(t.keyCode)!==-1;case"topKeyDown":return t.keyCode!==M;case"topKeyPress":case"topMouseDown":case"topBlur":return!0;default:return!1}}function u(e){var t=e.detail;return"object"==typeof t&&"data"in t?t.data:null}function d(e,t,n,r){var o,d;if(g?o=a(e):E?s(e,n)&&(o=T.compositionEnd):i(e,n)&&(o=T.compositionStart),!o)return null;Y&&(E||o!==T.compositionStart?o===T.compositionEnd&&E&&(d=E.getData()):E=h.getPooled(r));var l=f.getPooled(o,t,n,r);if(d)l.data=d;else{var c=u(n);null!==c&&(l.data=c)}return m.accumulateTwoPhaseDispatches(l),l}function l(e,t){switch(e){case"topCompositionEnd":return u(t);case"topKeyPress":var n=t.which;return n!==k?null:(w=!0,b);case"topTextInput":var r=t.data;return r===b&&w?null:r;default:return null}}function c(e,t){if(E){if("topCompositionEnd"===e||!g&&s(e,t)){var n=E.getData();return h.release(E),E=null,n}return null}switch(e){case"topPaste":return null;case"topKeyPress":return t.which&&!o(t)?String.fromCharCode(t.which):null;case"topCompositionEnd":return Y?null:t.data;default:return null}}function _(e,t,n,r){var o;if(o=D?l(e,n):c(e,n),!o)return null;var a=y.getPooled(T.beforeInput,t,n,r);return a.data=o,m.accumulateTwoPhaseDispatches(a),a}var m=n(25),p=n(8),h=n(208),f=n(251),y=n(254),v=[9,13,27,32],M=229,g=p.canUseDOM&&"CompositionEvent"in window,L=null;p.canUseDOM&&"documentMode"in document&&(L=document.documentMode);var D=p.canUseDOM&&"TextEvent"in window&&!L&&!r(),Y=p.canUseDOM&&(!g||L&&L>8&&L<=11),k=32,b=String.fromCharCode(k),T={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["topCompositionEnd","topKeyPress","topTextInput","topPaste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:["topBlur","topCompositionEnd","topKeyDown","topKeyPress","topKeyUp","topMouseDown"]},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:["topBlur","topCompositionStart","topKeyDown","topKeyPress","topKeyUp","topMouseDown"]},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:["topBlur","topCompositionUpdate","topKeyDown","topKeyPress","topKeyUp","topMouseDown"]}},w=!1,E=null,N={eventTypes:T,extractEvents:function(e,t,n,r){return[d(e,t,n,r),_(e,t,n,r)]}};e.exports=N},function(e,t,n){(function(t){"use strict";var r=n(167),o=n(8),a=n(10),i=n(272),s=n(261),u=n(279),d=n(282),l=n(5),c=d(function(e){return u(e)}),_=!1,m="cssFloat";if(o.canUseDOM){var p=document.createElement("div").style;try{p.font=""}catch(e){_=!0}void 0===document.documentElement.style.cssFloat&&(m="styleFloat")}if("production"!==t.env.NODE_ENV)var h=/^(?:webkit|moz|o)[A-Z]/,f=/;\s*$/,y={},v={},M=!1,g=function(e,n){y.hasOwnProperty(e)&&y[e]||(y[e]=!0,"production"!==t.env.NODE_ENV?l(!1,"Unsupported style property %s. Did you mean %s?%s",e,i(e),k(n)):void 0)},L=function(e,n){y.hasOwnProperty(e)&&y[e]||(y[e]=!0,"production"!==t.env.NODE_ENV?l(!1,"Unsupported vendor-prefixed style property %s. Did you mean %s?%s",e,e.charAt(0).toUpperCase()+e.slice(1),k(n)):void 0)},D=function(e,n,r){v.hasOwnProperty(n)&&v[n]||(v[n]=!0,"production"!==t.env.NODE_ENV?l(!1,'Style property values shouldn\'t contain a semicolon.%s Try "%s: %s" instead.',k(r),e,n.replace(f,"")):void 0)},Y=function(e,n,r){M||(M=!0,"production"!==t.env.NODE_ENV?l(!1,"`NaN` is an invalid value for the `%s` css style property.%s",e,k(r)):void 0)},k=function(e){if(e){var t=e.getName();if(t)return" Check the render method of `"+t+"`."}return""},b=function(e,t,n){var r;n&&(r=n._currentElement._owner),e.indexOf("-")>-1?g(e,r):h.test(e)?L(e,r):f.test(t)&&D(e,t,r),"number"==typeof t&&isNaN(t)&&Y(e,t,r)};var T={createMarkupForStyles:function(e,n){var r="";for(var o in e)if(e.hasOwnProperty(o)){var a=e[o];"production"!==t.env.NODE_ENV&&b(o,a,n),null!=a&&(r+=c(o)+":",r+=s(o,a,n)+";")}return r||null},setValueForStyles:function(e,n,o){"production"!==t.env.NODE_ENV&&a.debugTool.onHostOperation({instanceID:o._debugID,type:"update styles",payload:n});var i=e.style;for(var u in n)if(n.hasOwnProperty(u)){"production"!==t.env.NODE_ENV&&b(u,n[u],o);var d=s(u,n[u],o);if("float"!==u&&"cssFloat"!==u||(u=m),d)i[u]=d;else{var l=_&&r.shorthandPropertyExpansions[u];if(l)for(var c in l)i[c]="";else i[u]=""}}}};e.exports=T}).call(t,n(2))},function(e,t,n){"use strict";function r(e){var t=e.nodeName&&e.nodeName.toLowerCase();return"select"===t||"input"===t&&"file"===e.type}function o(e){var t=Y.getPooled(w.change,N,e,k(e));M.accumulateTwoPhaseDispatches(t),D.batchedUpdates(a,t)}function a(e){v.enqueueEvents(e),v.processEventQueue(!1)}function i(e,t){E=e,N=t,E.attachEvent("onchange",o)}function s(){E&&(E.detachEvent("onchange",o),E=null,N=null)}function u(e,t){if("topChange"===e)return t}function d(e,t,n){"topFocus"===e?(s(),i(t,n)):"topBlur"===e&&s()}function l(e,t){E=e,N=t,S=e.value,x=Object.getOwnPropertyDescriptor(e.constructor.prototype,"value"),Object.defineProperty(E,"value",j),E.attachEvent?E.attachEvent("onpropertychange",_):E.addEventListener("propertychange",_,!1)}function c(){E&&(delete E.value,E.detachEvent?E.detachEvent("onpropertychange",_):E.removeEventListener("propertychange",_,!1),E=null,N=null,S=null,x=null)}function _(e){if("value"===e.propertyName){var t=e.srcElement.value;t!==S&&(S=t,o(e))}}function m(e,t){if("topInput"===e)return t}function p(e,t,n){"topFocus"===e?(c(),l(t,n)):"topBlur"===e&&c()}function h(e,t){if(("topSelectionChange"===e||"topKeyUp"===e||"topKeyDown"===e)&&E&&E.value!==S)return S=E.value,N}function f(e){return e.nodeName&&"input"===e.nodeName.toLowerCase()&&("checkbox"===e.type||"radio"===e.type)}function y(e,t){if("topClick"===e)return t}var v=n(24),M=n(25),g=n(8),L=n(6),D=n(11),Y=n(14),k=n(46),b=n(47),T=n(185),w={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:["topBlur","topChange","topClick","topFocus","topInput","topKeyDown","topKeyUp","topSelectionChange"]}},E=null,N=null,S=null,x=null,O=!1;g.canUseDOM&&(O=b("change")&&(!document.documentMode||document.documentMode>8));var C=!1;g.canUseDOM&&(C=b("input")&&(!document.documentMode||document.documentMode>11));var j={get:function(){return x.get.call(this)},set:function(e){S=""+e,x.set.call(this,e)}},P={eventTypes:w,extractEvents:function(e,t,n,o){var a,i,s=t?L.getNodeFromInstance(t):window;if(r(s)?O?a=u:i=d:T(s)?C?a=m:(a=h,i=p):f(s)&&(a=y),a){var l=a(e,t);if(l){var c=Y.getPooled(w.change,l,n,o);return c.type="change",M.accumulateTwoPhaseDispatches(c),c}}i&&i(e,s,t)}};e.exports=P},function(e,t,n){(function(t){"use strict";var r=n(4),o=n(21),a=n(8),i=n(275),s=n(15),u=n(3),d={dangerouslyReplaceNodeWithMarkup:function(e,n){if(a.canUseDOM?void 0:"production"!==t.env.NODE_ENV?u(!1,"dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString() for server rendering."):r("56"),n?void 0:"production"!==t.env.NODE_ENV?u(!1,"dangerouslyReplaceNodeWithMarkup(...): Missing markup."):r("57"),"HTML"===e.nodeName?"production"!==t.env.NODE_ENV?u(!1,"dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See ReactDOMServer.renderToString()."):r("58"):void 0,"string"==typeof n){var d=i(n,s)[0];e.parentNode.replaceChild(d,e)}else o.replaceChildWithTree(e,n)}};e.exports=d}).call(t,n(2))},function(e,t){"use strict";var n=["ResponderEventPlugin","SimpleEventPlugin","TapEventPlugin","EnterLeaveEventPlugin","ChangeEventPlugin","SelectEventPlugin","BeforeInputEventPlugin"];e.exports=n},function(e,t,n){"use strict";var r=n(25),o=n(6),a=n(30),i={mouseEnter:{registrationName:"onMouseEnter",dependencies:["topMouseOut","topMouseOver"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["topMouseOut","topMouseOver"]}},s={eventTypes:i,extractEvents:function(e,t,n,s){if("topMouseOver"===e&&(n.relatedTarget||n.fromElement))return null;if("topMouseOut"!==e&&"topMouseOver"!==e)return null;var u;if(s.window===s)u=s;else{var d=s.ownerDocument;u=d?d.defaultView||d.parentWindow:window}var l,c;if("topMouseOut"===e){l=t;var _=n.relatedTarget||n.toElement;c=_?o.getClosestInstanceFromNode(_):null}else l=null,c=t;if(l===c)return null;var m=null==l?u:o.getNodeFromInstance(l),p=null==c?u:o.getNodeFromInstance(c),h=a.getPooled(i.mouseLeave,l,n,s);h.type="mouseleave",h.target=m,h.relatedTarget=p;var f=a.getPooled(i.mouseEnter,c,n,s);return f.type="mouseenter",f.target=p,f.relatedTarget=m,r.accumulateEnterLeaveDispatches(h,f,l,c),[h,f]}};e.exports=s},function(e,t,n){"use strict";function r(e){this._root=e,this._startText=this.getText(),this._fallbackText=null}var o=n(7),a=n(17),i=n(183);o(r.prototype,{destructor:function(){this._root=null,this._startText=null,this._fallbackText=null},getText:function(){return"value"in this._root?this._root.value:this._root[i()]},getData:function(){if(this._fallbackText)return this._fallbackText;var e,t,n=this._startText,r=n.length,o=this.getText(),a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);var s=t>1?1-t:void 0;return this._fallbackText=o.slice(e,s),this._fallbackText}}),a.addPoolingTo(r),e.exports=r},function(e,t,n){"use strict";var r=n(16),o=r.injection.MUST_USE_PROPERTY,a=r.injection.HAS_BOOLEAN_VALUE,i=r.injection.HAS_NUMERIC_VALUE,s=r.injection.HAS_POSITIVE_NUMERIC_VALUE,u=r.injection.HAS_OVERLOADED_BOOLEAN_VALUE,d={isCustomAttribute:RegExp.prototype.test.bind(new RegExp("^(data|aria)-["+r.ATTRIBUTE_NAME_CHAR+"]*$")),Properties:{accept:0,acceptCharset:0,accessKey:0,action:0,allowFullScreen:a,allowTransparency:0,alt:0,as:0,async:a,autoComplete:0,autoPlay:a,capture:a,cellPadding:0,cellSpacing:0,charSet:0,challenge:0,checked:o|a,cite:0,classID:0,className:0,cols:s,colSpan:0,content:0,contentEditable:0,contextMenu:0,controls:a,coords:0,crossOrigin:0,data:0,dateTime:0,default:a,defer:a,dir:0,disabled:a,download:u,draggable:0,encType:0,form:0,formAction:0,formEncType:0,formMethod:0,formNoValidate:a,formTarget:0,frameBorder:0,headers:0,height:0,hidden:a,high:0,href:0,hrefLang:0,htmlFor:0,httpEquiv:0,icon:0,id:0,inputMode:0,integrity:0,is:0,keyParams:0,keyType:0,kind:0,label:0,lang:0,list:0,loop:a,low:0,manifest:0,marginHeight:0,marginWidth:0,max:0,maxLength:0,media:0,mediaGroup:0,method:0,min:0,minLength:0,multiple:o|a,muted:o|a,name:0,nonce:0,noValidate:a,open:a,optimum:0,pattern:0,placeholder:0,playsInline:a,poster:0,preload:0,profile:0,radioGroup:0,readOnly:a,referrerPolicy:0,rel:0,required:a,reversed:a,role:0,rows:s,rowSpan:i,sandbox:0,scope:0,scoped:a,scrolling:0,seamless:a,selected:o|a,shape:0,size:s,sizes:0,span:s,spellCheck:0,src:0,srcDoc:0,srcLang:0,srcSet:0,start:i,step:0,style:0,summary:0,tabIndex:0,target:0,title:0,type:0,useMap:0,value:0,width:0,wmode:0,wrap:0,about:0,datatype:0,inlist:0,prefix:0,property:0,resource:0,typeof:0,vocab:0,autoCapitalize:0,autoCorrect:0,autoSave:0,color:0,itemProp:0,itemScope:a,itemType:0,itemID:0,itemRef:0,results:0,security:0,unselectable:0},DOMAttributeNames:{acceptCharset:"accept-charset",className:"class",htmlFor:"for",httpEquiv:"http-equiv"},DOMPropertyNames:{}};e.exports=d},function(e,t,n){(function(t){"use strict";function r(e,r,a,u){var d=void 0===e[a];"production"!==t.env.NODE_ENV&&(o||(o=n(9)),d||("production"!==t.env.NODE_ENV?l(!1,"flattenChildren(...): Encountered two children with the same key, `%s`. Child keys must be unique; when two children share a key, only the first child will be used.%s",s.unescape(a),o.getStackAddendumByID(u)):void 0)),null!=r&&d&&(e[a]=i(r,!0))}var o,a=n(22),i=n(184),s=n(38),u=n(48),d=n(187),l=n(5);"undefined"!=typeof t&&t.env&&"test"===t.env.NODE_ENV&&(o=n(9));var c={instantiateChildren:function(e,n,o,a){if(null==e)return null;var i={};return"production"!==t.env.NODE_ENV?d(e,function(e,t,n){return r(e,t,n,a)},i):d(e,r,i),i},updateChildren:function(e,t,n,r,o,s,d,l,c){if(t||e){var _,m;for(_ in t)if(t.hasOwnProperty(_)){m=e&&e[_];var p=m&&m._currentElement,h=t[_];if(null!=m&&u(p,h))a.receiveComponent(m,h,o,l),t[_]=m;else{m&&(r[_]=a.getHostNode(m),a.unmountComponent(m,!1));var f=i(h,!0);t[_]=f;var y=a.mountComponent(f,o,s,d,l,c);n.push(y)}}for(_ in e)!e.hasOwnProperty(_)||t&&t.hasOwnProperty(_)||(m=e[_],r[_]=a.getHostNode(m),a.unmountComponent(m,!1))}},unmountChildren:function(e,t){for(var n in e)if(e.hasOwnProperty(n)){var r=e[n];a.unmountComponent(r,t)}}};e.exports=c}).call(t,n(2))},function(e,t,n){"use strict";var r=n(35),o=n(218),a={processChildrenUpdates:o.dangerouslyProcessChildrenUpdates,replaceNodeWithMarkup:r.dangerouslyReplaceNodeWithMarkup};e.exports=a},function(e,t,n){(function(t){"use strict";function r(e){}function o(e,n){"production"!==t.env.NODE_ENV&&("production"!==t.env.NODE_ENV?Y(null===n||n===!1||l.isValidElement(n),"%s(...): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.",e.displayName||e.name||"Component"):void 0,"production"!==t.env.NODE_ENV?Y(!e.childContextTypes,"%s(...): childContextTypes cannot be defined on a functional component.",e.displayName||e.name||"Component"):void 0)}function a(e){return!(!e.prototype||!e.prototype.isReactComponent)}function i(e){return!(!e.prototype||!e.prototype.isPureReactComponent)}function s(e,t,n){if(0===t)return e();h.debugTool.onBeginLifeCycleTimer(t,n);try{return e()}finally{h.debugTool.onEndLifeCycleTimer(t,n)}}var u=n(4),d=n(7),l=n(23),c=n(40),_=n(12),m=n(41),p=n(26),h=n(10),f=n(177),y=n(22);if("production"!==t.env.NODE_ENV)var v=n(260);var M=n(189),g=n(3),L=n(50),D=n(48),Y=n(5),k={ImpureClass:0,PureClass:1,StatelessFunctional:2};r.prototype.render=function(){var e=p.get(this)._currentElement.type,t=e(this.props,this.context,this.updater);return o(e,t),t};var b=1,T={construct:function(e){this._currentElement=e,this._rootNodeID=0,this._compositeType=null,this._instance=null,this._hostParent=null,this._hostContainerInfo=null,this._updateBatchNumber=null,this._pendingElement=null,this._pendingStateQueue=null,this._pendingReplaceState=!1,this._pendingForceUpdate=!1,this._renderedNodeType=null,this._renderedComponent=null,this._context=null,this._mountOrder=0,this._topLevelWrapper=null,this._pendingCallbacks=null,this._calledComponentWillUnmount=!1,"production"!==t.env.NODE_ENV&&(this._warnedAboutRefsInRender=!1)},mountComponent:function(e,n,d,c){var _=this;this._context=c,this._mountOrder=b++,this._hostParent=n,this._hostContainerInfo=d;var m,h=this._currentElement.props,f=this._processContext(c),y=this._currentElement.type,v=e.getUpdateQueue(),L=a(y),D=this._constructComponent(L,h,f,v);if(L||null!=D&&null!=D.render?i(y)?this._compositeType=k.PureClass:this._compositeType=k.ImpureClass:(m=D,o(y,m),null===D||D===!1||l.isValidElement(D)?void 0:"production"!==t.env.NODE_ENV?g(!1,"%s(...): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.",y.displayName||y.name||"Component"):u("105",y.displayName||y.name||"Component"),D=new r(y),this._compositeType=k.StatelessFunctional),"production"!==t.env.NODE_ENV){null==D.render&&("production"!==t.env.NODE_ENV?Y(!1,"%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.",y.displayName||y.name||"Component"):void 0);var T=D.props!==h,w=y.displayName||y.name||"Component";"production"!==t.env.NODE_ENV?Y(void 0===D.props||!T,"%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.",w,w):void 0}D.props=h,D.context=f,D.refs=M,D.updater=v,this._instance=D,p.set(D,this),"production"!==t.env.NODE_ENV&&("production"!==t.env.NODE_ENV?Y(!D.getInitialState||D.getInitialState.isReactClassApproved,"getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?",this.getName()||"a component"):void 0,"production"!==t.env.NODE_ENV?Y(!D.getDefaultProps||D.getDefaultProps.isReactClassApproved,"getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.",this.getName()||"a component"):void 0,"production"!==t.env.NODE_ENV?Y(!D.propTypes,"propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.",this.getName()||"a component"):void 0,"production"!==t.env.NODE_ENV?Y(!D.contextTypes,"contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.",this.getName()||"a component"):void 0,"production"!==t.env.NODE_ENV?Y("function"!=typeof D.componentShouldUpdate,"%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.",this.getName()||"A component"):void 0,"production"!==t.env.NODE_ENV?Y("function"!=typeof D.componentDidUnmount,"%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?",this.getName()||"A component"):void 0,"production"!==t.env.NODE_ENV?Y("function"!=typeof D.componentWillRecieveProps,"%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?",this.getName()||"A component"):void 0);var E=D.state;void 0===E&&(D.state=E=null),"object"!=typeof E||Array.isArray(E)?"production"!==t.env.NODE_ENV?g(!1,"%s.state: must be set to an object or null",this.getName()||"ReactCompositeComponent"):u("106",this.getName()||"ReactCompositeComponent"):void 0,this._pendingStateQueue=null,this._pendingReplaceState=!1,this._pendingForceUpdate=!1;var N;return N=D.unstable_handleError?this.performInitialMountWithErrorHandling(m,n,d,e,c):this.performInitialMount(m,n,d,e,c),D.componentDidMount&&("production"!==t.env.NODE_ENV?e.getReactMountReady().enqueue(function(){s(function(){return D.componentDidMount()},_._debugID,"componentDidMount")}):e.getReactMountReady().enqueue(D.componentDidMount,D)),N},_constructComponent:function(e,n,r,o){if("production"===t.env.NODE_ENV)return this._constructComponentWithoutOwner(e,n,r,o);_.current=this;try{return this._constructComponentWithoutOwner(e,n,r,o)}finally{_.current=null}},_constructComponentWithoutOwner:function(e,n,r,o){var a=this._currentElement.type;return e?"production"!==t.env.NODE_ENV?s(function(){return new a(n,r,o)},this._debugID,"ctor"):new a(n,r,o):"production"!==t.env.NODE_ENV?s(function(){return a(n,r,o)},this._debugID,"render"):a(n,r,o)},performInitialMountWithErrorHandling:function(e,t,n,r,o){var a,i=r.checkpoint();try{a=this.performInitialMount(e,t,n,r,o)}catch(s){r.rollback(i),this._instance.unstable_handleError(s),this._pendingStateQueue&&(this._instance.state=this._processPendingState(this._instance.props,this._instance.context)),i=r.checkpoint(),this._renderedComponent.unmountComponent(!0),r.rollback(i),a=this.performInitialMount(e,t,n,r,o)}return a},performInitialMount:function(e,n,r,o,a){var i=this._instance,u=0;"production"!==t.env.NODE_ENV&&(u=this._debugID),i.componentWillMount&&("production"!==t.env.NODE_ENV?s(function(){return i.componentWillMount()},u,"componentWillMount"):i.componentWillMount(),this._pendingStateQueue&&(i.state=this._processPendingState(i.props,i.context))),void 0===e&&(e=this._renderValidatedComponent());var d=f.getType(e);this._renderedNodeType=d;var l=this._instantiateReactComponent(e,d!==f.EMPTY);this._renderedComponent=l;var c=y.mountComponent(l,o,n,r,this._processChildContext(a),u);if("production"!==t.env.NODE_ENV&&0!==u){var _=0!==l._debugID?[l._debugID]:[];h.debugTool.onSetChildren(u,_)}return c},getHostNode:function(){return y.getHostNode(this._renderedComponent)},unmountComponent:function(e){if(this._renderedComponent){var n=this._instance;if(n.componentWillUnmount&&!n._calledComponentWillUnmount)if(n._calledComponentWillUnmount=!0,e){var r=this.getName()+".componentWillUnmount()";m.invokeGuardedCallback(r,n.componentWillUnmount.bind(n))}else"production"!==t.env.NODE_ENV?s(function(){return n.componentWillUnmount()},this._debugID,"componentWillUnmount"):n.componentWillUnmount();this._renderedComponent&&(y.unmountComponent(this._renderedComponent,e),this._renderedNodeType=null,this._renderedComponent=null,this._instance=null),this._pendingStateQueue=null,this._pendingReplaceState=!1,this._pendingForceUpdate=!1,this._pendingCallbacks=null,this._pendingElement=null,this._context=null,this._rootNodeID=0,this._topLevelWrapper=null,p.remove(n)}},_maskContext:function(e){var t=this._currentElement.type,n=t.contextTypes;if(!n)return M;var r={};for(var o in n)r[o]=e[o];return r},_processContext:function(e){var n=this._maskContext(e);if("production"!==t.env.NODE_ENV){var r=this._currentElement.type;r.contextTypes&&this._checkContextTypes(r.contextTypes,n,"context")}return n},_processChildContext:function(e){var n,r=this._currentElement.type,o=this._instance;if(o.getChildContext)if("production"!==t.env.NODE_ENV){h.debugTool.onBeginProcessingChildContext();try{n=o.getChildContext()}finally{h.debugTool.onEndProcessingChildContext()}}else n=o.getChildContext();if(n){"object"!=typeof r.childContextTypes?"production"!==t.env.NODE_ENV?g(!1,"%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().",this.getName()||"ReactCompositeComponent"):u("107",this.getName()||"ReactCompositeComponent"):void 0,"production"!==t.env.NODE_ENV&&this._checkContextTypes(r.childContextTypes,n,"childContext");for(var a in n)a in r.childContextTypes?void 0:"production"!==t.env.NODE_ENV?g(!1,'%s.getChildContext(): key "%s" is not defined in childContextTypes.',this.getName()||"ReactCompositeComponent",a):u("108",this.getName()||"ReactCompositeComponent",a);return d({},e,n)}return e},_checkContextTypes:function(e,n,r){"production"!==t.env.NODE_ENV&&v(e,n,r,this.getName(),null,this._debugID)},receiveComponent:function(e,t,n){var r=this._currentElement,o=this._context;this._pendingElement=null,this.updateComponent(t,r,e,o,n)},performUpdateIfNecessary:function(e){null!=this._pendingElement?y.receiveComponent(this,this._pendingElement,e,this._context):null!==this._pendingStateQueue||this._pendingForceUpdate?this.updateComponent(e,this._currentElement,this._currentElement,this._context,this._context):this._updateBatchNumber=null},updateComponent:function(e,n,r,o,a){var i=this._instance;null==i?"production"!==t.env.NODE_ENV?g(!1,"Attempted to update component `%s` that has already been unmounted (or failed to mount).",this.getName()||"ReactCompositeComponent"):u("136",this.getName()||"ReactCompositeComponent"):void 0;var d,l=!1;this._context===a?d=i.context:(d=this._processContext(a),l=!0);var c=n.props,_=r.props;n!==r&&(l=!0),l&&i.componentWillReceiveProps&&("production"!==t.env.NODE_ENV?s(function(){return i.componentWillReceiveProps(_,d)},this._debugID,"componentWillReceiveProps"):i.componentWillReceiveProps(_,d));var m=this._processPendingState(_,d),p=!0;this._pendingForceUpdate||(i.shouldComponentUpdate?p="production"!==t.env.NODE_ENV?s(function(){return i.shouldComponentUpdate(_,m,d)},this._debugID,"shouldComponentUpdate"):i.shouldComponentUpdate(_,m,d):this._compositeType===k.PureClass&&(p=!L(c,_)||!L(i.state,m))),"production"!==t.env.NODE_ENV&&("production"!==t.env.NODE_ENV?Y(void 0!==p,"%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.",this.getName()||"ReactCompositeComponent"):void 0),this._updateBatchNumber=null,p?(this._pendingForceUpdate=!1,this._performComponentUpdate(r,_,m,d,e,a)):(this._currentElement=r,this._context=a,i.props=_,i.state=m,i.context=d)},_processPendingState:function(e,t){var n=this._instance,r=this._pendingStateQueue,o=this._pendingReplaceState;if(this._pendingReplaceState=!1,this._pendingStateQueue=null,!r)return n.state;if(o&&1===r.length)return r[0];for(var a=d({},o?r[0]:n.state),i=o?1:0;i<r.length;i++){var s=r[i];d(a,"function"==typeof s?s.call(n,a,e,t):s)}return a},_performComponentUpdate:function(e,n,r,o,a,i){var u,d,l,c=this,_=this._instance,m=Boolean(_.componentDidUpdate);m&&(u=_.props,d=_.state,l=_.context),_.componentWillUpdate&&("production"!==t.env.NODE_ENV?s(function(){return _.componentWillUpdate(n,r,o)},this._debugID,"componentWillUpdate"):_.componentWillUpdate(n,r,o)),this._currentElement=e,this._context=i,_.props=n,_.state=r,_.context=o,this._updateRenderedComponent(a,i),m&&("production"!==t.env.NODE_ENV?a.getReactMountReady().enqueue(function(){s(_.componentDidUpdate.bind(_,u,d,l),c._debugID,"componentDidUpdate")}):a.getReactMountReady().enqueue(_.componentDidUpdate.bind(_,u,d,l),_))},_updateRenderedComponent:function(e,n){var r=this._renderedComponent,o=r._currentElement,a=this._renderValidatedComponent(),i=0;if("production"!==t.env.NODE_ENV&&(i=this._debugID),D(o,a))y.receiveComponent(r,a,e,this._processChildContext(n));else{var s=y.getHostNode(r);y.unmountComponent(r,!1);var u=f.getType(a);this._renderedNodeType=u;var d=this._instantiateReactComponent(a,u!==f.EMPTY);this._renderedComponent=d;var l=y.mountComponent(d,e,this._hostParent,this._hostContainerInfo,this._processChildContext(n),i);if("production"!==t.env.NODE_ENV&&0!==i){var c=0!==d._debugID?[d._debugID]:[];h.debugTool.onSetChildren(i,c)}this._replaceNodeWithMarkup(s,l,r)}},_replaceNodeWithMarkup:function(e,t,n){c.replaceNodeWithMarkup(e,t,n)},_renderValidatedComponentWithoutOwnerOrContext:function(){var e,n=this._instance;return e="production"!==t.env.NODE_ENV?s(function(){return n.render()},this._debugID,"render"):n.render(),"production"!==t.env.NODE_ENV&&void 0===e&&n.render._isMockFunction&&(e=null),e},_renderValidatedComponent:function(){var e;if("production"!==t.env.NODE_ENV||this._compositeType!==k.StatelessFunctional){_.current=this;try{e=this._renderValidatedComponentWithoutOwnerOrContext()}finally{_.current=null}}else e=this._renderValidatedComponentWithoutOwnerOrContext();return null===e||e===!1||l.isValidElement(e)?void 0:"production"!==t.env.NODE_ENV?g(!1,"%s.render(): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.",this.getName()||"ReactCompositeComponent"):u("109",this.getName()||"ReactCompositeComponent"),e},attachRef:function(e,n){var r=this.getPublicInstance();null==r?"production"!==t.env.NODE_ENV?g(!1,"Stateless function components cannot have refs."):u("110"):void 0;var o=n.getPublicInstance();if("production"!==t.env.NODE_ENV){var a=n&&n.getName?n.getName():"a component";"production"!==t.env.NODE_ENV?Y(null!=o||n._compositeType!==k.StatelessFunctional,'Stateless function components cannot be given refs (See ref "%s" in %s created by %s). Attempts to access this ref will fail.',e,a,this.getName()):void 0}var i=r.refs===M?r.refs={}:r.refs;i[e]=o},detachRef:function(e){var t=this.getPublicInstance().refs;delete t[e]},getName:function(){var e=this._currentElement.type,t=this._instance&&this._instance.constructor;return e.displayName||t&&t.displayName||e.name||t&&t.name||null},getPublicInstance:function(){var e=this._instance;return this._compositeType===k.StatelessFunctional?null:e},_instantiateReactComponent:null};e.exports=T}).call(t,n(2))},function(e,t,n){(function(t){"use strict";var r=n(6),o=n(230),a=n(176),i=n(22),s=n(11),u=n(245),d=n(262),l=n(182),c=n(270),_=n(5);o.inject();var m={findDOMNode:d,render:a.render,unmountComponentAtNode:a.unmountComponentAtNode,version:u,unstable_batchedUpdates:s.batchedUpdates,unstable_renderSubtreeIntoContainer:c};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject&&__REACT_DEVTOOLS_GLOBAL_HOOK__.inject({ComponentTree:{getClosestInstanceFromNode:r.getClosestInstanceFromNode,getNodeFromInstance:function(e){return e._renderedComponent&&(e=l(e)),e?r.getNodeFromInstance(e):null}},Mount:a,Reconciler:i}),"production"!==t.env.NODE_ENV){var p=n(8);if(p.canUseDOM&&window.top===window.self){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&(navigator.userAgent.indexOf("Chrome")>-1&&navigator.userAgent.indexOf("Edge")===-1||navigator.userAgent.indexOf("Firefox")>-1)){var h=window.location.protocol.indexOf("http")===-1&&navigator.userAgent.indexOf("Firefox")===-1;
console.debug("Download the React DevTools "+(h?"and use an HTTP server (instead of a file: URL) ":"")+"for a better development experience: https://fb.me/react-devtools")}var f=function(){};"production"!==t.env.NODE_ENV?_((f.name||f.toString()).indexOf("testFn")!==-1,"It looks like you're using a minified copy of the development build of React. When deploying React apps to production, make sure to use the production build which skips development warnings and is faster. See https://fb.me/react-minification for more details."):void 0;var y=document.documentMode&&document.documentMode<8;"production"!==t.env.NODE_ENV?_(!y,'Internet Explorer is running in compatibility mode; please add the following tag to your HTML to prevent this from happening: <meta http-equiv="X-UA-Compatible" content="IE=edge" />'):void 0;for(var v=[Array.isArray,Array.prototype.every,Array.prototype.forEach,Array.prototype.indexOf,Array.prototype.map,Date.now,Function.prototype.bind,Object.keys,String.prototype.trim],M=0;M<v.length;M++)if(!v[M]){"production"!==t.env.NODE_ENV?_(!1,"One or more ES5 shims expected by React are not available: https://fb.me/react-warning-polyfills"):void 0;break}}}if("production"!==t.env.NODE_ENV){var g=n(10),L=n(227),D=n(221),Y=n(220);g.debugTool.addHook(L),g.debugTool.addHook(D),g.debugTool.addHook(Y)}e.exports=m}).call(t,n(2))},function(e,t,n){(function(t){"use strict";function r(e){if(e){var t=e._currentElement._owner||null;if(t){var n=t.getName();if(n)return" This DOM node was rendered by `"+n+"`."}}return""}function o(e){if("object"==typeof e){if(Array.isArray(e))return"["+e.map(o).join(", ")+"]";var t=[];for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=/^[a-z$_][\w$_]*$/i.test(n)?n:JSON.stringify(n);t.push(r+": "+o(e[n]))}return"{"+t.join(", ")+"}"}return"string"==typeof e?JSON.stringify(e):"function"==typeof e?"[function object]":String(e)}function a(e,n,r){if(null!=e&&null!=n&&!F(e,n)){var a,i=r._tag,s=r._currentElement._owner;s&&(a=s.getName());var u=a+"|"+i;ee.hasOwnProperty(u)||(ee[u]=!0,"production"!==t.env.NODE_ENV?U(!1,"`%s` was passed a style object that has previously been mutated. Mutating `style` is deprecated. Consider cloning it beforehand. Check the `render` %s. Previous style: %s. Mutated style: %s.",i,s?"of `"+a+"`":"using <"+i+">",o(e),o(n)):void 0)}}function i(e,n){n&&(ae[e._tag]&&(null!=n.children||null!=n.dangerouslySetInnerHTML?"production"!==t.env.NODE_ENV?R(!1,"%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s",e._tag,e._currentElement._owner?" Check the render method of "+e._currentElement._owner.getName()+".":""):y("137",e._tag,e._currentElement._owner?" Check the render method of "+e._currentElement._owner.getName()+".":""):void 0),null!=n.dangerouslySetInnerHTML&&(null!=n.children?"production"!==t.env.NODE_ENV?R(!1,"Can only set one of `children` or `props.dangerouslySetInnerHTML`."):y("60"):void 0,"object"==typeof n.dangerouslySetInnerHTML&&X in n.dangerouslySetInnerHTML?void 0:"production"!==t.env.NODE_ENV?R(!1,"`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information."):y("61")),"production"!==t.env.NODE_ENV&&("production"!==t.env.NODE_ENV?U(null==n.innerHTML,"Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`."):void 0,"production"!==t.env.NODE_ENV?U(n.suppressContentEditableWarning||!n.contentEditable||null==n.children,"A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional."):void 0,"production"!==t.env.NODE_ENV?U(null==n.onFocusIn&&null==n.onFocusOut,"React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React."):void 0),null!=n.style&&"object"!=typeof n.style?"production"!==t.env.NODE_ENV?R(!1,"The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.%s",r(e)):y("62",r(e)):void 0)}function s(e,n,r,o){if(!(o instanceof H)){"production"!==t.env.NODE_ENV&&("production"!==t.env.NODE_ENV?U("onScroll"!==n||V("scroll",!0),"This browser doesn't support the `onScroll` event"):void 0);var a=e._hostContainerInfo,i=a._node&&a._node.nodeType===Z,s=i?a._node:a._ownerDocument;q(n,s),o.getReactMountReady().enqueue(u,{inst:e,registrationName:n,listener:r})}}function u(){var e=this;b.putListener(e.inst,e.registrationName,e.listener)}function d(){var e=this;S.postMountWrapper(e)}function l(){var e=this;C.postMountWrapper(e)}function c(){var e=this;x.postMountWrapper(e)}function _(){var e=this;e._rootNodeID?void 0:"production"!==t.env.NODE_ENV?R(!1,"Must be mounted to trap events"):y("63");var n=J(e);switch(n?void 0:"production"!==t.env.NODE_ENV?R(!1,"trapBubbledEvent(...): Requires node to be rendered."):y("64"),e._tag){case"iframe":case"object":e._wrapperState.listeners=[w.trapBubbledEvent("topLoad","load",n)];break;case"video":case"audio":e._wrapperState.listeners=[];for(var r in ne)ne.hasOwnProperty(r)&&e._wrapperState.listeners.push(w.trapBubbledEvent(r,ne[r],n));break;case"source":e._wrapperState.listeners=[w.trapBubbledEvent("topError","error",n)];break;case"img":e._wrapperState.listeners=[w.trapBubbledEvent("topError","error",n),w.trapBubbledEvent("topLoad","load",n)];break;case"form":e._wrapperState.listeners=[w.trapBubbledEvent("topReset","reset",n),w.trapBubbledEvent("topSubmit","submit",n)];break;case"input":case"select":case"textarea":e._wrapperState.listeners=[w.trapBubbledEvent("topInvalid","invalid",n)]}}function m(){O.postUpdateWrapper(this)}function p(e){ue.call(se,e)||(ie.test(e)?void 0:"production"!==t.env.NODE_ENV?R(!1,"Invalid tag: %s",e):y("65",e),se[e]=!0)}function h(e,t){return e.indexOf("-")>=0||null!=t.is}function f(e){var n=e.type;p(n),this._currentElement=e,this._tag=n.toLowerCase(),this._namespaceURI=null,this._renderedChildren=null,this._previousStyle=null,this._previousStyleCopy=null,this._hostNode=null,this._hostParent=null,this._rootNodeID=0,this._domID=0,this._hostContainerInfo=null,this._wrapperState=null,this._topLevelWrapper=null,this._flags=0,"production"!==t.env.NODE_ENV&&(this._ancestorInfo=null,te.call(this,null))}var y=n(4),v=n(7),M=n(201),g=n(203),L=n(21),D=n(36),Y=n(16),k=n(169),b=n(24),T=n(28),w=n(29),E=n(170),N=n(6),S=n(219),x=n(222),O=n(171),C=n(225),j=n(10),P=n(238),H=n(243),A=n(15),I=n(32),R=n(3),V=n(47),F=n(50),W=n(49),U=n(5),z=E,B=b.deleteListener,J=N.getNodeFromInstance,q=w.listenTo,G=T.registrationNameModules,K={string:!0,number:!0},$="style",X="__html",Q={children:null,dangerouslySetInnerHTML:null,suppressContentEditableWarning:null},Z=11,ee={},te=A;"production"!==t.env.NODE_ENV&&(te=function(e){var t=null!=this._contentDebugID,n=this._debugID,r=-n;return null==e?(t&&j.debugTool.onUnmountComponent(this._contentDebugID),void(this._contentDebugID=null)):(W(null,String(e),this,this._ancestorInfo),this._contentDebugID=r,void(t?(j.debugTool.onBeforeUpdateComponent(r,e),j.debugTool.onUpdateComponent(r)):(j.debugTool.onBeforeMountComponent(r,e,n),j.debugTool.onMountComponent(r),j.debugTool.onSetChildren(n,[r]))))});var ne={topAbort:"abort",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topSeeked:"seeked",topSeeking:"seeking",topStalled:"stalled",topSuspend:"suspend",topTimeUpdate:"timeupdate",topVolumeChange:"volumechange",topWaiting:"waiting"},re={area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0},oe={listing:!0,pre:!0,textarea:!0},ae=v({menuitem:!0},re),ie=/^[a-zA-Z][a-zA-Z:_\.\-\d]*$/,se={},ue={}.hasOwnProperty,de=1;f.displayName="ReactDOMComponent",f.Mixin={mountComponent:function(e,n,r,o){this._rootNodeID=de++,this._domID=r._idCounter++,this._hostParent=n,this._hostContainerInfo=r;var a=this._currentElement.props;switch(this._tag){case"audio":case"form":case"iframe":case"img":case"link":case"object":case"source":case"video":this._wrapperState={listeners:null},e.getReactMountReady().enqueue(_,this);break;case"input":S.mountWrapper(this,a,n),a=S.getHostProps(this,a),e.getReactMountReady().enqueue(_,this);break;case"option":x.mountWrapper(this,a,n),a=x.getHostProps(this,a);break;case"select":O.mountWrapper(this,a,n),a=O.getHostProps(this,a),e.getReactMountReady().enqueue(_,this);break;case"textarea":C.mountWrapper(this,a,n),a=C.getHostProps(this,a),e.getReactMountReady().enqueue(_,this)}i(this,a);var s,u;if(null!=n?(s=n._namespaceURI,u=n._tag):r._tag&&(s=r._namespaceURI,u=r._tag),(null==s||s===D.svg&&"foreignobject"===u)&&(s=D.html),s===D.html&&("svg"===this._tag?s=D.svg:"math"===this._tag&&(s=D.mathml)),this._namespaceURI=s,"production"!==t.env.NODE_ENV){var m;null!=n?m=n._ancestorInfo:r._tag&&(m=r._ancestorInfo),m&&W(this._tag,null,this,m),this._ancestorInfo=W.updatedAncestorInfo(m,this._tag,this)}var p;if(e.useCreateElement){var h,f=r._ownerDocument;if(s===D.html)if("script"===this._tag){var y=f.createElement("div"),v=this._currentElement.type;y.innerHTML="<"+v+"></"+v+">",h=y.removeChild(y.firstChild)}else h=a.is?f.createElement(this._currentElement.type,a.is):f.createElement(this._currentElement.type);else h=f.createElementNS(s,this._currentElement.type);N.precacheNode(this,h),this._flags|=z.hasCachedChildNodes,this._hostParent||k.setAttributeForRoot(h),this._updateDOMProperties(null,a,e);var g=L(h);this._createInitialChildren(e,a,o,g),p=g}else{var Y=this._createOpenTagMarkupAndPutListeners(e,a),b=this._createContentMarkup(e,a,o);p=!b&&re[this._tag]?Y+"/>":Y+">"+b+"</"+this._currentElement.type+">"}switch(this._tag){case"input":e.getReactMountReady().enqueue(d,this),a.autoFocus&&e.getReactMountReady().enqueue(M.focusDOMComponent,this);break;case"textarea":e.getReactMountReady().enqueue(l,this),a.autoFocus&&e.getReactMountReady().enqueue(M.focusDOMComponent,this);break;case"select":a.autoFocus&&e.getReactMountReady().enqueue(M.focusDOMComponent,this);break;case"button":a.autoFocus&&e.getReactMountReady().enqueue(M.focusDOMComponent,this);break;case"option":e.getReactMountReady().enqueue(c,this)}return p},_createOpenTagMarkupAndPutListeners:function(e,n){var r="<"+this._currentElement.type;for(var o in n)if(n.hasOwnProperty(o)){var a=n[o];if(null!=a)if(G.hasOwnProperty(o))a&&s(this,o,a,e);else{o===$&&(a&&("production"!==t.env.NODE_ENV&&(this._previousStyle=a),a=this._previousStyleCopy=v({},n.style)),a=g.createMarkupForStyles(a,this));var i=null;null!=this._tag&&h(this._tag,n)?Q.hasOwnProperty(o)||(i=k.createMarkupForCustomAttribute(o,a)):i=k.createMarkupForProperty(o,a),i&&(r+=" "+i)}}return e.renderToStaticMarkup?r:(this._hostParent||(r+=" "+k.createMarkupForRoot()),r+=" "+k.createMarkupForID(this._domID))},_createContentMarkup:function(e,n,r){var o="",a=n.dangerouslySetInnerHTML;if(null!=a)null!=a.__html&&(o=a.__html);else{var i=K[typeof n.children]?n.children:null,s=null!=i?null:n.children;if(null!=i)o=I(i),"production"!==t.env.NODE_ENV&&te.call(this,i);else if(null!=s){var u=this.mountChildren(s,e,r);o=u.join("")}}return oe[this._tag]&&"\n"===o.charAt(0)?"\n"+o:o},_createInitialChildren:function(e,n,r,o){var a=n.dangerouslySetInnerHTML;if(null!=a)null!=a.__html&&L.queueHTML(o,a.__html);else{var i=K[typeof n.children]?n.children:null,s=null!=i?null:n.children;if(null!=i)"production"!==t.env.NODE_ENV&&te.call(this,i),L.queueText(o,i);else if(null!=s)for(var u=this.mountChildren(s,e,r),d=0;d<u.length;d++)L.queueChild(o,u[d])}},receiveComponent:function(e,t,n){var r=this._currentElement;this._currentElement=e,this.updateComponent(t,r,e,n)},updateComponent:function(e,t,n,r){var o=t.props,a=this._currentElement.props;switch(this._tag){case"input":o=S.getHostProps(this,o),a=S.getHostProps(this,a);break;case"option":o=x.getHostProps(this,o),a=x.getHostProps(this,a);break;case"select":o=O.getHostProps(this,o),a=O.getHostProps(this,a);break;case"textarea":o=C.getHostProps(this,o),a=C.getHostProps(this,a)}switch(i(this,a),this._updateDOMProperties(o,a,e),this._updateDOMChildren(o,a,e,r),this._tag){case"input":S.updateWrapper(this);break;case"textarea":C.updateWrapper(this);break;case"select":e.getReactMountReady().enqueue(m,this)}},_updateDOMProperties:function(e,n,r){var o,i,u;for(o in e)if(!n.hasOwnProperty(o)&&e.hasOwnProperty(o)&&null!=e[o])if(o===$){var d=this._previousStyleCopy;for(i in d)d.hasOwnProperty(i)&&(u=u||{},u[i]="");this._previousStyleCopy=null}else G.hasOwnProperty(o)?e[o]&&B(this,o):h(this._tag,e)?Q.hasOwnProperty(o)||k.deleteValueForAttribute(J(this),o):(Y.properties[o]||Y.isCustomAttribute(o))&&k.deleteValueForProperty(J(this),o);for(o in n){var l=n[o],c=o===$?this._previousStyleCopy:null!=e?e[o]:void 0;if(n.hasOwnProperty(o)&&l!==c&&(null!=l||null!=c))if(o===$)if(l?("production"!==t.env.NODE_ENV&&(a(this._previousStyleCopy,this._previousStyle,this),this._previousStyle=l),l=this._previousStyleCopy=v({},l)):this._previousStyleCopy=null,c){for(i in c)!c.hasOwnProperty(i)||l&&l.hasOwnProperty(i)||(u=u||{},u[i]="");for(i in l)l.hasOwnProperty(i)&&c[i]!==l[i]&&(u=u||{},u[i]=l[i])}else u=l;else if(G.hasOwnProperty(o))l?s(this,o,l,r):c&&B(this,o);else if(h(this._tag,n))Q.hasOwnProperty(o)||k.setValueForAttribute(J(this),o,l);else if(Y.properties[o]||Y.isCustomAttribute(o)){var _=J(this);null!=l?k.setValueForProperty(_,o,l):k.deleteValueForProperty(_,o)}}u&&g.setValueForStyles(J(this),u,this)},_updateDOMChildren:function(e,n,r,o){var a=K[typeof e.children]?e.children:null,i=K[typeof n.children]?n.children:null,s=e.dangerouslySetInnerHTML&&e.dangerouslySetInnerHTML.__html,u=n.dangerouslySetInnerHTML&&n.dangerouslySetInnerHTML.__html,d=null!=a?null:e.children,l=null!=i?null:n.children,c=null!=a||null!=s,_=null!=i||null!=u;null!=d&&null==l?this.updateChildren(null,r,o):c&&!_&&(this.updateTextContent(""),"production"!==t.env.NODE_ENV&&j.debugTool.onSetChildren(this._debugID,[])),null!=i?a!==i&&(this.updateTextContent(""+i),"production"!==t.env.NODE_ENV&&te.call(this,i)):null!=u?(s!==u&&this.updateMarkup(""+u),"production"!==t.env.NODE_ENV&&j.debugTool.onSetChildren(this._debugID,[])):null!=l&&("production"!==t.env.NODE_ENV&&te.call(this,null),this.updateChildren(l,r,o))},getHostNode:function(){return J(this)},unmountComponent:function(e){switch(this._tag){case"audio":case"form":case"iframe":case"img":case"link":case"object":case"source":case"video":var n=this._wrapperState.listeners;if(n)for(var r=0;r<n.length;r++)n[r].remove();break;case"html":case"head":case"body":"production"!==t.env.NODE_ENV?R(!1,"<%s> tried to unmount. Because of cross-browser quirks it is impossible to unmount some top-level components (eg <html>, <head>, and <body>) reliably and efficiently. To fix this, have a single top-level component that never unmounts render these elements.",this._tag):y("66",this._tag)}this.unmountChildren(e),N.uncacheNode(this),b.deleteAllListeners(this),this._rootNodeID=0,this._domID=0,this._wrapperState=null,"production"!==t.env.NODE_ENV&&te.call(this,null)},getPublicInstance:function(){return J(this)}},v(f.prototype,f.Mixin,P.Mixin),e.exports=f}).call(t,n(2))},function(e,t,n){(function(t){"use strict";function r(e,n){var r={_topLevelWrapper:e,_idCounter:1,_ownerDocument:n?n.nodeType===a?n:n.ownerDocument:null,_node:n,_tag:n?n.nodeName.toLowerCase():null,_namespaceURI:n?n.namespaceURI:null};return"production"!==t.env.NODE_ENV&&(r._ancestorInfo=n?o.updatedAncestorInfo(null,r._tag,null):null),r}var o=n(49),a=9;e.exports=r}).call(t,n(2))},function(e,t,n){"use strict";var r=n(7),o=n(21),a=n(6),i=function(e){this._currentElement=null,this._hostNode=null,this._hostParent=null,this._hostContainerInfo=null,this._domID=0};r(i.prototype,{mountComponent:function(e,t,n,r){var i=n._idCounter++;this._domID=i,this._hostParent=t,this._hostContainerInfo=n;var s=" react-empty: "+this._domID+" ";if(e.useCreateElement){var u=n._ownerDocument,d=u.createComment(s);return a.precacheNode(this,d),o(d)}return e.renderToStaticMarkup?"":"<!--"+s+"-->"},receiveComponent:function(){},getHostNode:function(){return a.getNodeFromInstance(this)},unmountComponent:function(){a.uncacheNode(this)}}),e.exports=i},function(e,t){"use strict";var n={useCreateElement:!0,useFiber:!1};e.exports=n},function(e,t,n){"use strict";var r=n(35),o=n(6),a={dangerouslyProcessChildrenUpdates:function(e,t){var n=o.getNodeFromInstance(e);r.processUpdates(n,t)}};e.exports=a},function(e,t,n){(function(t){"use strict";function r(){this._rootNodeID&&g.updateWrapper(this)}function o(e){var t="checkbox"===e.type||"radio"===e.type;return t?null!=e.checked:null!=e.value}function a(e){var n=this._currentElement.props,o=d.executeOnChange(n,e);c.asap(r,this);var a=n.name;if("radio"===n.type&&null!=a){for(var s=l.getNodeFromInstance(this),u=s;u.parentNode;)u=u.parentNode;for(var m=u.querySelectorAll("input[name="+JSON.stringify(""+a)+'][type="radio"]'),p=0;p<m.length;p++){var h=m[p];if(h!==s&&h.form===s.form){var f=l.getInstanceFromNode(h);f?void 0:"production"!==t.env.NODE_ENV?_(!1,"ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported."):i("90"),c.asap(r,f)}}}return o}var i=n(4),s=n(7),u=n(169),d=n(39),l=n(6),c=n(11),_=n(3),m=n(5),p=!1,h=!1,f=!1,y=!1,v=!1,M=!1,g={getHostProps:function(e,t){var n=d.getValue(t),r=d.getChecked(t),o=s({type:void 0,step:void 0,min:void 0,max:void 0},t,{defaultChecked:void 0,defaultValue:void 0,value:null!=n?n:e._wrapperState.initialValue,checked:null!=r?r:e._wrapperState.initialChecked,onChange:e._wrapperState.onChange});return o},mountWrapper:function(e,n){if("production"!==t.env.NODE_ENV){d.checkPropTypes("input",n,e._currentElement._owner);var r=e._currentElement._owner;void 0===n.valueLink||p||("production"!==t.env.NODE_ENV?m(!1,"`valueLink` prop on `input` is deprecated; set `value` and `onChange` instead."):void 0,p=!0),void 0===n.checkedLink||h||("production"!==t.env.NODE_ENV?m(!1,"`checkedLink` prop on `input` is deprecated; set `value` and `onChange` instead."):void 0,h=!0),void 0===n.checked||void 0===n.defaultChecked||y||("production"!==t.env.NODE_ENV?m(!1,"%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://fb.me/react-controlled-components",r&&r.getName()||"A component",n.type):void 0,y=!0),void 0===n.value||void 0===n.defaultValue||f||("production"!==t.env.NODE_ENV?m(!1,"%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://fb.me/react-controlled-components",r&&r.getName()||"A component",n.type):void 0,f=!0)}var i=n.defaultValue;e._wrapperState={initialChecked:null!=n.checked?n.checked:n.defaultChecked,initialValue:null!=n.value?n.value:i,listeners:null,onChange:a.bind(e)},"production"!==t.env.NODE_ENV&&(e._wrapperState.controlled=o(n))},updateWrapper:function(e){var n=e._currentElement.props;if("production"!==t.env.NODE_ENV){var r=o(n),a=e._currentElement._owner;e._wrapperState.controlled||!r||M||("production"!==t.env.NODE_ENV?m(!1,"%s is changing an uncontrolled input of type %s to be controlled. Input elements should not switch from uncontrolled to controlled (or vice versa). Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://fb.me/react-controlled-components",a&&a.getName()||"A component",n.type):void 0,M=!0),!e._wrapperState.controlled||r||v||("production"!==t.env.NODE_ENV?m(!1,"%s is changing a controlled input of type %s to be uncontrolled. Input elements should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://fb.me/react-controlled-components",a&&a.getName()||"A component",n.type):void 0,v=!0)}var i=n.checked;null!=i&&u.setValueForProperty(l.getNodeFromInstance(e),"checked",i||!1);var s=l.getNodeFromInstance(e),c=d.getValue(n);if(null!=c){var _=""+c;_!==s.value&&(s.value=_)}else null==n.value&&null!=n.defaultValue&&(s.defaultValue=""+n.defaultValue),null==n.checked&&null!=n.defaultChecked&&(s.defaultChecked=!!n.defaultChecked)},postMountWrapper:function(e){var t=e._currentElement.props,n=l.getNodeFromInstance(e);switch(t.type){case"submit":case"reset":break;case"color":case"date":case"datetime":case"datetime-local":case"month":case"time":case"week":n.value="",n.value=n.defaultValue;break;default:n.value=n.value}var r=n.name;""!==r&&(n.name=""),n.defaultChecked=!n.defaultChecked,n.defaultChecked=!n.defaultChecked,""!==r&&(n.name=r)}};e.exports=g}).call(t,n(2))},function(e,t,n){(function(t){"use strict";function r(e,n,r){if(d.hasOwnProperty(n)&&d[n])return!0;if(l.test(n)){var o=n.toLowerCase(),a=i.getPossibleStandardName.hasOwnProperty(o)?i.getPossibleStandardName[o]:null;if(null==a)return d[n]=!0,!1;if(n!==a)return"production"!==t.env.NODE_ENV?u(!1,"Unknown ARIA attribute %s. Did you mean %s?%s",n,a,s.getStackAddendumByID(r)):void 0,d[n]=!0,!0}return!0}function o(e,n){var o=[];for(var a in n.props){var i=r(n.type,a,e);i||o.push(a)}var d=o.map(function(e){return"`"+e+"`"}).join(", ");1===o.length?"production"!==t.env.NODE_ENV?u(!1,"Invalid aria prop %s on <%s> tag. For details, see https://fb.me/invalid-aria-prop%s",d,n.type,s.getStackAddendumByID(e)):void 0:o.length>1&&("production"!==t.env.NODE_ENV?u(!1,"Invalid aria props %s on <%s> tag. For details, see https://fb.me/invalid-aria-prop%s",d,n.type,s.getStackAddendumByID(e)):void 0)}function a(e,t){null!=t&&"string"==typeof t.type&&(t.type.indexOf("-")>=0||t.props.is||o(e,t))}var i=n(16),s=n(9),u=n(5),d={},l=new RegExp("^(aria)-["+i.ATTRIBUTE_NAME_CHAR+"]*$"),c={onBeforeMountComponent:function(e,n){"production"!==t.env.NODE_ENV&&a(e,n)},onBeforeUpdateComponent:function(e,n){"production"!==t.env.NODE_ENV&&a(e,n)}};e.exports=c}).call(t,n(2))},function(e,t,n){(function(t){"use strict";function r(e,n){null!=n&&("input"!==n.type&&"textarea"!==n.type&&"select"!==n.type||null==n.props||null!==n.props.value||i||("production"!==t.env.NODE_ENV?a(!1,"`value` prop on `%s` should not be null. Consider using the empty string to clear the component or `undefined` for uncontrolled components.%s",n.type,o.getStackAddendumByID(e)):void 0,i=!0))}var o=n(9),a=n(5),i=!1,s={onBeforeMountComponent:function(e,t){r(e,t)},onBeforeUpdateComponent:function(e,t){r(e,t)}};e.exports=s}).call(t,n(2))},function(e,t,n){(function(t){"use strict";function r(e){var n="";return a.Children.forEach(e,function(e){null!=e&&("string"==typeof e||"number"==typeof e?n+=e:d||(d=!0,"production"!==t.env.NODE_ENV?u(!1,"Only strings and numbers are supported as <option> children."):void 0))}),n}var o=n(7),a=n(23),i=n(6),s=n(171),u=n(5),d=!1,l={mountWrapper:function(e,n,o){"production"!==t.env.NODE_ENV&&("production"!==t.env.NODE_ENV?u(null==n.selected,"Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>."):void 0);var a=null;if(null!=o){var i=o;"optgroup"===i._tag&&(i=i._hostParent),null!=i&&"select"===i._tag&&(a=s.getSelectValueContext(i))}var d=null;if(null!=a){var l;if(l=null!=n.value?n.value+"":r(n.children),d=!1,Array.isArray(a)){for(var c=0;c<a.length;c++)if(""+a[c]===l){d=!0;break}}else d=""+a===l}e._wrapperState={selected:d}},postMountWrapper:function(e){var t=e._currentElement.props;if(null!=t.value){var n=i.getNodeFromInstance(e);n.setAttribute("value",t.value)}},getHostProps:function(e,t){var n=o({selected:void 0,children:void 0},t);null!=e._wrapperState.selected&&(n.selected=e._wrapperState.selected);var a=r(t.children);return a&&(n.children=a),n}};e.exports=l}).call(t,n(2))},function(e,t,n){"use strict";function r(e,t,n,r){return e===n&&t===r}function o(e){var t=document.selection,n=t.createRange(),r=n.text.length,o=n.duplicate();o.moveToElementText(e),o.setEndPoint("EndToStart",n);var a=o.text.length,i=a+r;return{start:a,end:i}}function a(e){var t=window.getSelection&&window.getSelection();if(!t||0===t.rangeCount)return null;var n=t.anchorNode,o=t.anchorOffset,a=t.focusNode,i=t.focusOffset,s=t.getRangeAt(0);try{s.startContainer.nodeType,s.endContainer.nodeType}catch(e){return null}var u=r(t.anchorNode,t.anchorOffset,t.focusNode,t.focusOffset),d=u?0:s.toString().length,l=s.cloneRange();l.selectNodeContents(e),l.setEnd(s.startContainer,s.startOffset);var c=r(l.startContainer,l.startOffset,l.endContainer,l.endOffset),_=c?0:l.toString().length,m=_+d,p=document.createRange();p.setStart(n,o),p.setEnd(a,i);var h=p.collapsed;return{start:h?m:_,end:h?_:m}}function i(e,t){var n,r,o=document.selection.createRange().duplicate();void 0===t.end?(n=t.start,r=n):t.start>t.end?(n=t.end,r=t.start):(n=t.start,r=t.end),o.moveToElementText(e),o.moveStart("character",n),o.setEndPoint("EndToStart",o),o.moveEnd("character",r-n),o.select()}function s(e,t){if(window.getSelection){var n=window.getSelection(),r=e[l()].length,o=Math.min(t.start,r),a=void 0===t.end?o:Math.min(t.end,r);if(!n.extend&&o>a){var i=a;a=o,o=i}var s=d(e,o),u=d(e,a);if(s&&u){var c=document.createRange();c.setStart(s.node,s.offset),n.removeAllRanges(),o>a?(n.addRange(c),n.extend(u.node,u.offset)):(c.setEnd(u.node,u.offset),n.addRange(c))}}}var u=n(8),d=n(267),l=n(183),c=u.canUseDOM&&"selection"in document&&!("getSelection"in window),_={getOffsets:c?o:a,setOffsets:c?i:s};e.exports=_},function(e,t,n){(function(t){"use strict";var r=n(4),o=n(7),a=n(35),i=n(21),s=n(6),u=n(32),d=n(3),l=n(49),c=function(e){this._currentElement=e,this._stringText=""+e,this._hostNode=null,this._hostParent=null,this._domID=0,this._mountIndex=0,this._closingComment=null,this._commentNodes=null};o(c.prototype,{mountComponent:function(e,n,r,o){if("production"!==t.env.NODE_ENV){var a;null!=n?a=n._ancestorInfo:null!=r&&(a=r._ancestorInfo),a&&l(null,this._stringText,this,a)}var d=r._idCounter++,c=" react-text: "+d+" ",_=" /react-text ";if(this._domID=d,this._hostParent=n,e.useCreateElement){var m=r._ownerDocument,p=m.createComment(c),h=m.createComment(_),f=i(m.createDocumentFragment());return i.queueChild(f,i(p)),this._stringText&&i.queueChild(f,i(m.createTextNode(this._stringText))),i.queueChild(f,i(h)),s.precacheNode(this,p),this._closingComment=h,f}var y=u(this._stringText);return e.renderToStaticMarkup?y:"<!--"+c+"-->"+y+"<!--"+_+"-->"},receiveComponent:function(e,t){if(e!==this._currentElement){this._currentElement=e;var n=""+e;if(n!==this._stringText){this._stringText=n;var r=this.getHostNode();a.replaceDelimitedText(r[0],r[1],n)}}},getHostNode:function(){var e=this._commentNodes;if(e)return e;if(!this._closingComment)for(var n=s.getNodeFromInstance(this),o=n.nextSibling;;){if(null==o?"production"!==t.env.NODE_ENV?d(!1,"Missing closing comment for text component %s",this._domID):r("67",this._domID):void 0,8===o.nodeType&&" /react-text "===o.nodeValue){this._closingComment=o;break}o=o.nextSibling}return e=[this._hostNode,this._closingComment],this._commentNodes=e,e},unmountComponent:function(){this._closingComment=null,this._commentNodes=null,s.uncacheNode(this)}}),e.exports=c}).call(t,n(2))},function(e,t,n){(function(t){"use strict";function r(){this._rootNodeID&&p.updateWrapper(this)}function o(e){var t=this._currentElement.props,n=s.executeOnChange(t,e);return d.asap(r,this),n}var a=n(4),i=n(7),s=n(39),u=n(6),d=n(11),l=n(3),c=n(5),_=!1,m=!1,p={getHostProps:function(e,n){null!=n.dangerouslySetInnerHTML?"production"!==t.env.NODE_ENV?l(!1,"`dangerouslySetInnerHTML` does not make sense on <textarea>."):a("91"):void 0;var r=i({},n,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue,onChange:e._wrapperState.onChange});return r},mountWrapper:function(e,n){"production"!==t.env.NODE_ENV&&(s.checkPropTypes("textarea",n,e._currentElement._owner),void 0===n.valueLink||_||("production"!==t.env.NODE_ENV?c(!1,"`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead."):void 0,_=!0),void 0===n.value||void 0===n.defaultValue||m||("production"!==t.env.NODE_ENV?c(!1,"Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://fb.me/react-controlled-components"):void 0,m=!0));var r=s.getValue(n),i=r;if(null==r){var u=n.defaultValue,d=n.children;null!=d&&("production"!==t.env.NODE_ENV&&("production"!==t.env.NODE_ENV?c(!1,"Use the `defaultValue` or `value` props instead of setting children on <textarea>."):void 0),null!=u?"production"!==t.env.NODE_ENV?l(!1,"If you supply `defaultValue` on a <textarea>, do not pass children."):a("92"):void 0,Array.isArray(d)&&(d.length<=1?void 0:"production"!==t.env.NODE_ENV?l(!1,"<textarea> can only have at most one child."):a("93"),d=d[0]),u=""+d),null==u&&(u=""),i=u}e._wrapperState={initialValue:""+i,listeners:null,onChange:o.bind(e)}},updateWrapper:function(e){var t=e._currentElement.props,n=u.getNodeFromInstance(e),r=s.getValue(t);if(null!=r){var o=""+r;o!==n.value&&(n.value=o),null==t.defaultValue&&(n.defaultValue=o)}null!=t.defaultValue&&(n.defaultValue=t.defaultValue)},postMountWrapper:function(e){var t=u.getNodeFromInstance(e);t.value=t.textContent}};e.exports=p}).call(t,n(2))},function(e,t,n){(function(t){"use strict";function r(e,n){"_hostNode"in e?void 0:"production"!==t.env.NODE_ENV?d(!1,"getNodeFromInstance: Invalid argument."):u("33"),"_hostNode"in n?void 0:"production"!==t.env.NODE_ENV?d(!1,"getNodeFromInstance: Invalid argument."):u("33");for(var r=0,o=e;o;o=o._hostParent)r++;for(var a=0,i=n;i;i=i._hostParent)a++;for(;r-a>0;)e=e._hostParent,r--;for(;a-r>0;)n=n._hostParent,a--;for(var s=r;s--;){if(e===n)return e;e=e._hostParent,n=n._hostParent}return null}function o(e,n){"_hostNode"in e?void 0:"production"!==t.env.NODE_ENV?d(!1,"isAncestor: Invalid argument."):u("35"),"_hostNode"in n?void 0:"production"!==t.env.NODE_ENV?d(!1,"isAncestor: Invalid argument."):u("35");for(;n;){if(n===e)return!0;n=n._hostParent}return!1}function a(e){return"_hostNode"in e?void 0:"production"!==t.env.NODE_ENV?d(!1,"getParentInstance: Invalid argument."):u("36"),e._hostParent}function i(e,t,n){for(var r=[];e;)r.push(e),e=e._hostParent;var o;for(o=r.length;o-- >0;)t(r[o],"captured",n);for(o=0;o<r.length;o++)t(r[o],"bubbled",n)}function s(e,t,n,o,a){for(var i=e&&t?r(e,t):null,s=[];e&&e!==i;)s.push(e),e=e._hostParent;for(var u=[];t&&t!==i;)u.push(t),t=t._hostParent;var d;for(d=0;d<s.length;d++)n(s[d],"bubbled",o);for(d=u.length;d-- >0;)n(u[d],"captured",a)}var u=n(4),d=n(3);e.exports={isAncestor:o,getLowestCommonAncestor:r,getParentInstance:a,traverseTwoPhase:i,traverseEnterLeave:s}}).call(t,n(2))},function(e,t,n){(function(t){"use strict";function r(e,t){null!=t&&"string"==typeof t.type&&(t.type.indexOf("-")>=0||t.props.is||c(e,t))}var o=n(16),a=n(28),i=n(9),s=n(5);if("production"!==t.env.NODE_ENV)var u={children:!0,dangerouslySetInnerHTML:!0,key:!0,ref:!0,autoFocus:!0,defaultValue:!0,valueLink:!0,defaultChecked:!0,checkedLink:!0,innerHTML:!0,suppressContentEditableWarning:!0,onFocusIn:!0,onFocusOut:!0},d={},l=function(e,n,r){if(o.properties.hasOwnProperty(n)||o.isCustomAttribute(n))return!0;
if(u.hasOwnProperty(n)&&u[n]||d.hasOwnProperty(n)&&d[n])return!0;if(a.registrationNameModules.hasOwnProperty(n))return!0;d[n]=!0;var l=n.toLowerCase(),c=o.isCustomAttribute(l)?l:o.getPossibleStandardName.hasOwnProperty(l)?o.getPossibleStandardName[l]:null,_=a.possibleRegistrationNames.hasOwnProperty(l)?a.possibleRegistrationNames[l]:null;return null!=c?("production"!==t.env.NODE_ENV?s(!1,"Unknown DOM property %s. Did you mean %s?%s",n,c,i.getStackAddendumByID(r)):void 0,!0):null!=_&&("production"!==t.env.NODE_ENV?s(!1,"Unknown event handler property %s. Did you mean `%s`?%s",n,_,i.getStackAddendumByID(r)):void 0,!0)};var c=function(e,n){var r=[];for(var o in n.props){var a=l(n.type,o,e);a||r.push(o)}var u=r.map(function(e){return"`"+e+"`"}).join(", ");1===r.length?"production"!==t.env.NODE_ENV?s(!1,"Unknown prop %s on <%s> tag. Remove this prop from the element. For details, see https://fb.me/react-unknown-prop%s",u,n.type,i.getStackAddendumByID(e)):void 0:r.length>1&&("production"!==t.env.NODE_ENV?s(!1,"Unknown props %s on <%s> tag. Remove these props from the element. For details, see https://fb.me/react-unknown-prop%s",u,n.type,i.getStackAddendumByID(e)):void 0)},_={onBeforeMountComponent:function(e,t){r(e,t)},onBeforeUpdateComponent:function(e,t){r(e,t)}};e.exports=_}).call(t,n(2))},function(e,t,n){(function(t){"use strict";function r(e,n,r,o,a,i,s,u){try{n.call(r,o,a,i,s,u)}catch(n){"production"!==t.env.NODE_ENV?L(Y[e],"Exception thrown by hook while handling %s: %s",e,n+"\n"+n.stack):void 0,Y[e]=!0}}function o(e,t,n,o,a,i){for(var s=0;s<D.length;s++){var u=D[s],d=u[e];d&&r(e,d,u,t,n,o,a,i)}}function a(){v.purgeUnmountedComponents(),y.clearHistory()}function i(e){return e.reduce(function(e,t){var n=v.getOwnerID(t),r=v.getParentID(t);return e[t]={displayName:v.getDisplayName(t),text:v.getText(t),updateCount:v.getUpdateCount(t),childIDs:v.getChildIDs(t),ownerID:n||r&&v.getOwnerID(r)||0,parentID:r},e},{})}function s(){var e=N,t=E,n=y.getHistory();if(0===w)return N=0,E=[],void a();if(t.length||n.length){var r=v.getRegisteredIDs();b.push({duration:g()-e,measurements:t||[],operations:n||[],treeSnapshot:i(r)})}a(),N=g(),E=[]}function u(e){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];n&&0===e||e||("production"!==t.env.NODE_ENV?L(!1,"ReactDebugTool: debugID may not be empty."):void 0)}function d(e,n){0!==w&&(C&&!j&&("production"!==t.env.NODE_ENV?L(!1,"There is an internal error in the React performance measurement code. Did not expect %s timer to start while %s timer is still in progress for %s instance.",n,C||"no",e===S?"the same":"another"):void 0,j=!0),x=g(),O=0,S=e,C=n)}function l(e,n){0!==w&&(C===n||j||("production"!==t.env.NODE_ENV?L(!1,"There is an internal error in the React performance measurement code. We did not expect %s timer to stop while %s timer is still in progress for %s instance. Please report this as a bug in React.",n,C||"no",e===S?"the same":"another"):void 0,j=!0),k&&E.push({timerType:n,instanceID:e,duration:g()-x-O}),x=0,O=0,S=null,C=null)}function c(){var e={startTime:x,nestedFlushStartTime:g(),debugID:S,timerType:C};T.push(e),x=0,O=0,S=null,C=null}function _(){var e=T.pop(),t=e.startTime,n=e.nestedFlushStartTime,r=e.debugID,o=e.timerType,a=g()-n;x=t,O+=a,S=r,C=o}function m(e){if(!k||!H)return!1;var t=v.getElement(e);if(null==t||"object"!=typeof t)return!1;var n="string"==typeof t.type;return!n}function p(e,t){if(m(e)){var n=e+"::"+t;P=g(),performance.mark(n)}}function h(e,t){if(m(e)){var n=e+"::"+t,r=v.getDisplayName(e)||"Unknown",o=g();if(o-P>.1){var a=r+" ["+t+"]";performance.measure(a,n)}performance.clearMarks(n),performance.clearMeasures(a)}}var f=n(236),y=n(234),v=n(9),M=n(8),g=n(284),L=n(5),D=[],Y={},k=!1,b=[],T=[],w=0,E=[],N=0,S=null,x=0,O=0,C=null,j=!1,P=0,H="undefined"!=typeof performance&&"function"==typeof performance.mark&&"function"==typeof performance.clearMarks&&"function"==typeof performance.measure&&"function"==typeof performance.clearMeasures,A={addHook:function(e){D.push(e)},removeHook:function(e){for(var t=0;t<D.length;t++)D[t]===e&&(D.splice(t,1),t--)},isProfiling:function(){return k},beginProfiling:function(){k||(k=!0,b.length=0,s(),A.addHook(y))},endProfiling:function(){k&&(k=!1,s(),A.removeHook(y))},getFlushHistory:function(){return b},onBeginFlush:function(){w++,s(),c(),o("onBeginFlush")},onEndFlush:function(){s(),w--,_(),o("onEndFlush")},onBeginLifeCycleTimer:function(e,t){u(e),o("onBeginLifeCycleTimer",e,t),p(e,t),d(e,t)},onEndLifeCycleTimer:function(e,t){u(e),l(e,t),h(e,t),o("onEndLifeCycleTimer",e,t)},onBeginProcessingChildContext:function(){o("onBeginProcessingChildContext")},onEndProcessingChildContext:function(){o("onEndProcessingChildContext")},onHostOperation:function(e){u(e.instanceID),o("onHostOperation",e)},onSetState:function(){o("onSetState")},onSetChildren:function(e,t){u(e),t.forEach(u),o("onSetChildren",e,t)},onBeforeMountComponent:function(e,t,n){u(e),u(n,!0),o("onBeforeMountComponent",e,t,n),p(e,"mount")},onMountComponent:function(e){u(e),h(e,"mount"),o("onMountComponent",e)},onBeforeUpdateComponent:function(e,t){u(e),o("onBeforeUpdateComponent",e,t),p(e,"update")},onUpdateComponent:function(e){u(e),h(e,"update"),o("onUpdateComponent",e)},onBeforeUnmountComponent:function(e){u(e),o("onBeforeUnmountComponent",e),p(e,"unmount")},onUnmountComponent:function(e){u(e),h(e,"unmount"),o("onUnmountComponent",e)},onTestEvent:function(){o("onTestEvent")}};A.addDevtool=A.addHook,A.removeDevtool=A.removeHook,A.addHook(f),A.addHook(v);var I=M.canUseDOM&&window.location.href||"";/[?&]react_perf\b/.test(I)&&A.beginProfiling(),e.exports=A}).call(t,n(2))},function(e,t,n){"use strict";function r(){this.reinitializeTransaction()}var o=n(7),a=n(11),i=n(31),s=n(15),u={initialize:s,close:function(){_.isBatchingUpdates=!1}},d={initialize:s,close:a.flushBatchedUpdates.bind(a)},l=[d,u];o(r.prototype,i,{getTransactionWrappers:function(){return l}});var c=new r,_={isBatchingUpdates:!1,batchedUpdates:function(e,t,n,r,o,a){var i=_.isBatchingUpdates;return _.isBatchingUpdates=!0,i?e(t,n,r,o,a):c.perform(e,null,t,n,r,o,a)}};e.exports=_},function(e,t,n){"use strict";function r(){Y||(Y=!0,v.EventEmitter.injectReactEventListener(y),v.EventPluginHub.injectEventPluginOrder(s),v.EventPluginUtils.injectComponentTree(_),v.EventPluginUtils.injectTreeTraversal(p),v.EventPluginHub.injectEventPluginsByName({SimpleEventPlugin:D,EnterLeaveEventPlugin:u,ChangeEventPlugin:i,SelectEventPlugin:L,BeforeInputEventPlugin:a}),v.HostComponent.injectGenericComponentClass(c),v.HostComponent.injectTextComponentClass(h),v.DOMProperty.injectDOMPropertyConfig(o),v.DOMProperty.injectDOMPropertyConfig(d),v.DOMProperty.injectDOMPropertyConfig(g),v.EmptyComponent.injectEmptyComponentFactory(function(e){return new m(e)}),v.Updates.injectReconcileTransaction(M),v.Updates.injectBatchingStrategy(f),v.Component.injectEnvironment(l))}var o=n(200),a=n(202),i=n(204),s=n(206),u=n(207),d=n(209),l=n(211),c=n(214),_=n(6),m=n(216),p=n(226),h=n(224),f=n(229),y=n(233),v=n(235),M=n(241),g=n(246),L=n(247),D=n(248),Y=!1;e.exports={inject:r}},function(e,t){"use strict";var n="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103;e.exports=n},function(e,t,n){"use strict";function r(e){o.enqueueEvents(e),o.processEventQueue(!1)}var o=n(24),a={handleTopLevel:function(e,t,n,a){var i=o.extractEvents(e,t,n,a);r(i)}};e.exports=a},function(e,t,n){"use strict";function r(e){for(;e._hostParent;)e=e._hostParent;var t=c.getNodeFromInstance(e),n=t.parentNode;return c.getClosestInstanceFromNode(n)}function o(e,t){this.topLevelType=e,this.nativeEvent=t,this.ancestors=[]}function a(e){var t=m(e.nativeEvent),n=c.getClosestInstanceFromNode(t),o=n;do e.ancestors.push(o),o=o&&r(o);while(o);for(var a=0;a<e.ancestors.length;a++)n=e.ancestors[a],h._handleTopLevel(e.topLevelType,n,e.nativeEvent,m(e.nativeEvent))}function i(e){var t=p(window);e(t)}var s=n(7),u=n(188),d=n(8),l=n(17),c=n(6),_=n(11),m=n(46),p=n(277);s(o.prototype,{destructor:function(){this.topLevelType=null,this.nativeEvent=null,this.ancestors.length=0}}),l.addPoolingTo(o,l.twoArgumentPooler);var h={_enabled:!0,_handleTopLevel:null,WINDOW_HANDLE:d.canUseDOM?window:null,setHandleTopLevel:function(e){h._handleTopLevel=e},setEnabled:function(e){h._enabled=!!e},isEnabled:function(){return h._enabled},trapBubbledEvent:function(e,t,n){return n?u.listen(n,t,h.dispatchEvent.bind(null,e)):null},trapCapturedEvent:function(e,t,n){return n?u.capture(n,t,h.dispatchEvent.bind(null,e)):null},monitorScrollValue:function(e){var t=i.bind(null,e);u.listen(window,"scroll",t)},dispatchEvent:function(e,t){if(h._enabled){var n=o.getPooled(e,t);try{_.batchedUpdates(a,n)}finally{o.release(n)}}}};e.exports=h},function(e,t){"use strict";var n=[],r={onHostOperation:function(e){n.push(e)},clearHistory:function(){r._preventClearing||(n=[])},getHistory:function(){return n}};e.exports=r},function(e,t,n){"use strict";var r=n(16),o=n(24),a=n(37),i=n(40),s=n(172),u=n(29),d=n(174),l=n(11),c={Component:i.injection,DOMProperty:r.injection,EmptyComponent:s.injection,EventPluginHub:o.injection,EventPluginUtils:a.injection,EventEmitter:u.injection,HostComponent:d.injection,Updates:l.injection};e.exports=c},function(e,t,n){(function(t){"use strict";var r=n(5);if("production"!==t.env.NODE_ENV)var o=!1,a=function(){"production"!==t.env.NODE_ENV?r(!o,"setState(...): Cannot call setState() inside getChildContext()"):void 0};var i={onBeginProcessingChildContext:function(){o=!0},onEndProcessingChildContext:function(){o=!1},onSetState:function(){a()}};e.exports=i}).call(t,n(2))},function(e,t,n){"use strict";var r=n(259),o=/\/?>/,a=/^<\!\-\-/,i={CHECKSUM_ATTR_NAME:"data-react-checksum",addChecksumToMarkup:function(e){var t=r(e);return a.test(e)?e:e.replace(o," "+i.CHECKSUM_ATTR_NAME+'="'+t+'"$&')},canReuseMarkup:function(e,t){var n=t.getAttribute(i.CHECKSUM_ATTR_NAME);n=n&&parseInt(n,10);var o=r(e);return o===n}};e.exports=i},function(e,t,n){(function(t){"use strict";function r(e,t,n){return{type:"INSERT_MARKUP",content:e,fromIndex:null,fromNode:null,toIndex:n,afterNode:t}}function o(e,t,n){return{type:"MOVE_EXISTING",content:null,fromIndex:e._mountIndex,fromNode:h.getHostNode(e),toIndex:n,afterNode:t}}function a(e,t){return{type:"REMOVE_NODE",content:null,fromIndex:e._mountIndex,fromNode:t,toIndex:null,afterNode:null}}function i(e){return{type:"SET_MARKUP",content:e,fromIndex:null,fromNode:null,toIndex:null,afterNode:null}}function s(e){return{type:"TEXT_CONTENT",content:e,fromIndex:null,fromNode:null,toIndex:null,afterNode:null}}function u(e,t){return t&&(e=e||[],e.push(t)),e}function d(e,t){c.processChildrenUpdates(e,t)}var l=n(4),c=n(40),_=n(26),m=n(10),p=n(12),h=n(22),f=n(210),y=n(15),v=n(263),M=n(3),g=y;if("production"!==t.env.NODE_ENV){var L=function(e){if(!e._debugID){var t;(t=_.get(e))&&(e=t)}return e._debugID};g=function(e){var t=L(this);0!==t&&m.debugTool.onSetChildren(t,e?Object.keys(e).map(function(t){return e[t]._debugID}):[])}}var D={Mixin:{_reconcilerInstantiateChildren:function(e,n,r){if("production"!==t.env.NODE_ENV){var o=L(this);if(this._currentElement)try{return p.current=this._currentElement._owner,f.instantiateChildren(e,n,r,o)}finally{p.current=null}}return f.instantiateChildren(e,n,r)},_reconcilerUpdateChildren:function(e,n,r,o,a,i){var s,u=0;if("production"!==t.env.NODE_ENV&&(u=L(this),this._currentElement)){try{p.current=this._currentElement._owner,s=v(n,u)}finally{p.current=null}return f.updateChildren(e,s,r,o,a,this,this._hostContainerInfo,i,u),s}return s=v(n,u),f.updateChildren(e,s,r,o,a,this,this._hostContainerInfo,i,u),s},mountChildren:function(e,n,r){var o=this._reconcilerInstantiateChildren(e,n,r);this._renderedChildren=o;var a=[],i=0;for(var s in o)if(o.hasOwnProperty(s)){var u=o[s],d=0;"production"!==t.env.NODE_ENV&&(d=L(this));var l=h.mountComponent(u,n,this,this._hostContainerInfo,r,d);u._mountIndex=i++,a.push(l)}return"production"!==t.env.NODE_ENV&&g.call(this,o),a},updateTextContent:function(e){var n=this._renderedChildren;f.unmountChildren(n,!1);for(var r in n)n.hasOwnProperty(r)&&("production"!==t.env.NODE_ENV?M(!1,"updateTextContent called on non-empty component."):l("118"));var o=[s(e)];d(this,o)},updateMarkup:function(e){var n=this._renderedChildren;f.unmountChildren(n,!1);for(var r in n)n.hasOwnProperty(r)&&("production"!==t.env.NODE_ENV?M(!1,"updateTextContent called on non-empty component."):l("118"));var o=[i(e)];d(this,o)},updateChildren:function(e,t,n){this._updateChildren(e,t,n)},_updateChildren:function(e,n,r){var o=this._renderedChildren,a={},i=[],s=this._reconcilerUpdateChildren(o,e,i,a,n,r);if(s||o){var l,c=null,_=0,m=0,p=0,f=null;for(l in s)if(s.hasOwnProperty(l)){var y=o&&o[l],v=s[l];y===v?(c=u(c,this.moveChild(y,f,_,m)),m=Math.max(y._mountIndex,m),y._mountIndex=_):(y&&(m=Math.max(y._mountIndex,m)),c=u(c,this._mountChildAtIndex(v,i[p],f,_,n,r)),p++),_++,f=h.getHostNode(v)}for(l in a)a.hasOwnProperty(l)&&(c=u(c,this._unmountChild(o[l],a[l])));c&&d(this,c),this._renderedChildren=s,"production"!==t.env.NODE_ENV&&g.call(this,s)}},unmountChildren:function(e){var t=this._renderedChildren;f.unmountChildren(t,e),this._renderedChildren=null},moveChild:function(e,t,n,r){if(e._mountIndex<r)return o(e,t,n)},createChild:function(e,t,n){return r(n,t,e._mountIndex)},removeChild:function(e,t){return a(e,t)},_mountChildAtIndex:function(e,t,n,r,o,a){return e._mountIndex=r,this.createChild(e,n,t)},_unmountChild:function(e,t){var n=this.removeChild(e,t);return e._mountIndex=null,n}}};e.exports=D}).call(t,n(2))},function(e,t,n){(function(t){"use strict";function r(e){return!(!e||"function"!=typeof e.attachRef||"function"!=typeof e.detachRef)}var o=n(4),a=n(3),i={addComponentAsRefTo:function(e,n,i){r(i)?void 0:"production"!==t.env.NODE_ENV?a(!1,"addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component's `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner)."):o("119"),i.attachRef(n,e)},removeComponentAsRefFrom:function(e,n,i){r(i)?void 0:"production"!==t.env.NODE_ENV?a(!1,"removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might be removing a ref to a component that was not created inside a component's `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner)."):o("120");var s=i.getPublicInstance();s&&s.refs[n]===e.getPublicInstance()&&i.detachRef(n)}};e.exports=i}).call(t,n(2))},function(e,t,n){(function(t){"use strict";var n={};"production"!==t.env.NODE_ENV&&(n={prop:"prop",context:"context",childContext:"child context"}),e.exports=n}).call(t,n(2))},function(e,t,n){(function(t){"use strict";function r(e){this.reinitializeTransaction(),this.renderToStaticMarkup=!1,this.reactMountReady=a.getPooled(null),this.useCreateElement=e}var o=n(7),a=n(168),i=n(17),s=n(29),u=n(175),d=n(10),l=n(31),c=n(42),_={initialize:u.getSelectionInformation,close:u.restoreSelection},m={initialize:function(){var e=s.isEnabled();return s.setEnabled(!1),e},close:function(e){s.setEnabled(e)}},p={initialize:function(){this.reactMountReady.reset()},close:function(){this.reactMountReady.notifyAll()}},h=[_,m,p];"production"!==t.env.NODE_ENV&&h.push({initialize:d.debugTool.onBeginFlush,close:d.debugTool.onEndFlush});var f={getTransactionWrappers:function(){return h},getReactMountReady:function(){return this.reactMountReady},getUpdateQueue:function(){return c},checkpoint:function(){return this.reactMountReady.checkpoint()},rollback:function(e){this.reactMountReady.rollback(e)},destructor:function(){a.release(this.reactMountReady),this.reactMountReady=null}};o(r.prototype,l,f),i.addPoolingTo(r),e.exports=r}).call(t,n(2))},function(e,t,n){"use strict";function r(e,t,n){"function"==typeof e?e(t.getPublicInstance()):a.addComponentAsRefTo(t,e,n)}function o(e,t,n){"function"==typeof e?e(null):a.removeComponentAsRefFrom(t,e,n)}var a=n(239),i={};i.attachRefs=function(e,t){if(null!==t&&"object"==typeof t){var n=t.ref;null!=n&&r(n,e,t._owner)}},i.shouldUpdateRefs=function(e,t){var n=null,r=null;null!==e&&"object"==typeof e&&(n=e.ref,r=e._owner);var o=null,a=null;return null!==t&&"object"==typeof t&&(o=t.ref,a=t._owner),n!==o||"string"==typeof o&&a!==r},i.detachRefs=function(e,t){if(null!==t&&"object"==typeof t){var n=t.ref;null!=n&&o(n,e,t._owner)}},e.exports=i},function(e,t,n){(function(t){"use strict";function r(e){this.reinitializeTransaction(),this.renderToStaticMarkup=e,this.useCreateElement=!1,this.updateQueue=new u(this)}var o=n(7),a=n(17),i=n(31),s=n(10),u=n(244),d=[];"production"!==t.env.NODE_ENV&&d.push({initialize:s.debugTool.onBeginFlush,close:s.debugTool.onEndFlush});var l={enqueue:function(){}},c={getTransactionWrappers:function(){return d},getReactMountReady:function(){return l},getUpdateQueue:function(){return this.updateQueue},destructor:function(){},checkpoint:function(){},rollback:function(){}};o(r.prototype,i,c),a.addPoolingTo(r),e.exports=r}).call(t,n(2))},function(e,t,n){(function(t){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,n){if("production"!==t.env.NODE_ENV){var r=e.constructor;"production"!==t.env.NODE_ENV?i(!1,"%s(...): Can only update a mounting component. This usually means you called %s() outside componentWillMount() on the server. This is a no-op. Please check the code for the %s component.",n,n,r&&(r.displayName||r.name)||"ReactClass"):void 0}}var a=n(42),i=n(5),s=function(){function e(t){r(this,e),this.transaction=t}return e.prototype.isMounted=function(e){return!1},e.prototype.enqueueCallback=function(e,t,n){this.transaction.isInTransaction()&&a.enqueueCallback(e,t,n)},e.prototype.enqueueForceUpdate=function(e){this.transaction.isInTransaction()?a.enqueueForceUpdate(e):o(e,"forceUpdate")},e.prototype.enqueueReplaceState=function(e,t){this.transaction.isInTransaction()?a.enqueueReplaceState(e,t):o(e,"replaceState")},e.prototype.enqueueSetState=function(e,t){this.transaction.isInTransaction()?a.enqueueSetState(e,t):o(e,"setState")},e}();e.exports=s}).call(t,n(2))},function(e,t){"use strict";e.exports="15.4.1"},function(e,t){"use strict";var n={xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace"},r={accentHeight:"accent-height",accumulate:0,additive:0,alignmentBaseline:"alignment-baseline",allowReorder:"allowReorder",alphabetic:0,amplitude:0,arabicForm:"arabic-form",ascent:0,attributeName:"attributeName",attributeType:"attributeType",autoReverse:"autoReverse",azimuth:0,baseFrequency:"baseFrequency",baseProfile:"baseProfile",baselineShift:"baseline-shift",bbox:0,begin:0,bias:0,by:0,calcMode:"calcMode",capHeight:"cap-height",clip:0,clipPath:"clip-path",clipRule:"clip-rule",clipPathUnits:"clipPathUnits",colorInterpolation:"color-interpolation",colorInterpolationFilters:"color-interpolation-filters",colorProfile:"color-profile",colorRendering:"color-rendering",contentScriptType:"contentScriptType",contentStyleType:"contentStyleType",cursor:0,cx:0,cy:0,d:0,decelerate:0,descent:0,diffuseConstant:"diffuseConstant",direction:0,display:0,divisor:0,dominantBaseline:"dominant-baseline",dur:0,dx:0,dy:0,edgeMode:"edgeMode",elevation:0,enableBackground:"enable-background",end:0,exponent:0,externalResourcesRequired:"externalResourcesRequired",fill:0,fillOpacity:"fill-opacity",fillRule:"fill-rule",filter:0,filterRes:"filterRes",filterUnits:"filterUnits",floodColor:"flood-color",floodOpacity:"flood-opacity",focusable:0,fontFamily:"font-family",fontSize:"font-size",fontSizeAdjust:"font-size-adjust",fontStretch:"font-stretch",fontStyle:"font-style",fontVariant:"font-variant",fontWeight:"font-weight",format:0,from:0,fx:0,fy:0,g1:0,g2:0,glyphName:"glyph-name",glyphOrientationHorizontal:"glyph-orientation-horizontal",glyphOrientationVertical:"glyph-orientation-vertical",glyphRef:"glyphRef",gradientTransform:"gradientTransform",gradientUnits:"gradientUnits",hanging:0,horizAdvX:"horiz-adv-x",horizOriginX:"horiz-origin-x",ideographic:0,imageRendering:"image-rendering",in:0,in2:0,intercept:0,k:0,k1:0,k2:0,k3:0,k4:0,kernelMatrix:"kernelMatrix",kernelUnitLength:"kernelUnitLength",kerning:0,keyPoints:"keyPoints",keySplines:"keySplines",keyTimes:"keyTimes",lengthAdjust:"lengthAdjust",letterSpacing:"letter-spacing",lightingColor:"lighting-color",limitingConeAngle:"limitingConeAngle",local:0,markerEnd:"marker-end",markerMid:"marker-mid",markerStart:"marker-start",markerHeight:"markerHeight",markerUnits:"markerUnits",markerWidth:"markerWidth",mask:0,maskContentUnits:"maskContentUnits",maskUnits:"maskUnits",mathematical:0,mode:0,numOctaves:"numOctaves",offset:0,opacity:0,operator:0,order:0,orient:0,orientation:0,origin:0,overflow:0,overlinePosition:"overline-position",overlineThickness:"overline-thickness",paintOrder:"paint-order",panose1:"panose-1",pathLength:"pathLength",patternContentUnits:"patternContentUnits",patternTransform:"patternTransform",patternUnits:"patternUnits",pointerEvents:"pointer-events",points:0,pointsAtX:"pointsAtX",pointsAtY:"pointsAtY",pointsAtZ:"pointsAtZ",preserveAlpha:"preserveAlpha",preserveAspectRatio:"preserveAspectRatio",primitiveUnits:"primitiveUnits",r:0,radius:0,refX:"refX",refY:"refY",renderingIntent:"rendering-intent",repeatCount:"repeatCount",repeatDur:"repeatDur",requiredExtensions:"requiredExtensions",requiredFeatures:"requiredFeatures",restart:0,result:0,rotate:0,rx:0,ry:0,scale:0,seed:0,shapeRendering:"shape-rendering",slope:0,spacing:0,specularConstant:"specularConstant",specularExponent:"specularExponent",speed:0,spreadMethod:"spreadMethod",startOffset:"startOffset",stdDeviation:"stdDeviation",stemh:0,stemv:0,stitchTiles:"stitchTiles",stopColor:"stop-color",stopOpacity:"stop-opacity",strikethroughPosition:"strikethrough-position",strikethroughThickness:"strikethrough-thickness",string:0,stroke:0,strokeDasharray:"stroke-dasharray",strokeDashoffset:"stroke-dashoffset",strokeLinecap:"stroke-linecap",strokeLinejoin:"stroke-linejoin",strokeMiterlimit:"stroke-miterlimit",strokeOpacity:"stroke-opacity",strokeWidth:"stroke-width",surfaceScale:"surfaceScale",systemLanguage:"systemLanguage",tableValues:"tableValues",targetX:"targetX",targetY:"targetY",textAnchor:"text-anchor",textDecoration:"text-decoration",textRendering:"text-rendering",textLength:"textLength",to:0,transform:0,u1:0,u2:0,underlinePosition:"underline-position",underlineThickness:"underline-thickness",unicode:0,unicodeBidi:"unicode-bidi",unicodeRange:"unicode-range",unitsPerEm:"units-per-em",vAlphabetic:"v-alphabetic",vHanging:"v-hanging",vIdeographic:"v-ideographic",vMathematical:"v-mathematical",values:0,vectorEffect:"vector-effect",version:0,vertAdvY:"vert-adv-y",vertOriginX:"vert-origin-x",vertOriginY:"vert-origin-y",viewBox:"viewBox",viewTarget:"viewTarget",visibility:0,widths:0,wordSpacing:"word-spacing",writingMode:"writing-mode",x:0,xHeight:"x-height",x1:0,x2:0,xChannelSelector:"xChannelSelector",xlinkActuate:"xlink:actuate",xlinkArcrole:"xlink:arcrole",xlinkHref:"xlink:href",xlinkRole:"xlink:role",xlinkShow:"xlink:show",xlinkTitle:"xlink:title",xlinkType:"xlink:type",xmlBase:"xml:base",xmlns:0,xmlnsXlink:"xmlns:xlink",xmlLang:"xml:lang",xmlSpace:"xml:space",y:0,y1:0,y2:0,yChannelSelector:"yChannelSelector",z:0,zoomAndPan:"zoomAndPan"},o={Properties:{},DOMAttributeNamespaces:{xlinkActuate:n.xlink,xlinkArcrole:n.xlink,xlinkHref:n.xlink,xlinkRole:n.xlink,xlinkShow:n.xlink,xlinkTitle:n.xlink,xlinkType:n.xlink,xmlBase:n.xml,xmlLang:n.xml,xmlSpace:n.xml},DOMAttributeNames:{}};Object.keys(r).forEach(function(e){o.Properties[e]=0,r[e]&&(o.DOMAttributeNames[e]=r[e])}),e.exports=o},function(e,t,n){"use strict";function r(e){if("selectionStart"in e&&u.hasSelectionCapabilities(e))return{start:e.selectionStart,end:e.selectionEnd};if(window.getSelection){var t=window.getSelection();return{anchorNode:t.anchorNode,anchorOffset:t.anchorOffset,focusNode:t.focusNode,focusOffset:t.focusOffset}}if(document.selection){var n=document.selection.createRange();return{parentElement:n.parentElement(),text:n.text,top:n.boundingTop,left:n.boundingLeft}}}function o(e,t){if(v||null==h||h!==l())return null;var n=r(h);if(!y||!_(y,n)){y=n;var o=d.getPooled(p.select,f,e,t);return o.type="select",o.target=h,a.accumulateTwoPhaseDispatches(o),o}return null}var a=n(25),i=n(8),s=n(6),u=n(175),d=n(14),l=n(191),c=n(185),_=n(50),m=i.canUseDOM&&"documentMode"in document&&document.documentMode<=11,p={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:["topBlur","topContextMenu","topFocus","topKeyDown","topKeyUp","topMouseDown","topMouseUp","topSelectionChange"]}},h=null,f=null,y=null,v=!1,M=!1,g={eventTypes:p,extractEvents:function(e,t,n,r){if(!M)return null;var a=t?s.getNodeFromInstance(t):window;switch(e){case"topFocus":(c(a)||"true"===a.contentEditable)&&(h=a,f=t,y=null);break;case"topBlur":h=null,f=null,y=null;break;case"topMouseDown":v=!0;break;case"topContextMenu":case"topMouseUp":return v=!1,o(n,r);case"topSelectionChange":if(m)break;case"topKeyDown":case"topKeyUp":return o(n,r)}return null},didPutListener:function(e,t,n){"onSelect"===t&&(M=!0)}};e.exports=g},function(e,t,n){(function(t){"use strict";function r(e){return"."+e._rootNodeID}function o(e){return"button"===e||"input"===e||"select"===e||"textarea"===e}var a=n(4),i=n(188),s=n(25),u=n(6),d=n(249),l=n(250),c=n(14),_=n(253),m=n(255),p=n(30),h=n(252),f=n(256),y=n(257),v=n(27),M=n(258),g=n(15),L=n(44),D=n(3),Y={},k={};["abort","animationEnd","animationIteration","animationStart","blur","canPlay","canPlayThrough","click","contextMenu","copy","cut","doubleClick","drag","dragEnd","dragEnter","dragExit","dragLeave","dragOver","dragStart","drop","durationChange","emptied","encrypted","ended","error","focus","input","invalid","keyDown","keyPress","keyUp","load","loadedData","loadedMetadata","loadStart","mouseDown","mouseMove","mouseOut","mouseOver","mouseUp","paste","pause","play","playing","progress","rateChange","reset","scroll","seeked","seeking","stalled","submit","suspend","timeUpdate","touchCancel","touchEnd","touchMove","touchStart","transitionEnd","volumeChange","waiting","wheel"].forEach(function(e){var t=e[0].toUpperCase()+e.slice(1),n="on"+t,r="top"+t,o={phasedRegistrationNames:{bubbled:n,captured:n+"Capture"},dependencies:[r]};Y[e]=o,k[r]=o});var b={},T={eventTypes:Y,extractEvents:function(e,n,r,o){var i=k[e];if(!i)return null;var u;switch(e){case"topAbort":case"topCanPlay":case"topCanPlayThrough":case"topDurationChange":case"topEmptied":case"topEncrypted":case"topEnded":case"topError":case"topInput":case"topInvalid":case"topLoad":case"topLoadedData":case"topLoadedMetadata":case"topLoadStart":case"topPause":case"topPlay":case"topPlaying":case"topProgress":case"topRateChange":case"topReset":case"topSeeked":case"topSeeking":case"topStalled":case"topSubmit":case"topSuspend":case"topTimeUpdate":case"topVolumeChange":case"topWaiting":u=c;break;case"topKeyPress":if(0===L(r))return null;case"topKeyDown":case"topKeyUp":u=m;break;case"topBlur":case"topFocus":u=_;break;case"topClick":if(2===r.button)return null;case"topDoubleClick":case"topMouseDown":case"topMouseMove":case"topMouseUp":case"topMouseOut":case"topMouseOver":case"topContextMenu":u=p;break;case"topDrag":case"topDragEnd":case"topDragEnter":case"topDragExit":case"topDragLeave":case"topDragOver":case"topDragStart":case"topDrop":u=h;break;case"topTouchCancel":case"topTouchEnd":case"topTouchMove":case"topTouchStart":u=f;break;case"topAnimationEnd":case"topAnimationIteration":case"topAnimationStart":u=d;break;case"topTransitionEnd":u=y;break;case"topScroll":u=v;break;case"topWheel":u=M;break;case"topCopy":case"topCut":case"topPaste":u=l}u?void 0:"production"!==t.env.NODE_ENV?D(!1,"SimpleEventPlugin: Unhandled event type, `%s`.",e):a("86",e);var g=u.getPooled(i,n,r,o);return s.accumulateTwoPhaseDispatches(g),g},didPutListener:function(e,t,n){if("onClick"===t&&!o(e._tag)){var a=r(e),s=u.getNodeFromInstance(e);b[a]||(b[a]=i.listen(s,"click",g))}},willDeleteListener:function(e,t){if("onClick"===t&&!o(e._tag)){var n=r(e);b[n].remove(),delete b[n]}}};e.exports=T}).call(t,n(2))},function(e,t,n){"use strict";function r(e,t,n,r){return o.call(this,e,t,n,r)}var o=n(14),a={animationName:null,elapsedTime:null,pseudoElement:null};o.augmentClass(r,a),e.exports=r},function(e,t,n){"use strict";function r(e,t,n,r){return o.call(this,e,t,n,r)}var o=n(14),a={clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}};o.augmentClass(r,a),e.exports=r},function(e,t,n){"use strict";function r(e,t,n,r){return o.call(this,e,t,n,r)}var o=n(14),a={data:null};o.augmentClass(r,a),e.exports=r},function(e,t,n){"use strict";function r(e,t,n,r){return o.call(this,e,t,n,r)}var o=n(30),a={dataTransfer:null};o.augmentClass(r,a),e.exports=r},function(e,t,n){"use strict";function r(e,t,n,r){return o.call(this,e,t,n,r)}var o=n(27),a={relatedTarget:null};o.augmentClass(r,a),e.exports=r},function(e,t,n){"use strict";function r(e,t,n,r){return o.call(this,e,t,n,r)}var o=n(14),a={data:null};o.augmentClass(r,a),e.exports=r},function(e,t,n){"use strict";function r(e,t,n,r){return o.call(this,e,t,n,r)}var o=n(27),a=n(44),i=n(264),s=n(45),u={key:i,location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:s,charCode:function(e){return"keypress"===e.type?a(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?a(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}};o.augmentClass(r,u),e.exports=r},function(e,t,n){"use strict";function r(e,t,n,r){return o.call(this,e,t,n,r)}var o=n(27),a=n(45),i={touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:a};o.augmentClass(r,i),e.exports=r},function(e,t,n){"use strict";function r(e,t,n,r){return o.call(this,e,t,n,r)}var o=n(14),a={propertyName:null,elapsedTime:null,pseudoElement:null};o.augmentClass(r,a),e.exports=r},function(e,t,n){"use strict";function r(e,t,n,r){return o.call(this,e,t,n,r)}var o=n(30),a={deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null};o.augmentClass(r,a),e.exports=r},function(e,t){"use strict";function n(e){for(var t=1,n=0,o=0,a=e.length,i=a&-4;o<i;){for(var s=Math.min(o+4096,i);o<s;o+=4)n+=(t+=e.charCodeAt(o))+(t+=e.charCodeAt(o+1))+(t+=e.charCodeAt(o+2))+(t+=e.charCodeAt(o+3));t%=r,n%=r}for(;o<a;o++)n+=t+=e.charCodeAt(o);return t%=r,n%=r,t|n<<16}var r=65521;e.exports=n},function(e,t,n){(function(t){"use strict";function r(e,r,c,_,m,p){for(var h in e)if(e.hasOwnProperty(h)){var f;try{"function"!=typeof e[h]?"production"!==t.env.NODE_ENV?u(!1,"%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.",_||"React class",i[c],h):a("84",_||"React class",i[c],h):void 0,f=e[h](r,h,_,c,null,s)}catch(e){f=e}if("production"!==t.env.NODE_ENV?d(!f||f instanceof Error,"%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).",_||"React class",i[c],h,typeof f):void 0,f instanceof Error&&!(f.message in l)){l[f.message]=!0;var y="";"production"!==t.env.NODE_ENV&&(o||(o=n(9)),null!==p?y=o.getStackAddendumByID(p):null!==m&&(y=o.getCurrentStackAddendum(m))),"production"!==t.env.NODE_ENV?d(!1,"Failed %s type: %s%s",c,f.message,y):void 0}}}var o,a=n(4),i=n(240),s=n(178),u=n(3),d=n(5);"undefined"!=typeof t&&t.env&&"test"===t.env.NODE_ENV&&(o=n(9));var l={};e.exports=r}).call(t,n(2))},function(e,t,n){(function(t){"use strict";function r(e,n,r){var o=null==n||"boolean"==typeof n||""===n;if(o)return"";var u=isNaN(n);if(u||0===n||i.hasOwnProperty(e)&&i[e])return""+n;
if("string"==typeof n){if("production"!==t.env.NODE_ENV&&r&&"0"!==n){var d=r._currentElement._owner,l=d?d.getName():null;l&&!s[l]&&(s[l]={});var c=!1;if(l){var _=s[l];c=_[e],c||(_[e]=!0)}c||("production"!==t.env.NODE_ENV?a(!1,"a `%s` tag (owner: `%s`) was passed a numeric string value for CSS property `%s` (value: `%s`) which will be treated as a unitless number in a future version of React.",r._currentElement.type,l||"unknown",e,n):void 0)}n=n.trim()}return n+"px"}var o=n(167),a=n(5),i=o.isUnitlessNumber,s={};e.exports=r}).call(t,n(2))},function(e,t,n){(function(t){"use strict";function r(e){if("production"!==t.env.NODE_ENV){var n=a.current;null!==n&&("production"!==t.env.NODE_ENV?l(n._warnedAboutRefsInRender,"%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.",n.getName()||"A component"):void 0,n._warnedAboutRefsInRender=!0)}if(null==e)return null;if(1===e.nodeType)return e;var r=s.get(e);return r?(r=u(r),r?i.getNodeFromInstance(r):null):void("function"==typeof e.render?"production"!==t.env.NODE_ENV?d(!1,"findDOMNode was called on an unmounted component."):o("44"):"production"!==t.env.NODE_ENV?d(!1,"Element appears to be neither ReactComponent nor DOMNode (keys: %s)",Object.keys(e)):o("45",Object.keys(e)))}var o=n(4),a=n(12),i=n(6),s=n(26),u=n(182),d=n(3),l=n(5);e.exports=r}).call(t,n(2))},function(e,t,n){(function(t){"use strict";function r(e,r,o,s){if(e&&"object"==typeof e){var d=e,l=void 0===d[o];"production"!==t.env.NODE_ENV&&(a||(a=n(9)),l||("production"!==t.env.NODE_ENV?u(!1,"flattenChildren(...): Encountered two children with the same key, `%s`. Child keys must be unique; when two children share a key, only the first child will be used.%s",i.unescape(o),a.getStackAddendumByID(s)):void 0)),l&&null!=r&&(d[o]=r)}}function o(e,n){if(null==e)return e;var o={};return"production"!==t.env.NODE_ENV?s(e,function(e,t,o){return r(e,t,o,n)},o):s(e,r,o),o}var a,i=n(38),s=n(187),u=n(5);"undefined"!=typeof t&&t.env&&"test"===t.env.NODE_ENV&&(a=n(9)),e.exports=o}).call(t,n(2))},function(e,t,n){"use strict";function r(e){if(e.key){var t=a[e.key]||e.key;if("Unidentified"!==t)return t}if("keypress"===e.type){var n=o(e);return 13===n?"Enter":String.fromCharCode(n)}return"keydown"===e.type||"keyup"===e.type?i[e.keyCode]||"Unidentified":""}var o=n(44),a={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},i={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"};e.exports=r},function(e,t){"use strict";function n(e){var t=e&&(r&&e[r]||e[o]);if("function"==typeof t)return t}var r="function"==typeof Symbol&&Symbol.iterator,o="@@iterator";e.exports=n},function(e,t){"use strict";function n(){return r++}var r=1;e.exports=n},function(e,t){"use strict";function n(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function r(e){for(;e;){if(e.nextSibling)return e.nextSibling;e=e.parentNode}}function o(e,t){for(var o=n(e),a=0,i=0;o;){if(3===o.nodeType){if(i=a+o.textContent.length,a<=t&&i>=t)return{node:o,offset:t-a};a=i}o=n(r(o))}}e.exports=o},function(e,t,n){"use strict";function r(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n["ms"+e]="MS"+t,n["O"+e]="o"+t.toLowerCase(),n}function o(e){if(s[e])return s[e];if(!i[e])return e;var t=i[e];for(var n in t)if(t.hasOwnProperty(n)&&n in u)return s[e]=t[n];return""}var a=n(8),i={animationend:r("Animation","AnimationEnd"),animationiteration:r("Animation","AnimationIteration"),animationstart:r("Animation","AnimationStart"),transitionend:r("Transition","TransitionEnd")},s={},u={};a.canUseDOM&&(u=document.createElement("div").style,"AnimationEvent"in window||(delete i.animationend.animation,delete i.animationiteration.animation,delete i.animationstart.animation),"TransitionEvent"in window||delete i.transitionend.transition),e.exports=o},function(e,t,n){"use strict";function r(e){return'"'+o(e)+'"'}var o=n(32);e.exports=r},function(e,t,n){"use strict";var r=n(176);e.exports=r.renderSubtreeIntoContainer},function(e,t){"use strict";function n(e){return e.replace(r,function(e,t){return t.toUpperCase()})}var r=/-(.)/g;e.exports=n},function(e,t,n){"use strict";function r(e){return o(e.replace(a,"ms-"))}var o=n(271),a=/^-ms-/;e.exports=r},function(e,t,n){"use strict";function r(e,t){return!(!e||!t)&&(e===t||!o(e)&&(o(t)?r(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}var o=n(281);e.exports=r},function(e,t,n){(function(t){"use strict";function r(e){var n=e.length;if(Array.isArray(e)||"object"!=typeof e&&"function"!=typeof e?"production"!==t.env.NODE_ENV?i(!1,"toArray: Array-like object expected"):i(!1):void 0,"number"!=typeof n?"production"!==t.env.NODE_ENV?i(!1,"toArray: Object needs a length property"):i(!1):void 0,0===n||n-1 in e?void 0:"production"!==t.env.NODE_ENV?i(!1,"toArray: Object should have keys for indices"):i(!1),"function"==typeof e.callee?"production"!==t.env.NODE_ENV?i(!1,"toArray: Object can't be `arguments`. Use rest params (function(...args) {}) or Array.from() instead."):i(!1):void 0,e.hasOwnProperty)try{return Array.prototype.slice.call(e)}catch(e){}for(var r=Array(n),o=0;o<n;o++)r[o]=e[o];return r}function o(e){return!!e&&("object"==typeof e||"function"==typeof e)&&"length"in e&&!("setInterval"in e)&&"number"!=typeof e.nodeType&&(Array.isArray(e)||"callee"in e||"item"in e)}function a(e){return o(e)?Array.isArray(e)?e.slice():r(e):[e]}var i=n(3);e.exports=a}).call(t,n(2))},function(e,t,n){(function(t){"use strict";function r(e){var t=e.match(l);return t&&t[1].toLowerCase()}function o(e,n){var o=d;d?void 0:"production"!==t.env.NODE_ENV?u(!1,"createNodesFromMarkup dummy not initialized"):u(!1);var a=r(e),l=a&&s(a);if(l){o.innerHTML=l[1]+e+l[2];for(var c=l[0];c--;)o=o.lastChild}else o.innerHTML=e;var _=o.getElementsByTagName("script");_.length&&(n?void 0:"production"!==t.env.NODE_ENV?u(!1,"createNodesFromMarkup(...): Unexpected <script> element rendered."):u(!1),i(_).forEach(n));for(var m=Array.from(o.childNodes);o.lastChild;)o.removeChild(o.lastChild);return m}var a=n(8),i=n(274),s=n(276),u=n(3),d=a.canUseDOM?document.createElement("div"):null,l=/^\s*<(\w+)/;e.exports=o}).call(t,n(2))},function(e,t,n){(function(t){"use strict";function r(e){return i?void 0:"production"!==t.env.NODE_ENV?a(!1,"Markup wrapping node not initialized"):a(!1),_.hasOwnProperty(e)||(e="*"),s.hasOwnProperty(e)||("*"===e?i.innerHTML="<link />":i.innerHTML="<"+e+"></"+e+">",s[e]=!i.firstChild),s[e]?_[e]:null}var o=n(8),a=n(3),i=o.canUseDOM?document.createElement("div"):null,s={},u=[1,'<select multiple="true">',"</select>"],d=[1,"<table>","</table>"],l=[3,"<table><tbody><tr>","</tr></tbody></table>"],c=[1,'<svg xmlns="http://www.w3.org/2000/svg">',"</svg>"],_={"*":[1,"?<div>","</div>"],area:[1,"<map>","</map>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],legend:[1,"<fieldset>","</fieldset>"],param:[1,"<object>","</object>"],tr:[2,"<table><tbody>","</tbody></table>"],optgroup:u,option:u,caption:d,colgroup:d,tbody:d,tfoot:d,thead:d,td:l,th:l},m=["circle","clipPath","defs","ellipse","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","text","tspan"];m.forEach(function(e){_[e]=c,s[e]=!0}),e.exports=r}).call(t,n(2))},function(e,t){"use strict";function n(e){return e===window?{x:window.pageXOffset||document.documentElement.scrollLeft,y:window.pageYOffset||document.documentElement.scrollTop}:{x:e.scrollLeft,y:e.scrollTop}}e.exports=n},function(e,t){"use strict";function n(e){return e.replace(r,"-$1").toLowerCase()}var r=/([A-Z])/g;e.exports=n},function(e,t,n){"use strict";function r(e){return o(e).replace(a,"-ms-")}var o=n(278),a=/^ms-/;e.exports=r},function(e,t){"use strict";function n(e){return!(!e||!("function"==typeof Node?e instanceof Node:"object"==typeof e&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName))}e.exports=n},function(e,t,n){"use strict";function r(e){return o(e)&&3==e.nodeType}var o=n(280);e.exports=r},function(e,t){"use strict";function n(e){var t={};return function(n){return t.hasOwnProperty(n)||(t[n]=e.call(this,n)),t[n]}}e.exports=n},function(e,t,n){"use strict";var r,o=n(8);o.canUseDOM&&(r=window.performance||window.msPerformance||window.webkitPerformance),e.exports=r||{}},function(e,t,n){"use strict";var r,o=n(283);r=o.now?function(){return o.now()}:function(){return Date.now()},e.exports=r},function(e,t,n){"use strict";function r(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}function o(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0;var a=n(288),i=o(a),s=n(290),u=r(s);t.default={setAnimate:function(e){i.default.animate=e},setLocalizers:function(e){var t=e.date,n=e.number;t&&this.setDateLocalizer(t),n&&this.setNumberLocalizer(n)},setDateLocalizer:u.setDate,setNumberLocalizer:u.setNumber},e.exports=t.default},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0,t.default=function(e){function t(t,n,r){return t?e(n,r)[o](t):e(n,r)}function n(t){return e(t).add(10,"year").add(-1,"millisecond").toDate()}function r(t){return e(t).add(100,"year").add(-1,"millisecond").toDate()}if("function"!=typeof e)throw new TypeError("You must provide a valid moment object");var o="function"==typeof e().locale?"locale":"lang",i=!!e.localeData;if(!i)throw new TypeError("The Moment localizer depends on the `localeData` api, please provide a moment object v2.2.0 or higher");var s={formats:{date:"L",time:"LT",default:"lll",header:"MMMM YYYY",footer:"LL",weekday:"dd",dayOfMonth:"DD",month:"MMM",year:"YYYY",decade:function(e,t,r){return r.format(e,"YYYY",t)+" - "+r.format(n(e),"YYYY",t)},century:function(e,t,n){return n.format(e,"YYYY",t)+" - "+n.format(r(e),"YYYY",t)}},firstOfWeek:function(t){return e.localeData(t).firstDayOfWeek()},parse:function(e,n,r){if(!e)return null;var o=t(r,e,n);return o.isValid()?o.toDate():null},format:function(e,n,r){return t(r,e).format(n)}};return a.default.setDateLocalizer(s),s};var o=n(285),a=r(o);e.exports=t.default},function(e,t){"use strict";function n(e,t){return!!e&&Object.prototype.hasOwnProperty.call(e,t)}function r(e,t){return e===t}function o(e,t){if(null==e||null==t)return!1;var o=Object.keys(e),a=Object.keys(t);if(o.length!==a.length)return!1;for(var i=0;i<o.length;i++)if(!n(t,o[i])||!r(e[o[i]],t[o[i]]))return!1;return!0}var a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=0,s=e.exports={has:n,result:function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return"function"==typeof e?e.apply(void 0,n):e},isShallowEqual:function(e,t){return e===t||(e instanceof Date&&t instanceof Date?e.getTime()===t.getTime():"object"!==("undefined"==typeof e?"undefined":a(e))&&"object"!==("undefined"==typeof t?"undefined":a(t))?e===t:("undefined"==typeof e?"undefined":a(e))===("undefined"==typeof t?"undefined":a(t))&&o(e,t))},transform:function(e,t,n){return s.each(e,t.bind(null,n=n||(Array.isArray(e)?[]:{}))),n},each:function(e,t,r){if(Array.isArray(e))return e.forEach(t,r);for(var o in e)n(e,o)&&t.call(r,e[o],o,e)},pick:function(e,t){return t=[].concat(t),s.transform(e,function(e,n,r){t.indexOf(r)!==-1&&(e[r]=n)},{})},pickProps:function(e,t){return s.pick(e,Object.keys(t.propTypes))},omit:function(e,t){return t=[].concat(t),s.transform(e,function(e,n,r){t.indexOf(r)===-1&&(e[r]=n)},{})},omitOwnProps:function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var o=n.reduce(function(e,t){return e.concat(Object.keys(t.propTypes))},Object.keys(e.constructor.propTypes));return s.omit(e.props,o)},find:function(e,t,r){var o;if(Array.isArray(e))return e.every(function(n,a){return!t.call(r,n,a,e)||(o=n,!1)}),o;for(var a in e)if(n(e,a)&&t.call(r,e[a],a,e))return e[a]},chunk:function(e,t){var n=0,r=e?e.length:0,o=[];for(t=Math.max(+t||1,1);n<r;)o.push(e.slice(n,n+=t));return o},splat:function(e){return null==e?[]:[].concat(e)},noop:function(){},uniqueId:function(e){return""+((null==e?"":e)+ ++i)}}},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0;var o=n(289),a=r(o);t.default={animate:a.default},e.exports=t.default},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t,n,r,o){function a(t){t.target===t.currentTarget&&(s=!0,(0,_.default)(t.target,p.default.end,a),(0,u.default)(e,f),o&&o.call(this))}var s,d=[],c={target:e,currentTarget:e},m={},v="";"function"==typeof r&&(o=r,r=null),p.default.end||(n=0),void 0===n&&(n=200);for(var M in t)h.call(t,M)&&(/(top|bottom)/.test(M)?v+=y[M]+"("+t[M]+") ":(m[M]=t[M],d.push((0,i.default)(M))));return v&&(m[p.default.transform]=v,d.push(p.default.transform)),n>0&&(m[p.default.property]=d.join(", "),m[p.default.duration]=n/1e3+"s",m[p.default.delay]="0s",m[p.default.timing]=r||"linear",(0,l.default)(e,p.default.end,a),setTimeout(function(){s||a(c)},n+500)),e.clientLeft,(0,u.default)(e,m),n<=0&&setTimeout(a.bind(null,c),0),{cancel:function(){s||(s=!0,(0,_.default)(e,p.default.end,a),(0,u.default)(e,f))}}}t.__esModule=!0,t.default=o;var a=n(193),i=r(a),s=n(294),u=r(s),d=n(292),l=r(d),c=n(291),_=r(c),m=n(296),p=r(m),h=Object.prototype.hasOwnProperty,f={},y={left:"translateX",right:"translateX",top:"translateY",bottom:"translateY"};f[p.default.property]=f[p.default.duration]=f[p.default.delay]=f[p.default.timing]="",o.endEvent=p.default.end,o.transform=p.default.transform,o.TRANSLATION_MAP=y,e.exports=t.default},function(e,t,n){(function(e){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t,n,r,o){var a="function"==typeof r?r(n,o,e):t.call(e,n,r,o);return(0,l.default)(null==a||"string"==typeof a,"`localizer format(..)` must return a string, null, or undefined"),a}function a(t,n){"production"!==e.env.NODE_ENV&&t.forEach(function(e){return(0,l.default)((0,c.has)(n,e),"localizer missing required format: `%s`",e)})}function i(e){var t=e.format,n=e.parse,r=e.decimalChar,i=void 0===r?function(){return"."}:r,s=e.precision,u=void 0===s?function(){return null}:s,d=e.formats,c=e.propType;(0,l.default)("function"==typeof t,"number localizer `format(..)` must be a function"),(0,l.default)("function"==typeof n,"number localizer `parse(..)` must be a function"),a(h,d),d.editFormat=d.editFormat||function(e){return parseFloat(e)},y={formats:d,precision:u,decimalChar:i,propType:c||p,format:function(e,n,r){return o(this,t,e,n,r)},parse:function(e,t,r){var o=n.call(this,e,t,r);return(0,l.default)(null==o||"number"==typeof o,"number localizer `parse(..)` must return a number, null, or undefined"),o}}}function s(e){(0,l.default)("function"==typeof e.format,"date localizer `format(..)` must be a function"),(0,l.default)("function"==typeof e.parse,"date localizer `parse(..)` must be a function"),(0,l.default)("function"==typeof e.firstOfWeek,"date localizer `firstOfWeek(..)` must be a function"),a(f,e.formats),v={formats:e.formats,propType:e.propType||p,startOfWeek:e.firstOfWeek,format:function(t,n,r){return o(this,e.format,t,n,r)},parse:function(t,n){var r=e.parse.call(this,t,n);return(0,l.default)(null==r||r instanceof Date&&!isNaN(r.getTime()),"date localizer `parse(..)` must return a valid Date, null, or undefined"),r}}}function u(){var t={};return"production"!==e.env.NODE_ENV&&["formats","parse","format","firstOfWeek","precision","propType"].forEach(function(e){return Object.defineProperty(t,e,{enumerable:!0,get:function(){throw new Error("[React Widgets] You are attempting to use a widget that requires localization (Calendar, DateTimePicker, NumberPicker). However there is no localizer set. Please configure a localizer. \n\nsee http://jquense.github.io/react-widgets/docs/#/i18n for more info.")}})}),t}t.__esModule=!0,t.date=t.number=t.setNumber=void 0,t.setDate=s;var d=n(300),l=r(d),c=n(287),_=n(197),m=r(_),p=m.default.PropTypes.oneOfType([m.default.PropTypes.string,m.default.PropTypes.func]),h=["default"],f=["default","date","time","header","footer","dayOfMonth","month","year","decade","century"],y=u("NumberPicker");t.setNumber=i;var v=u("DateTimePicker"),M=t.number={propType:function(){var e;return(e=y).propType.apply(e,arguments)},getFormat:function(e,t){return t||y.formats[e]},parse:function(){var e;return(e=y).parse.apply(e,arguments)},format:function(){var e;return(e=y).format.apply(e,arguments)},decimalChar:function(){var e;return(e=y).decimalChar.apply(e,arguments)},precision:function(){var e;return(e=y).precision.apply(e,arguments)}},g=t.date={propType:function(){var e;return(e=v).propType.apply(e,arguments)},getFormat:function(e,t){return t||v.formats[e]},parse:function(){var e;return(e=v).parse.apply(e,arguments)},format:function(){var e;return(e=v).format.apply(e,arguments)},startOfWeek:function(){var e;return(e=v).startOfWeek.apply(e,arguments)}};t.default={number:M,date:g}}).call(t,n(2))},function(e,t,n){"use strict";var r=n(51),o=function(){};r&&(o=function(){return document.addEventListener?function(e,t,n,r){return e.removeEventListener(t,n,r||!1)}:document.attachEvent?function(e,t,n){return e.detachEvent("on"+t,n)}:void 0}()),e.exports=o},function(e,t,n){"use strict";var r=n(51),o=function(){};r&&(o=function(){return document.addEventListener?function(e,t,n,r){return e.addEventListener(t,n,r||!1)}:document.attachEvent?function(e,t,n){return e.attachEvent("on"+t,n)}:void 0}()),e.exports=o},function(e,t,n){"use strict";var r=n(297),o=n(192),a=r.interopRequireDefault(o),i=/^(top|right|bottom|left)$/,s=/^([+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|))(?!px)[a-z%]+$/i;e.exports=function(e){if(!e)throw new TypeError("No Element passed to `getComputedStyle()`");var t=e.ownerDocument;return"defaultView"in t?t.defaultView.opener?e.ownerDocument.defaultView.getComputedStyle(e,null):window.getComputedStyle(e,null):{getPropertyValue:function(t){var n=e.style;t=(0,a.default)(t),"float"==t&&(t="styleFloat");var r=e.currentStyle[t]||null;if(null==r&&n&&n[t]&&(r=n[t]),s.test(r)&&!i.test(t)){var o=n.left,u=e.runtimeStyle,d=u&&u.left;d&&(u.left=e.currentStyle.left),n.left="fontSize"===t?"1em":r,r=n.pixelLeft+"px",n.left=o,d&&(u.left=d)}return r}}}},function(e,t,n){"use strict";var r=n(192),o=n(299),a=n(293),i=n(295),s=Object.prototype.hasOwnProperty;e.exports=function(e,t,n){var u="",d=t;if("string"==typeof t){if(void 0===n)return e.style[r(t)]||a(e).getPropertyValue(o(t));(d={})[t]=n}for(var l in d)s.call(d,l)&&(d[l]||0===d[l]?u+=o(l)+":"+d[l]+";":i(e,o(l)));e.style.cssText+=";"+u}},function(e,t){"use strict";e.exports=function(e,t){return"removeProperty"in e.style?e.style.removeProperty(t):e.style.removeAttribute(t)}},function(e,t,n){"use strict";function r(){var e,t="",n={O:"otransitionend",Moz:"transitionend",Webkit:"webkitTransitionEnd",ms:"MSTransitionEnd"},r=document.createElement("div");for(var o in n)if(d.call(n,o)&&void 0!==r.style[o+"TransitionProperty"]){t="-"+o.toLowerCase()+"-",e=n[o];break}return e||void 0===r.style.transitionProperty||(e="transitionend"),{end:e,prefix:t}}var o,a,i,s,u=n(51),d=Object.prototype.hasOwnProperty,l="transform",c={};u&&(c=r(),l=c.prefix+l,i=c.prefix+"transition-property",a=c.prefix+"transition-duration",s=c.prefix+"transition-delay",o=c.prefix+"transition-timing-function"),e.exports={transform:l,end:c.end,property:i,timing:o,delay:s,duration:a}},function(e,t,n){var r,o,a;!function(n,i){o=[t],r=i,a="function"==typeof r?r.apply(t,o):r,!(void 0!==a&&(e.exports=a))}(this,function(e){var t=e;t.interopRequireDefault=function(e){return e&&e.__esModule?e:{default:e}},t._extends=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}})},function(e,t){"use strict";var n=/-(.)/g;e.exports=function(e){return e.replace(n,function(e,t){return t.toUpperCase()})}},function(e,t,n){"use strict";var r=n(193),o=/^ms-/;e.exports=function(e){return r(e).replace(o,"-ms-")}},function(e,t,n){(function(t){"use strict";var n=function(e,n,r,o,a,i,s,u){if("production"!==t.env.NODE_ENV&&void 0===n)throw new Error("invariant requires an error message argument");if(!e){var d;if(void 0===n)d=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[r,o,a,i,s,u],c=0;d=new Error(n.replace(/%s/g,function(){return l[c++]})),d.name="Invariant Violation"}throw d.framesToPop=1,d}};e.exports=n}).call(t,n(2))},function(e,t){"use strict";function n(e){var t=/[=:]/g,n={"=":"=0",":":"=2"},r=(""+e).replace(t,function(e){return n[e]});return"$"+r}function r(e){var t=/(=0|=2)/g,n={"=0":"=","=2":":"},r="."===e[0]&&"$"===e[1]?e.substring(2):e.substring(1);return(""+r).replace(t,function(e){return n[e]})}var o={escape:n,unescape:r};e.exports=o},function(e,t,n){(function(t){"use strict";var r=n(19),o=n(20),a=function(e){var t=this;if(t.instancePool.length){var n=t.instancePool.pop();return t.call(n,e),n}return new t(e)},i=function(e,t){var n=this;if(n.instancePool.length){var r=n.instancePool.pop();return n.call(r,e,t),r}return new n(e,t)},s=function(e,t,n){var r=this;if(r.instancePool.length){var o=r.instancePool.pop();return r.call(o,e,t,n),o}return new r(e,t,n)},u=function(e,t,n,r){var o=this;if(o.instancePool.length){var a=o.instancePool.pop();return o.call(a,e,t,n,r),a}return new o(e,t,n,r)},d=function(e,t,n,r,o){var a=this;if(a.instancePool.length){var i=a.instancePool.pop();return a.call(i,e,t,n,r,o),i}return new a(e,t,n,r,o)},l=function(e){var n=this;e instanceof n?void 0:"production"!==t.env.NODE_ENV?o(!1,"Trying to release an instance into a pool of a different type."):r("25"),e.destructor(),n.instancePool.length<n.poolSize&&n.instancePool.push(e)},c=10,_=a,m=function(e,t){var n=e;return n.instancePool=[],n.getPooled=t||_,n.poolSize||(n.poolSize=c),n.release=l,n},p={addPoolingTo:m,oneArgumentPooler:a,twoArgumentPooler:i,threeArgumentPooler:s,fourArgumentPooler:u,fiveArgumentPooler:d};e.exports=p}).call(t,n(2))},function(e,t,n){"use strict";function r(e){return(""+e).replace(g,"$&/")}function o(e,t){this.func=e,this.context=t,this.count=0}function a(e,t,n){var r=e.func,o=e.context;r.call(o,t,e.count++)}function i(e,t,n){if(null==e)return e;var r=o.getPooled(t,n);y(e,a,r),o.release(r)}function s(e,t,n,r){this.result=e,this.keyPrefix=t,this.func=n,this.context=r,this.count=0}function u(e,t,n){var o=e.result,a=e.keyPrefix,i=e.func,s=e.context,u=i.call(s,t,e.count++);Array.isArray(u)?d(u,o,n,f.thatReturnsArgument):null!=u&&(h.isValidElement(u)&&(u=h.cloneAndReplaceKey(u,a+(!u.key||t&&t.key===u.key?"":r(u.key)+"/")+n)),o.push(u))}function d(e,t,n,o,a){var i="";null!=n&&(i=r(n)+"/");var d=s.getPooled(t,i,o,a);y(e,u,d),s.release(d)}function l(e,t,n){if(null==e)return e;var r=[];return d(e,r,null,t,n),r}function c(e,t,n){return null}function _(e,t){return y(e,c,null)}function m(e){var t=[];return d(e,t,null,f.thatReturnsArgument),t}var p=n(302),h=n(18),f=n(57),y=n(311),v=p.twoArgumentPooler,M=p.fourArgumentPooler,g=/\/+/g;o.prototype.destructor=function(){this.func=null,this.context=null,this.count=0},p.addPoolingTo(o,v),s.prototype.destructor=function(){this.result=null,this.keyPrefix=null,this.func=null,this.context=null,this.count=0},p.addPoolingTo(s,M);var L={forEach:i,map:l,mapIntoWithKeyPrefixInternal:d,count:_,toArray:m};e.exports=L},function(e,t,n){(function(t){"use strict";function r(e){return e}function o(e,n,r){for(var o in n)n.hasOwnProperty(o)&&("production"!==t.env.NODE_ENV?L("function"==typeof n[o],"%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.",e.displayName||"ReactClass",y[r],o):void 0)}function a(e,n){var r=k.hasOwnProperty(n)?k[n]:null;T.hasOwnProperty(n)&&("OVERRIDE_BASE"!==r?"production"!==t.env.NODE_ENV?g(!1,"ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.",n):m("73",n):void 0),e&&("DEFINE_MANY"!==r&&"DEFINE_MANY_MERGED"!==r?"production"!==t.env.NODE_ENV?g(!1,"ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.",n):m("74",n):void 0)}function i(e,n){if(n){"function"==typeof n?"production"!==t.env.NODE_ENV?g(!1,"ReactClass: You're attempting to use a component class or function as a mixin. Instead, just use a regular object."):m("75"):void 0,f.isValidElement(n)?"production"!==t.env.NODE_ENV?g(!1,"ReactClass: You're attempting to use a component as a mixin. Instead, just use a regular object."):m("76"):void 0;var r=e.prototype,o=r.__reactAutoBindPairs;n.hasOwnProperty(D)&&b.mixins(e,n.mixins);for(var i in n)if(n.hasOwnProperty(i)&&i!==D){var s=n[i],u=r.hasOwnProperty(i);if(a(u,i),b.hasOwnProperty(i))b[i](e,s);else{var c=k.hasOwnProperty(i),_="function"==typeof s,p=_&&!c&&!u&&n.autobind!==!1;if(p)o.push(i,s),r[i]=s;else if(u){var h=k[i];!c||"DEFINE_MANY_MERGED"!==h&&"DEFINE_MANY"!==h?"production"!==t.env.NODE_ENV?g(!1,"ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.",h,i):m("77",h,i):void 0,"DEFINE_MANY_MERGED"===h?r[i]=d(r[i],s):"DEFINE_MANY"===h&&(r[i]=l(r[i],s))}else r[i]=s,"production"!==t.env.NODE_ENV&&"function"==typeof s&&n.displayName&&(r[i].displayName=n.displayName+"_"+i)}}}else if("production"!==t.env.NODE_ENV){var y=typeof n,v="object"===y&&null!==n;"production"!==t.env.NODE_ENV?L(v,"%s: You're attempting to include a mixin that is either null or not an object. Check the mixins included by the component, as well as any mixins they include themselves. Expected object but got %s.",e.displayName||"ReactClass",null===n?null:y):void 0}}function s(e,n){if(n)for(var r in n){var o=n[r];if(n.hasOwnProperty(r)){var a=r in b;a?"production"!==t.env.NODE_ENV?g(!1,'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.',r):m("78",r):void 0;var i=r in e;i?"production"!==t.env.NODE_ENV?g(!1,"ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.",r):m("79",r):void 0,e[r]=o}}}function u(e,n){e&&n&&"object"==typeof e&&"object"==typeof n?void 0:"production"!==t.env.NODE_ENV?g(!1,"mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects."):m("80");for(var r in n)n.hasOwnProperty(r)&&(void 0!==e[r]?"production"!==t.env.NODE_ENV?g(!1,"mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.",r):m("81",r):void 0,e[r]=n[r]);return e}function d(e,t){return function(){var n=e.apply(this,arguments),r=t.apply(this,arguments);if(null==n)return r;if(null==r)return n;var o={};return u(o,n),u(o,r),o}}function l(e,t){return function(){e.apply(this,arguments),t.apply(this,arguments)}}function c(e,n){var r=n.bind(e);if("production"!==t.env.NODE_ENV){r.__reactBoundContext=e,r.__reactBoundMethod=n,r.__reactBoundArguments=null;var o=e.constructor.displayName,a=r.bind;r.bind=function(i){for(var s=arguments.length,u=Array(s>1?s-1:0),d=1;d<s;d++)u[d-1]=arguments[d];if(i!==e&&null!==i)"production"!==t.env.NODE_ENV?L(!1,"bind(): React component methods may only be bound to the component instance. See %s",o):void 0;else if(!u.length)return"production"!==t.env.NODE_ENV?L(!1,"bind(): You are binding a component method to the component. React does this for you automatically in a high-performance way, so you can safely remove this call. See %s",o):void 0,r;var l=a.apply(r,arguments);return l.__reactBoundContext=e,l.__reactBoundMethod=n,l.__reactBoundArguments=u,l}}return r}function _(e){for(var t=e.__reactAutoBindPairs,n=0;n<t.length;n+=2){var r=t[n],o=t[n+1];e[r]=c(e,o)}}var m=n(19),p=n(34),h=n(52),f=n(18),y=n(54),v=n(53),M=n(58),g=n(20),L=n(13),D="mixins",Y=[],k={mixins:"DEFINE_MANY",statics:"DEFINE_MANY",propTypes:"DEFINE_MANY",contextTypes:"DEFINE_MANY",childContextTypes:"DEFINE_MANY",getDefaultProps:"DEFINE_MANY_MERGED",getInitialState:"DEFINE_MANY_MERGED",getChildContext:"DEFINE_MANY_MERGED",render:"DEFINE_ONCE",componentWillMount:"DEFINE_MANY",componentDidMount:"DEFINE_MANY",componentWillReceiveProps:"DEFINE_MANY",shouldComponentUpdate:"DEFINE_ONCE",componentWillUpdate:"DEFINE_MANY",componentDidUpdate:"DEFINE_MANY",componentWillUnmount:"DEFINE_MANY",updateComponent:"OVERRIDE_BASE"},b={displayName:function(e,t){e.displayName=t},mixins:function(e,t){if(t)for(var n=0;n<t.length;n++)i(e,t[n])},childContextTypes:function(e,n){"production"!==t.env.NODE_ENV&&o(e,n,"childContext"),e.childContextTypes=p({},e.childContextTypes,n)},contextTypes:function(e,n){"production"!==t.env.NODE_ENV&&o(e,n,"context"),e.contextTypes=p({},e.contextTypes,n)},getDefaultProps:function(e,t){e.getDefaultProps?e.getDefaultProps=d(e.getDefaultProps,t):e.getDefaultProps=t},propTypes:function(e,n){"production"!==t.env.NODE_ENV&&o(e,n,"prop"),e.propTypes=p({},e.propTypes,n)},statics:function(e,t){s(e,t)},autobind:function(){}},T={replaceState:function(e,t){this.updater.enqueueReplaceState(this,e),t&&this.updater.enqueueCallback(this,t,"replaceState")},isMounted:function(){return this.updater.isMounted(this)}},w=function(){};p(w.prototype,h.prototype,T);var E={createClass:function(e){var n=r(function(e,r,o){"production"!==t.env.NODE_ENV&&("production"!==t.env.NODE_ENV?L(this instanceof n,"Something is calling a React component directly. Use a factory or JSX instead. See: https://fb.me/react-legacyfactory"):void 0),this.__reactAutoBindPairs.length&&_(this),this.props=e,this.context=r,this.refs=M,this.updater=o||v,this.state=null;var a=this.getInitialState?this.getInitialState():null;"production"!==t.env.NODE_ENV&&void 0===a&&this.getInitialState._isMockFunction&&(a=null),"object"!=typeof a||Array.isArray(a)?"production"!==t.env.NODE_ENV?g(!1,"%s.getInitialState(): must return an object or null",n.displayName||"ReactCompositeComponent"):m("82",n.displayName||"ReactCompositeComponent"):void 0,this.state=a});n.prototype=new w,n.prototype.constructor=n,n.prototype.__reactAutoBindPairs=[],Y.forEach(i.bind(null,n)),i(n,e),n.getDefaultProps&&(n.defaultProps=n.getDefaultProps()),"production"!==t.env.NODE_ENV&&(n.getDefaultProps&&(n.getDefaultProps.isReactClassApproved={}),n.prototype.getInitialState&&(n.prototype.getInitialState.isReactClassApproved={})),n.prototype.render?void 0:"production"!==t.env.NODE_ENV?g(!1,"createClass(...): Class specification must implement a `render` method."):m("83"),"production"!==t.env.NODE_ENV&&("production"!==t.env.NODE_ENV?L(!n.prototype.componentShouldUpdate,"%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.",e.displayName||"A component"):void 0,"production"!==t.env.NODE_ENV?L(!n.prototype.componentWillRecieveProps,"%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?",e.displayName||"A component"):void 0);for(var o in k)n.prototype[o]||(n.prototype[o]=null);
return n},injection:{injectMixin:function(e){Y.push(e)}}};e.exports=E}).call(t,n(2))},function(e,t,n){(function(t){"use strict";var r=n(18),o=r.createFactory;if("production"!==t.env.NODE_ENV){var a=n(195);o=a.createFactory}var i={a:o("a"),abbr:o("abbr"),address:o("address"),area:o("area"),article:o("article"),aside:o("aside"),audio:o("audio"),b:o("b"),base:o("base"),bdi:o("bdi"),bdo:o("bdo"),big:o("big"),blockquote:o("blockquote"),body:o("body"),br:o("br"),button:o("button"),canvas:o("canvas"),caption:o("caption"),cite:o("cite"),code:o("code"),col:o("col"),colgroup:o("colgroup"),data:o("data"),datalist:o("datalist"),dd:o("dd"),del:o("del"),details:o("details"),dfn:o("dfn"),dialog:o("dialog"),div:o("div"),dl:o("dl"),dt:o("dt"),em:o("em"),embed:o("embed"),fieldset:o("fieldset"),figcaption:o("figcaption"),figure:o("figure"),footer:o("footer"),form:o("form"),h1:o("h1"),h2:o("h2"),h3:o("h3"),h4:o("h4"),h5:o("h5"),h6:o("h6"),head:o("head"),header:o("header"),hgroup:o("hgroup"),hr:o("hr"),html:o("html"),i:o("i"),iframe:o("iframe"),img:o("img"),input:o("input"),ins:o("ins"),kbd:o("kbd"),keygen:o("keygen"),label:o("label"),legend:o("legend"),li:o("li"),link:o("link"),main:o("main"),map:o("map"),mark:o("mark"),menu:o("menu"),menuitem:o("menuitem"),meta:o("meta"),meter:o("meter"),nav:o("nav"),noscript:o("noscript"),object:o("object"),ol:o("ol"),optgroup:o("optgroup"),option:o("option"),output:o("output"),p:o("p"),param:o("param"),picture:o("picture"),pre:o("pre"),progress:o("progress"),q:o("q"),rp:o("rp"),rt:o("rt"),ruby:o("ruby"),s:o("s"),samp:o("samp"),script:o("script"),section:o("section"),select:o("select"),small:o("small"),source:o("source"),span:o("span"),strong:o("strong"),style:o("style"),sub:o("sub"),summary:o("summary"),sup:o("sup"),table:o("table"),tbody:o("tbody"),td:o("td"),textarea:o("textarea"),tfoot:o("tfoot"),th:o("th"),thead:o("thead"),time:o("time"),title:o("title"),tr:o("tr"),track:o("track"),u:o("u"),ul:o("ul"),var:o("var"),video:o("video"),wbr:o("wbr"),circle:o("circle"),clipPath:o("clipPath"),defs:o("defs"),ellipse:o("ellipse"),g:o("g"),image:o("image"),line:o("line"),linearGradient:o("linearGradient"),mask:o("mask"),path:o("path"),pattern:o("pattern"),polygon:o("polygon"),polyline:o("polyline"),radialGradient:o("radialGradient"),rect:o("rect"),stop:o("stop"),svg:o("svg"),text:o("text"),tspan:o("tspan")};e.exports=i}).call(t,n(2))},function(e,t,n){(function(t){"use strict";function r(e,t){return e===t?0!==e||1/e===1/t:e!==e&&t!==t}function o(e){this.message=e,this.stack=""}function a(e){function n(n,a,i,s,u,d,l){if(s=s||w,d=d||i,"production"!==t.env.NODE_ENV&&l!==Y&&"undefined"!=typeof console){var c=s+":"+i;r[c]||("production"!==t.env.NODE_ENV?T(!1,"You are manually calling a React.PropTypes validation function for the `%s` prop on `%s`. This is deprecated and will not work in production with the next major version. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details.",d,s):void 0,r[c]=!0)}if(null==a[i]){var _=D[u];return n?new o(null===a[i]?"The "+_+" `"+d+"` is marked as required "+("in `"+s+"`, but its value is `null`."):"The "+_+" `"+d+"` is marked as required in "+("`"+s+"`, but its value is `undefined`.")):null}return e(a,i,s,u,d)}if("production"!==t.env.NODE_ENV)var r={};var a=n.bind(null,!1);return a.isRequired=n.bind(null,!0),a}function i(e){function t(t,n,r,a,i,s){var u=t[n],d=v(u);if(d!==e){var l=D[a],c=M(u);return new o("Invalid "+l+" `"+i+"` of type "+("`"+c+"` supplied to `"+r+"`, expected ")+("`"+e+"`."))}return null}return a(t)}function s(){return a(k.thatReturns(null))}function u(e){function t(t,n,r,a,i){if("function"!=typeof e)return new o("Property `"+i+"` of component `"+r+"` has invalid PropType notation inside arrayOf.");var s=t[n];if(!Array.isArray(s)){var u=D[a],d=v(s);return new o("Invalid "+u+" `"+i+"` of type "+("`"+d+"` supplied to `"+r+"`, expected an array."))}for(var l=0;l<s.length;l++){var c=e(s,l,r,a,i+"["+l+"]",Y);if(c instanceof Error)return c}return null}return a(t)}function d(){function e(e,t,n,r,a){var i=e[t];if(!L.isValidElement(i)){var s=D[r],u=v(i);return new o("Invalid "+s+" `"+a+"` of type "+("`"+u+"` supplied to `"+n+"`, expected a single ReactElement."))}return null}return a(e)}function l(e){function t(t,n,r,a,i){if(!(t[n]instanceof e)){var s=D[a],u=e.name||w,d=g(t[n]);return new o("Invalid "+s+" `"+i+"` of type "+("`"+d+"` supplied to `"+r+"`, expected ")+("instance of `"+u+"`."))}return null}return a(t)}function c(e){function n(t,n,a,i,s){for(var u=t[n],d=0;d<e.length;d++)if(r(u,e[d]))return null;var l=D[i],c=JSON.stringify(e);return new o("Invalid "+l+" `"+s+"` of value `"+u+"` "+("supplied to `"+a+"`, expected one of "+c+"."))}return Array.isArray(e)?a(n):("production"!==t.env.NODE_ENV?T(!1,"Invalid argument supplied to oneOf, expected an instance of array."):void 0,k.thatReturnsNull)}function _(e){function t(t,n,r,a,i){if("function"!=typeof e)return new o("Property `"+i+"` of component `"+r+"` has invalid PropType notation inside objectOf.");var s=t[n],u=v(s);if("object"!==u){var d=D[a];return new o("Invalid "+d+" `"+i+"` of type "+("`"+u+"` supplied to `"+r+"`, expected an object."))}for(var l in s)if(s.hasOwnProperty(l)){var c=e(s,l,r,a,i+"."+l,Y);if(c instanceof Error)return c}return null}return a(t)}function m(e){function n(t,n,r,a,i){for(var s=0;s<e.length;s++){var u=e[s];if(null==u(t,n,r,a,i,Y))return null}var d=D[a];return new o("Invalid "+d+" `"+i+"` supplied to "+("`"+r+"`."))}return Array.isArray(e)?a(n):("production"!==t.env.NODE_ENV?T(!1,"Invalid argument supplied to oneOfType, expected an instance of array."):void 0,k.thatReturnsNull)}function p(){function e(e,t,n,r,a){if(!f(e[t])){var i=D[r];return new o("Invalid "+i+" `"+a+"` supplied to "+("`"+n+"`, expected a ReactNode."))}return null}return a(e)}function h(e){function t(t,n,r,a,i){var s=t[n],u=v(s);if("object"!==u){var d=D[a];return new o("Invalid "+d+" `"+i+"` of type `"+u+"` "+("supplied to `"+r+"`, expected `object`."))}for(var l in e){var c=e[l];if(c){var _=c(s,l,r,a,i+"."+l,Y);if(_)return _}}return null}return a(t)}function f(e){switch(typeof e){case"number":case"string":case"undefined":return!0;case"boolean":return!e;case"object":if(Array.isArray(e))return e.every(f);if(null===e||L.isValidElement(e))return!0;var t=b(e);if(!t)return!1;var n,r=t.call(e);if(t!==e.entries){for(;!(n=r.next()).done;)if(!f(n.value))return!1}else for(;!(n=r.next()).done;){var o=n.value;if(o&&!f(o[1]))return!1}return!0;default:return!1}}function y(e,t){return"symbol"===e||("Symbol"===t["@@toStringTag"]||"function"==typeof Symbol&&t instanceof Symbol)}function v(e){var t=typeof e;return Array.isArray(e)?"array":e instanceof RegExp?"object":y(t,e)?"symbol":t}function M(e){var t=v(e);if("object"===t){if(e instanceof Date)return"date";if(e instanceof RegExp)return"regexp"}return t}function g(e){return e.constructor&&e.constructor.name?e.constructor.name:w}var L=n(18),D=n(54),Y=n(196),k=n(57),b=n(56),T=n(13),w="<<anonymous>>",E={array:i("array"),bool:i("boolean"),func:i("function"),number:i("number"),object:i("object"),string:i("string"),symbol:i("symbol"),any:s(),arrayOf:u,element:d(),instanceOf:l,node:p(),objectOf:_,oneOf:c,oneOfType:m,shape:h};o.prototype=Error.prototype,e.exports=E}).call(t,n(2))},function(e,t,n){"use strict";function r(e,t,n){this.props=e,this.context=t,this.refs=u,this.updater=n||s}function o(){}var a=n(34),i=n(52),s=n(53),u=n(58);o.prototype=i.prototype,r.prototype=new o,r.prototype.constructor=r,a(r.prototype,i.prototype),r.prototype.isPureReactComponent=!0,e.exports=r},function(e,t){"use strict";e.exports="15.4.1"},function(e,t,n){(function(t){"use strict";function r(e,r,c,_,m,p){for(var h in e)if(e.hasOwnProperty(h)){var f;try{"function"!=typeof e[h]?"production"!==t.env.NODE_ENV?u(!1,"%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.",_||"React class",i[c],h):a("84",_||"React class",i[c],h):void 0,f=e[h](r,h,_,c,null,s)}catch(e){f=e}if("production"!==t.env.NODE_ENV?d(!f||f instanceof Error,"%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).",_||"React class",i[c],h,typeof f):void 0,f instanceof Error&&!(f.message in l)){l[f.message]=!0;var y="";"production"!==t.env.NODE_ENV&&(o||(o=n(9)),null!==p?y=o.getStackAddendumByID(p):null!==m&&(y=o.getCurrentStackAddendum(m))),"production"!==t.env.NODE_ENV?d(!1,"Failed %s type: %s%s",c,f.message,y):void 0}}}var o,a=n(19),i=n(54),s=n(196),u=n(20),d=n(13);"undefined"!=typeof t&&t.env&&"test"===t.env.NODE_ENV&&(o=n(9));var l={};e.exports=r}).call(t,n(2))},function(e,t,n){(function(t){"use strict";function r(e){return a.isValidElement(e)?void 0:"production"!==t.env.NODE_ENV?i(!1,"React.Children.only expected to receive a single React element child."):o("143"),e}var o=n(19),a=n(18),i=n(20);e.exports=r}).call(t,n(2))},function(e,t,n){(function(t){"use strict";function r(e,t){return e&&"object"==typeof e&&null!=e.key?c.escape(e.key):t.toString(36)}function o(e,n,a,f){var y=typeof e;if("undefined"!==y&&"boolean"!==y||(e=null),null===e||"string"===y||"number"===y||"object"===y&&e.$$typeof===u)return a(f,e,""===n?m+r(e,0):n),1;var v,M,g=0,L=""===n?m:n+p;if(Array.isArray(e))for(var D=0;D<e.length;D++)v=e[D],M=L+r(v,D),g+=o(v,M,a,f);else{var Y=d(e);if(Y){var k,b=Y.call(e);if(Y!==e.entries)for(var T=0;!(k=b.next()).done;)v=k.value,M=L+r(v,T++),g+=o(v,M,a,f);else{if("production"!==t.env.NODE_ENV){var w="";if(s.current){var E=s.current.getName();E&&(w=" Check the render method of `"+E+"`.")}"production"!==t.env.NODE_ENV?_(h,"Using Maps as children is not yet fully supported. It is an experimental feature that might be removed. Convert it to a sequence / iterable of keyed ReactElements instead.%s",w):void 0,h=!0}for(;!(k=b.next()).done;){var N=k.value;N&&(v=N[1],M=L+c.escape(N[0])+p+r(v,0),g+=o(v,M,a,f))}}}else if("object"===y){var S="";if("production"!==t.env.NODE_ENV&&(S=" If you meant to render a collection of children, use an array instead or wrap the object using createFragment(object) from the React add-ons.",e._isReactElement&&(S=" It looks like you're using an element created by a different version of React. Make sure to use only one copy of React."),s.current)){var x=s.current.getName();x&&(S+=" Check the render method of `"+x+"`.")}var O=String(e);"production"!==t.env.NODE_ENV?l(!1,"Objects are not valid as a React child (found: %s).%s","[object Object]"===O?"object with keys {"+Object.keys(e).join(", ")+"}":O,S):i("31","[object Object]"===O?"object with keys {"+Object.keys(e).join(", ")+"}":O,S)}}return g}function a(e,t,n){return null==e?0:o(e,"",t,n)}var i=n(19),s=n(12),u=n(194),d=n(56),l=n(20),c=n(301),_=n(13),m=".",p=":",h=!1;e.exports=a}).call(t,n(2))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children=[],e.webpackPolyfill=1),e}}]);
/* Generated by Opal 0.10.3 */
Opal.modules["react/hash"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$alias_method', '$_pre_react_patch_initialize', '$to_proc']);
  return (function($base, $super) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    self.$alias_method("_pre_react_patch_initialize", "initialize");

    return (Opal.defn(self, '$initialize', TMP_1 = function $$initialize(defaults) {
      var $a, $b, $c, self = this, $iter = TMP_1.$$p, block = $iter || nil;

      TMP_1.$$p = null;
      if ((($a = (defaults===null)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = self).$_pre_react_patch_initialize, $a.$$p = block.$to_proc(), $a).call($b)
        } else {
        return ($a = ($c = self).$_pre_react_patch_initialize, $a.$$p = block.$to_proc(), $a).call($c, defaults)
      };
    }, TMP_1.$$arity = -1), nil) && 'initialize';
  })($scope.base, null)
};
/* Generated by Opal 0.10.3 */
Opal.modules["native"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $range = Opal.range, $hash2 = Opal.hash2, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$try_convert', '$native?', '$respond_to?', '$to_n', '$raise', '$inspect', '$Native', '$proc', '$map!', '$end_with?', '$define_method', '$[]', '$convert', '$call', '$to_proc', '$new', '$each', '$native_reader', '$native_writer', '$extend', '$is_a?', '$map', '$alias_method', '$to_a', '$_Array', '$include', '$method_missing', '$bind', '$instance_method', '$[]=', '$slice', '$-', '$length', '$enum_for', '$===', '$>=', '$<<', '$each_pair', '$_initialize', '$name', '$exiting_mid', '$native_module']);
  (function($base) {
    var $Native, self = $Native = $module($base, 'Native');

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_19, TMP_20, TMP_21;

    Opal.defs(self, '$is_a?', TMP_1 = function(object, klass) {
      var self = this;

      
      try {
        return object instanceof self.$try_convert(klass);
      }
      catch (e) {
        return false;
      }
    ;
    }, TMP_1.$$arity = 2);

    Opal.defs(self, '$try_convert', TMP_2 = function $$try_convert(value, default$) {
      var self = this;

      if (default$ == null) {
        default$ = nil;
      }
      
      if (self['$native?'](value)) {
        return value;
      }
      else if (value['$respond_to?']("to_n")) {
        return value.$to_n();
      }
      else {
        return default$;
      }
    ;
    }, TMP_2.$$arity = -2);

    Opal.defs(self, '$convert', TMP_3 = function $$convert(value) {
      var self = this;

      
      if (self['$native?'](value)) {
        return value;
      }
      else if (value['$respond_to?']("to_n")) {
        return value.$to_n();
      }
      else {
        self.$raise($scope.get('ArgumentError'), "" + (value.$inspect()) + " isn't native");
      }
    ;
    }, TMP_3.$$arity = 1);

    Opal.defs(self, '$call', TMP_4 = function $$call(obj, key, $a_rest) {
      var self = this, args, $iter = TMP_4.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 2;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 2; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 2] = arguments[$arg_idx];
      }
      TMP_4.$$p = null;
      
      var prop = obj[key];

      if (prop instanceof Function) {
        var converted = new Array(args.length);

        for (var i = 0, l = args.length; i < l; i++) {
          var item = args[i],
              conv = self.$try_convert(item);

          converted[i] = conv === nil ? item : conv;
        }

        if (block !== nil) {
          converted.push(block);
        }

        return self.$Native(prop.apply(obj, converted));
      }
      else {
        return self.$Native(prop);
      }
    ;
    }, TMP_4.$$arity = -3);

    Opal.defs(self, '$proc', TMP_5 = function $$proc() {
      var $a, $b, TMP_6, self = this, $iter = TMP_5.$$p, block = $iter || nil;

      TMP_5.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        self.$raise($scope.get('LocalJumpError'), "no block given")
      };
      return ($a = ($b = $scope.get('Kernel')).$proc, $a.$$p = (TMP_6 = function($c_rest){var self = TMP_6.$$s || this, args, $d, $e, TMP_7, instance = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
      ($d = ($e = args)['$map!'], $d.$$p = (TMP_7 = function(arg){var self = TMP_7.$$s || this;
if (arg == null) arg = nil;
        return self.$Native(arg)}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $d).call($e);
        instance = self.$Native(this);
        
        // if global is current scope, run the block in the scope it was defined
        if (this === Opal.global) {
          return block.apply(self, args);
        }

        var self_ = block.$$s;
        block.$$s = null;

        try {
          return block.apply(instance, args);
        }
        finally {
          block.$$s = self_;
        }
      ;}, TMP_6.$$s = self, TMP_6.$$arity = -1, TMP_6), $a).call($b);
    }, TMP_5.$$arity = 0);

    (function($base) {
      var $Helpers, self = $Helpers = $module($base, 'Helpers');

      var def = self.$$proto, $scope = self.$$scope, TMP_11, TMP_14, TMP_17, TMP_18;

      Opal.defn(self, '$alias_native', TMP_11 = function $$alias_native(new$, $old, $kwargs) {
        var $a, $b, TMP_8, $c, TMP_9, $d, TMP_10, self = this, $post_args, as, old;

        $post_args = Opal.slice.call(arguments, 1, arguments.length);
        $kwargs = Opal.extract_kwargs($post_args);
        if ($kwargs == null || !$kwargs.$$is_hash) {
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else {
            throw Opal.ArgumentError.$new('expected kwargs');
          }
        }
        if ((as = $kwargs.$$smap['as']) == null) {
          as = nil
        }
        if (0 < $post_args.length) {
          old = $post_args.splice(0,1)[0];
        }
        if (old == null) {
          old = new$;
        }
        if ((($a = old['$end_with?']("=")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return ($a = ($b = self).$define_method, $a.$$p = (TMP_8 = function(value){var self = TMP_8.$$s || this;
            if (self["native"] == null) self["native"] = nil;
if (value == null) value = nil;
          self["native"][old['$[]']($range(0, -2, false))] = $scope.get('Native').$convert(value);
            return value;}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8), $a).call($b, new$)
        } else if (as !== false && as !== nil && as != null) {
          return ($a = ($c = self).$define_method, $a.$$p = (TMP_9 = function($d_rest){var self = TMP_9.$$s || this, block, args, $e, $f, $g, value = nil;
            if (self["native"] == null) self["native"] = nil;

            block = TMP_9.$$p || nil, TMP_9.$$p = null;
            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
          if ((($e = value = ($f = ($g = $scope.get('Native')).$call, $f.$$p = block.$to_proc(), $f).apply($g, [self["native"], old].concat(Opal.to_a(args)))) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
              return as.$new(value.$to_n())
              } else {
              return nil
            }}, TMP_9.$$s = self, TMP_9.$$arity = -1, TMP_9), $a).call($c, new$)
          } else {
          return ($a = ($d = self).$define_method, $a.$$p = (TMP_10 = function($e_rest){var self = TMP_10.$$s || this, block, args, $f, $g;
            if (self["native"] == null) self["native"] = nil;

            block = TMP_10.$$p || nil, TMP_10.$$p = null;
            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
          return ($f = ($g = $scope.get('Native')).$call, $f.$$p = block.$to_proc(), $f).apply($g, [self["native"], old].concat(Opal.to_a(args)))}, TMP_10.$$s = self, TMP_10.$$arity = -1, TMP_10), $a).call($d, new$)
        };
      }, TMP_11.$$arity = -2);

      Opal.defn(self, '$native_reader', TMP_14 = function $$native_reader($a_rest) {
        var $b, $c, TMP_12, self = this, names;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        names = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          names[$arg_idx - 0] = arguments[$arg_idx];
        }
        return ($b = ($c = names).$each, $b.$$p = (TMP_12 = function(name){var self = TMP_12.$$s || this, $a, $d, TMP_13;
if (name == null) name = nil;
        return ($a = ($d = self).$define_method, $a.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this;
            if (self["native"] == null) self["native"] = nil;

          return self.$Native(self["native"][name])}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13), $a).call($d, name)}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12), $b).call($c);
      }, TMP_14.$$arity = -1);

      Opal.defn(self, '$native_writer', TMP_17 = function $$native_writer($a_rest) {
        var $b, $c, TMP_15, self = this, names;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        names = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          names[$arg_idx - 0] = arguments[$arg_idx];
        }
        return ($b = ($c = names).$each, $b.$$p = (TMP_15 = function(name){var self = TMP_15.$$s || this, $a, $d, TMP_16;
if (name == null) name = nil;
        return ($a = ($d = self).$define_method, $a.$$p = (TMP_16 = function(value){var self = TMP_16.$$s || this;
            if (self["native"] == null) self["native"] = nil;
if (value == null) value = nil;
          return self.$Native(self["native"][name] = value)}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16), $a).call($d, "" + (name) + "=")}, TMP_15.$$s = self, TMP_15.$$arity = 1, TMP_15), $b).call($c);
      }, TMP_17.$$arity = -1);

      Opal.defn(self, '$native_accessor', TMP_18 = function $$native_accessor($a_rest) {
        var $b, $c, self = this, names;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        names = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          names[$arg_idx - 0] = arguments[$arg_idx];
        }
        ($b = self).$native_reader.apply($b, Opal.to_a(names));
        return ($c = self).$native_writer.apply($c, Opal.to_a(names));
      }, TMP_18.$$arity = -1);
    })($scope.base);

    Opal.defs(self, '$included', TMP_19 = function $$included(klass) {
      var self = this;

      return klass.$extend($scope.get('Helpers'));
    }, TMP_19.$$arity = 1);

    Opal.defn(self, '$initialize', TMP_20 = function $$initialize(native$) {
      var $a, self = this;

      if ((($a = $scope.get('Kernel')['$native?'](native$)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        $scope.get('Kernel').$raise($scope.get('ArgumentError'), "" + (native$.$inspect()) + " isn't native")
      };
      return self["native"] = native$;
    }, TMP_20.$$arity = 1);

    Opal.defn(self, '$to_n', TMP_21 = function $$to_n() {
      var self = this;
      if (self["native"] == null) self["native"] = nil;

      return self["native"];
    }, TMP_21.$$arity = 0);
  })($scope.base);
  (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_22, TMP_25, TMP_26;

    Opal.defn(self, '$native?', TMP_22 = function(value) {
      var self = this;

      return value == null || !value.$$class;
    }, TMP_22.$$arity = 1);

    Opal.defn(self, '$Native', TMP_25 = function $$Native(obj) {
      var $a, $b, TMP_23, $c, TMP_24, self = this;

      if ((($a = obj == null) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return nil
      } else if ((($a = self['$native?'](obj)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return (($scope.get('Native')).$$scope.get('Object')).$new(obj)
      } else if ((($a = obj['$is_a?']($scope.get('Array'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = obj).$map, $a.$$p = (TMP_23 = function(o){var self = TMP_23.$$s || this;
if (o == null) o = nil;
        return self.$Native(o)}, TMP_23.$$s = self, TMP_23.$$arity = 1, TMP_23), $a).call($b)
      } else if ((($a = obj['$is_a?']($scope.get('Proc'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($c = self).$proc, $a.$$p = (TMP_24 = function($d_rest){var self = TMP_24.$$s || this, block, args, $e, $f;

          block = TMP_24.$$p || nil, TMP_24.$$p = null;
          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
        return self.$Native(($e = ($f = obj).$call, $e.$$p = block.$to_proc(), $e).apply($f, Opal.to_a(args)))}, TMP_24.$$s = self, TMP_24.$$arity = -1, TMP_24), $a).call($c)
        } else {
        return obj
      };
    }, TMP_25.$$arity = 1);

    self.$alias_method("_Array", "Array");

    Opal.defn(self, '$Array', TMP_26 = function $$Array(object, $a_rest) {
      var $b, $c, self = this, args, $iter = TMP_26.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      TMP_26.$$p = null;
      if ((($b = self['$native?'](object)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        return ($b = ($c = (($scope.get('Native')).$$scope.get('Array'))).$new, $b.$$p = block.$to_proc(), $b).apply($c, [object].concat(Opal.to_a(args))).$to_a()};
      return self.$_Array(object);
    }, TMP_26.$$arity = -2);
  })($scope.base);
  (function($base, $super) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $scope = self.$$scope, TMP_27, TMP_28, TMP_29, TMP_30, TMP_31, TMP_32, TMP_33, TMP_34, TMP_35, TMP_36, TMP_37, TMP_38, TMP_39, TMP_40, TMP_41;

    def["native"] = nil;
    self.$include(Opal.get('Native'));

    Opal.defn(self, '$==', TMP_27 = function(other) {
      var self = this;

      return self["native"] === $scope.get('Native').$try_convert(other);
    }, TMP_27.$$arity = 1);

    Opal.defn(self, '$has_key?', TMP_28 = function(name) {
      var self = this;

      return Opal.hasOwnProperty.call(self["native"], name);
    }, TMP_28.$$arity = 1);

    Opal.alias(self, 'key?', 'has_key?');

    Opal.alias(self, 'include?', 'has_key?');

    Opal.alias(self, 'member?', 'has_key?');

    Opal.defn(self, '$each', TMP_29 = function $$each($a_rest) {
      var $b, self = this, args, $iter = TMP_29.$$p, $yield = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_29.$$p = null;
      if (($yield !== nil)) {
        
        for (var key in self["native"]) {
          Opal.yieldX($yield, [key, self["native"][key]])
        }
      ;
        return self;
        } else {
        return ($b = self).$method_missing.apply($b, ["each"].concat(Opal.to_a(args)))
      };
    }, TMP_29.$$arity = -1);

    Opal.defn(self, '$[]', TMP_30 = function(key) {
      var self = this;

      
      var prop = self["native"][key];

      if (prop instanceof Function) {
        return prop;
      }
      else {
        return Opal.get('Native').$call(self["native"], key)
      }
    ;
    }, TMP_30.$$arity = 1);

    Opal.defn(self, '$[]=', TMP_31 = function(key, value) {
      var $a, self = this, native$ = nil;

      native$ = $scope.get('Native').$try_convert(value);
      if ((($a = native$ === nil) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self["native"][key] = value;
        } else {
        return self["native"][key] = native$;
      };
    }, TMP_31.$$arity = 2);

    Opal.defn(self, '$merge!', TMP_32 = function(other) {
      var self = this;

      
      other = $scope.get('Native').$convert(other);

      for (var prop in other) {
        self["native"][prop] = other[prop];
      }
    ;
      return self;
    }, TMP_32.$$arity = 1);

    Opal.defn(self, '$respond_to?', TMP_33 = function(name, include_all) {
      var self = this;

      if (include_all == null) {
        include_all = false;
      }
      return $scope.get('Kernel').$instance_method("respond_to?").$bind(self).$call(name, include_all);
    }, TMP_33.$$arity = -2);

    Opal.defn(self, '$respond_to_missing?', TMP_34 = function(name, include_all) {
      var self = this;

      if (include_all == null) {
        include_all = false;
      }
      return Opal.hasOwnProperty.call(self["native"], name);
    }, TMP_34.$$arity = -2);

    Opal.defn(self, '$method_missing', TMP_35 = function $$method_missing(mid, $a_rest) {
      var $b, $c, self = this, args, $iter = TMP_35.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      TMP_35.$$p = null;
      
      if (mid.charAt(mid.length - 1) === '=') {
        return self['$[]='](mid.$slice(0, $rb_minus(mid.$length(), 1)), args['$[]'](0));
      }
      else {
        return ($b = ($c = Opal.get('Native')).$call, $b.$$p = block.$to_proc(), $b).apply($c, [self["native"], mid].concat(Opal.to_a(args)));
      }
    ;
    }, TMP_35.$$arity = -2);

    Opal.defn(self, '$nil?', TMP_36 = function() {
      var self = this;

      return false;
    }, TMP_36.$$arity = 0);

    Opal.defn(self, '$is_a?', TMP_37 = function(klass) {
      var self = this;

      return Opal.is_a(self, klass);
    }, TMP_37.$$arity = 1);

    Opal.alias(self, 'kind_of?', 'is_a?');

    Opal.defn(self, '$instance_of?', TMP_38 = function(klass) {
      var self = this;

      return self.$$class === klass;
    }, TMP_38.$$arity = 1);

    Opal.defn(self, '$class', TMP_39 = function() {
      var self = this;

      return self.$$class;
    }, TMP_39.$$arity = 0);

    Opal.defn(self, '$to_a', TMP_40 = function $$to_a(options) {
      var $a, $b, self = this, $iter = TMP_40.$$p, block = $iter || nil;

      if (options == null) {
        options = $hash2([], {});
      }
      TMP_40.$$p = null;
      return ($a = ($b = (($scope.get('Native')).$$scope.get('Array'))).$new, $a.$$p = block.$to_proc(), $a).call($b, self["native"], options).$to_a();
    }, TMP_40.$$arity = -1);

    return (Opal.defn(self, '$inspect', TMP_41 = function $$inspect() {
      var self = this;

      return "#<Native:" + (String(self["native"])) + ">";
    }, TMP_41.$$arity = 0), nil) && 'inspect';
  })($scope.get('Native'), $scope.get('BasicObject'));
  (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $scope = self.$$scope, TMP_42, TMP_43, TMP_44, TMP_45, TMP_46, TMP_47, TMP_48;

    def.named = def["native"] = def.get = def.block = def.set = def.length = nil;
    self.$include($scope.get('Native'));

    self.$include($scope.get('Enumerable'));

    Opal.defn(self, '$initialize', TMP_42 = function $$initialize(native$, options) {
      var $a, $b, self = this, $iter = TMP_42.$$p, block = $iter || nil;

      if (options == null) {
        options = $hash2([], {});
      }
      TMP_42.$$p = null;
      ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_42, false)), $a.$$p = null, $a).call($b, native$);
      self.get = ((($a = options['$[]']("get")) !== false && $a !== nil && $a != null) ? $a : options['$[]']("access"));
      self.named = options['$[]']("named");
      self.set = ((($a = options['$[]']("set")) !== false && $a !== nil && $a != null) ? $a : options['$[]']("access"));
      self.length = ((($a = options['$[]']("length")) !== false && $a !== nil && $a != null) ? $a : "length");
      self.block = block;
      if ((($a = self.$length() == null) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$raise($scope.get('ArgumentError'), "no length found on the array-like object")
        } else {
        return nil
      };
    }, TMP_42.$$arity = -2);

    Opal.defn(self, '$each', TMP_43 = function $$each() {
      var self = this, $iter = TMP_43.$$p, block = $iter || nil;

      TMP_43.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        return self.$enum_for("each")
      };
      
      for (var i = 0, length = self.$length(); i < length; i++) {
        Opal.yield1(block, self['$[]'](i));
      }
    ;
      return self;
    }, TMP_43.$$arity = 0);

    Opal.defn(self, '$[]', TMP_44 = function(index) {
      var $a, self = this, result = nil, $case = nil;

      result = (function() {$case = index;if ($scope.get('String')['$===']($case) || $scope.get('Symbol')['$===']($case)) {if ((($a = self.named) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self["native"][self.named](index);
        } else {
        return self["native"][index];
      }}else if ($scope.get('Integer')['$===']($case)) {if ((($a = self.get) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self["native"][self.get](index);
        } else {
        return self["native"][index];
      }}else { return nil }})();
      if (result !== false && result !== nil && result != null) {
        if ((($a = self.block) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.block.$call(result)
          } else {
          return self.$Native(result)
        }
        } else {
        return nil
      };
    }, TMP_44.$$arity = 1);

    Opal.defn(self, '$[]=', TMP_45 = function(index, value) {
      var $a, self = this;

      if ((($a = self.set) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self["native"][self.set](index, $scope.get('Native').$convert(value));
        } else {
        return self["native"][index] = $scope.get('Native').$convert(value);
      };
    }, TMP_45.$$arity = 2);

    Opal.defn(self, '$last', TMP_46 = function $$last(count) {
      var $a, $b, self = this, index = nil, result = nil;

      if (count == null) {
        count = nil;
      }
      if (count !== false && count !== nil && count != null) {
        index = $rb_minus(self.$length(), 1);
        result = [];
        while ((($b = $rb_ge(index, 0)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        result['$<<'](self['$[]'](index));
        index = $rb_minus(index, 1);};
        return result;
        } else {
        return self['$[]']($rb_minus(self.$length(), 1))
      };
    }, TMP_46.$$arity = -1);

    Opal.defn(self, '$length', TMP_47 = function $$length() {
      var self = this;

      return self["native"][self.length];
    }, TMP_47.$$arity = 0);

    Opal.alias(self, 'to_ary', 'to_a');

    return (Opal.defn(self, '$inspect', TMP_48 = function $$inspect() {
      var self = this;

      return self.$to_a().$inspect();
    }, TMP_48.$$arity = 0), nil) && 'inspect';
  })($scope.get('Native'), null);
  (function($base, $super) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.$$proto, $scope = self.$$scope, TMP_49;

    return (Opal.defn(self, '$to_n', TMP_49 = function $$to_n() {
      var self = this;

      return self.valueOf();
    }, TMP_49.$$arity = 0), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $Proc(){};
    var self = $Proc = $klass($base, $super, 'Proc', $Proc);

    var def = self.$$proto, $scope = self.$$scope, TMP_50;

    return (Opal.defn(self, '$to_n', TMP_50 = function $$to_n() {
      var self = this;

      return self;
    }, TMP_50.$$arity = 0), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope, TMP_51;

    return (Opal.defn(self, '$to_n', TMP_51 = function $$to_n() {
      var self = this;

      return self.valueOf();
    }, TMP_51.$$arity = 0), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $Regexp(){};
    var self = $Regexp = $klass($base, $super, 'Regexp', $Regexp);

    var def = self.$$proto, $scope = self.$$scope, TMP_52;

    return (Opal.defn(self, '$to_n', TMP_52 = function $$to_n() {
      var self = this;

      return self.valueOf();
    }, TMP_52.$$arity = 0), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $MatchData(){};
    var self = $MatchData = $klass($base, $super, 'MatchData', $MatchData);

    var def = self.$$proto, $scope = self.$$scope, TMP_53;

    def.matches = nil;
    return (Opal.defn(self, '$to_n', TMP_53 = function $$to_n() {
      var self = this;

      return self.matches;
    }, TMP_53.$$arity = 0), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $Struct(){};
    var self = $Struct = $klass($base, $super, 'Struct', $Struct);

    var def = self.$$proto, $scope = self.$$scope, TMP_55;

    return (Opal.defn(self, '$to_n', TMP_55 = function $$to_n() {
      var $a, $b, TMP_54, self = this, result = nil;

      result = {};
      ($a = ($b = self).$each_pair, $a.$$p = (TMP_54 = function(name, value){var self = TMP_54.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
      return result[name] = $scope.get('Native').$try_convert(value, value);}, TMP_54.$$s = self, TMP_54.$$arity = 2, TMP_54), $a).call($b);
      return result;
    }, TMP_55.$$arity = 0), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $scope = self.$$scope, TMP_56;

    return (Opal.defn(self, '$to_n', TMP_56 = function $$to_n() {
      var self = this;

      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        var obj = self[i];

        result.push($scope.get('Native').$try_convert(obj, obj));
      }

      return result;
    
    }, TMP_56.$$arity = 0), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $Boolean(){};
    var self = $Boolean = $klass($base, $super, 'Boolean', $Boolean);

    var def = self.$$proto, $scope = self.$$scope, TMP_57;

    return (Opal.defn(self, '$to_n', TMP_57 = function $$to_n() {
      var self = this;

      return self.valueOf();
    }, TMP_57.$$arity = 0), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $Time(){};
    var self = $Time = $klass($base, $super, 'Time', $Time);

    var def = self.$$proto, $scope = self.$$scope, TMP_58;

    return (Opal.defn(self, '$to_n', TMP_58 = function $$to_n() {
      var self = this;

      return self;
    }, TMP_58.$$arity = 0), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.$$proto, $scope = self.$$scope, TMP_59;

    return (Opal.defn(self, '$to_n', TMP_59 = function $$to_n() {
      var self = this;

      return null;
    }, TMP_59.$$arity = 0), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $scope = self.$$scope, TMP_60, TMP_61;

    self.$alias_method("_initialize", "initialize");

    Opal.defn(self, '$initialize', TMP_60 = function $$initialize(defaults) {
      var $a, $b, self = this, $iter = TMP_60.$$p, block = $iter || nil;

      TMP_60.$$p = null;
      
      if (defaults != null && defaults.constructor === Object) {
        var smap = self.$$smap,
            keys = self.$$keys,
            key, value;

        for (key in defaults) {
          value = defaults[key];

          if (value && value.constructor === Object) {
            smap[key] = $scope.get('Hash').$new(value);
          } else if (value && value.$$is_array) {
            value = value.map(function(item) {
              if (item && item.constructor === Object) {
                return $scope.get('Hash').$new(item);
              }

              return item;
            });
            smap[key] = value
          } else {
            smap[key] = self.$Native(value);
          }

          keys.push(key);
        }

        return self;
      }

      return ($a = ($b = self).$_initialize, $a.$$p = block.$to_proc(), $a).call($b, defaults);
    
    }, TMP_60.$$arity = -1);

    return (Opal.defn(self, '$to_n', TMP_61 = function $$to_n() {
      var self = this;

      
      var result = {},
          keys = self.$$keys,
          smap = self.$$smap,
          key, value;

      for (var i = 0, length = keys.length; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = smap[key];
        } else {
          key = key.key;
          value = key.value;
        }

        result[key] = $scope.get('Native').$try_convert(value, value);
      }

      return result;
    
    }, TMP_61.$$arity = 0), nil) && 'to_n';
  })($scope.base, null);
  (function($base, $super) {
    function $Module(){};
    var self = $Module = $klass($base, $super, 'Module', $Module);

    var def = self.$$proto, $scope = self.$$scope, TMP_62;

    return (Opal.defn(self, '$native_module', TMP_62 = function $$native_module() {
      var self = this;

      return Opal.global[self.$name()] = self;
    }, TMP_62.$$arity = 0), nil) && 'native_module'
  })($scope.base, null);
  (function($base, $super) {
    function $Class(){};
    var self = $Class = $klass($base, $super, 'Class', $Class);

    var def = self.$$proto, $scope = self.$$scope, TMP_63, TMP_64;

    Opal.defn(self, '$native_alias', TMP_63 = function $$native_alias(new_jsid, existing_mid) {
      var self = this;

      
      var aliased = self.$$proto['$' + existing_mid];
      if (!aliased) {
        self.$raise($scope.get('NameError').$new("undefined method `" + (existing_mid) + "' for class `" + (self.$inspect()) + "'", self.$exiting_mid()));
      }
      self.$$proto[new_jsid] = aliased;
    ;
    }, TMP_63.$$arity = 2);

    return (Opal.defn(self, '$native_class', TMP_64 = function $$native_class() {
      var self = this;

      self.$native_module();
      self["new"] = self.$new;
    }, TMP_64.$$arity = 0), nil) && 'native_class';
  })($scope.base, null);
  return $gvars.$ = $gvars.global = self.$Native(Opal.global);
};
/* Generated by Opal 0.10.3 */
Opal.modules["active_support/core_ext/array/extract_options"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$instance_of?', '$is_a?', '$last', '$extractable_options?', '$pop']);
  (function($base, $super) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    return (Opal.defn(self, '$extractable_options?', TMP_1 = function() {
      var self = this;

      return self['$instance_of?']($scope.get('Hash'));
    }, TMP_1.$$arity = 0), nil) && 'extractable_options?'
  })($scope.base, null);
  return (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $scope = self.$$scope, TMP_2;

    return (Opal.defn(self, '$extract_options!', TMP_2 = function() {
      var $a, $b, self = this;

      if ((($a = ($b = self.$last()['$is_a?']($scope.get('Hash')), $b !== false && $b !== nil && $b != null ?self.$last()['$extractable_options?']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$pop()
        } else {
        return $hash2([], {})
      };
    }, TMP_2.$$arity = 0), nil) && 'extract_options!'
  })($scope.base, null);
};
/* Generated by Opal 0.10.3 */
Opal.modules["active_support/core_ext/array/wrap"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$nil?', '$respond_to?', '$to_ary']);
  return (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    return (Opal.defs(self, '$wrap', TMP_1 = function $$wrap(object) {
      var $a, self = this;

      if ((($a = object['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return []
      } else if ((($a = object['$respond_to?']("to_ary")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ((($a = object.$to_ary()) !== false && $a !== nil && $a != null) ? $a : [object])
        } else {
        return [object]
      };
    }, TMP_1.$$arity = 1), nil) && 'wrap'
  })($scope.base, null)
};
/* Generated by Opal 0.10.3 */
Opal.modules["active_support/core_ext/array/grouping"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$==', '$%', '$-', '$size', '$concat', '$dup', '$*', '$each_slice', '$<<', '$div', '$times', '$+', '$>', '$slice', '$!=', '$each', '$inject', '$call', '$last']);
  return (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_5, TMP_7;

    Opal.defn(self, '$in_groups_of', TMP_1 = function $$in_groups_of(number, fill_with) {
      var $a, $b, TMP_2, $c, TMP_3, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, collection = nil, padding = nil, groups = nil;

      if (fill_with == null) {
        fill_with = nil;
      }
      TMP_1.$$p = null;
      if (fill_with['$=='](false)) {
        collection = self
        } else {
        padding = ($rb_minus(number, self.$size()['$%'](number)))['$%'](number);
        collection = self.$dup().$concat($rb_times([fill_with], padding));
      };
      if (($yield !== nil)) {
        return ($a = ($b = collection).$each_slice, $a.$$p = (TMP_2 = function(slice){var self = TMP_2.$$s || this;
if (slice == null) slice = nil;
        return Opal.yield1($yield, slice);}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $a).call($b, number)
        } else {
        groups = [];
        ($a = ($c = collection).$each_slice, $a.$$p = (TMP_3 = function(group){var self = TMP_3.$$s || this;
if (group == null) group = nil;
        return groups['$<<'](group)}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($c, number);
        return groups;
      };
    }, TMP_1.$$arity = -2);

    Opal.defn(self, '$in_groups', TMP_5 = function $$in_groups(number, fill_with) {
      var $a, $b, TMP_4, $c, TMP_6, self = this, $iter = TMP_5.$$p, $yield = $iter || nil, division = nil, modulo = nil, groups = nil, start = nil;

      if (fill_with == null) {
        fill_with = nil;
      }
      TMP_5.$$p = null;
      division = self.$size().$div(number);
      modulo = self.$size()['$%'](number);
      groups = [];
      start = 0;
      ($a = ($b = number).$times, $a.$$p = (TMP_4 = function(index){var self = TMP_4.$$s || this, $c, $d, $e, length = nil, last_group = nil;
if (index == null) index = nil;
      length = $rb_plus(division, ((function() {if ((($c = ($d = $rb_gt(modulo, 0), $d !== false && $d !== nil && $d != null ?$rb_gt(modulo, index) : $d)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          return 1
          } else {
          return 0
        }; return nil; })()));
        groups['$<<'](last_group = self.$slice(start, length));
        if ((($c = ($d = ($e = fill_with['$!='](false), $e !== false && $e !== nil && $e != null ?$rb_gt(modulo, 0) : $e), $d !== false && $d !== nil && $d != null ?length['$=='](division) : $d)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          last_group['$<<'](fill_with)};
        return start = $rb_plus(start, length);}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4), $a).call($b);
      if (($yield !== nil)) {
        return ($a = ($c = groups).$each, $a.$$p = (TMP_6 = function(g){var self = TMP_6.$$s || this;
if (g == null) g = nil;
        return Opal.yield1($yield, g);}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $a).call($c)
        } else {
        return groups
      };
    }, TMP_5.$$arity = -2);

    return (Opal.defn(self, '$split', TMP_7 = function $$split(value) {
      var $a, $b, TMP_8, self = this, $iter = TMP_7.$$p, block = $iter || nil;

      if (value == null) {
        value = nil;
      }
      TMP_7.$$p = null;
      return ($a = ($b = self).$inject, $a.$$p = (TMP_8 = function(results, element){var self = TMP_8.$$s || this, $c, $d, $e;
if (results == null) results = nil;if (element == null) element = nil;
      if ((($c = ((($d = (($e = block !== false && block !== nil && block != null) ? block.$call(element) : block)) !== false && $d !== nil && $d != null) ? $d : value['$=='](element))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          results['$<<']([])
          } else {
          results.$last()['$<<'](element)
        };
        return results;}, TMP_8.$$s = self, TMP_8.$$arity = 2, TMP_8), $a).call($b, [[]]);
    }, TMP_7.$$arity = -1), nil) && 'split';
  })($scope.base, null)
};
/* Generated by Opal 0.10.3 */
Opal.modules["active_support/core_ext/array"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  self.$require("active_support/core_ext/array/extract_options");
  self.$require("active_support/core_ext/array/wrap");
  return self.$require("active_support/core_ext/array/grouping");
};
/* Generated by Opal 0.10.3 */
Opal.modules["active_support/core_ext/kernel/singleton_class"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$class_eval', '$to_proc', '$singleton_class']);
  return (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    Opal.defn(self, '$class_eval', TMP_1 = function $$class_eval($a_rest) {
      var $b, $c, self = this, args, $iter = TMP_1.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_1.$$p = null;
      return ($b = ($c = self.$singleton_class()).$class_eval, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args));
    }, TMP_1.$$arity = -1)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["active_support/core_ext/module/remove_method"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$method_defined?', '$private_method_defined?', '$undef_method', '$remove_possible_method', '$define_method', '$to_proc']);
  return (function($base, $super) {
    function $Module(){};
    var self = $Module = $klass($base, $super, 'Module', $Module);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

    Opal.defn(self, '$remove_possible_method', TMP_1 = function $$remove_possible_method(method) {
      var $a, $b, self = this;

      if ((($a = ((($b = self['$method_defined?'](method)) !== false && $b !== nil && $b != null) ? $b : self['$private_method_defined?'](method))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$undef_method(method)
        } else {
        return nil
      };
    }, TMP_1.$$arity = 1);

    return (Opal.defn(self, '$redefine_method', TMP_2 = function $$redefine_method(method) {
      var $a, $b, self = this, $iter = TMP_2.$$p, block = $iter || nil;

      TMP_2.$$p = null;
      self.$remove_possible_method(method);
      return ($a = ($b = self).$define_method, $a.$$p = block.$to_proc(), $a).call($b, method);
    }, TMP_2.$$arity = 1), nil) && 'redefine_method';
  })($scope.base, null)
};
/* Generated by Opal 0.10.3 */
Opal.modules["active_support/core_ext/class/attribute"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$extract_options!', '$fetch', '$each', '$define_singleton_method', '$!', '$public_send', '$class_eval', '$remove_possible_method', '$define_method', '$singleton_class', '$singleton_class?', '$instance_variable_defined?', '$instance_variable_get', '$send', '$class', '$attr_writer', '$private', '$respond_to?', '$!=', '$first', '$ancestors']);
  self.$require("active_support/core_ext/kernel/singleton_class");
  self.$require("active_support/core_ext/module/remove_method");
  self.$require("active_support/core_ext/array/extract_options");
  return (function($base, $super) {
    function $Class(){};
    var self = $Class = $klass($base, $super, 'Class', $Class);

    var def = self.$$proto, $scope = self.$$scope, TMP_11, $a, TMP_12;

    Opal.defn(self, '$class_attribute', TMP_11 = function $$class_attribute($a_rest) {
      var $b, $c, TMP_1, self = this, attrs, options = nil, instance_reader = nil, instance_writer = nil, instance_predicate = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      attrs = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        attrs[$arg_idx - 0] = arguments[$arg_idx];
      }
      options = attrs['$extract_options!']();
      instance_reader = ($b = options.$fetch("instance_accessor", true), $b !== false && $b !== nil && $b != null ?options.$fetch("instance_reader", true) : $b);
      instance_writer = ($b = options.$fetch("instance_accessor", true), $b !== false && $b !== nil && $b != null ?options.$fetch("instance_writer", true) : $b);
      instance_predicate = options.$fetch("instance_predicate", true);
      return ($b = ($c = attrs).$each, $b.$$p = (TMP_1 = function(name){var self = TMP_1.$$s || this, $a, $d, TMP_2, $e, TMP_3, $f, TMP_4, $g, TMP_9, $h, TMP_10, ivar = nil;
if (name == null) name = nil;
      ($a = ($d = self).$define_singleton_method, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

        return nil}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2), $a).call($d, name);
        if (instance_predicate !== false && instance_predicate !== nil && instance_predicate != null) {
          ($a = ($e = self).$define_singleton_method, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

          return self.$public_send(name)['$!']()['$!']()}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $a).call($e, "" + (name) + "?")};
        ivar = "@" + (name);
        ($a = ($f = self).$define_singleton_method, $a.$$p = (TMP_4 = function(val){var self = TMP_4.$$s || this, $g, $h, TMP_5, $i, TMP_7;
if (val == null) val = nil;
        ($g = ($h = self.$singleton_class()).$class_eval, $g.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this, $i, $j, TMP_6;

          self.$remove_possible_method(name);
            return ($i = ($j = self).$define_method, $i.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

            return val}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $i).call($j, name);}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $g).call($h);
          if ((($g = self['$singleton_class?']()) !== nil && $g != null && (!$g.$$is_boolean || $g == true))) {
            ($g = ($i = self).$class_eval, $g.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this, $j, $k, TMP_8;

            self.$remove_possible_method(name);
              return ($j = ($k = self).$define_method, $j.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this, $l;

              if ((($l = self['$instance_variable_defined?'](ivar)) !== nil && $l != null && (!$l.$$is_boolean || $l == true))) {
                  return self.$instance_variable_get(ivar)
                  } else {
                  return self.$singleton_class().$send(name)
                }}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $j).call($k, name);}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $g).call($i)};
          return val;}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4), $a).call($f, "" + (name) + "=");
        if (instance_reader !== false && instance_reader !== nil && instance_reader != null) {
          self.$remove_possible_method(name);
          ($a = ($g = self).$define_method, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this, $h;

          if ((($h = self['$instance_variable_defined?'](ivar)) !== nil && $h != null && (!$h.$$is_boolean || $h == true))) {
              return self.$instance_variable_get(ivar)
              } else {
              return self.$class().$public_send(name)
            }}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $a).call($g, name);
          if (instance_predicate !== false && instance_predicate !== nil && instance_predicate != null) {
            ($a = ($h = self).$define_method, $a.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this;

            return self.$public_send(name)['$!']()['$!']()}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10), $a).call($h, "" + (name) + "?")};};
        if (instance_writer !== false && instance_writer !== nil && instance_writer != null) {
          return self.$attr_writer(name)
          } else {
          return nil
        };}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $b).call($c);
    }, TMP_11.$$arity = -1);

    self.$private();

    if ((($a = self['$respond_to?']("singleton_class?")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      return nil
      } else {
      return (Opal.defn(self, '$singleton_class?', TMP_12 = function() {
        var $a, self = this;

        return ((($a = true) !== false && $a !== nil && $a != null) ? $a : self.$ancestors().$first()['$!='](self));
      }, TMP_12.$$arity = 0), nil) && 'singleton_class?'
    };
  })($scope.base, null);
};
/* Generated by Opal 0.10.3 */
Opal.modules["active_support/core_ext/class"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  return self.$require("active_support/core_ext/class/attribute")
};
/* Generated by Opal 0.10.3 */
Opal.modules["active_support/core_ext/enumerable"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$enum_for', '$new', '$destructure', '$[]=']);
  return (function($base) {
    var $Enumerable, self = $Enumerable = $module($base, 'Enumerable');

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    Opal.defn(self, '$index_by', TMP_1 = function $$index_by() {
      var self = this, $iter = TMP_1.$$p, block = $iter || nil, hash = nil;

      TMP_1.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("index_by")
      };
      hash = $scope.get('Hash').$new();
      
      var result;

      self.$each._p = function() {
        var param = $scope.get('Opal').$destructure(arguments),
            value = $opal.$yield1(block, param);

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        hash['$[]='](value, param);
      }

      self.$each();

      if (result !== undefined) {
        return result;
      }
    
      return hash;
    }, TMP_1.$$arity = 0)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["active_support/hash_with_indifferent_access"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$dup', '$respond_to?', '$update', '$to_hash', '$tap', '$default=', '$default', '$default_proc', '$default_proc=', '$new']);
  return (function($base) {
    var $ActiveSupport, self = $ActiveSupport = $module($base, 'ActiveSupport');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $HashWithIndifferentAccess(){};
      var self = $HashWithIndifferentAccess = $klass($base, $super, 'HashWithIndifferentAccess', $HashWithIndifferentAccess);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_6;

      Opal.defn(self, '$extractable_options?', TMP_1 = function() {
        var self = this;

        return true;
      }, TMP_1.$$arity = 0);

      Opal.defn(self, '$with_indifferent_access', TMP_2 = function $$with_indifferent_access() {
        var self = this;

        return self.$dup();
      }, TMP_2.$$arity = 0);

      Opal.defn(self, '$nested_under_indifferent_access', TMP_3 = function $$nested_under_indifferent_access() {
        var self = this;

        return self;
      }, TMP_3.$$arity = 0);

      Opal.defn(self, '$initialize', TMP_4 = function $$initialize(constructor) {
        var $a, $b, $c, self = this, $iter = TMP_4.$$p, $yield = $iter || nil;

        if (constructor == null) {
          constructor = $hash2([], {});
        }
        TMP_4.$$p = null;
        if ((($a = constructor['$respond_to?']("to_hash")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_4, false)), $a.$$p = null, $a).call($b);
          return self.$update(constructor);
          } else {
          return ($a = ($c = self, Opal.find_super_dispatcher(self, 'initialize', TMP_4, false)), $a.$$p = null, $a).call($c, constructor)
        };
      }, TMP_4.$$arity = -1);

      return (Opal.defs(self, '$new_from_hash_copying_default', TMP_6 = function $$new_from_hash_copying_default(hash) {
        var $a, $b, TMP_5, self = this;

        hash = hash.$to_hash();
        return ($a = ($b = self.$new(hash)).$tap, $a.$$p = (TMP_5 = function(new_hash){var self = TMP_5.$$s || this, $c, $d;
if (new_hash == null) new_hash = nil;
        (($c = [hash.$default()]), $d = new_hash, $d['$default='].apply($d, $c), $c[$c.length-1]);
          if ((($c = hash.$default_proc()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return (($c = [hash.$default_proc()]), $d = new_hash, $d['$default_proc='].apply($d, $c), $c[$c.length-1])
            } else {
            return nil
          };}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5), $a).call($b);
      }, TMP_6.$$arity = 1), nil) && 'new_from_hash_copying_default';
    })($scope.base, $scope.get('Hash'))
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["active_support/core_ext/hash/indifferent_access"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$new_from_hash_copying_default']);
  self.$require("active_support/hash_with_indifferent_access");
  return (function($base, $super) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    Opal.defn(self, '$with_indifferent_access', TMP_1 = function $$with_indifferent_access() {
      var self = this;

      return (($scope.get('ActiveSupport')).$$scope.get('HashWithIndifferentAccess')).$new_from_hash_copying_default(self);
    }, TMP_1.$$arity = 0);

    return Opal.alias(self, 'nested_under_indifferent_access', 'with_indifferent_access');
  })($scope.base, null);
};
/* Generated by Opal 0.10.3 */
Opal.modules["active_support/core_ext/hash"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  return self.$require("active_support/core_ext/hash/indifferent_access")
};
/* Generated by Opal 0.10.3 */
Opal.modules["active_support/core_ext/numeric/time"] = function(Opal) {
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$*', '$hours', '$days', '$weeks', '$-', '$current', '$+']);
  return (function($base, $super) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8;

    Opal.defn(self, '$seconds', TMP_1 = function $$seconds() {
      var self = this;

      return self;
    }, TMP_1.$$arity = 0);

    Opal.alias(self, 'second', 'seconds');

    Opal.defn(self, '$minutes', TMP_2 = function $$minutes() {
      var self = this;

      return $rb_times(self, 60);
    }, TMP_2.$$arity = 0);

    Opal.alias(self, 'minute', 'minutes');

    Opal.defn(self, '$hours', TMP_3 = function $$hours() {
      var self = this;

      return $rb_times(self, 3600);
    }, TMP_3.$$arity = 0);

    Opal.alias(self, 'hour', 'hours');

    Opal.defn(self, '$days', TMP_4 = function $$days() {
      var self = this;

      return $rb_times(self, (24).$hours());
    }, TMP_4.$$arity = 0);

    Opal.alias(self, 'day', 'days');

    Opal.defn(self, '$weeks', TMP_5 = function $$weeks() {
      var self = this;

      return $rb_times(self, (7).$days());
    }, TMP_5.$$arity = 0);

    Opal.alias(self, 'week', 'weeks');

    Opal.defn(self, '$fortnights', TMP_6 = function $$fortnights() {
      var self = this;

      return $rb_times(self, (2).$weeks());
    }, TMP_6.$$arity = 0);

    Opal.alias(self, 'fortnight', 'fortnights');

    Opal.defn(self, '$ago', TMP_7 = function $$ago(time) {
      var self = this;

      if (time == null) {
        time = Opal.get('Time').$current();
      }
      return $rb_minus(time, self);
    }, TMP_7.$$arity = -1);

    Opal.alias(self, 'until', 'ago');

    Opal.defn(self, '$since', TMP_8 = function $$since(time) {
      var self = this;

      if (time == null) {
        time = Opal.get('Time').$current();
      }
      return $rb_plus(time, self);
    }, TMP_8.$$arity = -1);

    return Opal.alias(self, 'from_now', 'since');
  })($scope.base, null)
};
/* Generated by Opal 0.10.3 */
Opal.modules["active_support/core_ext/integer/time"] = function(Opal) {
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$*', '$days']);
  self.$require("active_support/core_ext/numeric/time");
  return (function($base, $super) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

    Opal.defn(self, '$months', TMP_1 = function $$months() {
      var self = this;

      return $rb_times(self, (30).$days());
    }, TMP_1.$$arity = 0);

    Opal.alias(self, 'month', 'months');

    Opal.defn(self, '$years', TMP_2 = function $$years() {
      var self = this;

      return $rb_times(self, (365.25).$days());
    }, TMP_2.$$arity = 0);

    return Opal.alias(self, 'year', 'years');
  })($scope.base, null);
};
/* Generated by Opal 0.10.3 */
Opal.modules["active_support/core_ext/integer"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  return self.$require("active_support/core_ext/integer/time")
};
/* Generated by Opal 0.10.3 */
Opal.modules["active_support/core_ext/kernel"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  return self.$require("active_support/core_ext/kernel/singleton_class")
};
/* Generated by Opal 0.10.3 */
Opal.modules["set"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module;

  Opal.add_stubs(['$include', '$new', '$nil?', '$===', '$raise', '$each', '$add', '$call', '$merge', '$class', '$respond_to?', '$subtract', '$dup', '$join', '$to_a', '$equal?', '$instance_of?', '$==', '$instance_variable_get', '$is_a?', '$size', '$all?', '$include?', '$[]=', '$enum_for', '$[]', '$<<', '$replace', '$delete', '$select', '$each_key', '$to_proc', '$empty?', '$eql?', '$instance_eval', '$clear', '$<', '$<=', '$keys']);
  (function($base, $super) {
    function $Set(){};
    var self = $Set = $klass($base, $super, 'Set', $Set);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_4, TMP_5, TMP_6, TMP_8, TMP_9, TMP_10, TMP_13, TMP_15, TMP_16, TMP_17, TMP_20, TMP_21, TMP_22, TMP_24, TMP_25, TMP_26, TMP_28, TMP_29, TMP_30, TMP_32, TMP_33, TMP_35, TMP_37, TMP_39, TMP_41, TMP_42;

    def.hash = nil;
    self.$include($scope.get('Enumerable'));

    Opal.defs(self, '$[]', TMP_1 = function($a_rest) {
      var self = this, ary;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      ary = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        ary[$arg_idx - 0] = arguments[$arg_idx];
      }
      return self.$new(ary);
    }, TMP_1.$$arity = -1);

    Opal.defn(self, '$initialize', TMP_2 = function $$initialize(enum$) {
      var $a, $b, TMP_3, self = this, $iter = TMP_2.$$p, block = $iter || nil;

      if (enum$ == null) {
        enum$ = nil;
      }
      TMP_2.$$p = null;
      self.hash = $scope.get('Hash').$new();
      if ((($a = enum$['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return nil};
      if ((($a = $scope.get('Enumerable')['$==='](enum$)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "value must be enumerable")
      };
      if (block !== false && block !== nil && block != null) {
        return ($a = ($b = enum$).$each, $a.$$p = (TMP_3 = function(item){var self = TMP_3.$$s || this;
if (item == null) item = nil;
        return self.$add(block.$call(item))}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($b)
        } else {
        return self.$merge(enum$)
      };
    }, TMP_2.$$arity = -1);

    Opal.defn(self, '$dup', TMP_4 = function $$dup() {
      var self = this, result = nil;

      result = self.$class().$new();
      return result.$merge(self);
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$-', TMP_5 = function(enum$) {
      var $a, self = this;

      if ((($a = enum$['$respond_to?']("each")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "value must be enumerable")
      };
      return self.$dup().$subtract(enum$);
    }, TMP_5.$$arity = 1);

    Opal.alias(self, 'difference', '-');

    Opal.defn(self, '$inspect', TMP_6 = function $$inspect() {
      var self = this;

      return "#<Set: {" + (self.$to_a().$join(",")) + "}>";
    }, TMP_6.$$arity = 0);

    Opal.defn(self, '$==', TMP_8 = function(other) {
      var $a, $b, TMP_7, self = this;

      if ((($a = self['$equal?'](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return true
      } else if ((($a = other['$instance_of?'](self.$class())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.hash['$=='](other.$instance_variable_get("@hash"))
      } else if ((($a = ($b = other['$is_a?']($scope.get('Set')), $b !== false && $b !== nil && $b != null ?self.$size()['$=='](other.$size()) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = other)['$all?'], $a.$$p = (TMP_7 = function(o){var self = TMP_7.$$s || this;
          if (self.hash == null) self.hash = nil;
if (o == null) o = nil;
        return self.hash['$include?'](o)}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $a).call($b)
        } else {
        return false
      };
    }, TMP_8.$$arity = 1);

    Opal.defn(self, '$add', TMP_9 = function $$add(o) {
      var self = this;

      self.hash['$[]='](o, true);
      return self;
    }, TMP_9.$$arity = 1);

    Opal.alias(self, '<<', 'add');

    Opal.defn(self, '$classify', TMP_10 = function $$classify() {
      var $a, $b, TMP_11, $c, TMP_12, self = this, $iter = TMP_10.$$p, block = $iter || nil, result = nil;

      TMP_10.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("classify")
      };
      result = ($a = ($b = $scope.get('Hash')).$new, $a.$$p = (TMP_11 = function(h, k){var self = TMP_11.$$s || this;
if (h == null) h = nil;if (k == null) k = nil;
      return h['$[]='](k, self.$class().$new())}, TMP_11.$$s = self, TMP_11.$$arity = 2, TMP_11), $a).call($b);
      ($a = ($c = self).$each, $a.$$p = (TMP_12 = function(item){var self = TMP_12.$$s || this;
if (item == null) item = nil;
      return result['$[]'](Opal.yield1(block, item)).$add(item)}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12), $a).call($c);
      return result;
    }, TMP_10.$$arity = 0);

    Opal.defn(self, '$collect!', TMP_13 = function() {
      var $a, $b, TMP_14, self = this, $iter = TMP_13.$$p, block = $iter || nil, result = nil;

      TMP_13.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("collect!")
      };
      result = self.$class().$new();
      ($a = ($b = self).$each, $a.$$p = (TMP_14 = function(item){var self = TMP_14.$$s || this;
if (item == null) item = nil;
      return result['$<<'](Opal.yield1(block, item))}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14), $a).call($b);
      return self.$replace(result);
    }, TMP_13.$$arity = 0);

    Opal.alias(self, 'map!', 'collect!');

    Opal.defn(self, '$delete', TMP_15 = function(o) {
      var self = this;

      self.hash.$delete(o);
      return self;
    }, TMP_15.$$arity = 1);

    Opal.defn(self, '$delete?', TMP_16 = function(o) {
      var $a, self = this;

      if ((($a = self['$include?'](o)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$delete(o);
        return self;
        } else {
        return nil
      };
    }, TMP_16.$$arity = 1);

    Opal.defn(self, '$delete_if', TMP_17 = function $$delete_if() {try {

      var $a, $b, TMP_18, $c, $d, TMP_19, self = this, $iter = TMP_17.$$p, $yield = $iter || nil;

      TMP_17.$$p = null;
      ((($a = ($yield !== nil)) !== false && $a !== nil && $a != null) ? $a : Opal.ret(self.$enum_for("delete_if")));
      ($a = ($b = ($c = ($d = self).$select, $c.$$p = (TMP_19 = function(o){var self = TMP_19.$$s || this;
if (o == null) o = nil;
      return Opal.yield1($yield, o);}, TMP_19.$$s = self, TMP_19.$$arity = 1, TMP_19), $c).call($d)).$each, $a.$$p = (TMP_18 = function(o){var self = TMP_18.$$s || this;
        if (self.hash == null) self.hash = nil;
if (o == null) o = nil;
      return self.hash.$delete(o)}, TMP_18.$$s = self, TMP_18.$$arity = 1, TMP_18), $a).call($b);
      return self;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_17.$$arity = 0);

    Opal.defn(self, '$add?', TMP_20 = function(o) {
      var $a, self = this;

      if ((($a = self['$include?'](o)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return nil
        } else {
        return self.$add(o)
      };
    }, TMP_20.$$arity = 1);

    Opal.defn(self, '$each', TMP_21 = function $$each() {
      var $a, $b, self = this, $iter = TMP_21.$$p, block = $iter || nil;

      TMP_21.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("each")
      };
      ($a = ($b = self.hash).$each_key, $a.$$p = block.$to_proc(), $a).call($b);
      return self;
    }, TMP_21.$$arity = 0);

    Opal.defn(self, '$empty?', TMP_22 = function() {
      var self = this;

      return self.hash['$empty?']();
    }, TMP_22.$$arity = 0);

    Opal.defn(self, '$eql?', TMP_24 = function(other) {
      var $a, $b, TMP_23, self = this;

      return self.hash['$eql?'](($a = ($b = other).$instance_eval, $a.$$p = (TMP_23 = function(){var self = TMP_23.$$s || this;
        if (self.hash == null) self.hash = nil;

      return self.hash}, TMP_23.$$s = self, TMP_23.$$arity = 0, TMP_23), $a).call($b));
    }, TMP_24.$$arity = 1);

    Opal.defn(self, '$clear', TMP_25 = function $$clear() {
      var self = this;

      self.hash.$clear();
      return self;
    }, TMP_25.$$arity = 0);

    Opal.defn(self, '$include?', TMP_26 = function(o) {
      var self = this;

      return self.hash['$include?'](o);
    }, TMP_26.$$arity = 1);

    Opal.alias(self, 'member?', 'include?');

    Opal.defn(self, '$merge', TMP_28 = function $$merge(enum$) {
      var $a, $b, TMP_27, self = this;

      ($a = ($b = enum$).$each, $a.$$p = (TMP_27 = function(item){var self = TMP_27.$$s || this;
if (item == null) item = nil;
      return self.$add(item)}, TMP_27.$$s = self, TMP_27.$$arity = 1, TMP_27), $a).call($b);
      return self;
    }, TMP_28.$$arity = 1);

    Opal.defn(self, '$replace', TMP_29 = function $$replace(enum$) {
      var self = this;

      self.$clear();
      self.$merge(enum$);
      return self;
    }, TMP_29.$$arity = 1);

    Opal.defn(self, '$size', TMP_30 = function $$size() {
      var self = this;

      return self.hash.$size();
    }, TMP_30.$$arity = 0);

    Opal.alias(self, 'length', 'size');

    Opal.defn(self, '$subtract', TMP_32 = function $$subtract(enum$) {
      var $a, $b, TMP_31, self = this;

      ($a = ($b = enum$).$each, $a.$$p = (TMP_31 = function(item){var self = TMP_31.$$s || this;
if (item == null) item = nil;
      return self.$delete(item)}, TMP_31.$$s = self, TMP_31.$$arity = 1, TMP_31), $a).call($b);
      return self;
    }, TMP_32.$$arity = 1);

    Opal.defn(self, '$|', TMP_33 = function(enum$) {
      var $a, self = this;

      if ((($a = enum$['$respond_to?']("each")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "value must be enumerable")
      };
      return self.$dup().$merge(enum$);
    }, TMP_33.$$arity = 1);

    Opal.defn(self, '$superset?', TMP_35 = function(set) {
      var $a, $b, TMP_34, self = this;

      ((($a = set['$is_a?']($scope.get('Set'))) !== false && $a !== nil && $a != null) ? $a : self.$raise($scope.get('ArgumentError'), "value must be a set"));
      if ((($a = $rb_lt(self.$size(), set.$size())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return false};
      return ($a = ($b = set)['$all?'], $a.$$p = (TMP_34 = function(o){var self = TMP_34.$$s || this;
if (o == null) o = nil;
      return self['$include?'](o)}, TMP_34.$$s = self, TMP_34.$$arity = 1, TMP_34), $a).call($b);
    }, TMP_35.$$arity = 1);

    Opal.alias(self, '>=', 'superset?');

    Opal.defn(self, '$proper_superset?', TMP_37 = function(set) {
      var $a, $b, TMP_36, self = this;

      ((($a = set['$is_a?']($scope.get('Set'))) !== false && $a !== nil && $a != null) ? $a : self.$raise($scope.get('ArgumentError'), "value must be a set"));
      if ((($a = $rb_le(self.$size(), set.$size())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return false};
      return ($a = ($b = set)['$all?'], $a.$$p = (TMP_36 = function(o){var self = TMP_36.$$s || this;
if (o == null) o = nil;
      return self['$include?'](o)}, TMP_36.$$s = self, TMP_36.$$arity = 1, TMP_36), $a).call($b);
    }, TMP_37.$$arity = 1);

    Opal.alias(self, '>', 'proper_superset?');

    Opal.defn(self, '$subset?', TMP_39 = function(set) {
      var $a, $b, TMP_38, self = this;

      ((($a = set['$is_a?']($scope.get('Set'))) !== false && $a !== nil && $a != null) ? $a : self.$raise($scope.get('ArgumentError'), "value must be a set"));
      if ((($a = $rb_lt(set.$size(), self.$size())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return false};
      return ($a = ($b = self)['$all?'], $a.$$p = (TMP_38 = function(o){var self = TMP_38.$$s || this;
if (o == null) o = nil;
      return set['$include?'](o)}, TMP_38.$$s = self, TMP_38.$$arity = 1, TMP_38), $a).call($b);
    }, TMP_39.$$arity = 1);

    Opal.alias(self, '<=', 'subset?');

    Opal.defn(self, '$proper_subset?', TMP_41 = function(set) {
      var $a, $b, TMP_40, self = this;

      ((($a = set['$is_a?']($scope.get('Set'))) !== false && $a !== nil && $a != null) ? $a : self.$raise($scope.get('ArgumentError'), "value must be a set"));
      if ((($a = $rb_le(set.$size(), self.$size())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return false};
      return ($a = ($b = self)['$all?'], $a.$$p = (TMP_40 = function(o){var self = TMP_40.$$s || this;
if (o == null) o = nil;
      return set['$include?'](o)}, TMP_40.$$s = self, TMP_40.$$arity = 1, TMP_40), $a).call($b);
    }, TMP_41.$$arity = 1);

    Opal.alias(self, '<', 'proper_subset?');

    Opal.alias(self, '+', '|');

    Opal.alias(self, 'union', '|');

    return (Opal.defn(self, '$to_a', TMP_42 = function $$to_a() {
      var self = this;

      return self.hash.$keys();
    }, TMP_42.$$arity = 0), nil) && 'to_a';
  })($scope.base, null);
  return (function($base) {
    var $Enumerable, self = $Enumerable = $module($base, 'Enumerable');

    var def = self.$$proto, $scope = self.$$scope, TMP_43;

    Opal.defn(self, '$to_set', TMP_43 = function $$to_set(klass, $a_rest) {
      var $b, $c, self = this, args, $iter = TMP_43.$$p, block = $iter || nil;

      if (klass == null) {
        klass = $scope.get('Set');
      }
      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      TMP_43.$$p = null;
      return ($b = ($c = klass).$new, $b.$$p = block.$to_proc(), $b).apply($c, [self].concat(Opal.to_a(args)));
    }, TMP_43.$$arity = -1)
  })($scope.base);
};
/* Generated by Opal 0.10.3 */
Opal.modules["active_support/inflector/inflections"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$extend', '$instance', '$split', '$empty?', '$const_get', '$>', '$size', '$first', '$shift', '$inject', '$==', '$const_defined?', '$ancestors', '$apply_inflections', '$plurals', '$inflections', '$singulars', '$to_s', '$include?', '$uncountables', '$downcase', '$each', '$sub', '$new', '$attr_reader', '$unshift', '$<<']);
  self.$require("set");
  return (function($base) {
    var $ActiveSupport, self = $ActiveSupport = $module($base, 'ActiveSupport');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Inflector, self = $Inflector = $module($base, 'Inflector');

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_4, TMP_5, TMP_6, TMP_8;

      self.$extend(self);

      Opal.defn(self, '$inflections', TMP_1 = function $$inflections() {
        var self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

        TMP_1.$$p = null;
        if (($yield !== nil)) {
          return Opal.yield1($yield, $scope.get('Inflections').$instance());
          } else {
          return $scope.get('Inflections').$instance()
        };
      }, TMP_1.$$arity = 0);

      Opal.defn(self, '$constantize', TMP_4 = function $$constantize(camel_cased_word) {
        var $a, $b, TMP_2, self = this, names = nil;

        names = camel_cased_word.$split("::");
        if ((($a = names['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          $scope.get('Object').$const_get(camel_cased_word)};
        if ((($a = ($b = $rb_gt(names.$size(), 1), $b !== false && $b !== nil && $b != null ?names.$first()['$empty?']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          names.$shift()};
        return ($a = ($b = names).$inject, $a.$$p = (TMP_2 = function(constant, name){var self = TMP_2.$$s || this, $c, $d, TMP_3, candidate = nil;
if (constant == null) constant = nil;if (name == null) name = nil;
        if (constant['$==']($scope.get('Object'))) {
            return constant.$const_get(name)
            } else {
            candidate = constant.$const_get(name);
            if ((($c = constant['$const_defined?'](name, false)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return candidate;};
            if ((($c = $scope.get('Object')['$const_defined?'](name)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              } else {
              return candidate;
            };
            constant = (function(){var $brk = Opal.new_brk(); try {return ($c = ($d = constant.$ancestors()).$inject, $c.$$p = (TMP_3 = function(const$, ancestor){var self = TMP_3.$$s || this, $e;
if (const$ == null) const$ = nil;if (ancestor == null) ancestor = nil;
            if (ancestor['$==']($scope.get('Object'))) {
                
                Opal.brk(const$, $brk)};
              if ((($e = ancestor['$const_defined?'](name, false)) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
                
                Opal.brk(ancestor, $brk)};
              return const$;}, TMP_3.$$s = self, TMP_3.$$brk = $brk, TMP_3.$$arity = 2, TMP_3), $c).call($d)
            } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
            return constant.$const_get(name, false);
          }}, TMP_2.$$s = self, TMP_2.$$arity = 2, TMP_2), $a).call($b, $scope.get('Object'));
      }, TMP_4.$$arity = 1);

      Opal.defn(self, '$pluralize', TMP_5 = function $$pluralize(word) {
        var self = this;

        return self.$apply_inflections(word, self.$inflections().$plurals());
      }, TMP_5.$$arity = 1);

      Opal.defn(self, '$singularize', TMP_6 = function $$singularize(word) {
        var self = this;

        return self.$apply_inflections(word, self.$inflections().$singulars());
      }, TMP_6.$$arity = 1);

      Opal.defn(self, '$apply_inflections', TMP_8 = function $$apply_inflections(word, rules) {
        var $a, $b, TMP_7, self = this, result = nil;

        result = word.$to_s();
        if ((($a = self.$inflections().$uncountables()['$include?'](result.$downcase())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return result
          } else {
          (function(){var $brk = Opal.new_brk(); try {return ($a = ($b = rules).$each, $a.$$p = (TMP_7 = function(rule, replacement){var self = TMP_7.$$s || this, changed = nil;
if (rule == null) rule = nil;if (replacement == null) replacement = nil;
          changed = result.$sub(rule, replacement);
            if (changed['$=='](result)) {
              return nil
              } else {
              result = changed;
              
              Opal.brk(nil, $brk);
            };}, TMP_7.$$s = self, TMP_7.$$brk = $brk, TMP_7.$$arity = 2, TMP_7), $a).call($b)
          } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
          return result;
        };
      }, TMP_8.$$arity = 2);

      (function($base, $super) {
        function $Inflections(){};
        var self = $Inflections = $klass($base, $super, 'Inflections', $Inflections);

        var def = self.$$proto, $scope = self.$$scope, TMP_9, TMP_10, TMP_11, TMP_12, TMP_14, TMP_15;

        def.plurals = def.singulars = nil;
        Opal.defs(self, '$instance', TMP_9 = function $$instance() {
          var $a, self = this;
          if (self.__instance__ == null) self.__instance__ = nil;

          return ((($a = self.__instance__) !== false && $a !== nil && $a != null) ? $a : self.__instance__ = self.$new());
        }, TMP_9.$$arity = 0);

        self.$attr_reader("plurals", "singulars", "uncountables");

        Opal.defn(self, '$initialize', TMP_10 = function $$initialize() {
          var $a, self = this;

          return $a = [[], [], $scope.get('Set').$new()], self.plurals = $a[0], self.singulars = $a[1], self.uncountables = $a[2], $a;
        }, TMP_10.$$arity = 0);

        Opal.defn(self, '$plural', TMP_11 = function $$plural(rule, replacement) {
          var self = this;

          return self.plurals.$unshift([rule, replacement]);
        }, TMP_11.$$arity = 2);

        Opal.defn(self, '$singular', TMP_12 = function $$singular(rule, replacement) {
          var self = this;

          return self.singulars.$unshift([rule, replacement]);
        }, TMP_12.$$arity = 2);

        Opal.defn(self, '$uncountable', TMP_14 = function $$uncountable(words) {
          var $a, $b, TMP_13, self = this;

          return ($a = ($b = words).$each, $a.$$p = (TMP_13 = function(w){var self = TMP_13.$$s || this;
            if (self.uncountables == null) self.uncountables = nil;
if (w == null) w = nil;
          return self.uncountables['$<<'](w.$downcase())}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13), $a).call($b);
        }, TMP_14.$$arity = 1);

        return (Opal.defn(self, '$irregular', TMP_15 = function $$irregular() {
          var self = this;

          return nil;
        }, TMP_15.$$arity = 0), nil) && 'irregular';
      })($scope.base, null);
    })($scope.base)
  })($scope.base);
};
/* Generated by Opal 0.10.3 */
Opal.modules["active_support/inflections"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$inflections', '$plural', '$singular', '$irregular', '$uncountable']);
  return (function($base) {
    var $ActiveSupport, self = $ActiveSupport = $module($base, 'ActiveSupport');

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1;

    ($a = ($b = $scope.get('Inflector')).$inflections, $a.$$p = (TMP_1 = function(inflect){var self = TMP_1.$$s || this;
if (inflect == null) inflect = nil;
    inflect.$plural(/$/, "s");
      inflect.$plural(/s$/i, "s");
      inflect.$plural(/^(ax|test)is$/i, "\\1es");
      inflect.$plural(/(octop|vir)us$/i, "\\1i");
      inflect.$plural(/(octop|vir)i$/i, "\\1i");
      inflect.$plural(/(alias|status)$/i, "\\1es");
      inflect.$plural(/(bu)s$/i, "\\1ses");
      inflect.$plural(/(buffal|tomat)o$/i, "\\1oes");
      inflect.$plural(/([ti])um$/i, "\\1a");
      inflect.$plural(/([ti])a$/i, "\\1a");
      inflect.$plural(/sis$/i, "ses");
      inflect.$plural(/(?:([^f])fe|([lr])f)$/i, "\\1\\2ves");
      inflect.$plural(/(hive)$/i, "\\1s");
      inflect.$plural(/([^aeiouy]|qu)y$/i, "\\1ies");
      inflect.$plural(/(x|ch|ss|sh)$/i, "\\1es");
      inflect.$plural(/(matr|vert|ind)(?:ix|ex)$/i, "\\1ices");
      inflect.$plural(/^(m|l)ouse$/i, "\\1ice");
      inflect.$plural(/^(m|l)ice$/i, "\\1ice");
      inflect.$plural(/^(ox)$/i, "\\1en");
      inflect.$plural(/^(oxen)$/i, "\\1");
      inflect.$plural(/(quiz)$/i, "\\1zes");
      inflect.$singular(/s$/i, "");
      inflect.$singular(/(ss)$/i, "\\1");
      inflect.$singular(/(n)ews$/i, "\\1ews");
      inflect.$singular(/([ti])a$/i, "\\1um");
      inflect.$singular(/((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)(sis|ses)$/i, "\\1sis");
      inflect.$singular(/(^analy)(sis|ses)$/i, "\\1sis");
      inflect.$singular(/([^f])ves$/i, "\\1fe");
      inflect.$singular(/(hive)s$/i, "\\1");
      inflect.$singular(/(tive)s$/i, "\\1");
      inflect.$singular(/([lr])ves$/i, "\\1f");
      inflect.$singular(/([^aeiouy]|qu)ies$/i, "\\1y");
      inflect.$singular(/(s)eries$/i, "\\1eries");
      inflect.$singular(/(m)ovies$/i, "\\1ovie");
      inflect.$singular(/(x|ch|ss|sh)es$/i, "\\1");
      inflect.$singular(/^(m|l)ice$/i, "\\1ouse");
      inflect.$singular(/(bus)(es)?$/i, "\\1");
      inflect.$singular(/(o)es$/i, "\\1");
      inflect.$singular(/(shoe)s$/i, "\\1");
      inflect.$singular(/(cris|test)(is|es)$/i, "\\1is");
      inflect.$singular(/^(a)x[ie]s$/i, "\\1xis");
      inflect.$singular(/(octop|vir)(us|i)$/i, "\\1us");
      inflect.$singular(/(alias|status)(es)?$/i, "\\1");
      inflect.$singular(/^(ox)en/i, "\\1");
      inflect.$singular(/(vert|ind)ices$/i, "\\1ex");
      inflect.$singular(/(matr)ices$/i, "\\1ix");
      inflect.$singular(/(quiz)zes$/i, "\\1");
      inflect.$singular(/(database)s$/i, "\\1");
      inflect.$irregular("person", "people");
      inflect.$irregular("man", "men");
      inflect.$irregular("child", "children");
      inflect.$irregular("sex", "sexes");
      inflect.$irregular("move", "moves");
      inflect.$irregular("zombie", "zombies");
      return inflect.$uncountable(["equipment", "information", "rice", "money", "species", "series", "fish", "sheep", "jeans", "police"]);}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $a).call($b, "en")
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["active_support/inflector"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  self.$require("active_support/inflector/inflections");
  return self.$require("active_support/inflections");
};
/* Generated by Opal 0.10.3 */
Opal.modules["active_support/core_ext/module/introspection"] = function(Opal) {
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$=~', '$name', '$freeze', '$parent_name', '$constantize', '$split', '$empty?', '$<<', '$*', '$pop', '$include?', '$constants']);
  self.$require("active_support/inflector");
  return (function($base, $super) {
    function $Module(){};
    var self = $Module = $klass($base, $super, 'Module', $Module);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4;

    def.parent_name = nil;
    Opal.defn(self, '$parent_name', TMP_1 = function $$parent_name() {
      var $a, $b, self = this;

      if ((($a = (($b = self['parent_name'], $b != null && $b !== nil) ? 'instance-variable' : nil)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.parent_name
        } else {
        return self.parent_name = (function() {if ((($a = self.$name()['$=~'](/::[^:]+$/)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return (($a = $gvars['~']) === nil ? nil : $a.$pre_match()).$freeze()
          } else {
          return nil
        }; return nil; })()
      };
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$parent', TMP_2 = function $$parent() {
      var $a, self = this;

      if ((($a = self.$parent_name()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return (($scope.get('ActiveSupport')).$$scope.get('Inflector')).$constantize(self.$parent_name())
        } else {
        return $scope.get('Object')
      };
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$parents', TMP_3 = function $$parents() {
      var $a, $b, self = this, parents = nil, parts = nil;

      parents = [];
      if ((($a = self.$parent_name()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        parts = self.$parent_name().$split("::");
        while (!((($b = parts['$empty?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true)))) {
        parents['$<<']((($scope.get('ActiveSupport')).$$scope.get('Inflector')).$constantize($rb_times(parts, "::")));
        parts.$pop();};};
      if ((($a = parents['$include?']($scope.get('Object'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        parents['$<<']($scope.get('Object'))
      };
      return parents;
    }, TMP_3.$$arity = 0);

    return (Opal.defn(self, '$local_constants', TMP_4 = function $$local_constants() {
      var self = this;

      return self.$constants(false);
    }, TMP_4.$$arity = 0), nil) && 'local_constants';
  })($scope.base, null);
};
/* Generated by Opal 0.10.3 */
Opal.modules["active_support/core_ext/module/delegation"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$pop', '$is_a?', '$[]', '$raise', '$values_at', '$==', '$=~', '$to_s', '$each', '$+', '$lambda', '$start_with?', '$__send__', '$new', '$inspect', '$define_method', '$to_proc']);
  return (function($base, $super) {
    function $Module(){};
    var self = $Module = $klass($base, $super, 'Module', $Module);

    var def = self.$$proto, $scope = self.$$scope, TMP_6;

    (function($base, $super) {
      function $DelegationError(){};
      var self = $DelegationError = $klass($base, $super, 'DelegationError', $DelegationError);

      var def = self.$$proto, $scope = self.$$scope;

      return nil;
    })($scope.base, $scope.get('NoMethodError'));

    return (Opal.defn(self, '$delegate', TMP_6 = function $$delegate($a_rest) {
      var $b, $c, TMP_1, self = this, methods, options = nil, to = nil, prefix = nil, allow_nil = nil, method_prefix = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      methods = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        methods[$arg_idx - 0] = arguments[$arg_idx];
      }
      options = methods.$pop();
      if ((($b = ($c = options['$is_a?']($scope.get('Hash')), $c !== false && $c !== nil && $c != null ?to = options['$[]']("to") : $c)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "Delegation needs a target. Supply an options hash with a :to key as the last argument (e.g. delegate :hello, to: :greeter).")
      };
      $c = options.$values_at("prefix", "allow_nil"), $b = Opal.to_ary($c), prefix = ($b[0] == null ? nil : $b[0]), allow_nil = ($b[1] == null ? nil : $b[1]), $c;
      if ((($b = (($c = prefix['$=='](true)) ? to['$=~'](/^[^a-z_]/) : prefix['$=='](true))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        self.$raise($scope.get('ArgumentError'), "Can only automatically set the delegation prefix when delegating to a method.")};
      method_prefix = (function() {if (prefix !== false && prefix !== nil && prefix != null) {
        return "" + ((function() {if (prefix['$=='](true)) {
          return to
          } else {
          return prefix
        }; return nil; })()) + "_"
        } else {
        return ""
      }; return nil; })();
      to = to.$to_s();
      return ($b = ($c = methods).$each, $b.$$p = (TMP_1 = function(method){var self = TMP_1.$$s || this, $a, $d, TMP_2, $e, TMP_3, $f, TMP_4, $g, TMP_5, has_block = nil, method_name = nil, resolve_to = nil, exception = nil;
if (method == null) method = nil;
      has_block = (function() {if ((($a = (method['$=~'](/[^\]]=$/))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return false
          } else {
          return true
        }; return nil; })();
        method_name = $rb_plus(method_prefix, method);
        resolve_to = ($a = ($d = self).$lambda, $a.$$p = (TMP_2 = function(scope){var self = TMP_2.$$s || this, $e, ivar_name = nil;
if (scope == null) scope = nil;
        if ((($e = to['$start_with?']("@")) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
            ivar_name = to['$[]']($range(1, -1, false));
            return scope[ivar_name];
            } else {
            return scope.$__send__(to)
          }}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $a).call($d);
        exception = ($a = ($e = self).$lambda, $a.$$p = (TMP_3 = function(scope){var self = TMP_3.$$s || this;
if (scope == null) scope = nil;
        return $scope.get('DelegationError').$new("" + (scope) + (method_name) + " delegated to " + (to) + "." + (method) + " but " + (to) + " is nil: " + (scope.$inspect()), method_name)}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($e);
        if (has_block !== false && has_block !== nil && has_block != null) {
          return ($a = ($f = self).$define_method, $a.$$p = (TMP_4 = function($g_rest){var self = TMP_4.$$s || this, block, args, $h, $i, to_resolved = nil;

            block = TMP_4.$$p || nil, TMP_4.$$p = null;
            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
          to_resolved = resolve_to['$[]'](self);
            if (to_resolved !== false && to_resolved !== nil && to_resolved != null) {
              } else {
              if (allow_nil !== false && allow_nil !== nil && allow_nil != null) {
                return nil;};
              self.$raise(exception['$[]'](self));
            };
            return ($h = ($i = to_resolved).$__send__, $h.$$p = block.$to_proc(), $h).apply($i, [method].concat(Opal.to_a(args)));}, TMP_4.$$s = self, TMP_4.$$arity = -1, TMP_4), $a).call($f, method_name)
          } else {
          return ($a = ($g = self).$define_method, $a.$$p = (TMP_5 = function(arg){var self = TMP_5.$$s || this, to_resolved = nil;
if (arg == null) arg = nil;
          to_resolved = resolve_to['$[]'](self);
            if (to_resolved !== false && to_resolved !== nil && to_resolved != null) {
              } else {
              if (allow_nil !== false && allow_nil !== nil && allow_nil != null) {
                return nil;};
              self.$raise(exception['$[]'](self));
            };
            return to_resolved.$__send__(method, arg);}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5), $a).call($g, method_name)
        };}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $b).call($c);
    }, TMP_6.$$arity = -1), nil) && 'delegate';
  })($scope.base, null)
};
/* Generated by Opal 0.10.3 */
Opal.modules["active_support/core_ext/module"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  self.$require("active_support/core_ext/module/introspection");
  self.$require("active_support/core_ext/module/remove_method");
  return self.$require("active_support/core_ext/module/delegation");
};
/* Generated by Opal 0.10.3 */
Opal.modules["active_support/core_ext/numeric/calculations"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  return (function(self) {
    var $scope = self.$$scope, def = self.$$proto;

    return Opal.alias(self, 'current', 'now')
  })(Opal.get_singleton_class($scope.get('Time')))
};
/* Generated by Opal 0.10.3 */
Opal.modules["active_support/core_ext/numeric"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  self.$require("active_support/core_ext/numeric/time");
  return self.$require("active_support/core_ext/numeric/calculations");
};
/* Generated by Opal 0.10.3 */
Opal.modules["active_support/core_ext/object/blank"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$respond_to?', '$empty?', '$!', '$blank?', '$present?', '$==', '$alias_method', '$!~']);
  (function($base, $super) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3;

    Opal.defn(self, '$blank?', TMP_1 = function() {
      var $a, self = this;

      if ((($a = self['$respond_to?']("empty?")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self['$empty?']()
        } else {
        return self['$!']()
      };
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$present?', TMP_2 = function() {
      var self = this;

      return self['$blank?']()['$!']();
    }, TMP_2.$$arity = 0);

    return (Opal.defn(self, '$presence', TMP_3 = function $$presence() {
      var $a, self = this;

      if ((($a = self['$present?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self
        } else {
        return nil
      };
    }, TMP_3.$$arity = 0), nil) && 'presence';
  })($scope.base, null);
  (function($base, $super) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.$$proto, $scope = self.$$scope, TMP_4;

    return (Opal.defn(self, '$blank?', TMP_4 = function() {
      var self = this;

      return true;
    }, TMP_4.$$arity = 0), nil) && 'blank?'
  })($scope.base, null);
  (function($base, $super) {
    function $Boolean(){};
    var self = $Boolean = $klass($base, $super, 'Boolean', $Boolean);

    var def = self.$$proto, $scope = self.$$scope, TMP_5;

    return (Opal.defn(self, '$blank?', TMP_5 = function() {
      var self = this;

      return self['$=='](false);
    }, TMP_5.$$arity = 0), nil) && 'blank?'
  })($scope.base, null);
  (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $scope = self.$$scope;

    return self.$alias_method("blank?", "empty?")
  })($scope.base, null);
  (function($base, $super) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $scope = self.$$scope;

    return self.$alias_method("blank?", "empty?")
  })($scope.base, null);
  (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope, TMP_6;

    return (Opal.defn(self, '$blank?', TMP_6 = function() {
      var self = this;

      return self['$!~'](/[^\s　]/);
    }, TMP_6.$$arity = 0), nil) && 'blank?'
  })($scope.base, null);
  return (function($base, $super) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.$$proto, $scope = self.$$scope, TMP_7;

    return (Opal.defn(self, '$blank?', TMP_7 = function() {
      var self = this;

      return false;
    }, TMP_7.$$arity = 0), nil) && 'blank?'
  })($scope.base, null);
};
/* Generated by Opal 0.10.3 */
Opal.modules["active_support/core_ext/object/try"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$empty?', '$respond_to?', '$first', '$try!', '$to_proc', '$zero?', '$arity', '$instance_eval', '$public_send']);
  (function($base, $super) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

    Opal.defn(self, '$try', TMP_1 = function($a_rest) {
      var $b, $c, self = this, a, $iter = TMP_1.$$p, b = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      a = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        a[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_1.$$p = null;
      if ((($b = ((($c = a['$empty?']()) !== false && $c !== nil && $c != null) ? $c : self['$respond_to?'](a.$first()))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        return ($b = ($c = self)['$try!'], $b.$$p = b.$to_proc(), $b).apply($c, Opal.to_a(a))
        } else {
        return nil
      };
    }, TMP_1.$$arity = -1);

    return (Opal.defn(self, '$try!', TMP_2 = function($a_rest) {
      var $b, $c, $d, self = this, a, $iter = TMP_2.$$p, b = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      a = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        a[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_2.$$p = null;
      if ((($b = ($c = a['$empty?'](), $c !== false && $c !== nil && $c != null ?(b !== nil) : $c)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        if ((($b = b.$arity()['$zero?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          return ($b = ($c = self).$instance_eval, $b.$$p = b.$to_proc(), $b).call($c)
          } else {
          return Opal.yield1(b, self);
        }
        } else {
        return ($b = ($d = self).$public_send, $b.$$p = b.$to_proc(), $b).apply($d, Opal.to_a(a))
      };
    }, TMP_2.$$arity = -1), nil) && 'try!';
  })($scope.base, null);
  return (function($base, $super) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.$$proto, $scope = self.$$scope, TMP_3, TMP_4;

    Opal.defn(self, '$try', TMP_3 = function($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      return nil;
    }, TMP_3.$$arity = -1);

    return (Opal.defn(self, '$try!', TMP_4 = function($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      return nil;
    }, TMP_4.$$arity = -1), nil) && 'try!';
  })($scope.base, null);
};
/* Generated by Opal 0.10.3 */
Opal.modules["active_support/core_ext/object"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  self.$require("active_support/core_ext/object/blank");
  return self.$require("active_support/core_ext/object/try");
};
/* Generated by Opal 0.10.3 */
Opal.modules["active_support/core_ext/string/inflections"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$pluralize', '$singularize', '$constantize']);
  self.$require("active_support/inflector");
  return (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3;

    Opal.defn(self, '$pluralize', TMP_1 = function $$pluralize() {
      var self = this;

      return (($scope.get('ActiveSupport')).$$scope.get('Inflector')).$pluralize(self);
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$singularize', TMP_2 = function $$singularize() {
      var self = this;

      return (($scope.get('ActiveSupport')).$$scope.get('Inflector')).$singularize(self);
    }, TMP_2.$$arity = 0);

    return (Opal.defn(self, '$constantize', TMP_3 = function $$constantize() {
      var self = this;

      return (($scope.get('ActiveSupport')).$$scope.get('Inflector')).$constantize(self);
    }, TMP_3.$$arity = 0), nil) && 'constantize';
  })($scope.base, null);
};
/* Generated by Opal 0.10.3 */
Opal.modules["active_support/core_ext/string"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$gsub', '$strip', '$downcase', '$underscore', '$alias_method']);
  self.$require("active_support/core_ext/string/inflections");
  return (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5;

    Opal.defn(self, '$parameterize', TMP_1 = function $$parameterize() {
      var self = this;

      return self.$downcase().$strip().$gsub(/\W+/, "-");
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$dasherize', TMP_2 = function $$dasherize() {
      var self = this;

      return self.replace(/[-_\s]+/g, '-')
            .replace(/([A-Z\d]+)([A-Z][a-z])/g, '$1-$2')
            .replace(/([a-z\d])([A-Z])/g, '$1-$2')
            .toLowerCase();
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$demodulize', TMP_3 = function $$demodulize() {
      var self = this;

      
      var idx = self.lastIndexOf('::');

      if (idx > -1) {
        return self.substr(idx + 2);
      }

      return self;
    ;
    }, TMP_3.$$arity = 0);

    Opal.defn(self, '$underscore', TMP_4 = function $$underscore() {
      var self = this;

      return self.replace(/[-\s]+/g, '_')
    .replace(/([A-Z\d]+)([A-Z][a-z])/g, '$1_$2')
    .replace(/([a-z\d])([A-Z])/g, '$1_$2')
    .replace(/-/g, '_')
    .toLowerCase();
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$camelize', TMP_5 = function $$camelize(first_letter) {
      var self = this;

      if (first_letter == null) {
        first_letter = "upper";
      }
      return self.$underscore().replace(/(^|_)([^_]+)/g, function(match, pre, word, index) {
      var capitalize = first_letter === "upper" || index > 0;
      return capitalize ? word.substr(0,1).toUpperCase()+word.substr(1) : word;
    });
    }, TMP_5.$$arity = -1);

    return self.$alias_method("camelcase", "camelize");
  })($scope.base, null);
};
/* Generated by Opal 0.10.3 */
Opal.modules["active_support/core_ext"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  self.$require("active_support/core_ext/array");
  self.$require("active_support/core_ext/class");
  self.$require("active_support/core_ext/enumerable");
  self.$require("active_support/core_ext/hash");
  self.$require("active_support/core_ext/integer");
  self.$require("active_support/core_ext/kernel");
  self.$require("active_support/core_ext/module");
  self.$require("active_support/core_ext/numeric");
  self.$require("active_support/core_ext/object");
  return self.$require("active_support/core_ext/string");
};
/* Generated by Opal 0.10.3 */
Opal.modules["active_support"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  return self.$require("active_support/core_ext")
};
/* Generated by Opal 0.10.3 */
Opal.modules["react/component/tags"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$+', '$render', '$to_proc', '$build_only', '$each', '$define_method', '$==', '$count', '$is_a?', '$first', '$p', '$!=', '$alias_method', '$upcase', '$const_set', '$downcase', '$=~', '$include?', '$create_element', '$find_component', '$gsub', '$method_missing', '$find_name_and_parent', '$private', '$name', '$split', '$>', '$length', '$last', '$[]', '$inject', '$const_get', '$lookup_const', '$!', '$method_defined?', '$raise', '$reverse', '$to_s', '$class', '$detect', '$const_defined?']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $Tags, self = $Tags = $module($base, 'Tags');

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, $a, $b, TMP_3, TMP_6, TMP_7, TMP_13, TMP_16;

        Opal.cdecl($scope, 'HTML_TAGS', $rb_plus(["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "big", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "data", "datalist", "dd", "del", "details", "dfn", "dialog", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hr", "html", "i", "iframe", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "link", "main", "map", "mark", "menu", "menuitem", "meta", "meter", "nav", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "script", "section", "select", "small", "source", "span", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "time", "title", "tr", "track", "u", "ul", "var", "video", "wbr"], ["circle", "clipPath", "defs", "ellipse", "g", "line", "linearGradient", "mask", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "stop", "svg", "text", "tspan"]));

        Opal.defn(self, '$present', TMP_1 = function $$present(component, $a_rest) {
          var $b, $c, self = this, params, $iter = TMP_1.$$p, children = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          params = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            params[$arg_idx - 1] = arguments[$arg_idx];
          }
          TMP_1.$$p = null;
          return ($b = ($c = (($scope.get('React')).$$scope.get('RenderingContext'))).$render, $b.$$p = children.$to_proc(), $b).apply($c, [component].concat(Opal.to_a(params)));
        }, TMP_1.$$arity = -2);

        Opal.defn(self, '$present_as_node', TMP_2 = function $$present_as_node(component, $a_rest) {
          var $b, $c, self = this, params, $iter = TMP_2.$$p, children = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          params = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            params[$arg_idx - 1] = arguments[$arg_idx];
          }
          TMP_2.$$p = null;
          return ($b = ($c = (($scope.get('React')).$$scope.get('RenderingContext'))).$build_only, $b.$$p = children.$to_proc(), $b).apply($c, [component].concat(Opal.to_a(params)));
        }, TMP_2.$$arity = -2);

        ($a = ($b = $scope.get('HTML_TAGS')).$each, $a.$$p = (TMP_3 = function(tag){var self = TMP_3.$$s || this, $c, $d, TMP_4, $e, TMP_5;
if (tag == null) tag = nil;
        ($c = ($d = self).$define_method, $c.$$p = (TMP_4 = function($e_rest){var self = TMP_4.$$s || this, children, params, $f, $g, $h, $i;

            children = TMP_4.$$p || nil, TMP_4.$$p = null;
            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            params = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              params[$arg_idx - 0] = arguments[$arg_idx];
            }
          if (tag['$==']("p")) {
              if ((($f = ((($g = ((($h = children) !== false && $h !== nil && $h != null) ? $h : params.$count()['$=='](0))) !== false && $g !== nil && $g != null) ? $g : ((($h = params.$count()['$=='](1)) ? params.$first()['$is_a?']($scope.get('Hash')) : params.$count()['$=='](1))))) !== nil && $f != null && (!$f.$$is_boolean || $f == true))) {
                return ($f = ($g = (($scope.get('React')).$$scope.get('RenderingContext'))).$render, $f.$$p = children.$to_proc(), $f).apply($g, [tag].concat(Opal.to_a(params)))
                } else {
                return ($f = $scope.get('Kernel')).$p.apply($f, Opal.to_a(params))
              }
              } else {
              return ($h = ($i = (($scope.get('React')).$$scope.get('RenderingContext'))).$render, $h.$$p = children.$to_proc(), $h).apply($i, [tag].concat(Opal.to_a(params)))
            }}, TMP_4.$$s = self, TMP_4.$$arity = -1, TMP_4), $c).call($d, tag);
          if ((($c = tag['$!=']("div")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            self.$alias_method(tag.$upcase(), tag);
            self.$const_set(tag.$upcase(), tag);
            } else {
            self.$alias_method(tag.$upcase(), tag)
          };
          return ($c = ($e = self).$define_method, $c.$$p = (TMP_5 = function($f_rest){var self = TMP_5.$$s || this, children, params, $g, $h;

            children = TMP_5.$$p || nil, TMP_5.$$p = null;
            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            params = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              params[$arg_idx - 0] = arguments[$arg_idx];
            }
          return ($g = ($h = (($scope.get('React')).$$scope.get('RenderingContext'))).$build_only, $g.$$p = children.$to_proc(), $g).apply($h, [tag].concat(Opal.to_a(params)))}, TMP_5.$$s = self, TMP_5.$$arity = -1, TMP_5), $c).call($e, "" + (tag) + "_as_node");}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($b);

        Opal.defs(self, '$html_tag_class_for', TMP_6 = function $$html_tag_class_for(tag) {
          var $a, $b, self = this, downcased_tag = nil;

          downcased_tag = tag.$downcase();
          if ((($a = ($b = tag['$=~'](/[A-Z]+/), $b !== false && $b !== nil && $b != null ?$scope.get('HTML_TAGS')['$include?'](downcased_tag) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('Object').$const_set(tag, $scope.get('React').$create_element(downcased_tag))
            } else {
            return nil
          };
        }, TMP_6.$$arity = 1);

        Opal.defn(self, '$method_missing', TMP_7 = function $$method_missing(name, $a_rest) {
          var $b, $c, $d, $e, self = this, params, $iter = TMP_7.$$p, children = $iter || nil, component = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          params = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            params[$arg_idx - 1] = arguments[$arg_idx];
          }
          TMP_7.$$p = null;
          if ((($b = name['$=~'](/_as_node$/)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            component = self.$find_component(name.$gsub(/_as_node$/, ""));
            if (component !== false && component !== nil && component != null) {
              return ($b = ($c = (($scope.get('React')).$$scope.get('RenderingContext'))).$build_only, $b.$$p = children.$to_proc(), $b).apply($c, [component].concat(Opal.to_a(params)))};
            } else {
            component = self.$find_component(name);
            if (component !== false && component !== nil && component != null) {
              return ($b = ($d = (($scope.get('React')).$$scope.get('RenderingContext'))).$render, $b.$$p = children.$to_proc(), $b).apply($d, [component].concat(Opal.to_a(params)))};
          };
          return ($b = ($e = $scope.get('Object')).$method_missing, $b.$$p = children.$to_proc(), $b).apply($e, [name].concat(Opal.to_a(params)));
        }, TMP_7.$$arity = -2);

        (function(self) {
          var $scope = self.$$scope, def = self.$$proto, TMP_10, TMP_12;

          Opal.defn(self, '$included', TMP_10 = function $$included(component) {
            var $a, $b, self = this, _name = nil, parent = nil;

            $b = self.$find_name_and_parent(component), $a = Opal.to_ary($b), _name = ($a[0] == null ? nil : $a[0]), parent = ($a[1] == null ? nil : $a[1]), $b;
            return (function(self) {
              var $scope = self.$$scope, def = self.$$proto, $a, $b, TMP_8, $c, TMP_9;

              ($a = ($b = self).$define_method, $a.$$p = (TMP_8 = function($c_rest){var self = TMP_8.$$s || this, children, params, $d, $e;

                children = TMP_8.$$p || nil, TMP_8.$$p = null;
                var $args_len = arguments.length, $rest_len = $args_len - 0;
                if ($rest_len < 0) { $rest_len = 0; }
                params = new Array($rest_len);
                for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                  params[$arg_idx - 0] = arguments[$arg_idx];
                }
              return ($d = ($e = (($scope.get('React')).$$scope.get('RenderingContext'))).$render, $d.$$p = children.$to_proc(), $d).apply($e, [component].concat(Opal.to_a(params)))}, TMP_8.$$s = self, TMP_8.$$arity = -1, TMP_8), $a).call($b, _name);
              return ($a = ($c = self).$define_method, $a.$$p = (TMP_9 = function($d_rest){var self = TMP_9.$$s || this, children, params, $e, $f;

                children = TMP_9.$$p || nil, TMP_9.$$p = null;
                var $args_len = arguments.length, $rest_len = $args_len - 0;
                if ($rest_len < 0) { $rest_len = 0; }
                params = new Array($rest_len);
                for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                  params[$arg_idx - 0] = arguments[$arg_idx];
                }
              return ($e = ($f = (($scope.get('React')).$$scope.get('RenderingContext'))).$build_only, $e.$$p = children.$to_proc(), $e).apply($f, [component].concat(Opal.to_a(params)))}, TMP_9.$$s = self, TMP_9.$$arity = -1, TMP_9), $a).call($c, "" + (_name) + "_as_node");
            })(Opal.get_singleton_class(parent));
          }, TMP_10.$$arity = 1);
          self.$private();
          return (Opal.defn(self, '$find_name_and_parent', TMP_12 = function $$find_name_and_parent(component) {
            var $a, $b, TMP_11, self = this, split_name = nil;

            split_name = ($a = component.$name(), $a !== false && $a !== nil && $a != null ?component.$name().$split("::") : $a);
            if ((($a = (($b = split_name !== false && split_name !== nil && split_name != null) ? $rb_gt(split_name.$length(), 1) : split_name)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return [split_name.$last(), ($a = ($b = split_name).$inject, $a.$$p = (TMP_11 = function(a, e){var self = TMP_11.$$s || this;
if (a == null) a = nil;if (e == null) e = nil;
              return $rb_plus(a, [a.$last().$const_get(e)])}, TMP_11.$$s = self, TMP_11.$$arity = 2, TMP_11), $a).call($b, [$scope.get('Module')])['$[]'](-2)]
              } else {
              return nil
            };
          }, TMP_12.$$arity = 1), nil) && 'find_name_and_parent';
        })(Opal.get_singleton_class(self));

        self.$private();

        Opal.defn(self, '$find_component', TMP_13 = function $$find_component(name) {
          var $a, $b, self = this, component = nil;

          component = self.$lookup_const(name);
          if ((($a = (($b = component !== false && component !== nil && component != null) ? component['$method_defined?']("render")['$!']() : component)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.$raise("" + (name) + " does not appear to be a react component.")};
          return component;
        }, TMP_13.$$arity = 1);

        Opal.defn(self, '$lookup_const', TMP_16 = function $$lookup_const(name) {
          var $a, $b, TMP_14, $c, TMP_15, self = this, scopes = nil, scope = nil;

          if ((($a = name['$=~'](/^[A-Z]/)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            return nil
          };
          scopes = ($a = ($b = self.$class().$name().$to_s().$split("::")).$inject, $a.$$p = (TMP_14 = function(nesting, next_const){var self = TMP_14.$$s || this;
if (nesting == null) nesting = nil;if (next_const == null) next_const = nil;
          return $rb_plus(nesting, [nesting.$last().$const_get(next_const)])}, TMP_14.$$s = self, TMP_14.$$arity = 2, TMP_14), $a).call($b, [$scope.get('Module')]).$reverse();
          scope = ($a = ($c = scopes).$detect, $a.$$p = (TMP_15 = function(s){var self = TMP_15.$$s || this;
if (s == null) s = nil;
          return s['$const_defined?'](name)}, TMP_15.$$s = self, TMP_15.$$arity = 1, TMP_15), $a).call($c);
          if (scope !== false && scope !== nil && scope != null) {
            return scope.$const_get(name)
            } else {
            return nil
          };
        }, TMP_16.$$arity = 1);
      })($scope.base)
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["react/component/base"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$include']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Base(){};
        var self = $Base = $klass($base, $super, 'Base', $Base);

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        return (Opal.defs(self, '$inherited', TMP_1 = function $$inherited(child) {
          var self = this;

          return child.$include($scope.get('Component'));
        }, TMP_1.$$arity = 1), nil) && 'inherited'
      })($scope.base, null)
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["react/top_level"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var $a, $b, TMP_13, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$+', '$create_element', '$to_proc', '$!', '$Native', '$to_n', '$raise', '$include', '$class', '$kind_of?', '$build', '$const_defined?', '$instance_eval', '$dom_node', '$find', '$define_method', '$new', '$class_eval', '$render']);
  self.$require("native");
  self.$require("active_support");
  self.$require("react/component/tags");
  self.$require("react/component/base");
  (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_8, TMP_11, TMP_12;

    Opal.cdecl($scope, 'ATTRIBUTES', $rb_plus(["accept", "acceptCharset", "accessKey", "action", "allowFullScreen", "allowTransparency", "alt", "async", "autoComplete", "autoPlay", "cellPadding", "cellSpacing", "charSet", "checked", "classID", "className", "cols", "colSpan", "content", "contentEditable", "contextMenu", "controls", "coords", "crossOrigin", "data", "dateTime", "defer", "dir", "disabled", "download", "draggable", "encType", "form", "formAction", "formEncType", "formMethod", "formNoValidate", "formTarget", "frameBorder", "height", "hidden", "href", "hrefLang", "htmlFor", "httpEquiv", "icon", "id", "label", "lang", "list", "loop", "manifest", "marginHeight", "marginWidth", "max", "maxLength", "media", "mediaGroup", "method", "min", "multiple", "muted", "name", "noValidate", "open", "pattern", "placeholder", "poster", "preload", "radioGroup", "readOnly", "rel", "required", "role", "rows", "rowSpan", "sandbox", "scope", "scrolling", "seamless", "selected", "shape", "size", "sizes", "span", "spellCheck", "src", "srcDoc", "srcSet", "start", "step", "style", "tabIndex", "target", "title", "type", "useMap", "value", "width", "wmode", "dangerouslySetInnerHTML"], ["clipPath", "cx", "cy", "d", "dx", "dy", "fill", "fillOpacity", "fontFamily", "fontSize", "fx", "fy", "gradientTransform", "gradientUnits", "markerEnd", "markerMid", "markerStart", "offset", "opacity", "patternContentUnits", "patternUnits", "points", "preserveAspectRatio", "r", "rx", "ry", "spreadMethod", "stopColor", "stopOpacity", "stroke", "strokeDasharray", "strokeLinecap", "strokeOpacity", "strokeWidth", "textAnchor", "transform", "version", "viewBox", "x1", "x2", "x", "xlinkActuate", "xlinkArcrole", "xlinkHref", "xlinkRole", "xlinkShow", "xlinkTitle", "xlinkType", "xmlBase", "xmlLang", "xmlSpace", "y1", "y2", "y"]));

    Opal.cdecl($scope, 'HASH_ATTRIBUTES', ["data", "aria"]);

    Opal.cdecl($scope, 'HTML_TAGS', (((((($scope.get('React')).$$scope.get('Component'))).$$scope.get('Tags'))).$$scope.get('HTML_TAGS')));

    Opal.defs(self, '$html_tag?', TMP_1 = function(name) {
      var self = this, tags = nil;

      tags = $scope.get('HTML_TAGS');
      
      for(var i = 0; i < tags.length; i++) {
        if(tags[i] === name)
          return true;
      }
      return false;
    
    }, TMP_1.$$arity = 1);

    Opal.defs(self, '$html_attr?', TMP_2 = function(name) {
      var self = this, attrs = nil;

      attrs = $scope.get('ATTRIBUTES');
      
      for(var i = 0; i < attrs.length; i++) {
        if(attrs[i] === name)
          return true;
      }
      return false;
    
    }, TMP_2.$$arity = 1);

    Opal.defs(self, '$create_element', TMP_3 = function $$create_element(type, properties) {
      var $a, $b, self = this, $iter = TMP_3.$$p, block = $iter || nil;

      if (properties == null) {
        properties = $hash2([], {});
      }
      TMP_3.$$p = null;
      return ($a = ($b = (($scope.get('React')).$$scope.get('API'))).$create_element, $a.$$p = block.$to_proc(), $a).call($b, type, properties);
    }, TMP_3.$$arity = -2);

    Opal.defs(self, '$render', TMP_4 = function $$render(element, container) {
      var $a, self = this, $iter = TMP_4.$$p, $yield = $iter || nil, component = nil;

      TMP_4.$$p = null;
      container = container.$$class ? container[0] : container;
      if ((($a = ((typeof ReactDOM === 'undefined'))['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        component = self.$Native(ReactDOM.render(element.$to_n(), container, function(){(function() {if (($yield !== nil)) {
          return Opal.yieldX($yield, []);
          } else {
          return nil
        }; return nil; })()}))
      } else if ((($a = ((typeof React.renderToString === 'undefined'))['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        component = self.$Native(React.render(element.$to_n(), container, function(){(function() {if (($yield !== nil)) {
          return Opal.yieldX($yield, []);
          } else {
          return nil
        }; return nil; })()}))
        } else {
        self.$raise("render is not defined.  In React >= v15 you must import it with ReactDOM")
      };
      component.$class().$include((((($scope.get('React')).$$scope.get('Component'))).$$scope.get('API')));
      return component;
    }, TMP_4.$$arity = 2);

    Opal.defs(self, '$is_valid_element', TMP_5 = function $$is_valid_element(element) {
      var $a, self = this;

      return ($a = element['$kind_of?']((($scope.get('React')).$$scope.get('Element'))), $a !== false && $a !== nil && $a != null ?React.isValidElement(element.$to_n()) : $a);
    }, TMP_5.$$arity = 1);

    Opal.defs(self, '$render_to_string', TMP_8 = function $$render_to_string(element) {
      var $a, $b, TMP_6, $c, TMP_7, self = this;

      if ((($a = ((typeof ReactDOMServer === 'undefined'))['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = (($scope.get('React')).$$scope.get('RenderingContext'))).$build, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

        return ReactDOMServer.renderToString(element.$to_n());}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($b)
      } else if ((($a = ((typeof React.renderToString === 'undefined'))['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($c = (($scope.get('React')).$$scope.get('RenderingContext'))).$build, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this;

        return React.renderToString(element.$to_n());}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $a).call($c)
        } else {
        return self.$raise("renderToString is not defined.  In React >= v15 you must import it with ReactDOMServer")
      };
    }, TMP_8.$$arity = 1);

    Opal.defs(self, '$render_to_static_markup', TMP_11 = function $$render_to_static_markup(element) {
      var $a, $b, TMP_9, $c, TMP_10, self = this;

      if ((($a = ((typeof ReactDOMServer === 'undefined'))['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = (($scope.get('React')).$$scope.get('RenderingContext'))).$build, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this;

        return ReactDOMServer.renderToStaticMarkup(element.$to_n());}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $a).call($b)
      } else if ((($a = ((typeof React.renderToString === 'undefined'))['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($c = (($scope.get('React')).$$scope.get('RenderingContext'))).$build, $a.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this;

        return React.renderToStaticMarkup(element.$to_n());}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10), $a).call($c)
        } else {
        return self.$raise("renderToStaticMarkup is not defined.  In React >= v15 you must import it with ReactDOMServer")
      };
    }, TMP_11.$$arity = 1);

    Opal.defs(self, '$unmount_component_at_node', TMP_12 = function $$unmount_component_at_node(node) {
      var $a, self = this;

      if ((($a = ((typeof ReactDOM === 'undefined'))['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ReactDOM.unmountComponentAtNode(node.$$class ? node[0] : node);
      } else if ((($a = ((typeof React.renderToString === 'undefined'))['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return React.unmountComponentAtNode(node.$$class ? node[0] : node);
        } else {
        return self.$raise("unmountComponentAtNode is not defined.  In React >= v15 you must import it with ReactDOM")
      };
    }, TMP_12.$$arity = 1);
  })($scope.base);
  if ((($a = $scope.get('Object')['$const_defined?']("Element")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
    return ($a = ($b = $scope.get('Element')).$instance_eval, $a.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this, TMP_14, TMP_15, $c, $d, TMP_16;

    Opal.defs(self, '$find', TMP_14 = function $$find(selector) {
        var $a, self = this;

        if ((($a = selector.$dom_node !== undefined) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          selector = (function() { try {
            return selector.$dom_node()
          } catch ($err) {
            if (Opal.rescue($err, [$scope.get('StandardError')])) {
              try {
                return selector
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          }})()};
        return $(selector);
      }, TMP_14.$$arity = 1);
      Opal.defs(self, '$[]', TMP_15 = function(selector) {
        var self = this;

        return self.$find(selector);
      }, TMP_15.$$arity = 1);
      return ($c = ($d = self).$define_method, $c.$$p = (TMP_16 = function(container, params){var self = TMP_16.$$s || this, block, $e, $f, TMP_17, klass = nil;

        block = TMP_16.$$p || nil, TMP_16.$$p = null;
        if (container == null) {
          container = nil;
        }
        if (params == null) {
          params = $hash2([], {});
        }
      if ((($e = self.$to_n()._reactrb_component_class === undefined) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
          self.$to_n()._reactrb_component_class = $scope.get('Class').$new((((($scope.get('React')).$$scope.get('Component'))).$$scope.get('Base')));};
        klass = self.$to_n()._reactrb_component_class;
        ($e = ($f = klass).$class_eval, $e.$$p = (TMP_17 = function(){var self = TMP_17.$$s || this, $g, $h;

        return ($g = ($h = self).$render, $g.$$p = block.$to_proc(), $g).call($h, container, params)}, TMP_17.$$s = self, TMP_17.$$arity = 0, TMP_17), $e).call($f);
        return $scope.get('React').$render($scope.get('React').$create_element(self.$to_n()._reactrb_component_class), self);}, TMP_16.$$s = self, TMP_16.$$arity = -1, TMP_16), $c).call($d, "render");}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13), $a).call($b)
    } else {
    return nil
  };
};
/* Generated by Opal 0.10.3 */
Opal.modules["react/observable"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$tap', '$call', '$send', '$to_proc', '$include?', '$respond_to?', '$lambda']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Observable(){};
      var self = $Observable = $klass($base, $super, 'Observable', $Observable);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_4, TMP_5, TMP_7;

      def.value = def.on_change = nil;
      Opal.defn(self, '$initialize', TMP_1 = function $$initialize(value, on_change) {
        var $a, self = this, $iter = TMP_1.$$p, block = $iter || nil;

        if (on_change == null) {
          on_change = nil;
        }
        TMP_1.$$p = null;
        self.value = value;
        return self.on_change = ((($a = on_change) !== false && $a !== nil && $a != null) ? $a : block);
      }, TMP_1.$$arity = -2);

      Opal.defn(self, '$method_missing', TMP_2 = function $$method_missing(method_sym, $a_rest) {
        var $b, $c, TMP_3, $d, $e, self = this, args, $iter = TMP_2.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        TMP_2.$$p = null;
        return ($b = ($c = ($d = ($e = self.value).$send, $d.$$p = block.$to_proc(), $d).apply($e, [method_sym].concat(Opal.to_a(args)))).$tap, $b.$$p = (TMP_3 = function(result){var self = TMP_3.$$s || this;
          if (self.on_change == null) self.on_change = nil;
          if (self.value == null) self.value = nil;
if (result == null) result = nil;
        return self.on_change.$call(self.value)}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $b).call($c);
      }, TMP_2.$$arity = -2);

      Opal.defn(self, '$respond_to?', TMP_4 = function(method, $a_rest) {
        var $b, self = this, args;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        if ((($b = ["call", "to_proc"]['$include?'](method)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          return true
          } else {
          return ($b = self.value)['$respond_to?'].apply($b, [method].concat(Opal.to_a(args)))
        };
      }, TMP_4.$$arity = -2);

      Opal.defn(self, '$call', TMP_5 = function $$call(new_value) {
        var self = this;

        self.on_change.$call(new_value);
        return self.value = new_value;
      }, TMP_5.$$arity = 1);

      return (Opal.defn(self, '$to_proc', TMP_7 = function $$to_proc() {
        var $a, $b, TMP_6, self = this;

        return ($a = ($b = self).$lambda, $a.$$p = (TMP_6 = function(arg){var self = TMP_6.$$s || this;
          if (self.value == null) self.value = nil;
          if (self.on_change == null) self.on_change = nil;

          if (arg == null) {
            arg = self.value;
          }
        return self.on_change.$call(arg)}, TMP_6.$$s = self, TMP_6.$$arity = -1, TMP_6), $a).call($b);
      }, TMP_7.$$arity = 0), nil) && 'to_proc';
    })($scope.base, null)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["react/validator"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$attr_accessor', '$attr_reader', '$private', '$new', '$build', '$to_proc', '$instance_eval', '$[]=', '$define_rule', '$allow_undefined_props=', '$reject', '$[]', '$rules', '$errors=', '$allow_undefined_props?', '$validate_undefined', '$coerce_native_hash_values', '$defined_props', '$validate_required', '$each', '$validate_types', '$validate_allowed', '$errors', '$inject', '$select', '$include?', '$keys', '$!', '$define_param', '$props_wrapper', '$is_a?', '$type_check', '$>', '$length', '$validate_value_array', '$nil?', '$respond_to?', '$_react_param_conversion', '$<<', '$-', '$each_with_index', '$Native']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Validator(){};
      var self = $Validator = $klass($base, $super, 'Validator', $Validator);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_8, TMP_10, TMP_13, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_24, TMP_26, TMP_28, TMP_30;

      def.allow_undefined_props = def.rules = def.errors = nil;
      self.$attr_accessor("errors");

      self.$attr_reader("props_wrapper");

      self.$private("errors", "props_wrapper");

      Opal.defn(self, '$initialize', TMP_1 = function $$initialize(props_wrapper) {
        var self = this;

        if (props_wrapper == null) {
          props_wrapper = $scope.get('Class').$new((($scope.get('Component')).$$scope.get('PropsWrapper')));
        }
        return self.props_wrapper = props_wrapper;
      }, TMP_1.$$arity = -1);

      Opal.defs(self, '$build', TMP_2 = function $$build() {
        var $a, $b, self = this, $iter = TMP_2.$$p, block = $iter || nil;

        TMP_2.$$p = null;
        return ($a = ($b = self.$new()).$build, $a.$$p = block.$to_proc(), $a).call($b);
      }, TMP_2.$$arity = 0);

      Opal.defn(self, '$build', TMP_3 = function $$build() {
        var $a, $b, self = this, $iter = TMP_3.$$p, block = $iter || nil;

        TMP_3.$$p = null;
        ($a = ($b = self).$instance_eval, $a.$$p = block.$to_proc(), $a).call($b);
        return self;
      }, TMP_3.$$arity = 0);

      Opal.defn(self, '$requires', TMP_4 = function $$requires(name, options) {
        var self = this;

        if (options == null) {
          options = $hash2([], {});
        }
        options['$[]=']("required", true);
        return self.$define_rule(name, options);
      }, TMP_4.$$arity = -2);

      Opal.defn(self, '$optional', TMP_5 = function $$optional(name, options) {
        var self = this;

        if (options == null) {
          options = $hash2([], {});
        }
        options['$[]=']("required", false);
        return self.$define_rule(name, options);
      }, TMP_5.$$arity = -2);

      Opal.defn(self, '$allow_undefined_props=', TMP_6 = function(allow) {
        var self = this;

        return self.allow_undefined_props = allow;
      }, TMP_6.$$arity = 1);

      Opal.defn(self, '$undefined_props', TMP_8 = function $$undefined_props(props) {
        var $a, $b, TMP_7, self = this;

        (($a = [true]), $b = self, $b['$allow_undefined_props='].apply($b, $a), $a[$a.length-1]);
        return ($a = ($b = props).$reject, $a.$$p = (TMP_7 = function(name, value){var self = TMP_7.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
        return self.$rules()['$[]'](name)}, TMP_7.$$s = self, TMP_7.$$arity = 2, TMP_7), $a).call($b);
      }, TMP_8.$$arity = 1);

      Opal.defn(self, '$validate', TMP_10 = function $$validate(props) {
        var $a, $b, TMP_9, self = this;

        (($a = [[]]), $b = self, $b['$errors='].apply($b, $a), $a[$a.length-1]);
        if ((($a = self['$allow_undefined_props?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          self.$validate_undefined(props)
        };
        props = self.$coerce_native_hash_values(self.$defined_props(props));
        self.$validate_required(props);
        ($a = ($b = props).$each, $a.$$p = (TMP_9 = function(name, value){var self = TMP_9.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
        self.$validate_types(name, value);
          return self.$validate_allowed(name, value);}, TMP_9.$$s = self, TMP_9.$$arity = 2, TMP_9), $a).call($b);
        return self.$errors();
      }, TMP_10.$$arity = 1);

      Opal.defn(self, '$default_props', TMP_13 = function $$default_props() {
        var $a, $b, TMP_11, $c, $d, TMP_12, self = this;

        return ($a = ($b = ($c = ($d = self.$rules()).$select, $c.$$p = (TMP_12 = function(key, value){var self = TMP_12.$$s || this;
if (key == null) key = nil;if (value == null) value = nil;
        return value.$keys()['$include?']("default")}, TMP_12.$$s = self, TMP_12.$$arity = 2, TMP_12), $c).call($d)).$inject, $a.$$p = (TMP_11 = function(memo, $c){var self = TMP_11.$$s || this, $c_args, k, v;

          if ($c == null) {
            $c = nil;
          }
          $c = Opal.to_ary($c);
          $c_args = Opal.slice.call($c, 0, $c.length);
          k = $c_args.splice(0,1)[0];
          if (k == null) {
            k = nil;
          }
          v = $c_args.splice(0,1)[0];
          if (v == null) {
            v = nil;
          }if (memo == null) memo = nil;
        memo['$[]='](k, v['$[]']("default"));
          return memo;}, TMP_11.$$s = self, TMP_11.$$arity = 2, TMP_11.$$has_top_level_mlhs_arg = true, TMP_11), $a).call($b, $hash2([], {}));
      }, TMP_13.$$arity = 0);

      self.$private();

      Opal.defn(self, '$defined_props', TMP_15 = function $$defined_props(props) {
        var $a, $b, TMP_14, self = this;

        return ($a = ($b = props).$select, $a.$$p = (TMP_14 = function(name){var self = TMP_14.$$s || this;
if (name == null) name = nil;
        return self.$rules().$keys()['$include?'](name)}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14), $a).call($b);
      }, TMP_15.$$arity = 1);

      Opal.defn(self, '$allow_undefined_props?', TMP_16 = function() {
        var self = this;

        return self.allow_undefined_props['$!']()['$!']();
      }, TMP_16.$$arity = 0);

      Opal.defn(self, '$rules', TMP_17 = function $$rules() {
        var $a, self = this;

        return ((($a = self.rules) !== false && $a !== nil && $a != null) ? $a : self.rules = $hash2(["children"], {"children": $hash2(["required"], {"required": false})}));
      }, TMP_17.$$arity = 0);

      Opal.defn(self, '$define_rule', TMP_18 = function $$define_rule(name, options) {
        var self = this;

        if (options == null) {
          options = $hash2([], {});
        }
        self.$rules()['$[]='](name, self.$coerce_native_hash_values(options));
        return self.$props_wrapper().$define_param(name, options['$[]']("type"));
      }, TMP_18.$$arity = -2);

      Opal.defn(self, '$errors', TMP_19 = function $$errors() {
        var $a, self = this;

        return ((($a = self.errors) !== false && $a !== nil && $a != null) ? $a : self.errors = []);
      }, TMP_19.$$arity = 0);

      Opal.defn(self, '$validate_types', TMP_20 = function $$validate_types(prop_name, value) {
        var $a, self = this, klass = nil, allow_nil = nil;

        if ((($a = klass = self.$rules()['$[]'](prop_name)['$[]']("type")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          return nil
        };
        if ((($a = klass['$is_a?']($scope.get('Array'))['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          allow_nil = self.$rules()['$[]'](prop_name)['$[]']("allow_nil")['$!']()['$!']();
          return self.$type_check("`" + (prop_name) + "`", value, klass, allow_nil);
        } else if ((($a = $rb_gt(klass.$length(), 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.$validate_value_array(prop_name, value)
          } else {
          allow_nil = self.$rules()['$[]'](prop_name)['$[]']("allow_nil")['$!']()['$!']();
          return self.$type_check("`" + (prop_name) + "`", value, $scope.get('Array'), allow_nil);
        };
      }, TMP_20.$$arity = 2);

      Opal.defn(self, '$type_check', TMP_21 = function $$type_check(prop_name, value, klass, allow_nil) {
        var $a, $b, self = this;

        if ((($a = (($b = allow_nil !== false && allow_nil !== nil && allow_nil != null) ? value['$nil?']() : allow_nil)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil};
        if ((($a = value['$is_a?'](klass)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil};
        if ((($a = ($b = klass['$respond_to?']("_react_param_conversion"), $b !== false && $b !== nil && $b != null ?klass.$_react_param_conversion(value, "validate_only") : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil};
        return self.$errors()['$<<']("Provided prop " + (prop_name) + " could not be converted to " + (klass));
      }, TMP_21.$$arity = 4);

      Opal.defn(self, '$validate_allowed', TMP_22 = function $$validate_allowed(prop_name, value) {
        var $a, self = this, values = nil;

        if ((($a = values = self.$rules()['$[]'](prop_name)['$[]']("values")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          return nil
        };
        if ((($a = values['$include?'](value)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil};
        return self.$errors()['$<<']("Value `" + (value) + "` for prop `" + (prop_name) + "` is not an allowed value");
      }, TMP_22.$$arity = 2);

      Opal.defn(self, '$validate_required', TMP_24 = function $$validate_required(props) {
        var $a, $b, TMP_23, self = this;

        return ($a = ($b = ($rb_minus(self.$rules().$keys(), props.$keys()))).$each, $a.$$p = (TMP_23 = function(name){var self = TMP_23.$$s || this, $c;
if (name == null) name = nil;
        if ((($c = self.$rules()['$[]'](name)['$[]']("required")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            } else {
            return nil;
          };
          return self.$errors()['$<<']("Required prop `" + (name) + "` was not specified");}, TMP_23.$$s = self, TMP_23.$$arity = 1, TMP_23), $a).call($b);
      }, TMP_24.$$arity = 1);

      Opal.defn(self, '$validate_undefined', TMP_26 = function $$validate_undefined(props) {
        var $a, $b, TMP_25, self = this;

        return ($a = ($b = ($rb_minus(props.$keys(), self.$rules().$keys()))).$each, $a.$$p = (TMP_25 = function(prop_name){var self = TMP_25.$$s || this;
if (prop_name == null) prop_name = nil;
        return self.$errors()['$<<']("Provided prop `" + (prop_name) + "` not specified in spec")}, TMP_25.$$s = self, TMP_25.$$arity = 1, TMP_25), $a).call($b);
      }, TMP_26.$$arity = 1);

      Opal.defn(self, '$validate_value_array', TMP_28 = function $$validate_value_array(name, value) {
        var $a, $b, TMP_27, self = this, klass = nil, allow_nil = nil;

        try {
          klass = self.$rules()['$[]'](name)['$[]']("type");
          allow_nil = self.$rules()['$[]'](name)['$[]']("allow_nil")['$!']()['$!']();
          return ($a = ($b = value).$each_with_index, $a.$$p = (TMP_27 = function(item, index){var self = TMP_27.$$s || this;
if (item == null) item = nil;if (index == null) index = nil;
          return self.$type_check("`" + (name) + "`[" + (index) + "]", self.$Native(item), klass['$[]'](0), allow_nil)}, TMP_27.$$s = self, TMP_27.$$arity = 2, TMP_27), $a).call($b);
        } catch ($err) {
          if (Opal.rescue($err, [$scope.get('NoMethodError')])) {
            try {
              return self.$errors()['$<<']("Provided prop `" + (name) + "` was not an Array")
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        };
      }, TMP_28.$$arity = 2);

      return (Opal.defn(self, '$coerce_native_hash_values', TMP_30 = function $$coerce_native_hash_values(hash) {
        var $a, $b, TMP_29, self = this;

        return ($a = ($b = hash).$each, $a.$$p = (TMP_29 = function(key, value){var self = TMP_29.$$s || this;
if (key == null) key = nil;if (value == null) value = nil;
        return hash['$[]='](key, self.$Native(value))}, TMP_29.$$s = self, TMP_29.$$arity = 2, TMP_29), $a).call($b);
      }, TMP_30.$$arity = 1), nil) && 'coerce_native_hash_values';
    })($scope.base, null)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["react/ext/string"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    return (Opal.defn(self, '$event_camelize', TMP_1 = function $$event_camelize() {
      var self = this;

      return self.replace(/(^|_)([^_]+)/g, function(match, pre, word, index) {
      var capitalize = true;
      return capitalize ? word.substr(0,1).toUpperCase()+word.substr(1) : word;
    });
    }, TMP_1.$$arity = 0), nil) && 'event_camelize'
  })($scope.base, null)
};
/* Generated by Opal 0.10.3 */
Opal.modules["react/ext/hash"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$map']);
  return (function($base, $super) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $scope = self.$$scope, TMP_2;

    return (Opal.defn(self, '$shallow_to_n', TMP_2 = function $$shallow_to_n() {
      var $a, $b, TMP_1, self = this, hash = nil;

      hash = {};
      ($a = ($b = self).$map, $a.$$p = (TMP_1 = function(key, value){var self = TMP_1.$$s || this;
if (key == null) key = nil;if (value == null) value = nil;
      return hash[key] = value;}, TMP_1.$$s = self, TMP_1.$$arity = 2, TMP_1), $a).call($b);
      return hash;
    }, TMP_2.$$arity = 0), nil) && 'shallow_to_n'
  })($scope.base, null)
};
/* Generated by Opal 0.10.3 */
Opal.modules["react/callbacks"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$extend', '$each', '$is_a?', '$instance_exec', '$to_proc', '$send', '$callbacks_for', '$class', '$class_attribute', '$define_singleton_method', '$concat', '$push', '$+', '$respond_to?', '$superclass']);
  self.$require("active_support/core_ext/class/attribute");
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Callbacks, self = $Callbacks = $module($base, 'Callbacks');

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_3;

      Opal.defs(self, '$included', TMP_1 = function $$included(base) {
        var self = this;

        return base.$extend($scope.get('ClassMethods'));
      }, TMP_1.$$arity = 1);

      Opal.defn(self, '$run_callback', TMP_3 = function $$run_callback(name, $a_rest) {
        var $b, $c, TMP_2, self = this, args;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        return ($b = ($c = self.$class().$callbacks_for(name)).$each, $b.$$p = (TMP_2 = function(callback){var self = TMP_2.$$s || this, $a, $d;
if (callback == null) callback = nil;
        if ((($a = callback['$is_a?']($scope.get('Proc'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return ($a = ($d = self).$instance_exec, $a.$$p = callback.$to_proc(), $a).apply($d, Opal.to_a(args))
            } else {
            return ($a = self).$send.apply($a, [callback].concat(Opal.to_a(args)))
          }}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $b).call($c);
      }, TMP_3.$$arity = -2);

      (function($base) {
        var $ClassMethods, self = $ClassMethods = $module($base, 'ClassMethods');

        var def = self.$$proto, $scope = self.$$scope, TMP_5, TMP_6;

        Opal.defn(self, '$define_callback', TMP_5 = function $$define_callback(callback_name) {
          var $a, $b, TMP_4, self = this, $iter = TMP_5.$$p, $yield = $iter || nil, attribute_name = nil;

          TMP_5.$$p = null;
          attribute_name = "_" + (callback_name) + "_callbacks";
          self.$class_attribute(attribute_name);
          self.$send("" + (attribute_name) + "=", []);
          return ($a = ($b = self).$define_singleton_method, $a.$$p = (TMP_4 = function($c_rest){var self = TMP_4.$$s || this, block, args, callbacks = nil;

            block = TMP_4.$$p || nil, TMP_4.$$p = null;
            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
          callbacks = self.$send(attribute_name);
            callbacks.$concat(args);
            if ((block !== nil)) {
              callbacks.$push(block)};
            return self.$send("" + (attribute_name) + "=", callbacks);}, TMP_4.$$s = self, TMP_4.$$arity = -1, TMP_4), $a).call($b, callback_name);
        }, TMP_5.$$arity = 1);

        Opal.defn(self, '$callbacks_for', TMP_6 = function $$callbacks_for(callback_name) {
          var $a, self = this, attribute_name = nil;

          attribute_name = "_" + (callback_name) + "_callbacks";
          return $rb_plus((function() {if ((($a = self.$superclass()['$respond_to?']("callbacks_for")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$superclass().$callbacks_for(callback_name)
            } else {
            return []
          }; return nil; })(), self.$send(attribute_name));
        }, TMP_6.$$arity = 1);
      })($scope.base);
    })($scope.base)
  })($scope.base);
};
/* Generated by Opal 0.10.3 */
Opal.modules["react/rendering_context"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$attr_accessor', '$deprecation_warning', '$to_n', '$build', '$render', '$to_proc', '$remove_nodes_from_args', '$waiting_on_resources', '$waiting_on_resources=', '$run_child_block', '$nil?', '$dup', '$tap', '$!', '$detect', '$respond_to?', '$create_element', '$is_a?', '$last', '$span', '$to_s', '$<<', '$delete', '$include?', '$[]=', '$index', '$[]', '$each', '$as_node', '$try', '$empty?', '$!=', '$raise_render_error', '$==', '$count', '$improper_render', '$>', '$class', '$raise', '$define_method', '$unshift', '$send']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $RenderingContext(){};
      var self = $RenderingContext = $klass($base, $super, 'RenderingContext', $RenderingContext);

      var def = self.$$proto, $scope = self.$$scope;

      return (function(self) {
        var $scope = self.$$scope, def = self.$$proto, TMP_1, TMP_3, TMP_10, TMP_11, TMP_12, TMP_13, TMP_15, TMP_16, TMP_17, TMP_18;

        self.$attr_accessor("waiting_on_resources");
        Opal.defn(self, '$build_only', TMP_1 = function $$build_only(name, $a_rest) {
          var $b, $c, TMP_2, self = this, args, $iter = TMP_1.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }
          TMP_1.$$p = null;
          (($scope.get('React')).$$scope.get('Component')).$deprecation_warning("..._as_node is deprecated.  Render component and then use the .node method instead");
          return ($b = ($c = (($scope.get('React')).$$scope.get('RenderingContext'))).$build, $b.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this, $a, $d;

          return ($a = ($d = (($scope.get('React')).$$scope.get('RenderingContext'))).$render, $a.$$p = block.$to_proc(), $a).apply($d, [name].concat(Opal.to_a(args)))}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2), $b).call($c).$to_n();
        }, TMP_1.$$arity = -2);
        Opal.defn(self, '$render', TMP_3 = function $$render(name, $a_rest) {
          var $b, $c, TMP_4, $d, $e, self = this, args, $iter = TMP_3.$$p, block = $iter || nil, element = nil;
          if (self.buffer == null) self.buffer = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }
          TMP_3.$$p = null;
          self.$remove_nodes_from_args(args);
          if ((($b = self.buffer) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            } else {
            ((($b = self.buffer) !== false && $b !== nil && $b != null) ? $b : self.buffer = [])
          };
          if (block !== false && block !== nil && block != null) {
            element = ($b = ($c = self).$build, $b.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this, $a, $d, $e, TMP_5, $f, $g, TMP_7, TMP_8, $h, TMP_9, saved_waiting_on_resources = nil, buffer = nil;
              if (self.buffer == null) self.buffer = nil;

            saved_waiting_on_resources = self.$waiting_on_resources();
              (($a = [nil]), $d = self, $d['$waiting_on_resources='].apply($d, $a), $a[$a.length-1]);
              ($a = ($d = self).$run_child_block, $a.$$p = block.$to_proc(), $a).call($d, name['$nil?']());
              if (name !== false && name !== nil && name != null) {
                buffer = self.buffer.$dup();
                return ($a = ($e = ($f = ($g = $scope.get('React')).$create_element, $f.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this;

                return buffer}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $f).apply($g, [name].concat(Opal.to_a(args)))).$tap, $a.$$p = (TMP_5 = function(element){var self = TMP_5.$$s || this, $f, $g, $h, $i, $j, TMP_6;
if (element == null) element = nil;
                return (($f = [((($h = saved_waiting_on_resources) !== false && $h !== nil && $h != null) ? $h : ($i = ($j = buffer).$detect, $i.$$p = (TMP_6 = function(e){var self = TMP_6.$$s || this, $k;
if (e == null) e = nil;
                  if ((($k = e['$respond_to?']("waiting_on_resources")) !== nil && $k != null && (!$k.$$is_boolean || $k == true))) {
                      return e.$waiting_on_resources()
                      } else {
                      return nil
                    }}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $i).call($j)['$!']()['$!']())]), $g = element, $g['$waiting_on_resources='].apply($g, $f), $f[$f.length-1])}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5), $a).call($e);
              } else if ((($a = self.buffer.$last()['$is_a?']((($scope.get('React')).$$scope.get('Element')))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                return ($a = ($f = self.buffer.$last()).$tap, $a.$$p = (TMP_8 = function(element){var self = TMP_8.$$s || this, $h, $i;
if (element == null) element = nil;
                return ($h = element, ((($i = $h.$waiting_on_resources()) !== false && $i !== nil && $i != null) ? $i : $h['$waiting_on_resources='](saved_waiting_on_resources)))}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8), $a).call($f)
                } else {
                return ($a = ($h = self.buffer.$last().$to_s().$span()).$tap, $a.$$p = (TMP_9 = function(element){var self = TMP_9.$$s || this, $i, $j;
if (element == null) element = nil;
                return (($i = [saved_waiting_on_resources]), $j = element, $j['$waiting_on_resources='].apply($j, $i), $i[$i.length-1])}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9), $a).call($h)
              };}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $b).call($c)
          } else if ((($b = name['$is_a?']((($scope.get('React')).$$scope.get('Element')))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            element = name
            } else {
            element = ($b = $scope.get('React')).$create_element.apply($b, [name].concat(Opal.to_a(args)));
            (($d = [self.$waiting_on_resources()]), $e = element, $e['$waiting_on_resources='].apply($e, $d), $d[$d.length-1]);
          };
          self.buffer['$<<'](element);
          (($d = [nil]), $e = self, $e['$waiting_on_resources='].apply($e, $d), $d[$d.length-1]);
          return element;
        }, TMP_3.$$arity = -2);
        Opal.defn(self, '$build', TMP_10 = function $$build() {
          var self = this, $iter = TMP_10.$$p, $yield = $iter || nil, current = nil, return_val = nil;
          if (self.buffer == null) self.buffer = nil;

          TMP_10.$$p = null;
          current = self.buffer;
          self.buffer = [];
          return_val = Opal.yield1($yield, self.buffer);
          self.buffer = current;
          return return_val;
        }, TMP_10.$$arity = 0);
        Opal.defn(self, '$as_node', TMP_11 = function $$as_node(element) {
          var self = this;
          if (self.buffer == null) self.buffer = nil;

          self.buffer.$delete(element);
          return element;
        }, TMP_11.$$arity = 1);
        Opal.alias(self, 'delete', 'as_node');
        Opal.defn(self, '$rendered?', TMP_12 = function(element) {
          var self = this;
          if (self.buffer == null) self.buffer = nil;

          return self.buffer['$include?'](element);
        }, TMP_12.$$arity = 1);
        Opal.defn(self, '$replace', TMP_13 = function $$replace(e1, e2) {
          var self = this;
          if (self.buffer == null) self.buffer = nil;

          return self.buffer['$[]='](self.buffer.$index(e1), e2);
        }, TMP_13.$$arity = 2);
        Opal.defn(self, '$remove_nodes_from_args', TMP_15 = function $$remove_nodes_from_args(args) {
          var $a, $b, TMP_14, self = this;

          if ((($a = ($b = args['$[]'](0), $b !== false && $b !== nil && $b != null ?args['$[]'](0)['$is_a?']($scope.get('Hash')) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return ($a = ($b = args['$[]'](0)).$each, $a.$$p = (TMP_14 = function(key, value){var self = TMP_14.$$s || this, $c;
if (key == null) key = nil;if (value == null) value = nil;
            
              try {(function() {if ((($c = value['$is_a?']($scope.get('Element'))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                return value.$as_node()
                } else {
                return nil
              }; return nil; })() } catch ($err) { 
                if (Opal.rescue($err, [$scope.get('StandardError')])) {
                return nil
                } else { throw $err; } }}, TMP_14.$$s = self, TMP_14.$$arity = 2, TMP_14), $a).call($b)
            } else {
            return nil
          };
        }, TMP_15.$$arity = 1);
        Opal.defn(self, '$run_child_block', TMP_16 = function $$run_child_block(is_outer_scope) {
          var $a, $b, $c, self = this, $iter = TMP_16.$$p, $yield = $iter || nil, result = nil;
          if (self.buffer == null) self.buffer = nil;

          TMP_16.$$p = null;
          result = Opal.yieldX($yield, []);
          if ((($a = result.$try("acts_as_string?")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            result = result.$to_s()};
          if ((($a = ((($b = result['$is_a?']($scope.get('String'))) !== false && $b !== nil && $b != null) ? $b : (($c = result['$is_a?']($scope.get('Element')), $c !== false && $c !== nil && $c != null ?self.buffer['$empty?']() : $c)))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.buffer['$<<'](result)};
          if ((($a = (($b = is_outer_scope !== false && is_outer_scope !== nil && is_outer_scope != null) ? self.buffer['$!=']([result]) : is_outer_scope)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$raise_render_error(result)
            } else {
            return nil
          };
        }, TMP_16.$$arity = 1);
        Opal.defn(self, '$raise_render_error', TMP_17 = function $$raise_render_error(result) {
          var $a, self = this;
          if (self.buffer == null) self.buffer = nil;

          if (self.buffer.$count()['$=='](1)) {
            self.$improper_render("A different element was returned than was generated within the DSL.", "Possibly improper use of Element#delete.")};
          if ((($a = $rb_gt(self.buffer.$count(), 1)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.$improper_render("Instead " + (self.buffer.$count()) + " elements were generated.", "Do you want to wrap your elements in a div?")};
          if ((($a = result.$try("reactrb_component?")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.$improper_render("Instead the component " + (result) + " was returned.", "Did you mean " + (result) + "()?")};
          return self.$improper_render("Instead the " + (result.$class()) + " " + (result) + " was returned.", "You may need to convert this to a string.");
        }, TMP_17.$$arity = 1);
        return (Opal.defn(self, '$improper_render', TMP_18 = function $$improper_render(message, solution) {
          var self = this;

          return self.$raise("a component's render method must generate and return exactly 1 element or a string.\n" + ("    " + (message) + "  " + (solution)));
        }, TMP_18.$$arity = 2), nil) && 'improper_render';
      })(Opal.get_singleton_class(self))
    })($scope.base, null);

    (function($base, $super) {
      function $Object(){};
      var self = $Object = $klass($base, $super, 'Object', $Object);

      var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_19, TMP_22, TMP_25;

      ($a = ($b = ["span", "td", "th", "while_loading"]).$each, $a.$$p = (TMP_19 = function(tag){var self = TMP_19.$$s || this, $c, $d, TMP_20;
if (tag == null) tag = nil;
      return ($c = ($d = self).$define_method, $c.$$p = (TMP_20 = function($e_rest){var self = TMP_20.$$s || this, block, args, $f, $g, $h, TMP_21;

          block = TMP_20.$$p || nil, TMP_20.$$p = null;
          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
        args.$unshift(tag);
          if ((($f = self['$is_a?']((($scope.get('React')).$$scope.get('Component')))) !== nil && $f != null && (!$f.$$is_boolean || $f == true))) {
            return ($f = ($g = self).$send, $f.$$p = block.$to_proc(), $f).apply($g, Opal.to_a(args))};
          return ($f = ($h = (($scope.get('React')).$$scope.get('RenderingContext'))).$render, $f.$$p = (TMP_21 = function(){var self = TMP_21.$$s || this;

          return self.$to_s()}, TMP_21.$$s = self, TMP_21.$$arity = 0, TMP_21), $f).apply($h, Opal.to_a(args));}, TMP_20.$$s = self, TMP_20.$$arity = -1, TMP_20), $c).call($d, tag)}, TMP_19.$$s = self, TMP_19.$$arity = 1, TMP_19), $a).call($b);

      Opal.defn(self, '$para', TMP_22 = function $$para($a_rest) {
        var $b, $c, $d, TMP_23, self = this, args, $iter = TMP_22.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        TMP_22.$$p = null;
        args.$unshift("p");
        if ((($b = self['$is_a?']((($scope.get('React')).$$scope.get('Component')))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          return ($b = ($c = self).$send, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args))};
        return ($b = ($d = (($scope.get('React')).$$scope.get('RenderingContext'))).$render, $b.$$p = (TMP_23 = function(){var self = TMP_23.$$s || this;

        return self.$to_s()}, TMP_23.$$s = self, TMP_23.$$arity = 0, TMP_23), $b).apply($d, Opal.to_a(args));
      }, TMP_22.$$arity = -1);

      return (Opal.defn(self, '$br', TMP_25 = function $$br() {
        var $a, $b, TMP_24, self = this;

        if ((($a = self['$is_a?']((($scope.get('React')).$$scope.get('Component')))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.$send("br")};
        return ($a = ($b = (($scope.get('React')).$$scope.get('RenderingContext'))).$render, $a.$$p = (TMP_24 = function(){var self = TMP_24.$$s || this;

        (($scope.get('React')).$$scope.get('RenderingContext')).$render(self.$to_s());
          return (($scope.get('React')).$$scope.get('RenderingContext')).$render("br");}, TMP_24.$$s = self, TMP_24.$$arity = 0, TMP_24), $a).call($b, "span");
      }, TMP_25.$$arity = 0), nil) && 'br';
    })(Opal.Object, null);
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["react/state"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $gvars = Opal.gvars, $hash2 = Opal.hash2;

  Opal.add_stubs(['$new', '$[]', '$[]=', '$match', '$>', '$count', '$get_state', '$set_state', '$attr_reader', '$!', '$empty?', '$observers_by_name', '$respond_to?', '$each', '$include?', '$+', '$==', '$dup', '$merge!', '$states', '$new_observers', '$<<', '$after', '$set_state2', '$update_react_js_state', '$notify_observers', '$raise', '$delete', '$current_observers', '$to_f', '$now', '$class', '$name', '$to_s', '$object_id', '$-', '$max', '$define_method', '$instance_variable_get', '$instance_variable_set']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $StateWrapper(){};
      var self = $StateWrapper = $klass($base, $super, 'StateWrapper', $StateWrapper);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_5;

      def.state_hash = def.from = nil;
      Opal.defn(self, '$initialize', TMP_1 = function $$initialize(native$, from) {
        var self = this;

        self.state_hash = $scope.get('Hash').$new(native$.state);
        return self.from = from;
      }, TMP_1.$$arity = 2);

      Opal.defn(self, '$[]', TMP_2 = function(state) {
        var self = this;

        return self.state_hash['$[]'](state);
      }, TMP_2.$$arity = 1);

      Opal.defn(self, '$[]=', TMP_3 = function(state, new_value) {
        var self = this;

        return self.state_hash['$[]='](state, new_value);
      }, TMP_3.$$arity = 2);

      return (Opal.defn(self, '$method_missing', TMP_5 = function $$method_missing(method, $a_rest) {
        var $b, $c, TMP_4, self = this, args, match = nil, current_value = nil, current_state = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        if ((($b = match = method.$match(/^(.+)\!$/)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          if ((($b = $rb_gt(args.$count(), 0)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            current_value = $scope.get('State').$get_state(self.from, match['$[]'](1));
            $scope.get('State').$set_state(self.from, (($b = $gvars['~']) === nil ? nil : $b['$[]'](1)), args['$[]'](0));
            return current_value;
            } else {
            current_state = $scope.get('State').$get_state(self.from, match['$[]'](1));
            $scope.get('State').$set_state(self.from, (($b = $gvars['~']) === nil ? nil : $b['$[]'](1)), current_state);
            return ($b = ($c = $scope.get('Observable')).$new, $b.$$p = (TMP_4 = function(update){var self = TMP_4.$$s || this, $a;
              if (self.from == null) self.from = nil;
if (update == null) update = nil;
            return $scope.get('State').$set_state(self.from, (($a = $gvars['~']) === nil ? nil : $a['$[]'](1)), update)}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4), $b).call($c, current_state);
          }
          } else {
          return $scope.get('State').$get_state(self.from, method)
        };
      }, TMP_5.$$arity = -2), nil) && 'method_missing';
    })($scope.base, $scope.get('BasicObject'));

    (function($base, $super) {
      function $State(){};
      var self = $State = $klass($base, $super, 'State', $State);

      var def = self.$$proto, $scope = self.$$scope;

      self.rendering_level = 0;

      return (function(self) {
        var $scope = self.$$scope, def = self.$$proto, TMP_6, TMP_7, TMP_9, TMP_10, TMP_11, TMP_21, TMP_23, TMP_26, TMP_27, TMP_28, TMP_33, TMP_36, TMP_37, TMP_39, $a, $b, TMP_40;

        self.$attr_reader("current_observer");
        Opal.defn(self, '$has_observers?', TMP_6 = function(object, name) {
          var self = this;

          return self.$observers_by_name()['$[]'](object)['$[]'](name)['$empty?']()['$!']();
        }, TMP_6.$$arity = 2);
        Opal.defn(self, '$bulk_update', TMP_7 = function $$bulk_update() {
          var self = this, $iter = TMP_7.$$p, $yield = $iter || nil, saved_bulk_update_flag = nil;
          if (self.bulk_update_flag == null) self.bulk_update_flag = nil;

          TMP_7.$$p = null;
          try {
          saved_bulk_update_flag = self.bulk_update_flag;
          self.bulk_update_flag = true;
          return Opal.yieldX($yield, []);;
          } finally {
            self.bulk_update_flag = saved_bulk_update_flag
          };
        }, TMP_7.$$arity = 0);
        Opal.defn(self, '$set_state2', TMP_9 = function $$set_state2(object, name, value, updates, exclusions) {
          var $a, $b, TMP_8, $c, self = this, object_needs_notification = nil;

          if (exclusions == null) {
            exclusions = nil;
          }
          object_needs_notification = object['$respond_to?']("update_react_js_state");
          ($a = ($b = self.$observers_by_name()['$[]'](object)['$[]'](name).$dup()).$each, $a.$$p = (TMP_8 = function(observer){var self = TMP_8.$$s || this, $c, $d;
if (observer == null) observer = nil;
          if ((($c = (($d = exclusions !== false && exclusions !== nil && exclusions != null) ? exclusions['$include?'](observer) : exclusions)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return nil;};
            ($c = observer, $d = updates, $d['$[]=']($c, $rb_plus($d['$[]']($c), [object, name, value])));
            if (object['$=='](observer)) {
              return object_needs_notification = false
              } else {
              return nil
            };}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8), $a).call($b);
          if (object_needs_notification !== false && object_needs_notification !== nil && object_needs_notification != null) {
            return ($a = object, $c = updates, $c['$[]=']($a, $rb_plus($c['$[]']($a), [nil, name, value])))
            } else {
            return nil
          };
        }, TMP_9.$$arity = -5);
        Opal.defn(self, '$initialize_states', TMP_10 = function $$initialize_states(object, initial_values) {
          var $a, self = this;

          return self.$states()['$[]'](object)['$merge!'](((($a = initial_values) !== false && $a !== nil && $a != null) ? $a : $hash2([], {})));
        }, TMP_10.$$arity = 2);
        Opal.defn(self, '$get_state', TMP_11 = function $$get_state(object, name, current_observer) {
          var $a, $b, self = this;
          if (self.delayed_updates == null) self.delayed_updates = nil;
          if (self.current_observer == null) self.current_observer = nil;

          if (current_observer == null) {
            current_observer = self.current_observer;
          }
          if ((($a = (($b = current_observer !== false && current_observer !== nil && current_observer != null) ? self.$new_observers()['$[]'](current_observer)['$[]'](object)['$include?'](name)['$!']() : current_observer)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.$new_observers()['$[]'](current_observer)['$[]'](object)['$<<'](name)};
          if ((($a = ($b = self.delayed_updates, $b !== false && $b !== nil && $b != null ?self.delayed_updates['$[]'](object)['$[]'](name) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.delayed_updates['$[]'](object)['$[]'](name)['$[]'](1)['$<<'](current_observer)};
          return self.$states()['$[]'](object)['$[]'](name);
        }, TMP_11.$$arity = -3);
        Opal.defn(self, '$set_state', TMP_21 = function $$set_state(object, name, value, delay) {
          var $a, $b, $c, TMP_12, $d, TMP_13, TMP_19, $e, TMP_20, self = this, updates = nil;
          if (self.bulk_update_flag == null) self.bulk_update_flag = nil;
          if (self.delayed_updates == null) self.delayed_updates = nil;
          if (self.delayed_updater == null) self.delayed_updater = nil;
          if (self.rendering_level == null) self.rendering_level = nil;

          if (delay == null) {
            delay = nil;
          }
          self.$states()['$[]'](object)['$[]='](name, value);
          if ((($a = ((($b = delay) !== false && $b !== nil && $b != null) ? $b : self.bulk_update_flag)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            ((($a = self.delayed_updates) !== false && $a !== nil && $a != null) ? $a : self.delayed_updates = ($b = ($c = $scope.get('Hash')).$new, $b.$$p = (TMP_12 = function(h, k){var self = TMP_12.$$s || this;
if (h == null) h = nil;if (k == null) k = nil;
            return h['$[]='](k, $hash2([], {}))}, TMP_12.$$s = self, TMP_12.$$arity = 2, TMP_12), $b).call($c));
            self.delayed_updates['$[]'](object)['$[]='](name, [value, $scope.get('Set').$new()]);
            ((($a = self.delayed_updater) !== false && $a !== nil && $a != null) ? $a : self.delayed_updater = ($b = ($d = self).$after, $b.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this, $e, $f, TMP_14, $g, TMP_15, $h, TMP_16, $i, TMP_18, delayed_updates = nil, updates = nil;
              if (self.delayed_updates == null) self.delayed_updates = nil;

            delayed_updates = self.delayed_updates;
              self.delayed_updates = ($e = ($f = $scope.get('Hash')).$new, $e.$$p = (TMP_14 = function(h, k){var self = TMP_14.$$s || this;
if (h == null) h = nil;if (k == null) k = nil;
              return h['$[]='](k, $hash2([], {}))}, TMP_14.$$s = self, TMP_14.$$arity = 2, TMP_14), $e).call($f);
              self.delayed_updater = nil;
              updates = ($e = ($g = $scope.get('Hash')).$new, $e.$$p = (TMP_15 = function(hash, key){var self = TMP_15.$$s || this;
if (hash == null) hash = nil;if (key == null) key = nil;
              return hash['$[]='](key, $scope.get('Array').$new())}, TMP_15.$$s = self, TMP_15.$$arity = 2, TMP_15), $e).call($g);
              ($e = ($h = delayed_updates).$each, $e.$$p = (TMP_16 = function(object, name_hash){var self = TMP_16.$$s || this, $i, $j, TMP_17;
if (object == null) object = nil;if (name_hash == null) name_hash = nil;
              return ($i = ($j = name_hash).$each, $i.$$p = (TMP_17 = function(name, value_and_set){var self = TMP_17.$$s || this;
if (name == null) name = nil;if (value_and_set == null) value_and_set = nil;
                return self.$set_state2(object, name, value_and_set['$[]'](0), updates, value_and_set['$[]'](1))}, TMP_17.$$s = self, TMP_17.$$arity = 2, TMP_17), $i).call($j)}, TMP_16.$$s = self, TMP_16.$$arity = 2, TMP_16), $e).call($h);
              return ($e = ($i = updates).$each, $e.$$p = (TMP_18 = function(observer, args){var self = TMP_18.$$s || this, $j;
if (observer == null) observer = nil;if (args == null) args = nil;
              return ($j = observer).$update_react_js_state.apply($j, Opal.to_a(args))}, TMP_18.$$s = self, TMP_18.$$arity = 2, TMP_18), $e).call($i);}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13), $b).call($d, 0.001));
          } else if (self.rendering_level['$=='](0)) {
            updates = ($a = ($b = $scope.get('Hash')).$new, $a.$$p = (TMP_19 = function(hash, key){var self = TMP_19.$$s || this;
if (hash == null) hash = nil;if (key == null) key = nil;
            return hash['$[]='](key, $scope.get('Array').$new())}, TMP_19.$$s = self, TMP_19.$$arity = 2, TMP_19), $a).call($b);
            self.$set_state2(object, name, value, updates);
            ($a = ($e = updates).$each, $a.$$p = (TMP_20 = function(observer, args){var self = TMP_20.$$s || this, $f;
if (observer == null) observer = nil;if (args == null) args = nil;
            return ($f = observer).$update_react_js_state.apply($f, Opal.to_a(args))}, TMP_20.$$s = self, TMP_20.$$arity = 2, TMP_20), $a).call($e);};
          return value;
        }, TMP_21.$$arity = -4);
        Opal.defn(self, '$notify_observers', TMP_23 = function $$notify_observers(object, name, value) {
          var $a, $b, TMP_22, self = this, object_needs_notification = nil;

          object_needs_notification = object['$respond_to?']("update_react_js_state");
          ($a = ($b = self.$observers_by_name()['$[]'](object)['$[]'](name).$dup()).$each, $a.$$p = (TMP_22 = function(observer){var self = TMP_22.$$s || this;
if (observer == null) observer = nil;
          observer.$update_react_js_state(object, name, value);
            if (object['$=='](observer)) {
              return object_needs_notification = false
              } else {
              return nil
            };}, TMP_22.$$s = self, TMP_22.$$arity = 1, TMP_22), $a).call($b);
          if (object_needs_notification !== false && object_needs_notification !== nil && object_needs_notification != null) {
            return object.$update_react_js_state(nil, name, value)
            } else {
            return nil
          };
        }, TMP_23.$$arity = 3);
        Opal.defn(self, '$notify_observers_after_thread_completes', TMP_26 = function $$notify_observers_after_thread_completes(object, name, value) {
          var $a, $b, $c, TMP_24, self = this;
          if (self.delayed_updates == null) self.delayed_updates = nil;
          if (self.delayed_updater == null) self.delayed_updater = nil;

          (((($a = self.delayed_updates) !== false && $a !== nil && $a != null) ? $a : self.delayed_updates = []))['$<<']([object, name, value]);
          return ((($a = self.delayed_updater) !== false && $a !== nil && $a != null) ? $a : self.delayed_updater = ($b = ($c = self).$after, $b.$$p = (TMP_24 = function(){var self = TMP_24.$$s || this, $d, $e, TMP_25, delayed_updates = nil;
            if (self.delayed_updates == null) self.delayed_updates = nil;

          delayed_updates = self.delayed_updates;
            self.delayed_updates = [];
            self.delayed_updater = nil;
            return ($d = ($e = delayed_updates).$each, $d.$$p = (TMP_25 = function(args){var self = TMP_25.$$s || this, $f;
if (args == null) args = nil;
            return ($f = self).$notify_observers.apply($f, Opal.to_a(args))}, TMP_25.$$s = self, TMP_25.$$arity = 1, TMP_25), $d).call($e);}, TMP_24.$$s = self, TMP_24.$$arity = 0, TMP_24), $b).call($c, 0));
        }, TMP_26.$$arity = 3);
        Opal.defn(self, '$will_be_observing?', TMP_27 = function(object, name, current_observer) {
          var $a, self = this;

          return (($a = current_observer !== false && current_observer !== nil && current_observer != null) ? self.$new_observers()['$[]'](current_observer)['$[]'](object)['$include?'](name) : current_observer);
        }, TMP_27.$$arity = 3);
        Opal.defn(self, '$is_observing?', TMP_28 = function(object, name, current_observer) {
          var $a, self = this;

          return (($a = current_observer !== false && current_observer !== nil && current_observer != null) ? self.$observers_by_name()['$[]'](object)['$[]'](name)['$include?'](current_observer) : current_observer);
        }, TMP_28.$$arity = 3);
        Opal.defn(self, '$update_states_to_observe', TMP_33 = function $$update_states_to_observe(current_observer) {
          var $a, $b, TMP_29, $c, TMP_31, self = this, observers = nil;
          if (self.current_observer == null) self.current_observer = nil;

          if (current_observer == null) {
            current_observer = self.current_observer;
          }
          if (current_observer !== false && current_observer !== nil && current_observer != null) {
            } else {
            self.$raise("update_states_to_observer called outside of watch block")
          };
          ($a = ($b = self.$current_observers()['$[]'](current_observer)).$each, $a.$$p = (TMP_29 = function(object, names){var self = TMP_29.$$s || this, $c, $d, TMP_30;
if (object == null) object = nil;if (names == null) names = nil;
          return ($c = ($d = names).$each, $c.$$p = (TMP_30 = function(name){var self = TMP_30.$$s || this;
if (name == null) name = nil;
            return self.$observers_by_name()['$[]'](object)['$[]'](name).$delete(current_observer)}, TMP_30.$$s = self, TMP_30.$$arity = 1, TMP_30), $c).call($d)}, TMP_29.$$s = self, TMP_29.$$arity = 2, TMP_29), $a).call($b);
          observers = self.$current_observers()['$[]='](current_observer, self.$new_observers()['$[]'](current_observer));
          self.$new_observers().$delete(current_observer);
          return ($a = ($c = observers).$each, $a.$$p = (TMP_31 = function(object, names){var self = TMP_31.$$s || this, $d, $e, TMP_32;
if (object == null) object = nil;if (names == null) names = nil;
          return ($d = ($e = names).$each, $d.$$p = (TMP_32 = function(name){var self = TMP_32.$$s || this;
if (name == null) name = nil;
            return self.$observers_by_name()['$[]'](object)['$[]'](name)['$<<'](current_observer)}, TMP_32.$$s = self, TMP_32.$$arity = 1, TMP_32), $d).call($e)}, TMP_31.$$s = self, TMP_31.$$arity = 2, TMP_31), $a).call($c);
        }, TMP_33.$$arity = -1);
        Opal.defn(self, '$remove', TMP_36 = function $$remove() {
          var $a, $b, TMP_34, self = this;
          if (self.current_observer == null) self.current_observer = nil;

          if ((($a = self.current_observer) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.$raise("remove called outside of watch block")
          };
          ($a = ($b = self.$current_observers()['$[]'](self.current_observer)).$each, $a.$$p = (TMP_34 = function(object, names){var self = TMP_34.$$s || this, $c, $d, TMP_35;
if (object == null) object = nil;if (names == null) names = nil;
          return ($c = ($d = names).$each, $c.$$p = (TMP_35 = function(name){var self = TMP_35.$$s || this;
              if (self.current_observer == null) self.current_observer = nil;
if (name == null) name = nil;
            return self.$observers_by_name()['$[]'](object)['$[]'](name).$delete(self.current_observer)}, TMP_35.$$s = self, TMP_35.$$arity = 1, TMP_35), $c).call($d)}, TMP_34.$$s = self, TMP_34.$$arity = 2, TMP_34), $a).call($b);
          return self.$current_observers().$delete(self.current_observer);
        }, TMP_36.$$arity = 0);
        Opal.defn(self, '$set_state_context_to', TMP_37 = function $$set_state_context_to(observer, rendering) {
          var $a, self = this, $iter = TMP_37.$$p, $yield = $iter || nil, start_time = nil, observer_name = nil, saved_current_observer = nil, return_value = nil;
          if (self.nesting_level == null) self.nesting_level = nil;
          if (self.current_observer == null) self.current_observer = nil;
          if (self.rendering_level == null) self.rendering_level = nil;

          if (rendering == null) {
            rendering = nil;
          }
          TMP_37.$$p = null;
          try {
          if ((($a = typeof window.reactive_ruby_timing !== 'undefined') !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.nesting_level = $rb_plus((((($a = self.nesting_level) !== false && $a !== nil && $a != null) ? $a : 0)), 1);
            start_time = $scope.get('Time').$now().$to_f();
            observer_name = (function() {
            try {return ((function() {if ((($a = observer.$class()['$respond_to?']("name")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return observer.$class().$name()
              } else {
              return observer.$to_s()
            }; return nil; })()) } catch ($err) { 
              if (Opal.rescue($err, [$scope.get('StandardError')])) {
              return "object:" + (observer.$object_id())
              } else { throw $err; } }})();};
          saved_current_observer = self.current_observer;
          self.current_observer = observer;
          if (rendering !== false && rendering !== nil && rendering != null) {
            self.rendering_level = $rb_plus(self.rendering_level, 1)};
          return_value = Opal.yieldX($yield, []);
          return return_value;
          } finally {
            self.current_observer = saved_current_observer;
            if (rendering !== false && rendering !== nil && rendering != null) {
              self.rendering_level = $rb_minus(self.rendering_level, 1)};
            if ((($a = typeof window.reactive_ruby_timing !== 'undefined') !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              self.nesting_level = [0, $rb_minus(self.nesting_level, 1)].$max()};
            return_value;
          };
        }, TMP_37.$$arity = -2);
        Opal.defn(self, '$states', TMP_39 = function $$states() {
          var $a, $b, $c, TMP_38, self = this;
          if (self.states == null) self.states = nil;

          return ((($a = self.states) !== false && $a !== nil && $a != null) ? $a : self.states = ($b = ($c = $scope.get('Hash')).$new, $b.$$p = (TMP_38 = function(h, k){var self = TMP_38.$$s || this;
if (h == null) h = nil;if (k == null) k = nil;
          return h['$[]='](k, $hash2([], {}))}, TMP_38.$$s = self, TMP_38.$$arity = 2, TMP_38), $b).call($c));
        }, TMP_39.$$arity = 0);
        return ($a = ($b = ["new_observers", "current_observers", "observers_by_name"]).$each, $a.$$p = (TMP_40 = function(method_name){var self = TMP_40.$$s || this, $c, $d, TMP_41;
if (method_name == null) method_name = nil;
        return ($c = ($d = self).$define_method, $c.$$p = (TMP_41 = function(){var self = TMP_41.$$s || this, $e, $f, $g, TMP_42;

          return ((($e = self.$instance_variable_get("@" + (method_name))) !== false && $e !== nil && $e != null) ? $e : self.$instance_variable_set("@" + (method_name), ($f = ($g = $scope.get('Hash')).$new, $f.$$p = (TMP_42 = function(h, k){var self = TMP_42.$$s || this, $h, $i, TMP_43;
if (h == null) h = nil;if (k == null) k = nil;
            return h['$[]='](k, ($h = ($i = $scope.get('Hash')).$new, $h.$$p = (TMP_43 = function(h, k){var self = TMP_43.$$s || this;
if (h == null) h = nil;if (k == null) k = nil;
              return h['$[]='](k, [])}, TMP_43.$$s = self, TMP_43.$$arity = 2, TMP_43), $h).call($i))}, TMP_42.$$s = self, TMP_42.$$arity = 2, TMP_42), $f).call($g)))}, TMP_41.$$s = self, TMP_41.$$arity = 0, TMP_41), $c).call($d, method_name)}, TMP_40.$$s = self, TMP_40.$$arity = 1, TMP_40), $a).call($b);
      })(Opal.get_singleton_class(self));
    })($scope.base, null);
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["react/component/api"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$!', '$set_or_replace_state_or_prop', '$to_proc', '$private', '$raise', '$shallow_to_n', '$call']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $API, self = $API = $module($base, 'API');

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8;

        Opal.defn(self, '$dom_node', TMP_1 = function $$dom_node() {
          var $a, self = this;

          if ((($a = ((typeof ReactDOM === 'undefined' || typeof ReactDOM.findDOMNode === 'undefined'))['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return ReactDOM.findDOMNode(self.native);
          } else if ((($a = ((typeof React.findDOMNode === 'undefined'))['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return React.findDOMNode(self.native);
            } else {
            return self.native.getDOMNode;
          };
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$mounted?', TMP_2 = function() {
          var self = this;

          return self.native.isMounted();
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$force_update!', TMP_3 = function() {
          var self = this;

          return self.native.forceUpdate();
        }, TMP_3.$$arity = 0);

        Opal.defn(self, '$set_props', TMP_4 = function $$set_props(prop) {
          var $a, $b, self = this, $iter = TMP_4.$$p, block = $iter || nil;

          TMP_4.$$p = null;
          return ($a = ($b = self).$set_or_replace_state_or_prop, $a.$$p = block.$to_proc(), $a).call($b, prop, "setProps");
        }, TMP_4.$$arity = 1);

        Opal.defn(self, '$set_props!', TMP_5 = function(prop) {
          var $a, $b, self = this, $iter = TMP_5.$$p, block = $iter || nil;

          TMP_5.$$p = null;
          return ($a = ($b = self).$set_or_replace_state_or_prop, $a.$$p = block.$to_proc(), $a).call($b, prop, "replaceProps");
        }, TMP_5.$$arity = 1);

        Opal.defn(self, '$set_state', TMP_6 = function $$set_state(state) {
          var $a, $b, self = this, $iter = TMP_6.$$p, block = $iter || nil;

          TMP_6.$$p = null;
          return ($a = ($b = self).$set_or_replace_state_or_prop, $a.$$p = block.$to_proc(), $a).call($b, state, "setState");
        }, TMP_6.$$arity = 1);

        Opal.defn(self, '$set_state!', TMP_7 = function(state) {
          var $a, $b, self = this, $iter = TMP_7.$$p, block = $iter || nil;

          TMP_7.$$p = null;
          return ($a = ($b = self).$set_or_replace_state_or_prop, $a.$$p = block.$to_proc(), $a).call($b, state, "replaceState");
        }, TMP_7.$$arity = 1);

        self.$private();

        Opal.defn(self, '$set_or_replace_state_or_prop', TMP_8 = function $$set_or_replace_state_or_prop(state_or_prop, method) {
          var $a, self = this, $iter = TMP_8.$$p, block = $iter || nil;
          if (self["native"] == null) self["native"] = nil;

          TMP_8.$$p = null;
          if ((($a = self["native"]) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.$raise("No native ReactComponent associated")
          };
          
          self["native"][method](state_or_prop.$shallow_to_n(), function(){
            (function() {if (block !== false && block !== nil && block != null) {
            return block.$call()
            } else {
            return nil
          }; return nil; })()
          });
        ;
        }, TMP_8.$$arity = 2);
      })($scope.base)
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["react/component/class_methods"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $range = Opal.range, $hash2 = Opal.hash2, $hash = Opal.hash;

  Opal.add_stubs(['$==', '$[]', '$message', '$backtrace', '$>', '$length', '$!', '$append_backtrace', '$join', '$raise', '$<<', '$each', '$is_a?', '$type', '$define_method', '$render', '$instance_eval', '$to_proc', '$empty?', '$method_missing', '$haml_class_name', '$new', '$props_wrapper', '$validator', '$validate', '$+', '$name', '$count', '$default_props', '$build', '$first', '$delete', '$merge!', '$optional', '$requires', '$allow_undefined_props=', '$undefined_props', '$props', '$arity', '$last', '$pop', '$[]=', '$initial_state', '$initial_state=', '$define_state_methods', '$initialize_states', '$singleton_class', '$nil?', '$deprecation_warning', '$get_state', '$!=', '$set_state', '$native_mixins', '$static_call_backs', '$split', '$Native', '$to_n', '$add_item_to_tree', '$create_native_react_class', '$reverse', '$import_native_component', '$eval_native_react_component', '$class', '$inject']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $ClassMethods, self = $ClassMethods = $module($base, 'ClassMethods');

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_5, TMP_6, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_19, TMP_20, TMP_23, TMP_26, TMP_31, TMP_32, TMP_33, TMP_34, TMP_35, TMP_37, TMP_39;

        Opal.defn(self, '$reactrb_component?', TMP_1 = function() {
          var self = this;

          return true;
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$backtrace', TMP_2 = function $$backtrace($a_rest) {
          var $b, self = this, args;
          if (self.dont_catch_exceptions == null) self.dont_catch_exceptions = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          self.dont_catch_exceptions = (args['$[]'](0)['$==']("none"));
          return self.backtrace_off = ((($b = self.dont_catch_exceptions) !== false && $b !== nil && $b != null) ? $b : (args['$[]'](0)['$==']("off")));
        }, TMP_2.$$arity = -1);

        Opal.defn(self, '$process_exception', TMP_3 = function $$process_exception(e, component, reraise) {
          var $a, $b, $c, self = this, message = nil;
          if (self.dont_catch_exceptions == null) self.dont_catch_exceptions = nil;
          if (self.backtrace_off == null) self.backtrace_off = nil;

          if (reraise == null) {
            reraise = self.dont_catch_exceptions;
          }
          if ((($a = self.dont_catch_exceptions) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            message = ["Exception raised while rendering " + (component) + ": " + (e.$message())];
            if ((($a = ($b = ($c = e.$backtrace(), $c !== false && $c !== nil && $c != null ?$rb_gt(e.$backtrace().$length(), 1) : $c), $b !== false && $b !== nil && $b != null ?self.backtrace_off['$!']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              self.$append_backtrace(message, e.$backtrace())};
            console.error(message.$join("\n"));
          };
          if (reraise !== false && reraise !== nil && reraise != null) {
            return self.$raise(e)
            } else {
            return nil
          };
        }, TMP_3.$$arity = -3);

        Opal.defn(self, '$append_backtrace', TMP_5 = function $$append_backtrace(message_array, backtrace) {
          var $a, $b, TMP_4, self = this;

          message_array['$<<']("    " + (backtrace['$[]'](0)));
          return ($a = ($b = backtrace['$[]']($range(1, -1, false))).$each, $a.$$p = (TMP_4 = function(line){var self = TMP_4.$$s || this;
if (line == null) line = nil;
          return message_array['$<<'](line)}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4), $a).call($b);
        }, TMP_5.$$arity = 2);

        Opal.defn(self, '$render', TMP_6 = function $$render(container, params) {
          var $a, $b, TMP_7, $c, TMP_9, self = this, $iter = TMP_6.$$p, block = $iter || nil;

          if (container == null) {
            container = nil;
          }
          if (params == null) {
            params = $hash2([], {});
          }
          TMP_6.$$p = null;
          if (container !== false && container !== nil && container != null) {
            if ((($a = container['$is_a?']((($scope.get('React')).$$scope.get('Element')))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              container = container.$type()};
            return ($a = ($b = self).$define_method, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this, $c, $d, TMP_8;

            return ($c = ($d = (($scope.get('React')).$$scope.get('RenderingContext'))).$render, $c.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this, $e, $f;

              if (block !== false && block !== nil && block != null) {
                  return ($e = ($f = self).$instance_eval, $e.$$p = block.$to_proc(), $e).call($f)
                  } else {
                  return nil
                }}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $c).call($d, container, params)}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $a).call($b, "render");
            } else {
            return ($a = ($c = self).$define_method, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this, $d, $e;

            return ($d = ($e = self).$instance_eval, $d.$$p = block.$to_proc(), $d).call($e)}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $a).call($c, "render")
          };
        }, TMP_6.$$arity = -1);

        Opal.defn(self, '$method_missing', TMP_10 = function $$method_missing(name, $a_rest) {
          var $b, $c, $d, self = this, args, $iter = TMP_10.$$p, children = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }
          TMP_10.$$p = null;
          if ((($b = args['$empty?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            } else {
            ($b = ($c = $scope.get('Object')).$method_missing, $b.$$p = children.$to_proc(), $b).apply($c, [name].concat(Opal.to_a(args)))
          };
          return ($b = ($d = (($scope.get('React')).$$scope.get('RenderingContext'))).$render, $b.$$p = children.$to_proc(), $b).call($d, self, $hash2(["class"], {"class": (($scope.get('React')).$$scope.get('Element')).$haml_class_name(name)}));
        }, TMP_10.$$arity = -2);

        Opal.defn(self, '$validator', TMP_11 = function $$validator() {
          var $a, self = this;
          if (self.validator == null) self.validator = nil;

          return ((($a = self.validator) !== false && $a !== nil && $a != null) ? $a : self.validator = $scope.get('Validator').$new(self.$props_wrapper()));
        }, TMP_11.$$arity = 0);

        Opal.defn(self, '$prop_types', TMP_12 = function $$prop_types() {
          var $a, self = this;

          if ((($a = self.$validator()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return $hash2(["_componentValidator"], {"_componentValidator": 
              function(props, propName, componentName) {
                var errors = self.$validator().$validate($scope.get('Hash').$new(props));
                var error = new Error($rb_plus("In component `" + (self.$name()) + "`\n", (errors).$join("\n")));
                return (function() {if ((($a = $rb_gt((errors).$count(), 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return error;
              } else {
              return undefined;
            }; return nil; })();
              }
            })
            } else {
            return $hash2([], {})
          };
        }, TMP_12.$$arity = 0);

        Opal.defn(self, '$default_props', TMP_13 = function $$default_props() {
          var self = this;

          return self.$validator().$default_props();
        }, TMP_13.$$arity = 0);

        Opal.defn(self, '$params', TMP_14 = function $$params() {
          var $a, $b, self = this, $iter = TMP_14.$$p, block = $iter || nil;

          TMP_14.$$p = null;
          return ($a = ($b = self.$validator()).$build, $a.$$p = block.$to_proc(), $a).call($b);
        }, TMP_14.$$arity = 0);

        Opal.defn(self, '$props_wrapper', TMP_15 = function $$props_wrapper() {
          var $a, self = this;
          if (self.props_wrapper == null) self.props_wrapper = nil;

          return ((($a = self.props_wrapper) !== false && $a !== nil && $a != null) ? $a : self.props_wrapper = $scope.get('Class').$new($scope.get('PropsWrapper')));
        }, TMP_15.$$arity = 0);

        Opal.defn(self, '$param', TMP_16 = function $$param($a_rest) {
          var $b, self = this, args, options = nil, name = nil, default$ = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ((($b = args['$[]'](0)['$is_a?']($scope.get('Hash'))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            options = args['$[]'](0);
            name = options.$first()['$[]'](0);
            default$ = options.$first()['$[]'](1);
            options.$delete(name);
            options['$merge!']($hash2(["default"], {"default": default$}));
            } else {
            name = args['$[]'](0);
            options = ((($b = args['$[]'](1)) !== false && $b !== nil && $b != null) ? $b : $hash2([], {}));
          };
          if ((($b = options['$[]']("default")) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            return self.$validator().$optional(name, options)
            } else {
            return self.$validator().$requires(name, options)
          };
        }, TMP_16.$$arity = -1);

        Opal.defn(self, '$collect_other_params_as', TMP_19 = function $$collect_other_params_as(name) {
          var $a, $b, TMP_17, $c, TMP_18, self = this, validator_in_lexical_scope = nil, validator_in_lexial_scope = nil;

          (($a = [true]), $b = self.$validator(), $b['$allow_undefined_props='].apply($b, $a), $a[$a.length-1]);
          validator_in_lexical_scope = self.$validator();
          ($a = ($b = self.$props_wrapper()).$define_method, $a.$$p = (TMP_17 = function(){var self = TMP_17.$$s || this, $c;
            if (self._all_others == null) self._all_others = nil;

          return ((($c = self._all_others) !== false && $c !== nil && $c != null) ? $c : self._all_others = validator_in_lexical_scope.$undefined_props(self.$props()))}, TMP_17.$$s = self, TMP_17.$$arity = 0, TMP_17), $a).call($b, name);
          validator_in_lexial_scope = self.$validator();
          return ($a = ($c = self.$props_wrapper()).$define_method, $a.$$p = (TMP_18 = function(){var self = TMP_18.$$s || this, $d;
            if (self._all_others == null) self._all_others = nil;

          return ((($d = self._all_others) !== false && $d !== nil && $d != null) ? $d : self._all_others = validator_in_lexial_scope.$undefined_props(self.$props()))}, TMP_18.$$s = self, TMP_18.$$arity = 0, TMP_18), $a).call($c, name);
        }, TMP_19.$$arity = 1);

        Opal.defn(self, '$define_state', TMP_20 = function $$define_state($a_rest) {
          var $b, $c, TMP_21, $d, TMP_22, self = this, states, $iter = TMP_20.$$p, block = $iter || nil, default_initial_value = nil, states_hash = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          states = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            states[$arg_idx - 0] = arguments[$arg_idx];
          }
          TMP_20.$$p = null;
          default_initial_value = (function() {if ((($b = ((($c = block !== false && block !== nil && block != null) ? block.$arity()['$=='](0) : block))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            return Opal.yieldX(block, []);
            } else {
            return nil
          }; return nil; })();
          states_hash = (function() {if ((($b = (states.$last()['$is_a?']($scope.get('Hash')))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            return states.$pop()
            } else {
            return $hash2([], {})
          }; return nil; })();
          ($b = ($c = states).$each, $b.$$p = (TMP_21 = function(name){var self = TMP_21.$$s || this;
if (name == null) name = nil;
          return states_hash['$[]='](name, default_initial_value)}, TMP_21.$$s = self, TMP_21.$$arity = 1, TMP_21), $b).call($c);
          (($b = self, ((($d = $b.$initial_state()) !== false && $d !== nil && $d != null) ? $d : $b['$initial_state=']($hash2([], {})))))['$merge!'](states_hash);
          return ($b = ($d = states_hash).$each, $b.$$p = (TMP_22 = function(name, initial_value){var self = TMP_22.$$s || this, $a, $e;
if (name == null) name = nil;if (initial_value == null) initial_value = nil;
          return ($a = ($e = self).$define_state_methods, $a.$$p = block.$to_proc(), $a).call($e, self, name)}, TMP_22.$$s = self, TMP_22.$$arity = 2, TMP_22), $b).call($d);
        }, TMP_20.$$arity = -1);

        Opal.defn(self, '$export_state', TMP_23 = function $$export_state($a_rest) {
          var $b, $c, TMP_24, $d, TMP_25, self = this, states, $iter = TMP_23.$$p, block = $iter || nil, default_initial_value = nil, states_hash = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          states = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            states[$arg_idx - 0] = arguments[$arg_idx];
          }
          TMP_23.$$p = null;
          default_initial_value = (function() {if ((($b = ((($c = block !== false && block !== nil && block != null) ? block.$arity()['$=='](0) : block))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            return Opal.yieldX(block, []);
            } else {
            return nil
          }; return nil; })();
          states_hash = (function() {if ((($b = (states.$last()['$is_a?']($scope.get('Hash')))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            return states.$pop()
            } else {
            return $hash2([], {})
          }; return nil; })();
          ($b = ($c = states).$each, $b.$$p = (TMP_24 = function(name){var self = TMP_24.$$s || this;
if (name == null) name = nil;
          return states_hash['$[]='](name, default_initial_value)}, TMP_24.$$s = self, TMP_24.$$arity = 1, TMP_24), $b).call($c);
          $scope.get('State').$initialize_states(self, states_hash);
          return ($b = ($d = states_hash).$each, $b.$$p = (TMP_25 = function(name, initial_value){var self = TMP_25.$$s || this, $a, $e, $f;
if (name == null) name = nil;if (initial_value == null) initial_value = nil;
          ($a = ($e = self).$define_state_methods, $a.$$p = block.$to_proc(), $a).call($e, self, name, self);
            return ($a = ($f = self).$define_state_methods, $a.$$p = block.$to_proc(), $a).call($f, self.$singleton_class(), name, self);}, TMP_25.$$s = self, TMP_25.$$arity = 2, TMP_25), $b).call($d);
        }, TMP_23.$$arity = -1);

        Opal.defn(self, '$define_state_methods', TMP_26 = function $$define_state_methods(this$, name, from) {
          var $a, $b, TMP_27, $c, TMP_28, $d, TMP_29, self = this, $iter = TMP_26.$$p, block = $iter || nil;

          if (from == null) {
            from = nil;
          }
          TMP_26.$$p = null;
          ($a = ($b = this$).$define_method, $a.$$p = (TMP_27 = function(){var self = TMP_27.$$s || this, $c, $d;

          if ((($c = ((($d = from['$nil?']()) !== false && $d !== nil && $d != null) ? $d : from['$=='](this$))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              (($scope.get('React')).$$scope.get('Component')).$deprecation_warning("Direct access to state `" + (name) + "`.  Use `state." + (name) + "` instead.")};
            return $scope.get('State').$get_state(((($c = from) !== false && $c !== nil && $c != null) ? $c : self), name);}, TMP_27.$$s = self, TMP_27.$$arity = 0, TMP_27), $a).call($b, "" + (name));
          ($a = ($c = this$).$define_method, $a.$$p = (TMP_28 = function(new_state){var self = TMP_28.$$s || this, $d, $e;
if (new_state == null) new_state = nil;
          (($scope.get('React')).$$scope.get('Component')).$deprecation_warning("Direct assignment to state `" + (name) + "`.  Use `" + ((function() {if ((($d = ((($e = from !== false && from !== nil && from != null) ? from['$!='](this$) : from))) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
              return from
              } else {
              return "state"
            }; return nil; })()) + "." + (name) + "!` instead.");
            if ((($d = (($e = block !== false && block !== nil && block != null) ? $rb_gt(block.$arity(), 0) : block)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
              Opal.yieldX(block, [name, $scope.get('State').$get_state(((($d = from) !== false && $d !== nil && $d != null) ? $d : self), name), new_state])};
            return $scope.get('State').$set_state(((($d = from) !== false && $d !== nil && $d != null) ? $d : self), name, new_state);}, TMP_28.$$s = self, TMP_28.$$arity = 1, TMP_28), $a).call($c, "" + (name) + "=");
          return ($a = ($d = this$).$define_method, $a.$$p = (TMP_29 = function($e_rest){var self = TMP_29.$$s || this, args, $f, $g, TMP_30, current_value = nil, current_state = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
          if ((($f = ((($g = from['$nil?']()) !== false && $g !== nil && $g != null) ? $g : from['$=='](this$))) !== nil && $f != null && (!$f.$$is_boolean || $f == true))) {
              (($scope.get('React')).$$scope.get('Component')).$deprecation_warning("Direct access to state `" + (name) + "`.  Use `state." + (name) + "` instead.")};
            if ((($f = $rb_gt(args.$count(), 0)) !== nil && $f != null && (!$f.$$is_boolean || $f == true))) {
              if ((($f = (($g = block !== false && block !== nil && block != null) ? $rb_gt(block.$arity(), 0) : block)) !== nil && $f != null && (!$f.$$is_boolean || $f == true))) {
                Opal.yieldX(block, [name, $scope.get('State').$get_state(((($f = from) !== false && $f !== nil && $f != null) ? $f : self), name), args['$[]'](0)])};
              current_value = $scope.get('State').$get_state(((($f = from) !== false && $f !== nil && $f != null) ? $f : self), name);
              $scope.get('State').$set_state(((($f = from) !== false && $f !== nil && $f != null) ? $f : self), name, args['$[]'](0));
              return current_value;
              } else {
              current_state = $scope.get('State').$get_state(((($f = from) !== false && $f !== nil && $f != null) ? $f : self), name);
              if ((($f = (($g = block !== false && block !== nil && block != null) ? $rb_gt(block.$arity(), 0) : block)) !== nil && $f != null && (!$f.$$is_boolean || $f == true))) {
                Opal.yieldX(block, [name, $scope.get('State').$get_state(((($f = from) !== false && $f !== nil && $f != null) ? $f : self), name), current_state])};
              $scope.get('State').$set_state(((($f = from) !== false && $f !== nil && $f != null) ? $f : self), name, current_state);
              return ($f = ($g = $scope.get('Observable')).$new, $f.$$p = (TMP_30 = function(update){var self = TMP_30.$$s || this, $e, $h;
if (update == null) update = nil;
              if ((($e = (($h = block !== false && block !== nil && block != null) ? $rb_gt(block.$arity(), 0) : block)) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
                  Opal.yieldX(block, [name, $scope.get('State').$get_state(((($e = from) !== false && $e !== nil && $e != null) ? $e : self), name), update])};
                return $scope.get('State').$set_state(((($e = from) !== false && $e !== nil && $e != null) ? $e : self), name, update);}, TMP_30.$$s = self, TMP_30.$$arity = 1, TMP_30), $f).call($g, current_state);
            };}, TMP_29.$$s = self, TMP_29.$$arity = -1, TMP_29), $a).call($d, "" + (name) + "!");
        }, TMP_26.$$arity = -3);

        Opal.defn(self, '$native_mixin', TMP_31 = function $$native_mixin(item) {
          var self = this;

          return self.$native_mixins()['$<<'](item);
        }, TMP_31.$$arity = 1);

        Opal.defn(self, '$native_mixins', TMP_32 = function $$native_mixins() {
          var $a, self = this;
          if (self.native_mixins == null) self.native_mixins = nil;

          return ((($a = self.native_mixins) !== false && $a !== nil && $a != null) ? $a : self.native_mixins = []);
        }, TMP_32.$$arity = 0);

        Opal.defn(self, '$static_call_back', TMP_33 = function $$static_call_back(name) {
          var self = this, $iter = TMP_33.$$p, block = $iter || nil;

          TMP_33.$$p = null;
          return self.$static_call_backs()['$[]='](name, block);
        }, TMP_33.$$arity = 1);

        Opal.defn(self, '$static_call_backs', TMP_34 = function $$static_call_backs() {
          var $a, self = this;
          if (self.static_call_backs == null) self.static_call_backs = nil;

          return ((($a = self.static_call_backs) !== false && $a !== nil && $a != null) ? $a : self.static_call_backs = $hash2([], {}));
        }, TMP_34.$$arity = 0);

        Opal.defn(self, '$export_component', TMP_35 = function $$export_component(opts) {
          var $a, self = this, export_name = nil, first_name = nil;

          if (opts == null) {
            opts = $hash2([], {});
          }
          export_name = (((($a = opts['$[]']("as")) !== false && $a !== nil && $a != null) ? $a : self.$name())).$split("::");
          first_name = export_name.$first();
          return self.$Native(window)['$[]='](first_name, self.$add_item_to_tree(self.$Native(window)['$[]'](first_name), $rb_plus([(($scope.get('React')).$$scope.get('API')).$create_native_react_class(self)], export_name['$[]']($range(1, -1, false)).$reverse())).$to_n());
        }, TMP_35.$$arity = -1);

        Opal.defn(self, '$imports', TMP_37 = function $$imports(component_name) {
          var $a, $b, TMP_36, self = this, e = nil;

          try {
          try {
            (($scope.get('React')).$$scope.get('API')).$import_native_component(self, (($scope.get('React')).$$scope.get('API')).$eval_native_react_component(component_name));
            return ($a = ($b = self).$define_method, $a.$$p = (TMP_36 = function(){var self = TMP_36.$$s || this;

            return nil}, TMP_36.$$s = self, TMP_36.$$arity = 0, TMP_36), $a).call($b, "render");
          } catch ($err) {
            if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
              try {
                return self.$raise("" + (self) + " cannot import '" + (component_name) + "': " + (e.$message()) + ".")
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          }
          } finally {
            self
          };
        }, TMP_37.$$arity = 1);

        Opal.defn(self, '$add_item_to_tree', TMP_39 = function $$add_item_to_tree(current_tree, new_item) {
          var $a, $b, TMP_38, self = this;

          if ((($a = ((($b = self.$Native(current_tree).$class()['$!=']((($scope.get('Native')).$$scope.get('Object')))) !== false && $b !== nil && $b != null) ? $b : new_item.$length()['$=='](1))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return ($a = ($b = new_item).$inject, $a.$$p = (TMP_38 = function(a, e){var self = TMP_38.$$s || this;
if (a == null) a = nil;if (e == null) e = nil;
            return $hash(e, a)}, TMP_38.$$s = self, TMP_38.$$arity = 2, TMP_38), $a).call($b)
            } else {
            self.$Native(current_tree)['$[]='](new_item.$last(), self.$add_item_to_tree(self.$Native(current_tree)['$[]'](new_item.$last()), new_item['$[]']($range(0, -2, false))));
            return current_tree;
          };
        }, TMP_39.$$arity = 2);
      })($scope.base)
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["react/component/props_wrapper"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$deprecation_warning', '$send', '$to_proc', '$params', '$attr_reader', '$==', '$define_method', '$value_for', '$>', '$count', '$call', '$[]', '$props', '$fetch_from_cache', '$respond_to?', '$_react_param_conversion', '$is_a?', '$collect', '$private', '$cache', '$equal?', '$tap', '$[]=', '$new', '$component', '$instance_variable_get']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $scope = self.$$scope, TMP_1;

      Opal.defn(self, '$deprecated_params_method', TMP_1 = function $$deprecated_params_method(name, $a_rest) {
        var $b, $c, self = this, args, $iter = TMP_1.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        TMP_1.$$p = null;
        (($scope.get('React')).$$scope.get('Component')).$deprecation_warning("Direct access to param `" + (name) + "`.  Use `params." + (name) + "` instead.");
        return ($b = ($c = self.$params()).$send, $b.$$p = block.$to_proc(), $b).apply($c, [name].concat(Opal.to_a(args)));
      }, TMP_1.$$arity = -2);

      (function($base, $super) {
        function $PropsWrapper(){};
        var self = $PropsWrapper = $klass($base, $super, 'PropsWrapper', $PropsWrapper);

        var def = self.$$proto, $scope = self.$$scope, TMP_8, TMP_9, TMP_10, TMP_12, TMP_14, TMP_15, TMP_16;

        def.cache = nil;
        self.$attr_reader("component");

        Opal.defs(self, '$define_param', TMP_8 = function $$define_param(name, param_type) {
          var $a, $b, TMP_2, $c, TMP_3, $d, TMP_4, $e, TMP_5, self = this;

          if (param_type['$==']($scope.get('Observable'))) {
            ($a = ($b = self).$define_method, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

            return self.$value_for(name)}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2), $a).call($b, "" + (name));
            return ($a = ($c = self).$define_method, $a.$$p = (TMP_3 = function($d_rest){var self = TMP_3.$$s || this, args, $e, current_value = nil;
              if (self.dont_update_state == null) self.dont_update_state = nil;

              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              args = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                args[$arg_idx - 0] = arguments[$arg_idx];
              }
            current_value = self.$value_for(name);
              if ((($e = $rb_gt(args.$count(), 0)) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
                self.$props()['$[]'](name).$call(args['$[]'](0));
                return current_value;
                } else {
                
                try {(function() {if ((($e = self.dont_update_state) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
                  return nil
                  } else {
                  return self.$props()['$[]'](name).$call(current_value)
                }; return nil; })() } catch ($err) { 
                  if (Opal.rescue($err, [$scope.get('StandardError')])) {
                  nil
                  } else { throw $err; } };
                return self.$props()['$[]'](name);
              };}, TMP_3.$$s = self, TMP_3.$$arity = -1, TMP_3), $a).call($c, "" + (name) + "!");
          } else if (param_type['$==']($scope.get('Proc'))) {
            return ($a = ($d = self).$define_method, $a.$$p = (TMP_4 = function($e_rest){var self = TMP_4.$$s || this, block, args, $f, $g;

              block = TMP_4.$$p || nil, TMP_4.$$p = null;
              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              args = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                args[$arg_idx - 0] = arguments[$arg_idx];
              }
            if ((($f = self.$props()['$[]'](name)) !== nil && $f != null && (!$f.$$is_boolean || $f == true))) {
                return ($f = ($g = self.$props()['$[]'](name)).$call, $f.$$p = block.$to_proc(), $f).apply($g, Opal.to_a(args))
                } else {
                return nil
              }}, TMP_4.$$s = self, TMP_4.$$arity = -1, TMP_4), $a).call($d, "" + (name))
            } else {
            return ($a = ($e = self).$define_method, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this, $f, $g, TMP_6;

            return ($f = ($g = self).$fetch_from_cache, $f.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this, $h, $i, TMP_7;

              if ((($h = param_type['$respond_to?']("_react_param_conversion")) !== nil && $h != null && (!$h.$$is_boolean || $h == true))) {
                  return param_type.$_react_param_conversion(self.$props()['$[]'](name))
                } else if ((($h = ($i = param_type['$is_a?']($scope.get('Array')), $i !== false && $i !== nil && $i != null ?param_type['$[]'](0)['$respond_to?']("_react_param_conversion") : $i)) !== nil && $h != null && (!$h.$$is_boolean || $h == true))) {
                  return ($h = ($i = self.$props()['$[]'](name)).$collect, $h.$$p = (TMP_7 = function(param){var self = TMP_7.$$s || this;
if (param == null) param = nil;
                  return param_type['$[]'](0).$_react_param_conversion(param)}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $h).call($i)
                  } else {
                  return self.$props()['$[]'](name)
                }}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $f).call($g, name)}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($e, "" + (name))
          };
        }, TMP_8.$$arity = 2);

        Opal.defn(self, '$initialize', TMP_9 = function $$initialize(component) {
          var self = this;

          return self.component = component;
        }, TMP_9.$$arity = 1);

        Opal.defn(self, '$[]', TMP_10 = function(prop) {
          var self = this;

          return self.$props()['$[]'](prop);
        }, TMP_10.$$arity = 1);

        self.$private();

        Opal.defn(self, '$fetch_from_cache', TMP_12 = function $$fetch_from_cache(name) {
          var $a, $b, TMP_11, self = this, $iter = TMP_12.$$p, $yield = $iter || nil, last = nil, value = nil;

          TMP_12.$$p = null;
          $b = self.$cache()['$[]'](name), $a = Opal.to_ary($b), last = ($a[0] == null ? nil : $a[0]), value = ($a[1] == null ? nil : $a[1]), $b;
          if ((($a = last['$equal?'](self.$props()['$[]'](name))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return value};
          return ($a = ($b = Opal.yieldX($yield, [])).$tap, $a.$$p = (TMP_11 = function(value){var self = TMP_11.$$s || this;
if (value == null) value = nil;
          return self.$cache()['$[]='](name, [self.$props()['$[]'](name), value])}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11), $a).call($b);
        }, TMP_12.$$arity = 1);

        Opal.defn(self, '$cache', TMP_14 = function $$cache() {
          var $a, $b, $c, TMP_13, self = this;

          return ((($a = self.cache) !== false && $a !== nil && $a != null) ? $a : self.cache = ($b = ($c = $scope.get('Hash')).$new, $b.$$p = (TMP_13 = function(h, k){var self = TMP_13.$$s || this;
if (h == null) h = nil;if (k == null) k = nil;
          return h['$[]='](k, [])}, TMP_13.$$s = self, TMP_13.$$arity = 2, TMP_13), $b).call($c));
        }, TMP_14.$$arity = 0);

        Opal.defn(self, '$props', TMP_15 = function $$props() {
          var self = this;

          return self.$component().$props();
        }, TMP_15.$$arity = 0);

        return (Opal.defn(self, '$value_for', TMP_16 = function $$value_for(name) {
          var $a, self = this;

          if ((($a = self['$[]'](name)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self['$[]'](name).$instance_variable_get("@value")
            } else {
            return nil
          };
        }, TMP_16.$$arity = 1), nil) && 'value_for';
      })($scope.base, null);
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["react/component"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash = Opal.hash;

  Opal.add_stubs(['$require', '$include', '$class_eval', '$class_attribute', '$define_callback', '$extend', '$name', '$include?', '$<<', '$log', '$call', '$[]', '$params', '$event_camelize', '$to_s', '$on_opal_client?', '$load_context', '$initial_state', '$set_state!', '$initialize_states', '$set_state_context_to', '$run_callback', '$process_exception', '$class', '$update_states_to_observe', '$new', '$remove', '$attr_reader', '$==', '$set_state', '$to_f', '$now', '$method_defined?', '$raise', '$render', '$respond_to?', '$waiting_on_resources', '$define_state', '$to_proc']);
  self.$require("react/ext/string");
  self.$require("react/ext/hash");
  self.$require("active_support/core_ext/class/attribute");
  self.$require("react/callbacks");
  self.$require("react/rendering_context");
  self.$require("react/observable");
  self.$require("react/state");
  self.$require("react/component/api");
  self.$require("react/component/class_methods");
  self.$require("react/component/props_wrapper");
  self.$require("native");
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_4, TMP_5, TMP_7, TMP_9, TMP_11, TMP_13, TMP_15, TMP_17, TMP_18, $a, TMP_19, TMP_22, TMP_23, TMP_24;

      Opal.defs(self, '$included', TMP_2 = function $$included(base) {
        var $a, $b, TMP_1, self = this;

        base.$include($scope.get('API'));
        base.$include($scope.get('Callbacks'));
        base.$include($scope.get('Tags'));
        base.$include($scope.get('DslInstanceMethods'));
        base.$include($scope.get('ShouldComponentUpdate'));
        ($a = ($b = base).$class_eval, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this;

        self.$class_attribute("initial_state");
          self.$define_callback("before_mount");
          self.$define_callback("after_mount");
          self.$define_callback("before_receive_props");
          self.$define_callback("before_update");
          self.$define_callback("after_update");
          return self.$define_callback("before_unmount");}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1), $a).call($b);
        return base.$extend($scope.get('ClassMethods'));
      }, TMP_2.$$arity = 1);

      Opal.defs(self, '$deprecation_warning', TMP_3 = function $$deprecation_warning(message) {
        var $a, self = this;
        if (self.deprecation_messages == null) self.deprecation_messages = nil;

        ((($a = self.deprecation_messages) !== false && $a !== nil && $a != null) ? $a : self.deprecation_messages = []);
        message = "Warning: Deprecated feature used in " + (self.$name()) + ". " + (message);
        if ((($a = self.deprecation_messages['$include?'](message)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil
          } else {
          self.deprecation_messages['$<<'](message);
          return $scope.get('IsomorphicHelpers').$log(message, "warning");
        };
      }, TMP_3.$$arity = 1);

      Opal.defn(self, '$initialize', TMP_4 = function $$initialize(native_element) {
        var self = this;

        return self["native"] = native_element;
      }, TMP_4.$$arity = 1);

      Opal.defn(self, '$emit', TMP_5 = function $$emit(event_name, $a_rest) {
        var $b, self = this, args;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        return ($b = self.$params()['$[]']("_on" + (event_name.$to_s().$event_camelize()))).$call.apply($b, Opal.to_a(args));
      }, TMP_5.$$arity = -2);

      Opal.defn(self, '$component_will_mount', TMP_7 = function $$component_will_mount() {
        var $a, $b, TMP_6, self = this, e = nil;

        try {
          if ((($a = $scope.get('IsomorphicHelpers')['$on_opal_client?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            $scope.get('IsomorphicHelpers').$load_context(true)};
          if ((($a = self.$initial_state()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self['$set_state!'](self.$initial_state())};
          $scope.get('State').$initialize_states(self, self.$initial_state());
          return ($a = ($b = $scope.get('State')).$set_state_context_to, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

          return self.$run_callback("before_mount")}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($b, self);
        } catch ($err) {
          if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
            try {
              return self.$class().$process_exception(e, self)
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        };
      }, TMP_7.$$arity = 0);

      Opal.defn(self, '$component_did_mount', TMP_9 = function $$component_did_mount() {
        var $a, $b, TMP_8, self = this, e = nil;

        try {
          return ($a = ($b = $scope.get('State')).$set_state_context_to, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this;

          self.$run_callback("after_mount");
            return $scope.get('State').$update_states_to_observe();}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $a).call($b, self)
        } catch ($err) {
          if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
            try {
              return self.$class().$process_exception(e, self)
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        };
      }, TMP_9.$$arity = 0);

      Opal.defn(self, '$component_will_receive_props', TMP_11 = function $$component_will_receive_props(next_props) {
        var $a, $b, TMP_10, self = this, e = nil;

        try {
          return ($a = ($b = $scope.get('State')).$set_state_context_to, $a.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this;

          return self.$run_callback("before_receive_props", $scope.get('Hash').$new(next_props))}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10), $a).call($b, self)
        } catch ($err) {
          if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
            try {
              return self.$class().$process_exception(e, self)
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        };
      }, TMP_11.$$arity = 1);

      Opal.defn(self, '$component_will_update', TMP_13 = function $$component_will_update(next_props, next_state) {
        var $a, $b, TMP_12, self = this, e = nil;

        try {
          return ($a = ($b = $scope.get('State')).$set_state_context_to, $a.$$p = (TMP_12 = function(){var self = TMP_12.$$s || this;

          return self.$run_callback("before_update", $scope.get('Hash').$new(next_props), $scope.get('Hash').$new(next_state))}, TMP_12.$$s = self, TMP_12.$$arity = 0, TMP_12), $a).call($b, self)
        } catch ($err) {
          if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
            try {
              return self.$class().$process_exception(e, self)
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        };
      }, TMP_13.$$arity = 2);

      Opal.defn(self, '$component_did_update', TMP_15 = function $$component_did_update(prev_props, prev_state) {
        var $a, $b, TMP_14, self = this, e = nil;

        try {
          return ($a = ($b = $scope.get('State')).$set_state_context_to, $a.$$p = (TMP_14 = function(){var self = TMP_14.$$s || this;

          self.$run_callback("after_update", $scope.get('Hash').$new(prev_props), $scope.get('Hash').$new(prev_state));
            return $scope.get('State').$update_states_to_observe();}, TMP_14.$$s = self, TMP_14.$$arity = 0, TMP_14), $a).call($b, self)
        } catch ($err) {
          if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
            try {
              return self.$class().$process_exception(e, self)
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        };
      }, TMP_15.$$arity = 2);

      Opal.defn(self, '$component_will_unmount', TMP_17 = function $$component_will_unmount() {
        var $a, $b, TMP_16, self = this, e = nil;

        try {
          return ($a = ($b = $scope.get('State')).$set_state_context_to, $a.$$p = (TMP_16 = function(){var self = TMP_16.$$s || this;

          self.$run_callback("before_unmount");
            return $scope.get('State').$remove();}, TMP_16.$$s = self, TMP_16.$$arity = 0, TMP_16), $a).call($b, self)
        } catch ($err) {
          if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
            try {
              return self.$class().$process_exception(e, self)
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        };
      }, TMP_17.$$arity = 0);

      self.$attr_reader("waiting_on_resources");

      Opal.defn(self, '$update_react_js_state', TMP_18 = function $$update_react_js_state(object, name, value) {
        var self = this;

        if (object !== false && object !== nil && object != null) {
          if (object['$=='](self)) {
            } else {
            name = "" + (object.$class()) + "." + (name)
          };
          return self.$set_state($hash("***_state_updated_at-***", $scope.get('Time').$now().$to_f(), name, value));
          } else {
          return self.$set_state($hash(name, value))
        };
      }, TMP_18.$$arity = 3);

      if ((($a = self['$method_defined?']("render")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        Opal.defn(self, '$render', TMP_19 = function $$render() {
          var self = this;

          return self.$raise("no render defined");
        }, TMP_19.$$arity = 0)
      };

      Opal.defn(self, '$_render_wrapper', TMP_22 = function $$_render_wrapper() {
        var $a, $b, TMP_20, self = this, e = nil;

        try {
          return ($a = ($b = $scope.get('State')).$set_state_context_to, $a.$$p = (TMP_20 = function(){var self = TMP_20.$$s || this, $c, $d, TMP_21, element = nil;

          element = ($c = ($d = (($scope.get('React')).$$scope.get('RenderingContext'))).$render, $c.$$p = (TMP_21 = function(){var self = TMP_21.$$s || this, $e;

            return ((($e = self.$render()) !== false && $e !== nil && $e != null) ? $e : "")}, TMP_21.$$s = self, TMP_21.$$arity = 0, TMP_21), $c).call($d, nil);
            if ((($c = element['$respond_to?']("waiting_on_resources")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              self.waiting_on_resources = element.$waiting_on_resources()};
            return element;}, TMP_20.$$s = self, TMP_20.$$arity = 0, TMP_20), $a).call($b, self, true)
        } catch ($err) {
          if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
            try {
              return self.$class().$process_exception(e, self)
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        };
      }, TMP_22.$$arity = 0);

      Opal.defn(self, '$watch', TMP_23 = function $$watch(value) {
        var self = this, $iter = TMP_23.$$p, on_change = $iter || nil;

        TMP_23.$$p = null;
        return $scope.get('Observable').$new(value, on_change);
      }, TMP_23.$$arity = 1);

      Opal.defn(self, '$define_state', TMP_24 = function $$define_state($a_rest) {
        var $b, $c, self = this, args, $iter = TMP_24.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        TMP_24.$$p = null;
        return $scope.get('State').$initialize_states(self, ($b = ($c = self.$class()).$define_state, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args)));
      }, TMP_24.$$arity = -1);
    })($scope.base)
  })($scope.base);
};
/* Generated by Opal 0.10.3 */
Opal.modules["react/children"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$include', '$to_enum', '$length', '$>', '$new', '$call', '$<<', '$alias_method']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Children(){};
      var self = $Children = $klass($base, $super, 'Children', $Children);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_4;

      def.children = def.length = nil;
      self.$include($scope.get('Enumerable'));

      Opal.defn(self, '$initialize', TMP_1 = function $$initialize(children) {
        var self = this;

        return self.children = children;
      }, TMP_1.$$arity = 1);

      Opal.defn(self, '$each', TMP_2 = function $$each() {
        var $a, $b, TMP_3, self = this, $iter = TMP_2.$$p, block = $iter || nil, collection = nil, element = nil;

        TMP_2.$$p = null;
        if ((block !== nil)) {
          } else {
          return ($a = ($b = self).$to_enum, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

          return self.$length()}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $a).call($b, "each")
        };
        if ((($a = $rb_gt(self.$length(), 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          return []
        };
        collection = [];
        
        React.Children.forEach(self.children, function(context){
          element = (($scope.get('React')).$$scope.get('Element')).$new(context)
        block.$call(element)
        collection['$<<'](element)
        })
      ;
        return collection;
      }, TMP_2.$$arity = 0);

      Opal.defn(self, '$length', TMP_4 = function $$length() {
        var $a, self = this;

        return ((($a = self.length) !== false && $a !== nil && $a != null) ? $a : self.length = React.Children.count(self.children));
      }, TMP_4.$$arity = 0);

      return self.$alias_method("size", "length");
    })($scope.base, null)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["react/component/dsl_instance_methods"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$new', '$props_wrapper', '$class']);
  self.$require("react/children");
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $DslInstanceMethods, self = $DslInstanceMethods = $module($base, 'DslInstanceMethods');

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5;

        Opal.defn(self, '$children', TMP_1 = function $$children() {
          var self = this;
          if (self["native"] == null) self["native"] = nil;

          return $scope.get('Children').$new(self["native"].props.children);
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$params', TMP_2 = function $$params() {
          var $a, self = this;
          if (self.params == null) self.params = nil;

          return ((($a = self.params) !== false && $a !== nil && $a != null) ? $a : self.params = self.$class().$props_wrapper().$new(self));
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$props', TMP_3 = function $$props() {
          var self = this;
          if (self["native"] == null) self["native"] = nil;

          return $scope.get('Hash').$new(self["native"].props);
        }, TMP_3.$$arity = 0);

        Opal.defn(self, '$refs', TMP_4 = function $$refs() {
          var self = this;
          if (self["native"] == null) self["native"] = nil;

          return $scope.get('Hash').$new(self["native"].refs);
        }, TMP_4.$$arity = 0);

        Opal.defn(self, '$state', TMP_5 = function $$state() {
          var $a, self = this;
          if (self.state_wrapper == null) self.state_wrapper = nil;
          if (self["native"] == null) self["native"] = nil;

          return ((($a = self.state_wrapper) !== false && $a !== nil && $a != null) ? $a : self.state_wrapper = $scope.get('StateWrapper').$new(self["native"], self));
        }, TMP_5.$$arity = 0);
      })($scope.base)
    })($scope.base)
  })($scope.base);
};
/* Generated by Opal 0.10.3 */
Opal.modules["react/component/should_component_update"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$set_state_context_to', '$new', '$respond_to?', '$!', '$call_needs_update', '$props_changed?', '$native_state_changed?', '$define_singleton_method', '$needs_update?', '$deprecation_warning', '$!=', '$sort', '$keys', '$props', '$detect']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $ShouldComponentUpdate, self = $ShouldComponentUpdate = $module($base, 'ShouldComponentUpdate');

        var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_5, TMP_6, TMP_8;

        Opal.defn(self, '$should_component_update?', TMP_2 = function(native_next_props, native_next_state) {
          var $a, $b, TMP_1, self = this;

          return ($a = ($b = $scope.get('State')).$set_state_context_to, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $c, next_params = nil;

          next_params = $scope.get('Hash').$new(native_next_props);
            if ((($c = self['$respond_to?']("needs_update?")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return self.$call_needs_update(next_params, native_next_state)['$!']()['$!']()
              } else {
              return (((($c = self['$props_changed?'](next_params)) !== false && $c !== nil && $c != null) ? $c : self['$native_state_changed?'](native_next_state)))['$!']()['$!']()
            };}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1), $a).call($b, self, false);
        }, TMP_2.$$arity = 2);

        Opal.defn(self, '$call_needs_update', TMP_5 = function $$call_needs_update(next_params, native_next_state) {
          var $a, $b, TMP_3, $c, TMP_4, self = this, component = nil, next_state = nil;

          component = self;
          ($a = ($b = next_params).$define_singleton_method, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

          return component['$props_changed?'](self)}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $a).call($b, "changed?");
          next_state = $scope.get('Hash').$new(native_next_state);
          ($a = ($c = next_state).$define_singleton_method, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

          return component['$native_state_changed?'](native_next_state)}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($c, "changed?");
          return self['$needs_update?'](next_params, next_state);
        }, TMP_5.$$arity = 2);

        Opal.defn(self, '$native_state_changed?', TMP_6 = function(next_state) {
          var self = this;
          if (self["native"] == null) self["native"] = nil;

          
          var current_state = self["native"].state
          var normalized_next_state =
            !next_state || Object.keys(next_state).length === 0 || nil == next_state ?
            false : next_state
          var normalized_current_state =
            !current_state || Object.keys(current_state).length === 0 || nil == current_state ?
            false : current_state
          if (!normalized_current_state != !normalized_next_state) return(true)
          if (!normalized_current_state && !normalized_next_state) return(false)
          if (!normalized_current_state['***_state_updated_at-***'] ||
              !normalized_next_state['***_state_updated_at-***']) return(true)
          return (normalized_current_state['***_state_updated_at-***'] !=
                  normalized_next_state['***_state_updated_at-***'])
        ;
        }, TMP_6.$$arity = 1);

        Opal.defn(self, '$props_changed?', TMP_8 = function(next_params) {
          var $a, $b, $c, TMP_7, self = this;

          $scope.get('Component').$deprecation_warning("Using shallow incoming params comparison.\n" + "Do a require \"reactrb/deep-compare, to get 0.9 behavior");
          return ((($a = (self.$props().$keys().$sort()['$!='](next_params.$keys().$sort()))) !== false && $a !== nil && $a != null) ? $a : ($b = ($c = next_params).$detect, $b.$$p = (TMP_7 = function(k, v){var self = TMP_7.$$s || this;
            if (self["native"] == null) self["native"] = nil;
if (k == null) k = nil;if (v == null) v = nil;
          return v != self["native"].props[k];}, TMP_7.$$s = self, TMP_7.$$arity = 2, TMP_7), $b).call($c));
        }, TMP_8.$$arity = 1);
      })($scope.base)
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["react/element"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $hash = Opal.hash;

  Opal.add_stubs(['$require', '$include', '$alias_native', '$attr_reader', '$attr_accessor', '$each', '$merge_event_prop!', '$to_proc', '$to_n', '$shallow_to_n', '$properties', '$empty?', '$render', '$convert_props', '$new', '$type', '$merge', '$block', '$delete', '$as_node', '$rendered?', '$method_missing', '$dup', '$replace', '$build', '$build_new_properties', '$gsub', '$private', '$haml_class_name', '$class', '$[]=', '$join', '$uniq', '$split', '$[]', '$merge!', '$=~', '$merge_component_event_prop!', '$include?', '$event_camelize', '$merge_built_in_event_prop!', '$instance_variable_get', '$merge_deprecated_component_event_prop!', '$Array', '$deprecation_warning']);
  self.$require("react/ext/string");
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Element(){};
      var self = $Element = $klass($base, $super, 'Element', $Element);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_4, TMP_5, TMP_6, TMP_7, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15;

      def.type = def.properties = nil;
      self.$include($scope.get('Native'));

      self.$alias_native("element_type", "type");

      self.$alias_native("props", "props");

      self.$attr_reader("type");

      self.$attr_reader("properties");

      self.$attr_reader("block");

      self.$attr_accessor("waiting_on_resources");

      Opal.defn(self, '$initialize', TMP_1 = function $$initialize(native_element, type, properties, block) {
        var $a, $b, self = this;

        self.type = type;
        self.properties = ((($a = ((function() {if ((($b = typeof properties === 'undefined') !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          return nil
          } else {
          return properties
        }; return nil; })())) !== false && $a !== nil && $a != null) ? $a : $hash2([], {}));
        self.block = block;
        return self["native"] = native_element;
      }, TMP_1.$$arity = 4);

      Opal.defn(self, '$on', TMP_2 = function $$on($a_rest) {
        var $b, $c, TMP_3, self = this, event_names, $iter = TMP_2.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        event_names = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          event_names[$arg_idx - 0] = arguments[$arg_idx];
        }
        TMP_2.$$p = null;
        ($b = ($c = event_names).$each, $b.$$p = (TMP_3 = function(event_name){var self = TMP_3.$$s || this, $a, $d;
if (event_name == null) event_name = nil;
        return ($a = ($d = self)['$merge_event_prop!'], $a.$$p = block.$to_proc(), $a).call($d, event_name)}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $b).call($c);
        self["native"] = React.cloneElement(self.$to_n(), self.$properties().$shallow_to_n());
        return self;
      }, TMP_2.$$arity = -1);

      Opal.defn(self, '$render', TMP_4 = function $$render(props) {
        var $a, self = this, $iter = TMP_4.$$p, new_block = $iter || nil;

        if (props == null) {
          props = $hash2([], {});
        }
        TMP_4.$$p = null;
        if ((($a = props['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return (($scope.get('React')).$$scope.get('RenderingContext')).$render(self)
          } else {
          props = $scope.get('API').$convert_props(props);
          return (($scope.get('React')).$$scope.get('RenderingContext')).$render($scope.get('Element').$new(React.cloneElement(self.$to_n(), props.$shallow_to_n()), self.$type(), self.$properties().$merge(props), self.$block()));
        };
      }, TMP_4.$$arity = -1);

      Opal.defn(self, '$delete', TMP_5 = function() {
        var self = this;

        return (($scope.get('React')).$$scope.get('RenderingContext')).$delete(self);
      }, TMP_5.$$arity = 0);

      Opal.defn(self, '$as_node', TMP_6 = function $$as_node() {
        var self = this;

        return (($scope.get('React')).$$scope.get('RenderingContext')).$as_node(self);
      }, TMP_6.$$arity = 0);

      Opal.defn(self, '$method_missing', TMP_7 = function $$method_missing(class_name, args) {
        var $a, $b, $c, TMP_8, self = this, $iter = TMP_7.$$p, new_block = $iter || nil;

        if (args == null) {
          args = $hash2([], {});
        }
        TMP_7.$$p = null;
        if ((($a = self['$rendered?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          return ($a = ($b = self.$dup().$render()).$method_missing, $a.$$p = new_block.$to_proc(), $a).call($b, class_name, args)
        };
        return (($scope.get('React')).$$scope.get('RenderingContext')).$replace(self, ($a = ($c = $scope.get('RenderingContext')).$build, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this, $d, $e;

        return ($d = ($e = $scope.get('RenderingContext')).$render, $d.$$p = new_block.$to_proc(), $d).call($e, self.$type(), self.$build_new_properties(class_name, args))}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $a).call($c));
      }, TMP_7.$$arity = -2);

      Opal.defn(self, '$rendered?', TMP_9 = function() {
        var self = this;

        return (($scope.get('React')).$$scope.get('RenderingContext'))['$rendered?'](self);
      }, TMP_9.$$arity = 0);

      Opal.defs(self, '$haml_class_name', TMP_10 = function $$haml_class_name(class_name) {
        var self = this;

        return class_name.$gsub(/__|_/, $hash2(["__", "_"], {"__": "_", "_": "-"}));
      }, TMP_10.$$arity = 1);

      self.$private();

      Opal.defn(self, '$build_new_properties', TMP_11 = function $$build_new_properties(class_name, args) {
        var self = this, new_props = nil;

        class_name = self.$class().$haml_class_name(class_name);
        new_props = self.$properties().$dup();
        new_props['$[]=']("className", ((((((((("        ") + (class_name)) + " ") + (new_props['$[]']("className"))) + " ") + (args.$delete("class"))) + " ") + (args.$delete("className"))) + "      ").$split(" ").$uniq().$join(" "));
        return new_props['$merge!'](args);
      }, TMP_11.$$arity = 2);

      Opal.defn(self, '$merge_event_prop!', TMP_12 = function(event_name) {
        var $a, $b, $c, $d, $e, $f, self = this, $iter = TMP_12.$$p, block = $iter || nil, name = nil;

        TMP_12.$$p = null;
        if ((($a = event_name['$=~'](/^<(.+)>$/)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return ($a = ($b = self)['$merge_component_event_prop!'], $a.$$p = block.$to_proc(), $a).call($b, event_name.$gsub(/^<(.+)>$/, "\\1"))
        } else if ((($a = (((($scope.get('React')).$$scope.get('Event'))).$$scope.get('BUILT_IN_EVENTS'))['$include?'](name = "on" + (event_name.$event_camelize()))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return ($a = ($c = self)['$merge_built_in_event_prop!'], $a.$$p = block.$to_proc(), $a).call($c, name)
        } else if ((($a = self.type.$instance_variable_get("@native_import")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return ($a = ($d = self)['$merge_component_event_prop!'], $a.$$p = block.$to_proc(), $a).call($d, name)
          } else {
          ($a = ($e = self)['$merge_deprecated_component_event_prop!'], $a.$$p = block.$to_proc(), $a).call($e, event_name);
          return ($a = ($f = self)['$merge_component_event_prop!'], $a.$$p = block.$to_proc(), $a).call($f, "on_" + (event_name));
        };
      }, TMP_12.$$arity = 1);

      Opal.defn(self, '$merge_built_in_event_prop!', TMP_13 = function(prop_name) {
        var self = this, $iter = TMP_13.$$p, $yield = $iter || nil;

        TMP_13.$$p = null;
        return self.properties['$merge!']($hash(prop_name, 
          function(event){
            return Opal.yield1($yield, (($scope.get('React')).$$scope.get('Event')).$new(event))
          }
        ));
      }, TMP_13.$$arity = 1);

      Opal.defn(self, '$merge_component_event_prop!', TMP_14 = function(prop_name) {
        var self = this, $iter = TMP_14.$$p, $yield = $iter || nil;

        TMP_14.$$p = null;
        return self.properties['$merge!']($hash(prop_name, 
          function(){
            return Opal.yieldX($yield, Opal.to_a(self.$Array(arguments)))
          }
        ));
      }, TMP_14.$$arity = 1);

      return (Opal.defn(self, '$merge_deprecated_component_event_prop!', TMP_15 = function(event_name) {
        var self = this, $iter = TMP_15.$$p, $yield = $iter || nil, prop_name = nil, fn = nil;

        TMP_15.$$p = null;
        prop_name = "_on" + (event_name.$event_camelize());
        fn = function(){(($scope.get('React')).$$scope.get('Component')).$deprecation_warning("In future releases React::Element#on('" + (event_name) + "') will no longer respond " + ("to the '" + (prop_name) + "' emitter.\n") + ("Rename your emitter param to 'on_" + (event_name) + "' or use .on('<" + (prop_name) + ">')"))
        return Opal.yieldX($yield, Opal.to_a(self.$Array(arguments)))
      };
        return self.properties['$merge!']($hash(prop_name, fn));
      }, TMP_15.$$arity = 1), nil) && 'merge_deprecated_component_event_prop!';
    })($scope.base, null)
  })($scope.base);
};
/* Generated by Opal 0.10.3 */
Opal.modules["react/event"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$include', '$alias_native']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope, TMP_1;

      self.$include($scope.get('Native'));

      self.$alias_native("bubbles", "bubbles");

      self.$alias_native("cancelable", "cancelable");

      self.$alias_native("current_target", "currentTarget");

      self.$alias_native("default_prevented", "defaultPrevented");

      self.$alias_native("event_phase", "eventPhase");

      self.$alias_native("is_trusted?", "isTrusted");

      self.$alias_native("native_event", "nativeEvent");

      self.$alias_native("target", "target");

      self.$alias_native("timestamp", "timeStamp");

      self.$alias_native("event_type", "type");

      self.$alias_native("prevent_default", "preventDefault");

      self.$alias_native("stop_propagation", "stopPropagation");

      self.$alias_native("clipboard_data", "clipboardData");

      self.$alias_native("alt_key", "altKey");

      self.$alias_native("char_code", "charCode");

      self.$alias_native("ctrl_key", "ctrlKey");

      self.$alias_native("get_modifier_state", "getModifierState");

      self.$alias_native("key", "key");

      self.$alias_native("key_code", "keyCode");

      self.$alias_native("locale", "locale");

      self.$alias_native("location", "location");

      self.$alias_native("meta_key", "metaKey");

      self.$alias_native("repeat", "repeat");

      self.$alias_native("shift_key", "shiftKey");

      self.$alias_native("which", "which");

      self.$alias_native("related_target", "relatedTarget");

      self.$alias_native("alt_key", "altKey");

      self.$alias_native("button", "button");

      self.$alias_native("buttons", "buttons");

      self.$alias_native("client_x", "clientX");

      self.$alias_native("client_y", "clientY");

      self.$alias_native("ctrl_key", "ctrlKey");

      self.$alias_native("get_modifier_state", "getModifierState");

      self.$alias_native("meta_key", "metaKey");

      self.$alias_native("page_x", "pageX");

      self.$alias_native("page_y", "pageY");

      self.$alias_native("related_target", "relatedTarget");

      self.$alias_native("screen_x", "screen_x");

      self.$alias_native("screen_y", "screen_y");

      self.$alias_native("shift_key", "shift_key");

      self.$alias_native("alt_key", "altKey");

      self.$alias_native("changed_touches", "changedTouches");

      self.$alias_native("ctrl_key", "ctrlKey");

      self.$alias_native("get_modifier_state", "getModifierState");

      self.$alias_native("meta_key", "metaKey");

      self.$alias_native("shift_key", "shiftKey");

      self.$alias_native("target_touches", "targetTouches");

      self.$alias_native("touches", "touches");

      self.$alias_native("detail", "detail");

      self.$alias_native("view", "view");

      self.$alias_native("delta_mode", "deltaMode");

      self.$alias_native("delta_x", "deltaX");

      self.$alias_native("delta_y", "deltaY");

      self.$alias_native("delta_z", "deltaZ");

      Opal.cdecl($scope, 'BUILT_IN_EVENTS', ["onCopy", "onCut", "onPaste", "onKeyDown", "onKeyPress", "onKeyUp", "onFocus", "onBlur", "onChange", "onInput", "onSubmit", "onClick", "onDoubleClick", "onDrag", "onDragEnd", "onDragEnter", "onDragExit", "onDragLeave", "onDragOver", "onDragStart", "onDrop", "onMouseDown", "onMouseEnter", "onMouseLeave", "onMouseMove", "onMouseOut", "onMouseOver", "onMouseUp", "onTouchCancel", "onTouchEnd", "onTouchMove", "onTouchStart", "onScroll"]);

      return (Opal.defn(self, '$initialize', TMP_1 = function $$initialize(native_element) {
        var self = this;

        return self["native"] = native_element;
      }, TMP_1.$$arity = 1), nil) && 'initialize';
    })($scope.base, null)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["react/native_library"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$each', '$lookup_native_name', '$create_component_wrapper', '$create_library_wrapper', '$raise', '$name', '$scope_native_name', '$+', '$downcase', '$[]', '$import_const_from_native', '$gsub', '$const_defined?', '$get_const', '$==', '$render', '$to_proc', '$build_only', '$private', '$native_react_component?', '$const_set', '$new', '$class_eval', '$include', '$imports']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $NativeLibrary(){};
      var self = $NativeLibrary = $klass($base, $super, 'NativeLibrary', $NativeLibrary);

      var def = self.$$proto, $scope = self.$$scope;

      return (function(self) {
        var $scope = self.$$scope, def = self.$$proto, TMP_1, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_10, TMP_11;

        Opal.defn(self, '$imports', TMP_1 = function $$imports(native_name) {
          var self = this;

          self.native_prefix = "" + (native_name) + ".";
          return self;
        }, TMP_1.$$arity = 1);
        Opal.defn(self, '$rename', TMP_3 = function $$rename(rename_list) {
          var $a, $b, TMP_2, self = this;

          return ($a = ($b = rename_list).$each, $a.$$p = (TMP_2 = function(js_name, ruby_name){var self = TMP_2.$$s || this, $c, native_name = nil;
if (js_name == null) js_name = nil;if (ruby_name == null) ruby_name = nil;
          native_name = self.$lookup_native_name(js_name);
            if ((($c = self.$lookup_native_name(js_name)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return ((($c = self.$create_component_wrapper(self, native_name, ruby_name)) !== false && $c !== nil && $c != null) ? $c : self.$create_library_wrapper(self, native_name, ruby_name))
              } else {
              return self.$raise("class " + (self.$name()) + " < React::NativeLibrary could not import " + (js_name) + ". " + ("Native value " + (self.$scope_native_name(js_name)) + " is undefined."))
            };}, TMP_2.$$s = self, TMP_2.$$arity = 2, TMP_2), $a).call($b);
        }, TMP_3.$$arity = 1);
        Opal.defn(self, '$import_const_from_native', TMP_4 = function $$import_const_from_native(klass, const_name, create_library) {
          var $a, $b, $c, self = this, native_name = nil;

          native_name = ((($a = self.$lookup_native_name(const_name)) !== false && $a !== nil && $a != null) ? $a : self.$lookup_native_name($rb_plus(const_name['$[]'](0).$downcase(), const_name['$[]']($range(1, -1, false)))));
          return (($a = native_name !== false && native_name !== nil && native_name != null) ? (((($b = self.$create_component_wrapper(klass, native_name, const_name)) !== false && $b !== nil && $b != null) ? $b : ((($c = create_library !== false && create_library !== nil && create_library != null) ? self.$create_library_wrapper(klass, native_name, const_name) : create_library)))) : native_name);
        }, TMP_4.$$arity = 3);
        Opal.defn(self, '$const_missing', TMP_5 = function $$const_missing(const_name) {
          var $a, $b, $c, self = this, $iter = TMP_5.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

          TMP_5.$$p = null;
          $zuper = [];
          
          for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
            $zuper[$zuper_index] = arguments[$zuper_index];
          }
          return ((($a = self.$import_const_from_native(self, const_name, true)) !== false && $a !== nil && $a != null) ? $a : ($b = ($c = self, Opal.find_super_dispatcher(self, 'const_missing', TMP_5, false)), $b.$$p = $iter, $b).apply($c, $zuper));
        }, TMP_5.$$arity = 1);
        Opal.defn(self, '$method_missing', TMP_6 = function $$method_missing(method_name, $a_rest) {
          var $b, $c, $d, self = this, args, $iter = TMP_6.$$p, block = $iter || nil, method = nil, component_class = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }
          TMP_6.$$p = null;
          method = method_name.$gsub(/_as_node$/, "");
          if ((($b = self['$const_defined?'](method)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            component_class = self.$get_const(method)};
          ((($b = component_class) !== false && $b !== nil && $b != null) ? $b : component_class = self.$import_const_from_native(self, method, false));
          if (component_class !== false && component_class !== nil && component_class != null) {
            } else {
            self.$raise("could not import a react component named: " + (self.$scope_native_name(method)))
          };
          if (method['$=='](method_name)) {
            return ($b = ($c = (($scope.get('React')).$$scope.get('RenderingContext'))).$render, $b.$$p = block.$to_proc(), $b).apply($c, [component_class].concat(Opal.to_a(args)))
            } else {
            return ($b = ($d = (($scope.get('React')).$$scope.get('RenderingContext'))).$build_only, $b.$$p = block.$to_proc(), $b).apply($d, [component_class].concat(Opal.to_a(args)))
          };
        }, TMP_6.$$arity = -2);
        self.$private();
        Opal.defn(self, '$lookup_native_name', TMP_7 = function $$lookup_native_name(js_name) {
          var self = this, native_name = nil;

          try {
            native_name = self.$scope_native_name(js_name);
            return eval(native_name) !== undefined && native_name;
          } catch ($err) {
            if (Opal.rescue($err, [$scope.get('Exception')])) {
              try {
                return nil
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          };
        }, TMP_7.$$arity = 1);
        Opal.defn(self, '$scope_native_name', TMP_8 = function $$scope_native_name(js_name) {
          var self = this;
          if (self.native_prefix == null) self.native_prefix = nil;

          return "" + (self.native_prefix) + (js_name);
        }, TMP_8.$$arity = 1);
        Opal.defn(self, '$create_component_wrapper', TMP_10 = function $$create_component_wrapper(klass, native_name, ruby_name) {
          var $a, $b, TMP_9, self = this, new_klass = nil;

          if ((($a = (($scope.get('React')).$$scope.get('API'))['$native_react_component?'](native_name)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            new_klass = klass.$const_set(ruby_name, $scope.get('Class').$new());
            ($a = ($b = new_klass).$class_eval, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this;

            self.$include((($scope.get('React')).$$scope.get('Component')));
              return self.$imports(native_name);}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $a).call($b);
            return new_klass;
            } else {
            return nil
          };
        }, TMP_10.$$arity = 3);
        return (Opal.defn(self, '$create_library_wrapper', TMP_11 = function $$create_library_wrapper(klass, native_name, ruby_name) {
          var self = this;

          return klass.$const_set(ruby_name, $scope.get('Class').$new((($scope.get('React')).$$scope.get('NativeLibrary'))).$imports(native_name));
        }, TMP_11.$$arity = 3), nil) && 'create_library_wrapper';
      })(Opal.get_singleton_class(self))
    })($scope.base, null)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["react/api"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $range = Opal.range;

  Opal.add_stubs(['$require', '$instance_variable_set', '$[]=', '$raise', '$eval_native_react_component', '$!', '$method_defined?', '$[]', '$name', '$respond_to?', '$to_n', '$prop_types', '$default_props', '$native_mixins', '$static_call_backs', '$component_will_mount', '$component_did_mount', '$component_will_receive_props', '$new', '$should_component_update?', '$component_will_update', '$component_did_update', '$component_will_unmount', '$send', '$<<', '$kind_of?', '$create_native_react_class', '$include?', '$is_a?', '$convert_props', '$shallow_to_n', '$each', '$flatten', '$map', '$==', '$lower_camelize', '$tr', '$html_attr?', '$private', '$split', '$first', '$concat', '$+', '$upcase', '$join']);
  self.$require("react/native_library");
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $API(){};
      var self = $API = $klass($base, $super, 'API', $API);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_7, TMP_10, TMP_12;

      (Opal.cvars['@@component_classes'] = $hash2([], {}));

      Opal.defs(self, '$import_native_component', TMP_1 = function $$import_native_component(opal_class, native_class) {
        var $a, self = this;

        opal_class.$instance_variable_set("@native_import", true);
        return (($a = Opal.cvars['@@component_classes']) == null ? nil : $a)['$[]='](opal_class, native_class);
      }, TMP_1.$$arity = 2);

      Opal.defs(self, '$eval_native_react_component', TMP_2 = function $$eval_native_react_component(name) {
        var $a, $b, $c, self = this, component = nil, is_component_class = nil, is_functional_component = nil, is_not_using_react_v13 = nil;

        component = eval(name);
        if ((($a = component === undefined) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$raise("" + (name) + " is not defined")};
        is_component_class = ($a = component.prototype !== undefined, $a !== false && $a !== nil && $a != null ?(((($b = !!component.prototype.isReactComponent) !== false && $b !== nil && $b != null) ? $b : !!component.prototype.render)) : $a);
        is_functional_component = typeof component === "function";
        is_not_using_react_v13 = !window.React.version.match(/0\.13/);
        if ((($a = ((($b = is_component_class) !== false && $b !== nil && $b != null) ? $b : ((($c = is_not_using_react_v13 !== false && is_not_using_react_v13 !== nil && is_not_using_react_v13 != null) ? is_functional_component : is_not_using_react_v13)))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          self.$raise("does not appear to be a native react component")
        };
        return component;
      }, TMP_2.$$arity = 1);

      Opal.defs(self, '$native_react_component?', TMP_3 = function(name) {
        var self = this;

        try {
          return self.$eval_native_react_component(name)
        } catch ($err) {
          if (Opal.rescue($err, [$scope.get('StandardError')])) {
            try {
              return nil
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        };
      }, TMP_3.$$arity = 1);

      Opal.defs(self, '$create_native_react_class', TMP_4 = function $$create_native_react_class(type) {
        var $a, $b, $c, $d, self = this, render_fn = nil;

        if ((($a = (type['$method_defined?']("render"))['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$raise("Provided class should define `render` method")};
        render_fn = (function() {if ((($a = (type['$method_defined?']("_render_wrapper"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "_render_wrapper"
          } else {
          return "render"
        }; return nil; })();
        return ($a = type, $b = (($c = Opal.cvars['@@component_classes']) == null ? nil : $c), ((($c = $b['$[]']($a)) !== false && $c !== nil && $c != null) ? $c : $b['$[]=']($a, 
        React.createClass({
          displayName: type.$name(),
          propTypes: (function() {if ((($d = type['$respond_to?']("prop_types")) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          return type.$prop_types().$to_n()
          } else {
          return {};
        }; return nil; })(),
          getDefaultProps: function(){
            return (function() {if ((($d = type['$respond_to?']("default_props")) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          return type.$default_props().$to_n()
          } else {
          return {};
        }; return nil; })();
          },
          mixins: (function() {if ((($d = type['$respond_to?']("native_mixins")) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          return type.$native_mixins()
          } else {
          return [];
        }; return nil; })(),
          statics: (function() {if ((($d = type['$respond_to?']("static_call_backs")) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          return type.$static_call_backs().$to_n()
          } else {
          return {};
        }; return nil; })(),
          componentWillMount: function() {
            var instance = this._getOpalInstance.apply(this);
            return (function() {if ((($d = type['$method_defined?']("component_will_mount")) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          return (instance).$component_will_mount()
          } else {
          return nil
        }; return nil; })();
          },
          componentDidMount: function() {
            var instance = this._getOpalInstance.apply(this);
            return (function() {if ((($d = type['$method_defined?']("component_did_mount")) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          return (instance).$component_did_mount()
          } else {
          return nil
        }; return nil; })();
          },
          componentWillReceiveProps: function(next_props) {
            var instance = this._getOpalInstance.apply(this);
            return (function() {if ((($d = type['$method_defined?']("component_will_receive_props")) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          return (instance).$component_will_receive_props($scope.get('Hash').$new(next_props))
          } else {
          return nil
        }; return nil; })();
          },
          shouldComponentUpdate: function(next_props, next_state) {
            var instance = this._getOpalInstance.apply(this);
            return (function() {if ((($d = type['$method_defined?']("should_component_update?")) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          return (instance)['$should_component_update?']($scope.get('Hash').$new(next_props), $scope.get('Hash').$new(next_state))
          } else {
          return nil
        }; return nil; })();
          },
          componentWillUpdate: function(next_props, next_state) {
            var instance = this._getOpalInstance.apply(this);
            return (function() {if ((($d = type['$method_defined?']("component_will_update")) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          return (instance).$component_will_update($scope.get('Hash').$new(next_props), $scope.get('Hash').$new(next_state))
          } else {
          return nil
        }; return nil; })();
          },
          componentDidUpdate: function(prev_props, prev_state) {
            var instance = this._getOpalInstance.apply(this);
            return (function() {if ((($d = type['$method_defined?']("component_did_update")) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          return (instance).$component_did_update($scope.get('Hash').$new(prev_props), $scope.get('Hash').$new(prev_state))
          } else {
          return nil
        }; return nil; })();
          },
          componentWillUnmount: function() {
            var instance = this._getOpalInstance.apply(this);
            return (function() {if ((($d = type['$method_defined?']("component_will_unmount")) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          return (instance).$component_will_unmount()
          } else {
          return nil
        }; return nil; })();
          },
          _getOpalInstance: function() {
            if (this.__opalInstance == undefined) {
              var instance = type.$new(this);
            } else {
              var instance = this.__opalInstance;
            }
            this.__opalInstance = instance;
            return instance;
          },
          render: function() {
            var instance = this._getOpalInstance.apply(this);
            return (instance).$send(render_fn).$to_n();
          }
        })
      )));
      }, TMP_4.$$arity = 1);

      Opal.defs(self, '$create_element', TMP_5 = function $$create_element(type, properties) {
        var $a, $b, TMP_6, self = this, $iter = TMP_5.$$p, block = $iter || nil, params = nil;

        if (properties == null) {
          properties = $hash2([], {});
        }
        TMP_5.$$p = null;
        params = [];
        if ((($a = (($b = Opal.cvars['@@component_classes']) == null ? nil : $b)['$[]'](type)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          params['$<<']((($a = Opal.cvars['@@component_classes']) == null ? nil : $a)['$[]'](type))
        } else if ((($a = type['$kind_of?']($scope.get('Class'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          params['$<<'](self.$create_native_react_class(type))
        } else if ((($a = (((((($scope.get('React')).$$scope.get('Component'))).$$scope.get('Tags'))).$$scope.get('HTML_TAGS'))['$include?'](type)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          params['$<<'](type)
        } else if ((($a = type['$is_a?']($scope.get('String'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return (($scope.get('React')).$$scope.get('Element')).$new(type)
          } else {
          self.$raise("" + (type) + " not implemented")
        };
        properties = self.$convert_props(properties);
        params['$<<'](properties.$shallow_to_n());
        if ((block !== nil)) {
          ($a = ($b = [Opal.yieldX(block, [])].$flatten()).$each, $a.$$p = (TMP_6 = function(ele){var self = TMP_6.$$s || this;
if (ele == null) ele = nil;
          return params['$<<'](ele.$to_n())}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $a).call($b)};
        return (($scope.get('React')).$$scope.get('Element')).$new(React.createElement.apply(null, params), type, properties, block);
      }, TMP_5.$$arity = -2);

      Opal.defs(self, '$clear_component_class_cache', TMP_7 = function $$clear_component_class_cache() {
        var self = this;

        return (Opal.cvars['@@component_classes'] = $hash2([], {}));
      }, TMP_7.$$arity = 0);

      Opal.defs(self, '$convert_props', TMP_10 = function $$convert_props(properties) {
        var $a, $b, TMP_8, self = this, props = nil;

        if ((($a = properties['$is_a?']($scope.get('Hash'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          self.$raise("Component parameters must be a hash. Instead you sent " + (properties))
        };
        props = $hash2([], {});
        ($a = ($b = properties).$map, $a.$$p = (TMP_8 = function(key, value){var self = TMP_8.$$s || this, $c, $d, TMP_9;
if (key == null) key = nil;if (value == null) value = nil;
        if ((($c = (($d = key['$==']("class_name")) ? value['$is_a?']($scope.get('Hash')) : key['$==']("class_name"))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return props['$[]='](self.$lower_camelize(key), React.addons.classSet(value.$to_n()))
          } else if (key['$==']("class")) {
            return props['$[]=']("className", value)
          } else if ((($c = ["style", "dangerously_set_inner_HTML"]['$include?'](key)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return props['$[]='](self.$lower_camelize(key), value.$to_n())
          } else if ((($c = ($d = (($scope.get('React')).$$scope.get('HASH_ATTRIBUTES'))['$include?'](key), $d !== false && $d !== nil && $d != null ?value['$is_a?']($scope.get('Hash')) : $d)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return ($c = ($d = value).$each, $c.$$p = (TMP_9 = function(k, v){var self = TMP_9.$$s || this;
if (k == null) k = nil;if (v == null) v = nil;
            return props['$[]=']("" + (key) + "-" + (k.$tr("_", "-")), v.$to_n())}, TMP_9.$$s = self, TMP_9.$$arity = 2, TMP_9), $c).call($d)
            } else {
            return props['$[]=']((function() {if ((($c = $scope.get('React')['$html_attr?'](self.$lower_camelize(key))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return self.$lower_camelize(key)
              } else {
              return key
            }; return nil; })(), value)
          }}, TMP_8.$$s = self, TMP_8.$$arity = 2, TMP_8), $a).call($b);
        return props;
      }, TMP_10.$$arity = 1);

      self.$private();

      return (Opal.defs(self, '$lower_camelize', TMP_12 = function $$lower_camelize(snake_cased_word) {
        var $a, $b, TMP_11, self = this, words = nil, result = nil;

        words = snake_cased_word.$split("_");
        result = [words.$first()];
        result.$concat(($a = ($b = words['$[]']($range(1, -1, false))).$map, $a.$$p = (TMP_11 = function(word){var self = TMP_11.$$s || this;
if (word == null) word = nil;
        return $rb_plus(word['$[]'](0).$upcase(), word['$[]']($range(1, -1, false)))}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11), $a).call($b));
        return result.$join("");
      }, TMP_12.$$arity = 1), nil) && 'lower_camelize';
    })($scope.base, null)
  })($scope.base);
};
/* Generated by Opal 0.10.3 */
Opal.modules["react/object"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$_reactrb_tag_original_const_missing', '$html_tag_class_for', '$raise']);
  return (function($base, $super) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $scope = self.$$scope;

    return (function(self) {
      var $scope = self.$$scope, def = self.$$proto, TMP_1;

      Opal.alias(self, '_reactrb_tag_original_const_missing', 'const_missing');
      return (Opal.defn(self, '$const_missing', TMP_1 = function $$const_missing(const_name) {
        var $a, self = this, e = nil;

        try {
          return self.$_reactrb_tag_original_const_missing(const_name)
        } catch ($err) {
          if (Opal.rescue($err, [$scope.get('StandardError')])) {e = $err;
            try {
              return ((($a = (((($scope.get('React')).$$scope.get('Component'))).$$scope.get('Tags')).$html_tag_class_for(const_name)) !== false && $a !== nil && $a != null) ? $a : self.$raise(e))
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        };
      }, TMP_1.$$arity = 1), nil) && 'const_missing';
    })(Opal.get_singleton_class(self))
  })($scope.base, null)
};
/* Generated by Opal 0.10.3 */
Opal.modules["json"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2, $klass = Opal.klass;

  Opal.add_stubs(['$new', '$push', '$[]=', '$[]', '$create_id', '$json_create', '$attr_accessor', '$create_id=', '$===', '$parse', '$generate', '$from_object', '$merge', '$to_json', '$responds_to?', '$to_io', '$write', '$to_s', '$to_a', '$strftime']);
  (function($base) {
    var $JSON, self = $JSON = $module($base, 'JSON');

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7;

    
    var $parse  = JSON.parse,
        $hasOwn = Opal.hasOwnProperty;

    function to_opal(value, options) {
      var klass, arr, hash, i, ii, k;

      switch (typeof value) {
        case 'string':
          return value;

        case 'number':
          return value;

        case 'boolean':
          return !!value;

        case 'null':
          return nil;

        case 'object':
          if (!value) return nil;

          if (value.$$is_array) {
            arr = (options.array_class).$new();

            for (i = 0, ii = value.length; i < ii; i++) {
              (arr).$push(to_opal(value[i], options));
            }

            return arr;
          }
          else {
            hash = (options.object_class).$new();

            for (k in value) {
              if ($hasOwn.call(value, k)) {
                (hash)['$[]='](k, to_opal(value[k], options));
              }
            }

            if (!options.parse && (klass = (hash)['$[]']($scope.get('JSON').$create_id())) != nil) {
              klass = Opal.get(klass);
              return (klass).$json_create(hash);
            }
            else {
              return hash;
            }
          }
        }
    };
  

    (function(self) {
      var $scope = self.$$scope, def = self.$$proto;

      return self.$attr_accessor("create_id")
    })(Opal.get_singleton_class(self));

    (($a = ["json_class"]), $b = self, $b['$create_id='].apply($b, $a), $a[$a.length-1]);

    Opal.defs(self, '$[]', TMP_1 = function(value, options) {
      var $a, self = this;

      if (options == null) {
        options = $hash2([], {});
      }
      if ((($a = $scope.get('String')['$==='](value)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$parse(value, options)
        } else {
        return self.$generate(value, options)
      };
    }, TMP_1.$$arity = -2);

    Opal.defs(self, '$parse', TMP_2 = function $$parse(source, options) {
      var self = this;

      if (options == null) {
        options = $hash2([], {});
      }
      return self.$from_object($parse(source), options.$merge($hash2(["parse"], {"parse": true})));
    }, TMP_2.$$arity = -2);

    Opal.defs(self, '$parse!', TMP_3 = function(source, options) {
      var self = this;

      if (options == null) {
        options = $hash2([], {});
      }
      return self.$parse(source, options);
    }, TMP_3.$$arity = -2);

    Opal.defs(self, '$load', TMP_4 = function $$load(source, options) {
      var self = this;

      if (options == null) {
        options = $hash2([], {});
      }
      return self.$from_object($parse(source), options);
    }, TMP_4.$$arity = -2);

    Opal.defs(self, '$from_object', TMP_5 = function $$from_object(js_object, options) {
      var $a, $b, $c, self = this;

      if (options == null) {
        options = $hash2([], {});
      }
      ($a = "object_class", $b = options, ((($c = $b['$[]']($a)) !== false && $c !== nil && $c != null) ? $c : $b['$[]=']($a, $scope.get('Hash'))));
      ($a = "array_class", $b = options, ((($c = $b['$[]']($a)) !== false && $c !== nil && $c != null) ? $c : $b['$[]=']($a, $scope.get('Array'))));
      return to_opal(js_object, options.$$smap);
    }, TMP_5.$$arity = -2);

    Opal.defs(self, '$generate', TMP_6 = function $$generate(obj, options) {
      var self = this;

      if (options == null) {
        options = $hash2([], {});
      }
      return obj.$to_json(options);
    }, TMP_6.$$arity = -2);

    Opal.defs(self, '$dump', TMP_7 = function $$dump(obj, io, limit) {
      var $a, self = this, string = nil;

      if (io == null) {
        io = nil;
      }
      if (limit == null) {
        limit = nil;
      }
      string = self.$generate(obj);
      if (io !== false && io !== nil && io != null) {
        if ((($a = io['$responds_to?']("to_io")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          io = io.$to_io()};
        io.$write(string);
        return io;
        } else {
        return string
      };
    }, TMP_7.$$arity = -2);
  })($scope.base);
  (function($base, $super) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $scope = self.$$scope, TMP_8;

    return (Opal.defn(self, '$to_json', TMP_8 = function $$to_json() {
      var self = this;

      return self.$to_s().$to_json();
    }, TMP_8.$$arity = 0), nil) && 'to_json'
  })($scope.base, null);
  (function($base) {
    var $Enumerable, self = $Enumerable = $module($base, 'Enumerable');

    var def = self.$$proto, $scope = self.$$scope, TMP_9;

    Opal.defn(self, '$to_json', TMP_9 = function $$to_json() {
      var self = this;

      return self.$to_a().$to_json();
    }, TMP_9.$$arity = 0)
  })($scope.base);
  (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $scope = self.$$scope, TMP_10;

    return (Opal.defn(self, '$to_json', TMP_10 = function $$to_json() {
      var self = this;

      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        result.push((self[i]).$to_json());
      }

      return '[' + result.join(', ') + ']';
    
    }, TMP_10.$$arity = 0), nil) && 'to_json'
  })($scope.base, null);
  (function($base, $super) {
    function $Boolean(){};
    var self = $Boolean = $klass($base, $super, 'Boolean', $Boolean);

    var def = self.$$proto, $scope = self.$$scope, TMP_11;

    return (Opal.defn(self, '$to_json', TMP_11 = function $$to_json() {
      var self = this;

      return (self == true) ? 'true' : 'false';
    }, TMP_11.$$arity = 0), nil) && 'to_json'
  })($scope.base, null);
  (function($base, $super) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $scope = self.$$scope, TMP_12;

    return (Opal.defn(self, '$to_json', TMP_12 = function $$to_json() {
      var self = this;

      
      var result = [];

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        result.push((key).$to_s().$to_json() + ':' + (value).$to_json());
      }

      return '{' + result.join(', ') + '}';
    ;
    }, TMP_12.$$arity = 0), nil) && 'to_json'
  })($scope.base, null);
  (function($base, $super) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.$$proto, $scope = self.$$scope, TMP_13;

    return (Opal.defn(self, '$to_json', TMP_13 = function $$to_json() {
      var self = this;

      return "null";
    }, TMP_13.$$arity = 0), nil) && 'to_json'
  })($scope.base, null);
  (function($base, $super) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.$$proto, $scope = self.$$scope, TMP_14;

    return (Opal.defn(self, '$to_json', TMP_14 = function $$to_json() {
      var self = this;

      return self.toString();
    }, TMP_14.$$arity = 0), nil) && 'to_json'
  })($scope.base, null);
  (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope;

    return Opal.alias(self, 'to_json', 'inspect')
  })($scope.base, null);
  (function($base, $super) {
    function $Time(){};
    var self = $Time = $klass($base, $super, 'Time', $Time);

    var def = self.$$proto, $scope = self.$$scope, TMP_15;

    return (Opal.defn(self, '$to_json', TMP_15 = function $$to_json() {
      var self = this;

      return self.$strftime("%FT%T%z").$to_json();
    }, TMP_15.$$arity = 0), nil) && 'to_json'
  })($scope.base, null);
  return (function($base, $super) {
    function $Date(){};
    var self = $Date = $klass($base, $super, 'Date', $Date);

    var def = self.$$proto, $scope = self.$$scope, TMP_16, TMP_17;

    Opal.defn(self, '$to_json', TMP_16 = function $$to_json() {
      var self = this;

      return self.$to_s().$to_json();
    }, TMP_16.$$arity = 0);

    return (Opal.defn(self, '$as_json', TMP_17 = function $$as_json() {
      var self = this;

      return self.$to_s();
    }, TMP_17.$$arity = 0), nil) && 'as_json';
  })($scope.base, null);
};
/* Generated by Opal 0.10.3 */
Opal.modules["reactive-ruby/isomorphic_helpers"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $range = Opal.range, $klass = Opal.klass;

  Opal.add_stubs(['$extend', '$!=', '$!', '$unique_id', '$on_opal_server?', '$log', '$new', '$is_a?', '$==', '$+', '$[]', '$class', '$on_opal_client?', '$join', '$collect', '$call', '$prerender_footer_blocks', '$attr_reader', '$each', '$before_first_mount_blocks', '$eval', '$length', '$load!', '$<<', '$first', '$send_to_server', '$to_json', '$parse', '$controller', '$context', '$register_before_first_mount_block', '$to_proc', '$register_prerender_footer_block', '$require', '$send', '$result']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $IsomorphicHelpers, self = $IsomorphicHelpers = $module($base, 'IsomorphicHelpers');

      var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_10;

      Opal.defs(self, '$included', TMP_1 = function $$included(base) {
        var self = this;

        return base.$extend($scope.get('ClassMethods'));
      }, TMP_1.$$arity = 1);

      if ((($a = $scope.get('RUBY_ENGINE')['$!=']("opal")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        Opal.defs(self, '$load_context', TMP_2 = function $$load_context(unique_id, name) {
          var $a, $b, $c, self = this, message = nil;
          if (self.context == null) self.context = nil;

          if (unique_id == null) {
            unique_id = nil;
          }
          if (name == null) {
            name = nil;
          }
          if ((($a = ((($b = ((($c = unique_id['$!']()) !== false && $c !== nil && $c != null) ? $c : self.context['$!']())) !== false && $b !== nil && $b != null) ? $b : self.context.$unique_id()['$!='](unique_id))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            if ((($a = self['$on_opal_server?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              
              try {console.history = [] } catch ($err) { 
                if (Opal.rescue($err, [$scope.get('StandardError')])) {
                nil
                } else { throw $err; } };
              message = "************************ React Prerendering Context Initialized " + (name) + " ***********************";
              } else {
              message = "************************ React Browser Context Initialized ****************************"
            };
            self.$log(message);
            self.context = $scope.get('Context').$new(unique_id);};
          return self.context;
        }, TMP_2.$$arity = -1)
      };

      Opal.defs(self, '$log', TMP_3 = function $$log(message, message_type) {
        var $a, self = this, style = nil;

        if (message_type == null) {
          message_type = "info";
        }
        if ((($a = message['$is_a?']($scope.get('Array'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          message = [message]
        };
        if (message_type['$==']("info")) {
          if ((($a = self['$on_opal_server?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            style = "background: #00FFFF; color: red"
            } else {
            style = "background: #222; color: #bada55"
          };
          message = $rb_plus([$rb_plus("%c", message['$[]'](0)), style], message['$[]']($range(1, -1, false)));
          return console.log.apply(console, message);
        } else if (message_type['$==']("warning")) {
          return console.warn.apply(console, message);
          } else {
          return console.error.apply(console, message);
        };
      }, TMP_3.$$arity = -2);

      if ((($a = $scope.get('RUBY_ENGINE')['$!=']("opal")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        Opal.defs(self, '$on_opal_server?', TMP_4 = function() {
          var self = this;

          return typeof window.document === 'undefined';
        }, TMP_4.$$arity = 0);

        Opal.defs(self, '$on_opal_client?', TMP_5 = function() {
          var self = this;

          return self['$on_opal_server?']()['$!']();
        }, TMP_5.$$arity = 0);
      };

      Opal.defn(self, '$log', TMP_6 = function $$log($a_rest) {
        var $b, self = this, args;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        return ($b = $scope.get('IsomorphicHelpers')).$log.apply($b, Opal.to_a(args));
      }, TMP_6.$$arity = -1);

      Opal.defn(self, '$on_opal_server?', TMP_7 = function() {
        var self = this;

        return self.$class()['$on_opal_server?']();
      }, TMP_7.$$arity = 0);

      Opal.defn(self, '$on_opal_client?', TMP_8 = function() {
        var self = this;

        return self.$class()['$on_opal_client?']();
      }, TMP_8.$$arity = 0);

      Opal.defs(self, '$prerender_footers', TMP_10 = function $$prerender_footers(controller) {
        var $a, $b, TMP_9, self = this, footer = nil;

        if (controller == null) {
          controller = nil;
        }
        footer = ($a = ($b = $scope.get('Context').$prerender_footer_blocks()).$collect, $a.$$p = (TMP_9 = function(block){var self = TMP_9.$$s || this;
if (block == null) block = nil;
        return block.$call(controller)}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9), $a).call($b).$join("\n");
        if ((($a = $scope.get('RUBY_ENGINE')['$!=']("opal")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {};
        return footer;
      }, TMP_10.$$arity = -1);

      (function($base, $super) {
        function $Context(){};
        var self = $Context = $klass($base, $super, 'Context', $Context);

        var def = self.$$proto, $scope = self.$$scope, TMP_11, TMP_12, TMP_14, TMP_15, TMP_17, TMP_18, TMP_19;

        def.ctx = nil;
        self.$attr_reader("controller");

        self.$attr_reader("unique_id");

        Opal.defs(self, '$before_first_mount_blocks', TMP_11 = function $$before_first_mount_blocks() {
          var $a, self = this;
          if (self.before_first_mount_blocks == null) self.before_first_mount_blocks = nil;

          return ((($a = self.before_first_mount_blocks) !== false && $a !== nil && $a != null) ? $a : self.before_first_mount_blocks = []);
        }, TMP_11.$$arity = 0);

        Opal.defs(self, '$prerender_footer_blocks', TMP_12 = function $$prerender_footer_blocks() {
          var $a, self = this;
          if (self.prerender_footer_blocks == null) self.prerender_footer_blocks = nil;

          return ((($a = self.prerender_footer_blocks) !== false && $a !== nil && $a != null) ? $a : self.prerender_footer_blocks = []);
        }, TMP_12.$$arity = 0);

        Opal.defn(self, '$initialize', TMP_14 = function $$initialize(unique_id, ctx, controller, name) {
          var $a, $b, TMP_13, self = this;

          if (ctx == null) {
            ctx = nil;
          }
          if (controller == null) {
            controller = nil;
          }
          if (name == null) {
            name = nil;
          }
          self.unique_id = unique_id;
          if ((($a = $scope.get('RUBY_ENGINE')['$!=']("opal")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {};
          return ($a = ($b = self.$class().$before_first_mount_blocks()).$each, $a.$$p = (TMP_13 = function(block){var self = TMP_13.$$s || this;
if (block == null) block = nil;
          return block.$call(self)}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13), $a).call($b);
        }, TMP_14.$$arity = -2);

        Opal.defn(self, '$eval', TMP_15 = function(js) {
          var $a, self = this;

          if ((($a = self.ctx) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.ctx.$eval(js)
            } else {
            return nil
          };
        }, TMP_15.$$arity = 1);

        Opal.defn(self, '$send_to_opal', TMP_17 = function $$send_to_opal(method, $a_rest) {
          var $b, $c, TMP_16, self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }
          if ((($b = self.ctx) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            } else {
            return nil
          };
          if (args.$length()['$=='](0)) {
            args = [1]};
          ((Opal.get('ReactiveRuby')).$$scope.get('ComponentLoader')).$new(self.ctx)['$load!']();
          return self.ctx.$eval("Opal.React.$const_get('IsomorphicHelpers').$" + (method) + "(" + (($b = ($c = args).$collect, $b.$$p = (TMP_16 = function(arg){var self = TMP_16.$$s || this;
if (arg == null) arg = nil;
          return "'" + (arg) + "'"}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16), $b).call($c).$join(", ")) + ")");
        }, TMP_17.$$arity = -2);

        Opal.defs(self, '$register_before_first_mount_block', TMP_18 = function $$register_before_first_mount_block() {
          var self = this, $iter = TMP_18.$$p, block = $iter || nil;

          TMP_18.$$p = null;
          return self.$before_first_mount_blocks()['$<<'](block);
        }, TMP_18.$$arity = 0);

        return (Opal.defs(self, '$register_prerender_footer_block', TMP_19 = function $$register_prerender_footer_block() {
          var self = this, $iter = TMP_19.$$p, block = $iter || nil;

          TMP_19.$$p = null;
          return self.$prerender_footer_blocks()['$<<'](block);
        }, TMP_19.$$arity = 0), nil) && 'register_prerender_footer_block';
      })($scope.base, null);

      (function($base, $super) {
        function $IsomorphicProcCall(){};
        var self = $IsomorphicProcCall = $klass($base, $super, 'IsomorphicProcCall', $IsomorphicProcCall);

        var def = self.$$proto, $scope = self.$$scope, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24;

        def.result = def.name = nil;
        Opal.defn(self, '$result', TMP_20 = function $$result() {
          var $a, self = this;

          if ((($a = self.result) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.result.$first()
            } else {
            return nil
          };
        }, TMP_20.$$arity = 0);

        Opal.defn(self, '$initialize', TMP_21 = function $$initialize(name, block, $a_rest) {
          var $b, $c, $d, self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 2;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 2; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 2] = arguments[$arg_idx];
          }
          self.name = name;
          ($b = block).$call.apply($b, [self].concat(Opal.to_a(args)));
          if ((($c = $scope.get('IsomorphicHelpers')['$on_opal_server?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return ((($c = self.result) !== false && $c !== nil && $c != null) ? $c : self.result = ($d = self).$send_to_server.apply($d, Opal.to_a(args)))
            } else {
            return nil
          };
        }, TMP_21.$$arity = -3);

        Opal.defn(self, '$when_on_client', TMP_22 = function $$when_on_client() {
          var $a, self = this, $iter = TMP_22.$$p, block = $iter || nil;

          TMP_22.$$p = null;
          if ((($a = $scope.get('IsomorphicHelpers')['$on_opal_client?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.result = [block.$call()]
            } else {
            return nil
          };
        }, TMP_22.$$arity = 0);

        Opal.defn(self, '$send_to_server', TMP_23 = function $$send_to_server($a_rest) {
          var $b, self = this, args, args_as_json = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ((($b = $scope.get('IsomorphicHelpers')['$on_opal_server?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            args_as_json = args.$to_json();
            return self.result = [$scope.get('JSON').$parse(window.ServerSideIsomorphicMethods[self.name](args_as_json))];
            } else {
            return nil
          };
        }, TMP_23.$$arity = -1);

        return (Opal.defn(self, '$when_on_server', TMP_24 = function $$when_on_server() {
          var $a, $b, self = this, $iter = TMP_24.$$p, block = $iter || nil;

          TMP_24.$$p = null;
          if ((($a = ((($b = $scope.get('IsomorphicHelpers')['$on_opal_client?']()) !== false && $b !== nil && $b != null) ? $b : $scope.get('IsomorphicHelpers')['$on_opal_server?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return self.result = [block.$call().$to_json()]
          };
        }, TMP_24.$$arity = 0), nil) && 'when_on_server';
      })($scope.base, null);

      (function($base) {
        var $ClassMethods, self = $ClassMethods = $module($base, 'ClassMethods');

        var def = self.$$proto, $scope = self.$$scope, TMP_25, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30, $a, TMP_31;

        Opal.defn(self, '$on_opal_server?', TMP_25 = function() {
          var self = this;

          return $scope.get('IsomorphicHelpers')['$on_opal_server?']();
        }, TMP_25.$$arity = 0);

        Opal.defn(self, '$on_opal_client?', TMP_26 = function() {
          var self = this;

          return $scope.get('IsomorphicHelpers')['$on_opal_client?']();
        }, TMP_26.$$arity = 0);

        Opal.defn(self, '$log', TMP_27 = function $$log($a_rest) {
          var $b, self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          return ($b = $scope.get('IsomorphicHelpers')).$log.apply($b, Opal.to_a(args));
        }, TMP_27.$$arity = -1);

        Opal.defn(self, '$controller', TMP_28 = function $$controller() {
          var self = this;

          return $scope.get('IsomorphicHelpers').$context().$controller();
        }, TMP_28.$$arity = 0);

        Opal.defn(self, '$before_first_mount', TMP_29 = function $$before_first_mount() {
          var $a, $b, self = this, $iter = TMP_29.$$p, block = $iter || nil;

          TMP_29.$$p = null;
          return ($a = ($b = (((($scope.get('React')).$$scope.get('IsomorphicHelpers'))).$$scope.get('Context'))).$register_before_first_mount_block, $a.$$p = block.$to_proc(), $a).call($b);
        }, TMP_29.$$arity = 0);

        Opal.defn(self, '$prerender_footer', TMP_30 = function $$prerender_footer() {
          var $a, $b, self = this, $iter = TMP_30.$$p, block = $iter || nil;

          TMP_30.$$p = null;
          return ($a = ($b = (((($scope.get('React')).$$scope.get('IsomorphicHelpers'))).$$scope.get('Context'))).$register_prerender_footer_block, $a.$$p = block.$to_proc(), $a).call($b);
        }, TMP_30.$$arity = 0);

        if ((($a = $scope.get('RUBY_ENGINE')['$!=']("opal")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          self.$require("json");

          Opal.defn(self, '$isomorphic_method', TMP_31 = function $$isomorphic_method(name) {
            var $a, $b, TMP_32, self = this, $iter = TMP_31.$$p, block = $iter || nil;

            TMP_31.$$p = null;
            return ($a = ($b = self.$class()).$send, $a.$$p = (TMP_32 = function($c_rest){var self = TMP_32.$$s || this, args, $d;

              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              args = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                args[$arg_idx - 0] = arguments[$arg_idx];
              }
            return ($d = (((($scope.get('React')).$$scope.get('IsomorphicHelpers'))).$$scope.get('IsomorphicProcCall'))).$new.apply($d, [name, block].concat(Opal.to_a(args))).$result()}, TMP_32.$$s = self, TMP_32.$$arity = -1, TMP_32), $a).call($b, "define_method", name);
          }, TMP_31.$$arity = 1);
        };
      })($scope.base);
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["rails-helpers/top_level_rails_component"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$include', '$export_component', '$param', '$backtrace', '$start_with?', '$component_name', '$params', '$<<', '$gsub', '$inject', '$const_get', '$split', '$method_defined?', '$present', '$render_params', '$each', '$==', '$+', '$name', '$controller', '$search_path', '$class', '$raise', '$join', '$search_path=', '$!', '$include?', '$add_to_react_search_path']);
  (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $TopLevelRailsComponent(){};
      var self = $TopLevelRailsComponent = $klass($base, $super, 'TopLevelRailsComponent', $TopLevelRailsComponent);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_7;

      self.$include((($scope.get('React')).$$scope.get('Component')));

      Opal.defs(self, '$search_path', TMP_1 = function $$search_path() {
        var $a, self = this;
        if (self.search_path == null) self.search_path = nil;

        return ((($a = self.search_path) !== false && $a !== nil && $a != null) ? $a : self.search_path = [$scope.get('Module')]);
      }, TMP_1.$$arity = 0);

      self.$export_component();

      self.$param("component_name");

      self.$param("controller");

      self.$param("render_params");

      self.$backtrace("off");

      return (Opal.defn(self, '$render', TMP_7 = function $$render() {try {

        var $a, $b, TMP_2, $c, TMP_3, $d, TMP_5, self = this, paths_searched = nil, component = nil;

        paths_searched = [];
        if ((($a = self.$params().$component_name()['$start_with?']("::")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          paths_searched['$<<'](self.$params().$component_name().$gsub(/^\:\:/, ""));
          component = (function() {
          try {return ($a = ($b = self.$params().$component_name().$gsub(/^\:\:/, "").$split("::")).$inject, $a.$$p = (TMP_2 = function(scope, next_const){var self = TMP_2.$$s || this;
if (scope == null) scope = nil;if (next_const == null) next_const = nil;
          return scope.$const_get(next_const, false)}, TMP_2.$$s = self, TMP_2.$$arity = 2, TMP_2), $a).call($b, $scope.get('Module')) } catch ($err) { 
            if (Opal.rescue($err, [$scope.get('StandardError')])) {
            return nil
            } else { throw $err; } }})();
          if ((($a = (($c = component !== false && component !== nil && component != null) ? component['$method_defined?']("render") : component)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$present(component, self.$params().$render_params())};
          } else {
          ($a = ($c = self.$class().$search_path()).$each, $a.$$p = (TMP_3 = function(path){var self = TMP_3.$$s || this, $d, $e, TMP_4, $f;
if (path == null) path = nil;
          paths_searched['$<<']("" + ((function() {if (path['$==']($scope.get('Module'))) {
              return nil
              } else {
              return $rb_plus(path.$name(), "::")
            }; return nil; })()) + (self.$params().$controller()) + "::" + (self.$params().$component_name()));
            component = (function() {
            try {return ($d = ($e = (((("") + (self.$params().$controller())) + "::") + (self.$params().$component_name())).$split("::")).$inject, $d.$$p = (TMP_4 = function(scope, next_const){var self = TMP_4.$$s || this;
if (scope == null) scope = nil;if (next_const == null) next_const = nil;
            return scope.$const_get(next_const, false)}, TMP_4.$$s = self, TMP_4.$$arity = 2, TMP_4), $d).call($e, path) } catch ($err) { 
              if (Opal.rescue($err, [$scope.get('StandardError')])) {
              return nil
              } else { throw $err; } }})();
            if ((($d = (($f = component !== false && component !== nil && component != null) ? component['$method_defined?']("render") : component)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
              Opal.ret(self.$present(component, self.$params().$render_params()))
              } else {
              return nil
            };}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($c);
          ($a = ($d = self.$class().$search_path()).$each, $a.$$p = (TMP_5 = function(path){var self = TMP_5.$$s || this, $e, $f, TMP_6, $g;
if (path == null) path = nil;
          paths_searched['$<<']("" + ((function() {if (path['$==']($scope.get('Module'))) {
              return nil
              } else {
              return $rb_plus(path.$name(), "::")
            }; return nil; })()) + (self.$params().$component_name()));
            component = (function() {
            try {return ($e = ($f = (("") + (self.$params().$component_name())).$split("::")).$inject, $e.$$p = (TMP_6 = function(scope, next_const){var self = TMP_6.$$s || this;
if (scope == null) scope = nil;if (next_const == null) next_const = nil;
            return scope.$const_get(next_const, false)}, TMP_6.$$s = self, TMP_6.$$arity = 2, TMP_6), $e).call($f, path) } catch ($err) { 
              if (Opal.rescue($err, [$scope.get('StandardError')])) {
              return nil
              } else { throw $err; } }})();
            if ((($e = (($g = component !== false && component !== nil && component != null) ? component['$method_defined?']("render") : component)) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
              Opal.ret(self.$present(component, self.$params().$render_params()))
              } else {
              return nil
            };}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5), $a).call($d);
        };
        return self.$raise("Could not find component class '" + (self.$params().$component_name()) + "' for params.controller '" + (self.$params().$controller()) + "' in any component directory. Tried [" + (paths_searched.$join(", ")) + "]");
        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
      }, TMP_7.$$arity = 0), nil) && 'render';
    })($scope.base, null)
  })($scope.base);
  (function($base, $super) {
    function $Module(){};
    var self = $Module = $klass($base, $super, 'Module', $Module);

    var def = self.$$proto, $scope = self.$$scope, TMP_8;

    return (Opal.defn(self, '$add_to_react_search_path', TMP_8 = function $$add_to_react_search_path(replace_search_path) {
      var $a, $b, self = this;

      if (replace_search_path == null) {
        replace_search_path = nil;
      }
      if (replace_search_path !== false && replace_search_path !== nil && replace_search_path != null) {
        return (($a = [[self]]), $b = (($scope.get('React')).$$scope.get('TopLevelRailsComponent')), $b['$search_path='].apply($b, $a), $a[$a.length-1])
      } else if ((($a = (($scope.get('React')).$$scope.get('TopLevelRailsComponent')).$search_path()['$include?'](self)['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return (($scope.get('React')).$$scope.get('TopLevelRailsComponent')).$search_path()['$<<'](self)
        } else {
        return nil
      };
    }, TMP_8.$$arity = -1), nil) && 'add_to_react_search_path'
  })($scope.base, null);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    self.$add_to_react_search_path()
  })($scope.base);
};
/* Generated by Opal 0.10.3 */
Opal.modules["reactive-ruby/version"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.cdecl($scope, 'VERSION', "0.10.0")
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["hyper-react"] = function(Opal) {
  var $a, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$==', '$raise', '$join', '$require']);
  if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
    if ((($a = window.React === undefined || window.React.version === undefined) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      self.$raise(["No React.js Available", "", "A global `React` must be defined before requiring 'hyper-react'", "", "To USE THE BUILT-IN SOURCE: ", "   add 'require \"react/react-source\"' immediately before the 'require \"hyper-react\" directive.", "IF USING WEBPACK:", "   add 'react' to your webpack manifest."].$join("\n"))};
    self.$require("react/hash");
    self.$require("react/top_level");
    self.$require("react/observable");
    self.$require("react/validator");
    self.$require("react/component");
    self.$require("react/component/dsl_instance_methods");
    self.$require("react/component/should_component_update");
    self.$require("react/component/tags");
    self.$require("react/component/base");
    self.$require("react/element");
    self.$require("react/event");
    self.$require("react/api");
    self.$require("react/rendering_context");
    self.$require("react/state");
    self.$require("react/object");
    self.$require("reactive-ruby/isomorphic_helpers");
    self.$require("rails-helpers/top_level_rails_component");
    return self.$require("reactive-ruby/version");}
};
/* Generated by Opal 0.10.3 */
Opal.modules["reactrb/auto-import"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$==', '$_reactrb_original_const_missing', '$import_const_from_native', '$raise', '$gsub', '$_reactrb_original_method_missing', '$to_proc', '$render', '$build_only']);
  if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
    return (function($base, $super) {
      function $Object(){};
      var self = $Object = $klass($base, $super, 'Object', $Object);

      var def = self.$$proto, $scope = self.$$scope;

      return (function(self) {
        var $scope = self.$$scope, def = self.$$proto, TMP_1, TMP_2;

        Opal.alias(self, '_reactrb_original_const_missing', 'const_missing');
        Opal.alias(self, '_reactrb_original_method_missing', 'method_missing');
        Opal.defn(self, '$const_missing', TMP_1 = function $$const_missing(const_name) {
          var $a, self = this, e = nil;

          try {
            return self.$_reactrb_original_const_missing(const_name)
          } catch ($err) {
            if (Opal.rescue($err, [$scope.get('StandardError')])) {e = $err;
              try {
                return ((($a = (($scope.get('React')).$$scope.get('NativeLibrary')).$import_const_from_native($scope.get('Object'), const_name, true)) !== false && $a !== nil && $a != null) ? $a : self.$raise(e))
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          };
        }, TMP_1.$$arity = 1);
        return (Opal.defn(self, '$method_missing', TMP_2 = function $$method_missing(method_name, $a_rest) {
          var $b, $c, $d, $e, self = this, args, $iter = TMP_2.$$p, block = $iter || nil, method = nil, component_class = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }
          TMP_2.$$p = null;
          method = method_name.$gsub(/_as_node/, "");
          component_class = (($scope.get('React')).$$scope.get('NativeLibrary')).$import_const_from_native(self, method, false);
          if (component_class !== false && component_class !== nil && component_class != null) {
            } else {
            ($b = ($c = self).$_reactrb_original_method_missing, $b.$$p = block.$to_proc(), $b).apply($c, [method].concat(Opal.to_a(args)))
          };
          if (method['$=='](method_name)) {
            return ($b = ($d = (($scope.get('React')).$$scope.get('RenderingContext'))).$render, $b.$$p = block.$to_proc(), $b).apply($d, [component_class].concat(Opal.to_a(args)))
            } else {
            return ($b = ($e = (($scope.get('React')).$$scope.get('RenderingContext'))).$build_only, $b.$$p = block.$to_proc(), $b).apply($e, [component_class].concat(Opal.to_a(args)))
          };
        }, TMP_2.$$arity = -2), nil) && 'method_missing';
      })(Opal.get_singleton_class(self))
    })($scope.base, null)}
};
/* Generated by Opal 0.10.3 */
Opal.modules["opal/jquery/constants"] = function(Opal) {
  var $a, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require', '$raise']);
  self.$require("native");
  if ((($a = ($scope.JQUERY_CLASS != null)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
    return nil
    } else {
    return (function() {if ((($a = !!Opal.global.jQuery) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {return Opal.cdecl($scope, 'JQUERY_CLASS', Opal.cdecl($scope, 'JQUERY_SELECTOR', Opal.global.jQuery))}else if ((($a = !!Opal.global.Zepto) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {Opal.cdecl($scope, 'JQUERY_SELECTOR', Opal.global.Zepto);
    return Opal.cdecl($scope, 'JQUERY_CLASS', Opal.global.Zepto.zepto.Z);}else {return self.$raise($scope.get('NameError'), "Can't find jQuery or Zepto. jQuery must be included before opal-jquery")}})()
  };
};
/* Generated by Opal 0.10.3 */
Opal.modules["opal/jquery/element"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$to_n', '$include', '$each', '$alias_native', '$attr_reader', '$nil?', '$[]', '$[]=', '$raise', '$is_a?', '$has_key?', '$delete', '$call', '$gsub', '$upcase', '$compact', '$map', '$respond_to?', '$<<', '$Native', '$new']);
  self.$require("native");
  self.$require("opal/jquery/constants");
  return (function($base, $super) {
    function $Element(){};
    var self = $Element = $klass($base, $super, 'Element', $Element);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30, TMP_31, TMP_32, TMP_33, TMP_34, TMP_35, TMP_36, TMP_37, TMP_38, TMP_39, TMP_41, TMP_42, TMP_43, TMP_44, TMP_45;

    var $ = $scope.get('JQUERY_SELECTOR').$to_n();

    self.$include($scope.get('Enumerable'));

    Opal.defs(self, '$find', TMP_1 = function $$find(selector) {
      var self = this;

      return $(selector);
    }, TMP_1.$$arity = 1);

    Opal.defs(self, '$[]', TMP_2 = function(selector) {
      var self = this;

      return $(selector);
    }, TMP_2.$$arity = 1);

    Opal.defs(self, '$id', TMP_3 = function $$id(id) {
      var self = this;

      
      var el = document.getElementById(id);

      if (!el) {
        return nil;
      }

      return $(el);
    
    }, TMP_3.$$arity = 1);

    Opal.defs(self, '$new', TMP_4 = function(tag) {
      var self = this;

      if (tag == null) {
        tag = "div";
      }
      return $(document.createElement(tag));
    }, TMP_4.$$arity = -1);

    Opal.defs(self, '$parse', TMP_5 = function $$parse(str) {
      var self = this;

      return $.parseHTML ? $($.parseHTML(str)) : $(str);
    }, TMP_5.$$arity = 1);

    Opal.defs(self, '$expose', TMP_7 = function $$expose($a_rest) {
      var $b, $c, TMP_6, self = this, methods;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      methods = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        methods[$arg_idx - 0] = arguments[$arg_idx];
      }
      return ($b = ($c = methods).$each, $b.$$p = (TMP_6 = function(method){var self = TMP_6.$$s || this;
if (method == null) method = nil;
      return self.$alias_native(method)}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $b).call($c);
    }, TMP_7.$$arity = -1);

    self.$attr_reader("selector");

    self.$alias_native("after");

    self.$alias_native("before");

    self.$alias_native("parent");

    self.$alias_native("parents");

    self.$alias_native("prev");

    self.$alias_native("remove");

    self.$alias_native("hide");

    self.$alias_native("show");

    self.$alias_native("toggle");

    self.$alias_native("children");

    self.$alias_native("blur");

    self.$alias_native("closest");

    self.$alias_native("detach");

    self.$alias_native("focus");

    self.$alias_native("find");

    self.$alias_native("next");

    self.$alias_native("siblings");

    self.$alias_native("text");

    self.$alias_native("trigger");

    self.$alias_native("append");

    self.$alias_native("prepend");

    self.$alias_native("serialize");

    self.$alias_native("is");

    self.$alias_native("filter");

    self.$alias_native("not");

    self.$alias_native("last");

    self.$alias_native("wrap");

    self.$alias_native("stop");

    self.$alias_native("clone");

    self.$alias_native("empty");

    self.$alias_native("get");

    self.$alias_native("prop");

    Opal.alias(self, 'succ', 'next');

    Opal.alias(self, '<<', 'append');

    self.$alias_native("add_class", "addClass");

    self.$alias_native("append_to", "appendTo");

    self.$alias_native("has_class?", "hasClass");

    self.$alias_native("html=", "html");

    self.$alias_native("index");

    self.$alias_native("is?", "is");

    self.$alias_native("remove_attr", "removeAttr");

    self.$alias_native("remove_class", "removeClass");

    self.$alias_native("submit");

    self.$alias_native("text=", "text");

    self.$alias_native("toggle_class", "toggleClass");

    self.$alias_native("value=", "val");

    self.$alias_native("scroll_top=", "scrollTop");

    self.$alias_native("scroll_top", "scrollTop");

    self.$alias_native("scroll_left=", "scrollLeft");

    self.$alias_native("scroll_left", "scrollLeft");

    self.$alias_native("remove_attribute", "removeAttr");

    self.$alias_native("slide_down", "slideDown");

    self.$alias_native("slide_up", "slideUp");

    self.$alias_native("slide_toggle", "slideToggle");

    self.$alias_native("fade_toggle", "fadeToggle");

    self.$alias_native("height=", "height");

    self.$alias_native("width=", "width");

    self.$alias_native("outer_width", "outerWidth");

    self.$alias_native("outer_height", "outerHeight");

    Opal.defn(self, '$to_n', TMP_8 = function $$to_n() {
      var self = this;

      return self;
    }, TMP_8.$$arity = 0);

    Opal.defn(self, '$[]', TMP_9 = function(name) {
      var self = this;

      
      var value = self.attr(name);
      if(value === undefined) return nil;
      return value;
    
    }, TMP_9.$$arity = 1);

    Opal.defn(self, '$[]=', TMP_10 = function(name, value) {
      var $a, self = this;

      if ((($a = value['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.removeAttr(name);};
      return self.attr(name, value);
    }, TMP_10.$$arity = 2);

    Opal.defn(self, '$attr', TMP_11 = function $$attr($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      var size = args.length;
      switch (size) {
      case 1:
        return self['$[]'](args[0]);
        break;
      case 2:
        return self['$[]='](args[0], args[1]);
        break;
      default:
        self.$raise($scope.get('ArgumentError'), "#attr only accepts 1 or 2 arguments")
      }
    ;
    }, TMP_11.$$arity = -1);

    Opal.defn(self, '$has_attribute?', TMP_12 = function(name) {
      var self = this;

      return self.attr(name) !== undefined;
    }, TMP_12.$$arity = 1);

    Opal.defn(self, '$append_to_body', TMP_13 = function $$append_to_body() {
      var self = this;

      return self.appendTo(document.body);
    }, TMP_13.$$arity = 0);

    Opal.defn(self, '$append_to_head', TMP_14 = function $$append_to_head() {
      var self = this;

      return self.appendTo(document.head);
    }, TMP_14.$$arity = 0);

    Opal.defn(self, '$at', TMP_15 = function $$at(index) {
      var self = this;

      
      var length = self.length;

      if (index < 0) {
        index += length;
      }

      if (index < 0 || index >= length) {
        return nil;
      }

      return $(self[index]);
    
    }, TMP_15.$$arity = 1);

    Opal.defn(self, '$class_name', TMP_16 = function $$class_name() {
      var self = this;

      
      var first = self[0];
      return (first && first.className) || "";
    
    }, TMP_16.$$arity = 0);

    Opal.defn(self, '$class_name=', TMP_17 = function(name) {
      var self = this;

      
      for (var i = 0, length = self.length; i < length; i++) {
        self[i].className = name;
      }
    
      return self;
    }, TMP_17.$$arity = 1);

    Opal.defn(self, '$css', TMP_18 = function $$css(name, value) {
      var $a, $b, self = this;

      if (value == null) {
        value = nil;
      }
      if ((($a = ($b = value['$nil?'](), $b !== false && $b !== nil && $b != null ?name['$is_a?']($scope.get('String')) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.css(name)
      } else if ((($a = name['$is_a?']($scope.get('Hash'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.css(name.$to_n());
        } else {
        self.css(name, value);
      };
      return self;
    }, TMP_18.$$arity = -2);

    Opal.defn(self, '$animate', TMP_19 = function $$animate(params) {
      var $a, self = this, $iter = TMP_19.$$p, block = $iter || nil, speed = nil;

      TMP_19.$$p = null;
      speed = (function() {if ((($a = params['$has_key?']("speed")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return params.$delete("speed")
        } else {
        return 400
      }; return nil; })();
      
      self.animate(params.$to_n(), speed, function() {
        (function() {if ((block !== nil)) {
        return block.$call()
        } else {
        return nil
      }; return nil; })()
      })
    ;
    }, TMP_19.$$arity = 1);

    Opal.defn(self, '$data', TMP_20 = function $$data($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      var result = self.data.apply(self, args);
      return result == null ? nil : result;
    
    }, TMP_20.$$arity = -1);

    Opal.defn(self, '$effect', TMP_21 = function $$effect(name, $a_rest) {
      var $b, $c, TMP_22, $d, TMP_23, self = this, args, $iter = TMP_21.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      TMP_21.$$p = null;
      name = ($b = ($c = name).$gsub, $b.$$p = (TMP_22 = function(match){var self = TMP_22.$$s || this;
if (match == null) match = nil;
      return match['$[]'](1).$upcase()}, TMP_22.$$s = self, TMP_22.$$arity = 1, TMP_22), $b).call($c, /_\w/);
      args = ($b = ($d = args).$map, $b.$$p = (TMP_23 = function(a){var self = TMP_23.$$s || this, $a;
if (a == null) a = nil;
      if ((($a = a['$respond_to?']("to_n")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return a.$to_n()
          } else {
          return nil
        }}, TMP_23.$$s = self, TMP_23.$$arity = 1, TMP_23), $b).call($d).$compact();
      args['$<<'](function() { (function() {if ((block !== nil)) {
        return block.$call()
        } else {
        return nil
      }; return nil; })() });
      return self[name].apply(self, args);
    }, TMP_21.$$arity = -2);

    Opal.defn(self, '$visible?', TMP_24 = function() {
      var self = this;

      return self.is(':visible');
    }, TMP_24.$$arity = 0);

    Opal.defn(self, '$offset', TMP_25 = function $$offset() {
      var self = this;

      return self.$Native(self.offset());
    }, TMP_25.$$arity = 0);

    Opal.defn(self, '$each', TMP_26 = function $$each() {
      var self = this, $iter = TMP_26.$$p, $yield = $iter || nil;

      TMP_26.$$p = null;
      for (var i = 0, length = self.length; i < length; i++) {
      Opal.yield1($yield, $(self[i]));
      };
      return self;
    }, TMP_26.$$arity = 0);

    Opal.defn(self, '$first', TMP_27 = function $$first() {
      var self = this;

      return self.length ? self.first() : nil;
    }, TMP_27.$$arity = 0);

    Opal.defn(self, '$html', TMP_28 = function $$html(content) {
      var self = this;

      
      if (content != null) {
        return self.html(content);
      }

      return self.html() || '';
    
    }, TMP_28.$$arity = -1);

    Opal.defn(self, '$id', TMP_29 = function $$id() {
      var self = this;

      
      var first = self[0];
      return (first && first.id) || "";
    
    }, TMP_29.$$arity = 0);

    Opal.defn(self, '$id=', TMP_30 = function(id) {
      var self = this;

      
      var first = self[0];

      if (first) {
        first.id = id;
      }

      return self;
    
    }, TMP_30.$$arity = 1);

    Opal.defn(self, '$tag_name', TMP_31 = function $$tag_name() {
      var self = this;

      return self.length > 0 ? self[0].tagName.toLowerCase() : nil;
    }, TMP_31.$$arity = 0);

    Opal.defn(self, '$inspect', TMP_32 = function $$inspect() {
      var self = this;

      
      if      (self[0] === document) return '#<Element [document]>'
      else if (self[0] === window  ) return '#<Element [window]>'

      var val, el, str, result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        el  = self[i];
        if (!el.tagName) { return '#<Element ['+el.toString()+']'; }

        str = "<" + el.tagName.toLowerCase();

        if (val = el.id) str += (' id="' + val + '"');
        if (val = el.className) str += (' class="' + val + '"');

        result.push(str + '>');
      }

      return '#<Element [' + result.join(', ') + ']>';
    
    }, TMP_32.$$arity = 0);

    Opal.defn(self, '$to_s', TMP_33 = function $$to_s() {
      var self = this;

      
      var val, el, result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        el  = self[i];

        result.push(el.outerHTML)
      }

      return result.join(', ');
    
    }, TMP_33.$$arity = 0);

    Opal.defn(self, '$length', TMP_34 = function $$length() {
      var self = this;

      return self.length;
    }, TMP_34.$$arity = 0);

    Opal.defn(self, '$any?', TMP_35 = function() {
      var self = this;

      return self.length > 0;
    }, TMP_35.$$arity = 0);

    Opal.defn(self, '$empty?', TMP_36 = function() {
      var self = this;

      return self.length === 0;
    }, TMP_36.$$arity = 0);

    Opal.alias(self, 'empty?', 'none?');

    Opal.defn(self, '$on', TMP_37 = function $$on(name, sel) {
      var self = this, $iter = TMP_37.$$p, block = $iter || nil;

      if (sel == null) {
        sel = nil;
      }
      TMP_37.$$p = null;
      
      var wrapper = function(evt) {
        if (evt.preventDefault) {
          evt = $scope.get('Event').$new(evt);
        }

        return block.apply(null, arguments);
      };

      block._jq_wrap = wrapper;

      if (sel == nil) {
        self.on(name, wrapper);
      }
      else {
        self.on(name, sel, wrapper);
      }
    ;
      return block;
    }, TMP_37.$$arity = -2);

    Opal.defn(self, '$one', TMP_38 = function $$one(name, sel) {
      var self = this, $iter = TMP_38.$$p, block = $iter || nil;

      if (sel == null) {
        sel = nil;
      }
      TMP_38.$$p = null;
      
      var wrapper = function(evt) {
        if (evt.preventDefault) {
          evt = $scope.get('Event').$new(evt);
        }

        return block.apply(null, arguments);
      };

      block._jq_wrap = wrapper;

      if (sel == nil) {
        self.one(name, wrapper);
      }
      else {
        self.one(name, sel, wrapper);
      }
    ;
      return block;
    }, TMP_38.$$arity = -2);

    Opal.defn(self, '$off', TMP_39 = function $$off(name, sel, block) {
      var self = this;

      if (block == null) {
        block = nil;
      }
      
      if (sel == null) {
        return self.off(name);
      }
      else if (block === nil) {
        return self.off(name, sel._jq_wrap);
      }
      else {
        return self.off(name, sel, block._jq_wrap);
      }
    
    }, TMP_39.$$arity = -3);

    Opal.defn(self, '$serialize_array', TMP_41 = function $$serialize_array() {
      var $a, $b, TMP_40, self = this;

      return ($a = ($b = (self.serializeArray())).$map, $a.$$p = (TMP_40 = function(e){var self = TMP_40.$$s || this;
if (e == null) e = nil;
      return $scope.get('Hash').$new(e)}, TMP_40.$$s = self, TMP_40.$$arity = 1, TMP_40), $a).call($b);
    }, TMP_41.$$arity = 0);

    Opal.alias(self, 'size', 'length');

    Opal.defn(self, '$value', TMP_42 = function $$value() {
      var self = this;

      return self.val() || "";
    }, TMP_42.$$arity = 0);

    Opal.defn(self, '$height', TMP_43 = function $$height() {
      var self = this;

      return self.height() || nil;
    }, TMP_43.$$arity = 0);

    Opal.defn(self, '$width', TMP_44 = function $$width() {
      var self = this;

      return self.width() || nil;
    }, TMP_44.$$arity = 0);

    return (Opal.defn(self, '$position', TMP_45 = function $$position() {
      var self = this;

      return self.$Native(self.position());
    }, TMP_45.$$arity = 0), nil) && 'position';
  })($scope.base, $scope.get('JQUERY_CLASS').$to_n());
};
/* Generated by Opal 0.10.3 */
Opal.modules["opal/jquery/window"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$include', '$find', '$on', '$to_proc', '$element', '$off', '$trigger', '$new']);
  self.$require("opal/jquery/element");
  (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Window(){};
      var self = $Window = $klass($base, $super, 'Window', $Window);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4;

      def.element = nil;
      self.$include($scope.get('Native'));

      Opal.defn(self, '$element', TMP_1 = function $$element() {
        var $a, self = this;

        return ((($a = self.element) !== false && $a !== nil && $a != null) ? $a : self.element = $scope.get('Element').$find(window));
      }, TMP_1.$$arity = 0);

      Opal.defn(self, '$on', TMP_2 = function $$on($a_rest) {
        var $b, $c, self = this, args, $iter = TMP_2.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        TMP_2.$$p = null;
        return ($b = ($c = self.$element()).$on, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args));
      }, TMP_2.$$arity = -1);

      Opal.defn(self, '$off', TMP_3 = function $$off($a_rest) {
        var $b, $c, self = this, args, $iter = TMP_3.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        TMP_3.$$p = null;
        return ($b = ($c = self.$element()).$off, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args));
      }, TMP_3.$$arity = -1);

      return (Opal.defn(self, '$trigger', TMP_4 = function $$trigger($a_rest) {
        var $b, self = this, args;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        return ($b = self.$element()).$trigger.apply($b, Opal.to_a(args));
      }, TMP_4.$$arity = -1), nil) && 'trigger';
    })($scope.base, null)
  })($scope.base);
  Opal.cdecl($scope, 'Window', (($scope.get('Browser')).$$scope.get('Window')).$new(window));
  return $gvars.window = $scope.get('Window');
};
/* Generated by Opal 0.10.3 */
Opal.modules["opal/jquery/document"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$to_n', '$call', '$new', '$ready?', '$resolve', '$module_function', '$find', '$extend']);
  self.$require("opal/jquery/constants");
  self.$require("opal/jquery/element");
  (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DocumentMethods, self = $DocumentMethods = $module($base, 'DocumentMethods');

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_3, $a, $b, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8;

      var $ = $scope.get('JQUERY_SELECTOR').$to_n();

      Opal.defn(self, '$ready?', TMP_1 = function() {
        var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil;

        TMP_1.$$p = null;
        if ((block !== nil)) {
          if ((($a = (($b = Opal.cvars['@@__isReady']) == null ? nil : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return block.$call()
            } else {
            return $(block);
          }
          } else {
          return nil
        };
      }, TMP_1.$$arity = 0);

      Opal.defn(self, '$ready', TMP_3 = function $$ready() {
        var $a, $b, TMP_2, self = this, promise = nil;

        promise = $scope.get('Promise').$new();
        ($a = ($b = $scope.get('Document'))['$ready?'], $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

        return promise.$resolve()}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2), $a).call($b);
        return promise;
      }, TMP_3.$$arity = 0);

      self.$module_function("ready?");

      ($a = ($b = self)['$ready?'], $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

      return (Opal.cvars['@@__isReady'] = true)}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($b);

      Opal.defn(self, '$title', TMP_5 = function $$title() {
        var self = this;

        return document.title;
      }, TMP_5.$$arity = 0);

      Opal.defn(self, '$title=', TMP_6 = function(title) {
        var self = this;

        return document.title = title;
      }, TMP_6.$$arity = 1);

      Opal.defn(self, '$head', TMP_7 = function $$head() {
        var self = this;

        return $scope.get('Element').$find(document.head);
      }, TMP_7.$$arity = 0);

      Opal.defn(self, '$body', TMP_8 = function $$body() {
        var self = this;

        return $scope.get('Element').$find(document.body);
      }, TMP_8.$$arity = 0);
    })($scope.base)
  })($scope.base);
  Opal.cdecl($scope, 'Document', $scope.get('Element').$find(document));
  $scope.get('Document').$extend((($scope.get('Browser')).$$scope.get('DocumentMethods')));
  return $gvars.document = $scope.get('Document');
};
/* Generated by Opal 0.10.3 */
Opal.modules["opal/jquery/event"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$to_n', '$stop', '$prevent']);
  self.$require("opal/jquery/constants");
  return (function($base, $super) {
    function $Event(){};
    var self = $Event = $klass($base, $super, 'Event', $Event);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22;

    def["native"] = nil;
    var $ = $scope.get('JQUERY_SELECTOR').$to_n();

    Opal.defn(self, '$initialize', TMP_1 = function $$initialize(native$) {
      var self = this;

      return self["native"] = native$;
    }, TMP_1.$$arity = 1);

    Opal.defn(self, '$to_n', TMP_2 = function $$to_n() {
      var self = this;

      return self["native"];
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$[]', TMP_3 = function(name) {
      var self = this;

      return self["native"][name];
    }, TMP_3.$$arity = 1);

    Opal.defn(self, '$type', TMP_4 = function $$type() {
      var self = this;

      return self["native"].type;
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$element', TMP_5 = function $$element() {
      var self = this;

      return $(self["native"].currentTarget);
    }, TMP_5.$$arity = 0);

    Opal.alias(self, 'current_target', 'element');

    Opal.defn(self, '$target', TMP_6 = function $$target() {
      var self = this;

      return $(self["native"].target);
    }, TMP_6.$$arity = 0);

    Opal.defn(self, '$prevented?', TMP_7 = function() {
      var self = this;

      return self["native"].isDefaultPrevented();
    }, TMP_7.$$arity = 0);

    Opal.defn(self, '$prevent', TMP_8 = function $$prevent() {
      var self = this;

      return self["native"].preventDefault();
    }, TMP_8.$$arity = 0);

    Opal.defn(self, '$stopped?', TMP_9 = function() {
      var self = this;

      return self["native"].isPropagationStopped();
    }, TMP_9.$$arity = 0);

    Opal.defn(self, '$stop', TMP_10 = function $$stop() {
      var self = this;

      return self["native"].stopPropagation();
    }, TMP_10.$$arity = 0);

    Opal.defn(self, '$stop_immediate', TMP_11 = function $$stop_immediate() {
      var self = this;

      return self["native"].stopImmediatePropagation();
    }, TMP_11.$$arity = 0);

    Opal.defn(self, '$kill', TMP_12 = function $$kill() {
      var self = this;

      self.$stop();
      return self.$prevent();
    }, TMP_12.$$arity = 0);

    Opal.defn(self, '$page_x', TMP_13 = function $$page_x() {
      var self = this;

      return self["native"].pageX;
    }, TMP_13.$$arity = 0);

    Opal.defn(self, '$page_y', TMP_14 = function $$page_y() {
      var self = this;

      return self["native"].pageY;
    }, TMP_14.$$arity = 0);

    Opal.defn(self, '$touch_x', TMP_15 = function $$touch_x() {
      var self = this;

      return self["native"].originalEvent.touches[0].pageX;
    }, TMP_15.$$arity = 0);

    Opal.defn(self, '$touch_y', TMP_16 = function $$touch_y() {
      var self = this;

      return self["native"].originalEvent.touches[0].pageY;
    }, TMP_16.$$arity = 0);

    Opal.defn(self, '$ctrl_key', TMP_17 = function $$ctrl_key() {
      var self = this;

      return self["native"].ctrlKey;
    }, TMP_17.$$arity = 0);

    Opal.defn(self, '$meta_key', TMP_18 = function $$meta_key() {
      var self = this;

      return self["native"].metaKey;
    }, TMP_18.$$arity = 0);

    Opal.defn(self, '$alt_key', TMP_19 = function $$alt_key() {
      var self = this;

      return self["native"].altKey;
    }, TMP_19.$$arity = 0);

    Opal.defn(self, '$shift_key', TMP_20 = function $$shift_key() {
      var self = this;

      return self["native"].shiftKey;
    }, TMP_20.$$arity = 0);

    Opal.defn(self, '$key_code', TMP_21 = function $$key_code() {
      var self = this;

      return self["native"].keyCode;
    }, TMP_21.$$arity = 0);

    Opal.defn(self, '$which', TMP_22 = function $$which() {
      var self = this;

      return self["native"].which;
    }, TMP_22.$$arity = 0);

    Opal.alias(self, 'default_prevented?', 'prevented?');

    Opal.alias(self, 'prevent_default', 'prevent');

    Opal.alias(self, 'propagation_stopped?', 'stopped?');

    Opal.alias(self, 'stop_propagation', 'stop');

    return Opal.alias(self, 'stop_immediate_propagation', 'stop_immediate');
  })($scope.base, null);
};
/* Generated by Opal 0.10.3 */
Opal.modules["promise"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$resolve', '$new', '$reject', '$attr_reader', '$===', '$value', '$has_key?', '$keys', '$!', '$==', '$<<', '$>>', '$exception?', '$[]', '$resolved?', '$rejected?', '$error', '$include?', '$action', '$realized?', '$raise', '$^', '$call', '$resolve!', '$exception!', '$any?', '$each', '$reject!', '$there_can_be_only_one!', '$then', '$to_proc', '$fail', '$always', '$trace', '$class', '$object_id', '$+', '$inspect', '$act?', '$nil?', '$prev', '$push', '$concat', '$it', '$proc', '$reverse', '$pop', '$<=', '$length', '$shift', '$-', '$wait', '$map', '$reduce', '$try', '$tap', '$all?', '$find']);
  return (function($base, $super) {
    function $Promise(){};
    var self = $Promise = $klass($base, $super, 'Promise', $Promise);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_17, TMP_18, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30, TMP_31;

    def.value = def.action = def.exception = def.realized = def.next = def.delayed = def.error = def.prev = nil;
    Opal.defs(self, '$value', TMP_1 = function $$value(value) {
      var self = this;

      return self.$new().$resolve(value);
    }, TMP_1.$$arity = 1);

    Opal.defs(self, '$error', TMP_2 = function $$error(value) {
      var self = this;

      return self.$new().$reject(value);
    }, TMP_2.$$arity = 1);

    Opal.defs(self, '$when', TMP_3 = function $$when($a_rest) {
      var self = this, promises;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      promises = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        promises[$arg_idx - 0] = arguments[$arg_idx];
      }
      return $scope.get('When').$new(promises);
    }, TMP_3.$$arity = -1);

    self.$attr_reader("error", "prev", "next");

    Opal.defn(self, '$initialize', TMP_4 = function $$initialize(action) {
      var self = this;

      if (action == null) {
        action = $hash2([], {});
      }
      self.action = action;
      self.realized = false;
      self.exception = false;
      self.value = nil;
      self.error = nil;
      self.delayed = false;
      self.prev = nil;
      return self.next = [];
    }, TMP_4.$$arity = -1);

    Opal.defn(self, '$value', TMP_5 = function $$value() {
      var $a, self = this;

      if ((($a = $scope.get('Promise')['$==='](self.value)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.value.$value()
        } else {
        return self.value
      };
    }, TMP_5.$$arity = 0);

    Opal.defn(self, '$act?', TMP_6 = function() {
      var $a, self = this;

      return ((($a = self.action['$has_key?']("success")) !== false && $a !== nil && $a != null) ? $a : self.action['$has_key?']("always"));
    }, TMP_6.$$arity = 0);

    Opal.defn(self, '$action', TMP_7 = function $$action() {
      var self = this;

      return self.action.$keys();
    }, TMP_7.$$arity = 0);

    Opal.defn(self, '$exception?', TMP_8 = function() {
      var self = this;

      return self.exception;
    }, TMP_8.$$arity = 0);

    Opal.defn(self, '$realized?', TMP_9 = function() {
      var self = this;

      return self.realized['$!']()['$!']();
    }, TMP_9.$$arity = 0);

    Opal.defn(self, '$resolved?', TMP_10 = function() {
      var self = this;

      return self.realized['$==']("resolve");
    }, TMP_10.$$arity = 0);

    Opal.defn(self, '$rejected?', TMP_11 = function() {
      var self = this;

      return self.realized['$==']("reject");
    }, TMP_11.$$arity = 0);

    Opal.defn(self, '$^', TMP_12 = function(promise) {
      var self = this;

      promise['$<<'](self);
      self['$>>'](promise);
      return promise;
    }, TMP_12.$$arity = 1);

    Opal.defn(self, '$<<', TMP_13 = function(promise) {
      var self = this;

      self.prev = promise;
      return self;
    }, TMP_13.$$arity = 1);

    Opal.defn(self, '$>>', TMP_14 = function(promise) {
      var $a, $b, $c, self = this;

      self.next['$<<'](promise);
      if ((($a = self['$exception?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        promise.$reject(self.delayed['$[]'](0))
      } else if ((($a = self['$resolved?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        promise.$resolve((function() {if ((($a = self.delayed) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.delayed['$[]'](0)
          } else {
          return self.$value()
        }; return nil; })())
      } else if ((($a = self['$rejected?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = ((($b = self.action['$has_key?']("failure")['$!']()) !== false && $b !== nil && $b != null) ? $b : $scope.get('Promise')['$==='](((function() {if ((($c = self.delayed) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          return self.delayed['$[]'](0)
          } else {
          return self.error
        }; return nil; })())))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          promise.$reject((function() {if ((($a = self.delayed) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.delayed['$[]'](0)
            } else {
            return self.$error()
          }; return nil; })())
        } else if ((($a = promise.$action()['$include?']("always")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          promise.$reject((function() {if ((($a = self.delayed) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.delayed['$[]'](0)
            } else {
            return self.$error()
          }; return nil; })())}};
      return self;
    }, TMP_14.$$arity = 1);

    Opal.defn(self, '$resolve', TMP_15 = function $$resolve(value) {
      var $a, $b, self = this, block = nil, e = nil;

      if (value == null) {
        value = nil;
      }
      if ((($a = self['$realized?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "the promise has already been realized")};
      if ((($a = $scope.get('Promise')['$==='](value)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return (value['$<<'](self.prev))['$^'](self)};
      try {
        if ((($a = block = ((($b = self.action['$[]']("success")) !== false && $b !== nil && $b != null) ? $b : self.action['$[]']("always"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          value = block.$call(value)};
        self['$resolve!'](value);
      } catch ($err) {
        if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
          try {
            self['$exception!'](e)
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };
      return self;
    }, TMP_15.$$arity = -1);

    Opal.defn(self, '$resolve!', TMP_17 = function(value) {
      var $a, $b, TMP_16, self = this;

      self.realized = "resolve";
      self.value = value;
      if ((($a = self.next['$any?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = self.next).$each, $a.$$p = (TMP_16 = function(p){var self = TMP_16.$$s || this;
if (p == null) p = nil;
        return p.$resolve(value)}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16), $a).call($b)
        } else {
        return self.delayed = [value]
      };
    }, TMP_17.$$arity = 1);

    Opal.defn(self, '$reject', TMP_18 = function $$reject(value) {
      var $a, $b, self = this, block = nil, e = nil;

      if (value == null) {
        value = nil;
      }
      if ((($a = self['$realized?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "the promise has already been realized")};
      if ((($a = $scope.get('Promise')['$==='](value)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return (value['$<<'](self.prev))['$^'](self)};
      try {
        if ((($a = block = ((($b = self.action['$[]']("failure")) !== false && $b !== nil && $b != null) ? $b : self.action['$[]']("always"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          value = block.$call(value)};
        if ((($a = self.action['$has_key?']("always")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self['$resolve!'](value)
          } else {
          self['$reject!'](value)
        };
      } catch ($err) {
        if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
          try {
            self['$exception!'](e)
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };
      return self;
    }, TMP_18.$$arity = -1);

    Opal.defn(self, '$reject!', TMP_20 = function(value) {
      var $a, $b, TMP_19, self = this;

      self.realized = "reject";
      self.error = value;
      if ((($a = self.next['$any?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = self.next).$each, $a.$$p = (TMP_19 = function(p){var self = TMP_19.$$s || this;
if (p == null) p = nil;
        return p.$reject(value)}, TMP_19.$$s = self, TMP_19.$$arity = 1, TMP_19), $a).call($b)
        } else {
        return self.delayed = [value]
      };
    }, TMP_20.$$arity = 1);

    Opal.defn(self, '$exception!', TMP_21 = function(error) {
      var self = this;

      self.exception = true;
      return self['$reject!'](error);
    }, TMP_21.$$arity = 1);

    Opal.defn(self, '$then', TMP_22 = function $$then() {
      var self = this, $iter = TMP_22.$$p, block = $iter || nil;

      TMP_22.$$p = null;
      return self['$^']($scope.get('Promise').$new($hash2(["success"], {"success": block})));
    }, TMP_22.$$arity = 0);

    Opal.defn(self, '$then!', TMP_23 = function() {
      var $a, $b, self = this, $iter = TMP_23.$$p, block = $iter || nil;

      TMP_23.$$p = null;
      self['$there_can_be_only_one!']();
      return ($a = ($b = self).$then, $a.$$p = block.$to_proc(), $a).call($b);
    }, TMP_23.$$arity = 0);

    Opal.alias(self, 'do', 'then');

    Opal.alias(self, 'do!', 'then!');

    Opal.defn(self, '$fail', TMP_24 = function $$fail() {
      var self = this, $iter = TMP_24.$$p, block = $iter || nil;

      TMP_24.$$p = null;
      return self['$^']($scope.get('Promise').$new($hash2(["failure"], {"failure": block})));
    }, TMP_24.$$arity = 0);

    Opal.defn(self, '$fail!', TMP_25 = function() {
      var $a, $b, self = this, $iter = TMP_25.$$p, block = $iter || nil;

      TMP_25.$$p = null;
      self['$there_can_be_only_one!']();
      return ($a = ($b = self).$fail, $a.$$p = block.$to_proc(), $a).call($b);
    }, TMP_25.$$arity = 0);

    Opal.alias(self, 'rescue', 'fail');

    Opal.alias(self, 'catch', 'fail');

    Opal.alias(self, 'rescue!', 'fail!');

    Opal.alias(self, 'catch!', 'fail!');

    Opal.defn(self, '$always', TMP_26 = function $$always() {
      var self = this, $iter = TMP_26.$$p, block = $iter || nil;

      TMP_26.$$p = null;
      return self['$^']($scope.get('Promise').$new($hash2(["always"], {"always": block})));
    }, TMP_26.$$arity = 0);

    Opal.defn(self, '$always!', TMP_27 = function() {
      var $a, $b, self = this, $iter = TMP_27.$$p, block = $iter || nil;

      TMP_27.$$p = null;
      self['$there_can_be_only_one!']();
      return ($a = ($b = self).$always, $a.$$p = block.$to_proc(), $a).call($b);
    }, TMP_27.$$arity = 0);

    Opal.alias(self, 'finally', 'always');

    Opal.alias(self, 'ensure', 'always');

    Opal.alias(self, 'finally!', 'always!');

    Opal.alias(self, 'ensure!', 'always!');

    Opal.defn(self, '$trace', TMP_28 = function $$trace(depth) {
      var self = this, $iter = TMP_28.$$p, block = $iter || nil;

      if (depth == null) {
        depth = nil;
      }
      TMP_28.$$p = null;
      return self['$^']($scope.get('Trace').$new(depth, block));
    }, TMP_28.$$arity = -1);

    Opal.defn(self, '$trace!', TMP_29 = function($a_rest) {
      var $b, $c, self = this, args, $iter = TMP_29.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_29.$$p = null;
      self['$there_can_be_only_one!']();
      return ($b = ($c = self).$trace, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args));
    }, TMP_29.$$arity = -1);

    Opal.defn(self, '$there_can_be_only_one!', TMP_30 = function() {
      var $a, self = this;

      if ((($a = self.next['$any?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$raise($scope.get('ArgumentError'), "a promise has already been chained")
        } else {
        return nil
      };
    }, TMP_30.$$arity = 0);

    Opal.defn(self, '$inspect', TMP_31 = function $$inspect() {
      var $a, self = this, result = nil;

      result = "#<" + (self.$class()) + "(" + (self.$object_id()) + ")";
      if ((($a = self.next['$any?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        result = $rb_plus(result, " >> " + (self.next.$inspect()))};
      if ((($a = self['$realized?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        result = $rb_plus(result, ": " + ((((($a = self.value) !== false && $a !== nil && $a != null) ? $a : self.error)).$inspect()) + ">")
        } else {
        result = $rb_plus(result, ">")
      };
      return result;
    }, TMP_31.$$arity = 0);

    (function($base, $super) {
      function $Trace(){};
      var self = $Trace = $klass($base, $super, 'Trace', $Trace);

      var def = self.$$proto, $scope = self.$$scope, TMP_32, TMP_33;

      Opal.defs(self, '$it', TMP_32 = function $$it(promise) {
        var $a, $b, self = this, current = nil, prev = nil;

        current = [];
        if ((($a = ((($b = promise['$act?']()) !== false && $b !== nil && $b != null) ? $b : promise.$prev()['$nil?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          current.$push(promise.$value())};
        if ((($a = prev = promise.$prev()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return current.$concat(self.$it(prev))
          } else {
          return current
        };
      }, TMP_32.$$arity = 1);

      return (Opal.defn(self, '$initialize', TMP_33 = function $$initialize(depth, block) {
        var $a, $b, $c, $d, TMP_34, self = this, $iter = TMP_33.$$p, $yield = $iter || nil;

        TMP_33.$$p = null;
        self.depth = depth;
        return ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_33, false)), $a.$$p = null, $a).call($b, $hash2(["success"], {"success": ($c = ($d = self).$proc, $c.$$p = (TMP_34 = function(){var self = TMP_34.$$s || this, $e, $f, trace = nil;

        trace = $scope.get('Trace').$it(self).$reverse();
          trace.$pop();
          if ((($e = (($f = depth !== false && depth !== nil && depth != null) ? $rb_le(depth, trace.$length()) : depth)) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
            trace.$shift($rb_minus(trace.$length(), depth))};
          return ($e = block).$call.apply($e, Opal.to_a(trace));}, TMP_34.$$s = self, TMP_34.$$arity = 0, TMP_34), $c).call($d)}));
      }, TMP_33.$$arity = 2), nil) && 'initialize';
    })($scope.base, self);

    return (function($base, $super) {
      function $When(){};
      var self = $When = $klass($base, $super, 'When', $When);

      var def = self.$$proto, $scope = self.$$scope, TMP_35, TMP_37, TMP_39, TMP_41, TMP_44, TMP_46, TMP_47;

      def.wait = nil;
      Opal.defn(self, '$initialize', TMP_35 = function $$initialize(promises) {
        var $a, $b, $c, TMP_36, self = this, $iter = TMP_35.$$p, $yield = $iter || nil;

        if (promises == null) {
          promises = [];
        }
        TMP_35.$$p = null;
        ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_35, false)), $a.$$p = null, $a).call($b);
        self.wait = [];
        return ($a = ($c = promises).$each, $a.$$p = (TMP_36 = function(promise){var self = TMP_36.$$s || this;
if (promise == null) promise = nil;
        return self.$wait(promise)}, TMP_36.$$s = self, TMP_36.$$arity = 1, TMP_36), $a).call($c);
      }, TMP_35.$$arity = -1);

      Opal.defn(self, '$each', TMP_37 = function $$each() {
        var $a, $b, TMP_38, self = this, $iter = TMP_37.$$p, block = $iter || nil;

        TMP_37.$$p = null;
        if (block !== false && block !== nil && block != null) {
          } else {
          self.$raise($scope.get('ArgumentError'), "no block given")
        };
        return ($a = ($b = self).$then, $a.$$p = (TMP_38 = function(values){var self = TMP_38.$$s || this, $c, $d;
if (values == null) values = nil;
        return ($c = ($d = values).$each, $c.$$p = block.$to_proc(), $c).call($d)}, TMP_38.$$s = self, TMP_38.$$arity = 1, TMP_38), $a).call($b);
      }, TMP_37.$$arity = 0);

      Opal.defn(self, '$collect', TMP_39 = function $$collect() {
        var $a, $b, TMP_40, self = this, $iter = TMP_39.$$p, block = $iter || nil;

        TMP_39.$$p = null;
        if (block !== false && block !== nil && block != null) {
          } else {
          self.$raise($scope.get('ArgumentError'), "no block given")
        };
        return ($a = ($b = self).$then, $a.$$p = (TMP_40 = function(values){var self = TMP_40.$$s || this, $c, $d;
if (values == null) values = nil;
        return $scope.get('When').$new(($c = ($d = values).$map, $c.$$p = block.$to_proc(), $c).call($d))}, TMP_40.$$s = self, TMP_40.$$arity = 1, TMP_40), $a).call($b);
      }, TMP_39.$$arity = 0);

      Opal.defn(self, '$inject', TMP_41 = function $$inject($a_rest) {
        var $b, $c, TMP_42, self = this, args, $iter = TMP_41.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        TMP_41.$$p = null;
        return ($b = ($c = self).$then, $b.$$p = (TMP_42 = function(values){var self = TMP_42.$$s || this, $a, $d;
if (values == null) values = nil;
        return ($a = ($d = values).$reduce, $a.$$p = block.$to_proc(), $a).apply($d, Opal.to_a(args))}, TMP_42.$$s = self, TMP_42.$$arity = 1, TMP_42), $b).call($c);
      }, TMP_41.$$arity = -1);

      Opal.alias(self, 'map', 'collect');

      Opal.alias(self, 'reduce', 'inject');

      Opal.defn(self, '$wait', TMP_44 = function $$wait(promise) {
        var $a, $b, TMP_43, self = this;

        if ((($a = $scope.get('Promise')['$==='](promise)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          promise = $scope.get('Promise').$value(promise)
        };
        if ((($a = promise['$act?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          promise = promise.$then()};
        self.wait['$<<'](promise);
        ($a = ($b = promise).$always, $a.$$p = (TMP_43 = function(){var self = TMP_43.$$s || this, $c;
          if (self.next == null) self.next = nil;

        if ((($c = self.next['$any?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return self.$try()
            } else {
            return nil
          }}, TMP_43.$$s = self, TMP_43.$$arity = 0, TMP_43), $a).call($b);
        return self;
      }, TMP_44.$$arity = 1);

      Opal.alias(self, 'and', 'wait');

      Opal.defn(self, '$>>', TMP_46 = function($a_rest) {
        var $b, $c, TMP_45, $d, $e, self = this, $iter = TMP_46.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

        TMP_46.$$p = null;
        $zuper = [];
        
        for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
          $zuper[$zuper_index] = arguments[$zuper_index];
        }
        return ($b = ($c = ($d = ($e = self, Opal.find_super_dispatcher(self, '>>', TMP_46, false)), $d.$$p = $iter, $d).apply($e, $zuper)).$tap, $b.$$p = (TMP_45 = function(){var self = TMP_45.$$s || this;

        return self.$try()}, TMP_45.$$s = self, TMP_45.$$arity = 0, TMP_45), $b).call($c);
      }, TMP_46.$$arity = -1);

      return (Opal.defn(self, '$try', TMP_47 = function() {
        var $a, $b, $c, $d, self = this, promise = nil;

        if ((($a = ($b = ($c = self.wait)['$all?'], $b.$$p = "realized?".$to_proc(), $b).call($c)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = promise = ($b = ($d = self.wait).$find, $b.$$p = "rejected?".$to_proc(), $b).call($d)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$reject(promise.$error())
            } else {
            return self.$resolve(($a = ($b = self.wait).$map, $a.$$p = "value".$to_proc(), $a).call($b))
          }
          } else {
          return nil
        };
      }, TMP_47.$$arity = 0), nil) && 'try';
    })($scope.base, self);
  })($scope.base, null)
};
/* Generated by Opal 0.10.3 */
Opal.modules["opal/jquery/http"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$to_n', '$each', '$define_singleton_method', '$send', '$new', '$define_method', '$attr_reader', '$delete', '$update', '$upcase', '$succeed', '$fail', '$promise', '$parse', '$private', '$tap', '$proc', '$ok?', '$resolve', '$reject', '$from_object', '$call']);
  self.$require("json");
  self.$require("native");
  self.$require("promise");
  self.$require("opal/jquery/constants");
  return (function($base, $super) {
    function $HTTP(){};
    var self = $HTTP = $klass($base, $super, 'HTTP', $HTTP);

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_13, TMP_14, TMP_15;

    def.settings = def.payload = def.url = def.method = def.handler = def.json = def.body = def.ok = def.xhr = def.promise = def.status_code = nil;
    var $ = $scope.get('JQUERY_SELECTOR').$to_n();

    Opal.cdecl($scope, 'ACTIONS', ["get", "post", "put", "delete", "patch", "head"]);

    ($a = ($b = $scope.get('ACTIONS')).$each, $a.$$p = (TMP_1 = function(action){var self = TMP_1.$$s || this, $c, $d, TMP_2, $e, TMP_3;
if (action == null) action = nil;
    ($c = ($d = self).$define_singleton_method, $c.$$p = (TMP_2 = function(url, options){var self = TMP_2.$$s || this, block;

        block = TMP_2.$$p || nil, TMP_2.$$p = null;
        if (options == null) {
          options = $hash2([], {});
        }if (url == null) url = nil;
      return self.$new().$send(action, url, options, block)}, TMP_2.$$s = self, TMP_2.$$arity = -2, TMP_2), $c).call($d, action);
      return ($c = ($e = self).$define_method, $c.$$p = (TMP_3 = function(url, options){var self = TMP_3.$$s || this, block;

        block = TMP_3.$$p || nil, TMP_3.$$p = null;
        if (options == null) {
          options = $hash2([], {});
        }if (url == null) url = nil;
      return self.$send(action, url, options, block)}, TMP_3.$$s = self, TMP_3.$$arity = -2, TMP_3), $c).call($e, action);}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $a).call($b);

    Opal.defs(self, '$setup', TMP_4 = function $$setup() {
      var self = this;

      return $scope.get('Hash').$new($.ajaxSetup());
    }, TMP_4.$$arity = 0);

    Opal.defs(self, '$setup=', TMP_5 = function(settings) {
      var self = this;

      return $.ajaxSetup(settings.$to_n());
    }, TMP_5.$$arity = 1);

    self.$attr_reader("body", "error_message", "method", "status_code", "url", "xhr");

    Opal.defn(self, '$initialize', TMP_6 = function $$initialize() {
      var self = this;

      self.settings = $hash2([], {});
      return self.ok = true;
    }, TMP_6.$$arity = 0);

    Opal.defn(self, '$send', TMP_7 = function $$send(method, url, options, block) {
      var $a, self = this, settings = nil, payload = nil;

      self.method = method;
      self.url = url;
      self.payload = options.$delete("payload");
      self.handler = block;
      self.settings.$update(options);
      $a = [self.settings.$to_n(), self.payload], settings = $a[0], payload = $a[1], $a;
      
      if (typeof(payload) === 'string') {
        settings.data = payload;
      }
      else if (payload != nil) {
        settings.data = payload.$to_json();
        settings.contentType = 'application/json';
      }

      settings.url  = self.url;
      settings.type = self.method.$upcase();

      settings.success = function(data, status, xhr) {
        return self.$succeed(data, status, xhr);
      };

      settings.error = function(xhr, status, error) {
        return self.$fail(xhr, status, error);
      };

      $.ajax(settings);
    ;
      if ((($a = self.handler) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self
        } else {
        return self.$promise()
      };
    }, TMP_7.$$arity = 4);

    Opal.defn(self, '$json', TMP_8 = function $$json() {
      var $a, self = this;

      return ((($a = self.json) !== false && $a !== nil && $a != null) ? $a : self.json = $scope.get('JSON').$parse(self.body));
    }, TMP_8.$$arity = 0);

    Opal.defn(self, '$ok?', TMP_9 = function() {
      var self = this;

      return self.ok;
    }, TMP_9.$$arity = 0);

    Opal.defn(self, '$get_header', TMP_10 = function $$get_header(key) {
      var self = this;

      
      var value = self.xhr.getResponseHeader(key);
      return (value === null) ? nil : value;
    ;
    }, TMP_10.$$arity = 1);

    self.$private();

    Opal.defn(self, '$promise', TMP_13 = function $$promise() {
      var $a, $b, TMP_11, self = this;

      if ((($a = self.promise) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.promise};
      return self.promise = ($a = ($b = $scope.get('Promise').$new()).$tap, $a.$$p = (TMP_11 = function(promise){var self = TMP_11.$$s || this, $c, $d, TMP_12;
if (promise == null) promise = nil;
      return self.handler = ($c = ($d = self).$proc, $c.$$p = (TMP_12 = function(res){var self = TMP_12.$$s || this, $e;
if (res == null) res = nil;
        if ((($e = res['$ok?']()) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
            return promise.$resolve(res)
            } else {
            return promise.$reject(res)
          }}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12), $c).call($d)}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11), $a).call($b);
    }, TMP_13.$$arity = 0);

    Opal.defn(self, '$succeed', TMP_14 = function $$succeed(data, status, xhr) {
      var $a, self = this;

      
      self.body = data;
      self.xhr  = xhr;
      self.status_code = xhr.status;

      if (typeof(data) === 'object') {
        self.json = $scope.get('JSON').$from_object(data);
      }
    ;
      if ((($a = self.handler) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.handler.$call(self)
        } else {
        return nil
      };
    }, TMP_14.$$arity = 3);

    return (Opal.defn(self, '$fail', TMP_15 = function $$fail(xhr, status, error) {
      var $a, self = this;

      
      self.body = xhr.responseText;
      self.xhr = xhr;
      self.status_code = xhr.status;
    ;
      self.ok = false;
      if ((($a = self.handler) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.handler.$call(self)
        } else {
        return nil
      };
    }, TMP_15.$$arity = 3), nil) && 'fail';
  })($scope.base, null);
};
/* Generated by Opal 0.10.3 */
Opal.modules["opal/jquery/kernel"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    Opal.defn(self, '$alert', TMP_1 = function $$alert(msg) {
      var self = this;

      alert(msg);
      return nil;
    }, TMP_1.$$arity = 1)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["opal/jquery"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$==', '$require']);
  if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
    self.$require("opal/jquery/window");
    self.$require("opal/jquery/document");
    self.$require("opal/jquery/element");
    self.$require("opal/jquery/event");
    self.$require("opal/jquery/http");
    return self.$require("opal/jquery/kernel");}
};
/* Generated by Opal 0.10.3 */
Opal.modules["opal-jquery"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  return self.$require("opal/jquery")
};
/* Generated by Opal 0.10.3 */
Opal.modules["paggio/utils"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module;

  Opal.add_stubs(['$size', '$min', '$scan', '$gsub', '$proc', '$===', '$merge', '$to_proc', '$merge!']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base) {
      var $Utils, self = $Utils = $module($base, 'Utils');

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_3, TMP_5;

      Opal.defs(self, '$heredoc', TMP_1 = function $$heredoc(string) {
        var self = this, indent = nil;

        indent = (function() {
        try {return string.$scan(/^[ \t]*(?=\S)/).$min().$size() } catch ($err) { 
          if (Opal.rescue($err, [$scope.get('StandardError')])) {
          return 0
          } else { throw $err; } }})();
        return string.$gsub((new RegExp("^[ \\t]{" + indent + "}")), "");
      }, TMP_1.$$arity = 1);

      Opal.defs(self, '$deep_merge', TMP_3 = function $$deep_merge(a, b) {
        var $a, $b, TMP_2, $c, self = this, merger = nil;

        merger = ($a = ($b = self).$proc, $a.$$p = (TMP_2 = function(key, v1, v2){var self = TMP_2.$$s || this, $c, $d;
if (key == null) key = nil;if (v1 == null) v1 = nil;if (v2 == null) v2 = nil;
        if ((($c = ($d = $scope.get('Hash')['$==='](v1), $d !== false && $d !== nil && $d != null ?$scope.get('Hash')['$==='](v2) : $d)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return ($c = ($d = v1).$merge, $c.$$p = merger.$to_proc(), $c).call($d, v2)
            } else {
            return v2
          }}, TMP_2.$$s = self, TMP_2.$$arity = 3, TMP_2), $a).call($b);
        return ($a = ($c = a).$merge, $a.$$p = merger.$to_proc(), $a).call($c, b);
      }, TMP_3.$$arity = 2);

      Opal.defs(self, '$deep_merge!', TMP_5 = function(a, b) {
        var $a, $b, TMP_4, $c, self = this, merger = nil;

        merger = ($a = ($b = self).$proc, $a.$$p = (TMP_4 = function(key, v1, v2){var self = TMP_4.$$s || this, $c, $d;
if (key == null) key = nil;if (v1 == null) v1 = nil;if (v2 == null) v2 = nil;
        if ((($c = ($d = $scope.get('Hash')['$==='](v1), $d !== false && $d !== nil && $d != null ?$scope.get('Hash')['$==='](v2) : $d)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            ($c = ($d = v1)['$merge!'], $c.$$p = merger.$to_proc(), $c).call($d, v2);
            return v1;
            } else {
            return v2
          }}, TMP_4.$$s = self, TMP_4.$$arity = 3, TMP_4), $a).call($b);
        return ($a = ($c = a)['$merge!'], $a.$$p = merger.$to_proc(), $a).call($c, b);
      }, TMP_5.$$arity = 2);
    })($scope.base)
  })($scope.base, null)
};
/* Generated by Opal 0.10.3 */
Opal.modules["paggio/html/helpers"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$define_method', '$instance_exec', '$to_proc', '$do', '$defhelper', '$[]=']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_4;

        Opal.defs(self, '$defhelper', TMP_1 = function $$defhelper(name) {
          var $a, $b, TMP_2, self = this, $iter = TMP_1.$$p, block = $iter || nil;

          TMP_1.$$p = null;
          return ($a = ($b = self).$define_method, $a.$$p = (TMP_2 = function($c_rest){var self = TMP_2.$$s || this, body, args, $d, $e, $f;

            body = TMP_2.$$p || nil, TMP_2.$$p = null;
            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
          ($d = ($e = self).$instance_exec, $d.$$p = block.$to_proc(), $d).apply($e, Opal.to_a(args));
            if (body !== false && body !== nil && body != null) {
              ($d = ($f = self).$do, $d.$$p = body.$to_proc(), $d).call($f)};
            return self;}, TMP_2.$$s = self, TMP_2.$$arity = -1, TMP_2), $a).call($b, name);
        }, TMP_1.$$arity = 1);

        return (Opal.defs(self, '$defhelper!', TMP_4 = function(name, attribute) {
          var $a, $b, TMP_3, self = this;

          if (attribute == null) {
            attribute = name;
          }
          return ($a = ($b = self).$defhelper, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;
            if (self.attributes == null) self.attributes = nil;

          return self.attributes['$[]='](attribute, true)}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $a).call($b, "" + (name) + "!");
        }, TMP_4.$$arity = -2), nil) && 'defhelper!';
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};
/* Generated by Opal 0.10.3 */
Opal.modules["paggio/html/element/a"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each', '$defhelper', '$[]=', '$to_s', '$defhelper!', '$<<']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $A(){};
          var self = $A = $klass($base, $super, 'A', $A);

          var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, $c, TMP_3;

          ($a = ($b = $hash2(["href", "url", "rel", "relative", "target", "type", "lang", "language", "media"], {"href": "href", "url": "href", "rel": "rel", "relative": "rel", "target": "target", "type": "type", "lang": "hreflang", "language": "hreflang", "media": "media"})).$each, $a.$$p = (TMP_1 = function(name, attribute){var self = TMP_1.$$s || this, $c, $d, TMP_2;
if (name == null) name = nil;if (attribute == null) attribute = nil;
          return ($c = ($d = self).$defhelper, $c.$$p = (TMP_2 = function(value){var self = TMP_2.$$s || this;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            return self.attributes['$[]='](name, value.$to_s())}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $c).call($d, name)}, TMP_1.$$s = self, TMP_1.$$arity = 2, TMP_1), $a).call($b);

          self['$defhelper!']("download");

          self['$defhelper!']("ping");

          return ($a = ($c = self).$defhelper, $a.$$p = (TMP_3 = function(string){var self = TMP_3.$$s || this;
if (string == null) string = nil;
          return self['$<<'](string)}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($c, "text");
        })($scope.base, self)
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};
/* Generated by Opal 0.10.3 */
Opal.modules["paggio/html/element/base"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each', '$defhelper', '$[]=', '$to_s']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Base(){};
          var self = $Base = $klass($base, $super, 'Base', $Base);

          var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1;

          return ($a = ($b = $hash2(["href", "url", "target"], {"href": "href", "url": "href", "target": "target"})).$each, $a.$$p = (TMP_1 = function(name, attribute){var self = TMP_1.$$s || this, $c, $d, TMP_2;
if (name == null) name = nil;if (attribute == null) attribute = nil;
          return ($c = ($d = self).$defhelper, $c.$$p = (TMP_2 = function(value){var self = TMP_2.$$s || this;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            return self.attributes['$[]='](name, value.$to_s())}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $c).call($d, name)}, TMP_1.$$s = self, TMP_1.$$arity = 2, TMP_1), $a).call($b)
        })($scope.base, self)
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};
/* Generated by Opal 0.10.3 */
Opal.modules["paggio/html/element/blockquote"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$defhelper', '$[]=', '$to_s']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Blockquote(){};
          var self = $Blockquote = $klass($base, $super, 'Blockquote', $Blockquote);

          var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1;

          return ($a = ($b = self).$defhelper, $a.$$p = (TMP_1 = function(value){var self = TMP_1.$$s || this;
            if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
          return self.attributes['$[]=']("cite", value.$to_s())}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $a).call($b, "cite")
        })($scope.base, self)
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};
/* Generated by Opal 0.10.3 */
Opal.modules["paggio/html/element/button"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each', '$defhelper', '$[]=', '$to_s', '$defhelper!']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Button(){};
          var self = $Button = $klass($base, $super, 'Button', $Button);

          var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1;

          ($a = ($b = $hash2(["form", "name", "type", "value", "action", "encoding", "method", "target"], {"form": "form", "name": "name", "type": "type", "value": "value", "action": "formaction", "encoding": "formenctype", "method": "formmethod", "target": "formtarget"})).$each, $a.$$p = (TMP_1 = function(name, attributes){var self = TMP_1.$$s || this, $c, $d, TMP_2;
if (name == null) name = nil;if (attributes == null) attributes = nil;
          return ($c = ($d = self).$defhelper, $c.$$p = (TMP_2 = function(value){var self = TMP_2.$$s || this;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            return self.attributes['$[]='](name, value.$to_s())}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $c).call($d, name)}, TMP_1.$$s = self, TMP_1.$$arity = 2, TMP_1), $a).call($b);

          self['$defhelper!']("autofocus");

          return self['$defhelper!']("disabled");
        })($scope.base, self)
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};
/* Generated by Opal 0.10.3 */
Opal.modules["paggio/html/element/canvas"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each', '$defhelper', '$[]=', '$to_s']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Canvas(){};
          var self = $Canvas = $klass($base, $super, 'Canvas', $Canvas);

          var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1;

          return ($a = ($b = $hash2(["width", "height"], {"width": "width", "height": "height"})).$each, $a.$$p = (TMP_1 = function(name, attribute){var self = TMP_1.$$s || this, $c, $d, TMP_2;
if (name == null) name = nil;if (attribute == null) attribute = nil;
          return ($c = ($d = self).$defhelper, $c.$$p = (TMP_2 = function(value){var self = TMP_2.$$s || this;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            return self.attributes['$[]='](name, value.$to_s())}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $c).call($d, name)}, TMP_1.$$s = self, TMP_1.$$arity = 2, TMP_1), $a).call($b)
        })($scope.base, self)
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};
/* Generated by Opal 0.10.3 */
Opal.modules["paggio/html/element/embed"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each', '$defhelper', '$[]=']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Embed(){};
          var self = $Embed = $klass($base, $super, 'Embed', $Embed);

          var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1;

          return ($a = ($b = $hash2(["type", "height", "width"], {"type": "type", "height": "height", "width": "width"})).$each, $a.$$p = (TMP_1 = function(name, attribute){var self = TMP_1.$$s || this, $c, $d, TMP_2;
if (name == null) name = nil;if (attribute == null) attribute = nil;
          return ($c = ($d = self).$defhelper, $c.$$p = (TMP_2 = function(value){var self = TMP_2.$$s || this;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            return self.attributes['$[]='](name, value)}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $c).call($d, name)}, TMP_1.$$s = self, TMP_1.$$arity = 2, TMP_1), $a).call($b)
        })($scope.base, self)
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};
/* Generated by Opal 0.10.3 */
Opal.modules["paggio/html/element/img"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each', '$defhelper', '$[]=', '$to_s']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Img(){};
          var self = $Img = $klass($base, $super, 'Img', $Img);

          var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, $c, TMP_3;

          ($a = ($b = $hash2(["src", "url", "alt", "description", "height", "width", "map"], {"src": "src", "url": "src", "alt": "alt", "description": "alt", "height": "height", "width": "width", "map": "usemap"})).$each, $a.$$p = (TMP_1 = function(name, attribute){var self = TMP_1.$$s || this, $c, $d, TMP_2;
if (name == null) name = nil;if (attribute == null) attribute = nil;
          return ($c = ($d = self).$defhelper, $c.$$p = (TMP_2 = function(value){var self = TMP_2.$$s || this;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            return self.attributes['$[]='](name, value.$to_s())}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $c).call($d, name)}, TMP_1.$$s = self, TMP_1.$$arity = 2, TMP_1), $a).call($b);

          return ($a = ($c = self).$defhelper, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;
            if (self.attributes == null) self.attributes = nil;

          return self.attributes['$[]=']("ismap", true)}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $a).call($c, "map!");
        })($scope.base, self)
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};
/* Generated by Opal 0.10.3 */
Opal.modules["paggio/html/element/input"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each', '$defhelper', '$[]=']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Input(){};
          var self = $Input = $klass($base, $super, 'Input', $Input);

          var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1;

          return ($a = ($b = $hash2(["type", "name", "value", "size", "place_holder", "read_only", "required", "limit"], {"type": "type", "name": "name", "value": "value", "size": "size", "place_holder": "placeholder", "read_only": "readonly", "required": "required", "limit": "maxlength"})).$each, $a.$$p = (TMP_1 = function(name, attribute){var self = TMP_1.$$s || this, $c, $d, TMP_2;
if (name == null) name = nil;if (attribute == null) attribute = nil;
          return ($c = ($d = self).$defhelper, $c.$$p = (TMP_2 = function(value){var self = TMP_2.$$s || this;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            return self.attributes['$[]='](name, value)}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $c).call($d, name)}, TMP_1.$$s = self, TMP_1.$$arity = 2, TMP_1), $a).call($b)
        })($scope.base, self)
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};
/* Generated by Opal 0.10.3 */
Opal.modules["paggio/html/element/link"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each', '$defhelper', '$[]=', '$to_s']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Link(){};
          var self = $Link = $klass($base, $super, 'Link', $Link);

          var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1;

          return ($a = ($b = $hash2(["cross_origin", "href", "href_lang", "media", "rel", "sizes", "type"], {"cross_origin": "crossorigin", "href": "href", "href_lang": "hreflang", "media": "media", "rel": "rel", "sizes": "sizes", "type": "type"})).$each, $a.$$p = (TMP_1 = function(name, attribute){var self = TMP_1.$$s || this, $c, $d, TMP_2;
if (name == null) name = nil;if (attribute == null) attribute = nil;
          return ($c = ($d = self).$defhelper, $c.$$p = (TMP_2 = function(value){var self = TMP_2.$$s || this;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            return self.attributes['$[]='](name, value.$to_s())}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $c).call($d, name)}, TMP_1.$$s = self, TMP_1.$$arity = 2, TMP_1), $a).call($b)
        })($scope.base, self)
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};
/* Generated by Opal 0.10.3 */
Opal.modules["paggio/html/element/object"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each', '$defhelper', '$[]=']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Object(){};
          var self = $Object = $klass($base, $super, 'Object', $Object);

          var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1;

          return ($a = ($b = $hash2(["type", "data", "name", "height", "width"], {"type": "type", "data": "data", "name": "name", "height": "height", "width": "width"})).$each, $a.$$p = (TMP_1 = function(name, attribute){var self = TMP_1.$$s || this, $c, $d, TMP_2;
if (name == null) name = nil;if (attribute == null) attribute = nil;
          return ($c = ($d = self).$defhelper, $c.$$p = (TMP_2 = function(value){var self = TMP_2.$$s || this;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            return self.attributes['$[]='](name, value)}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $c).call($d, name)}, TMP_1.$$s = self, TMP_1.$$arity = 2, TMP_1), $a).call($b)
        })($scope.base, self)
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};
/* Generated by Opal 0.10.3 */
Opal.modules["paggio/html/element/option"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$each', '$defhelper', '$[]=', '$defhelper!']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Option(){};
          var self = $Option = $klass($base, $super, 'Option', $Option);

          var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1;

          ($a = ($b = ["label", "value"]).$each, $a.$$p = (TMP_1 = function(name){var self = TMP_1.$$s || this, $c, $d, TMP_2;
if (name == null) name = nil;
          return ($c = ($d = self).$defhelper, $c.$$p = (TMP_2 = function(value){var self = TMP_2.$$s || this;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            return self.attributes['$[]='](name, value)}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $c).call($d, name)}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $a).call($b);

          self['$defhelper!']("disabled");

          return self['$defhelper!']("selected");
        })($scope.base, self)
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};
/* Generated by Opal 0.10.3 */
Opal.modules["paggio/html/element/optgroup"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$each', '$defhelper', '$[]=', '$defhelper!']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Optgroup(){};
          var self = $Optgroup = $klass($base, $super, 'Optgroup', $Optgroup);

          var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1;

          ($a = ($b = ["label", "value"]).$each, $a.$$p = (TMP_1 = function(name){var self = TMP_1.$$s || this, $c, $d, TMP_2;
if (name == null) name = nil;
          return ($c = ($d = self).$defhelper, $c.$$p = (TMP_2 = function(value){var self = TMP_2.$$s || this;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            return self.attributes['$[]='](name, value)}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $c).call($d, name)}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $a).call($b);

          self['$defhelper!']("disabled");

          return self['$defhelper!']("selected");
        })($scope.base, self)
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};
/* Generated by Opal 0.10.3 */
Opal.modules["paggio/html/element/select"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$each', '$defhelper', '$[]=', '$defhelper!']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Select(){};
          var self = $Select = $klass($base, $super, 'Select', $Select);

          var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1;

          ($a = ($b = ["form", "name", "size"]).$each, $a.$$p = (TMP_1 = function(name){var self = TMP_1.$$s || this, $c, $d, TMP_2;
if (name == null) name = nil;
          return ($c = ($d = self).$defhelper, $c.$$p = (TMP_2 = function(value){var self = TMP_2.$$s || this;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            return self.attributes['$[]='](name, value)}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $c).call($d, name)}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $a).call($b);

          self['$defhelper!']("auto_focus", "autofocus");

          self['$defhelper!']("disabled");

          return self['$defhelper!']("required");
        })($scope.base, self)
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};
/* Generated by Opal 0.10.3 */
Opal.modules["paggio/html/element/td"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$defhelper', '$[]=', '$to_s', '$join']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Td(){};
          var self = $Td = $klass($base, $super, 'Td', $Td);

          var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, $c, TMP_2, $d, TMP_3;

          ($a = ($b = self).$defhelper, $a.$$p = (TMP_1 = function(value){var self = TMP_1.$$s || this;
            if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
          return self.attributes['$[]=']("colspan", value.$to_s())}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $a).call($b, "columns");

          ($a = ($c = self).$defhelper, $a.$$p = (TMP_2 = function(value){var self = TMP_2.$$s || this;
            if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
          return self.attributes['$[]=']("rowspan", value.$to_s())}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $a).call($c, "rows");

          return ($a = ($d = self).$defhelper, $a.$$p = (TMP_3 = function($e_rest){var self = TMP_3.$$s || this, args;
            if (self.attributes == null) self.attributes = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
          return self.attributes['$[]=']("headers", args.$join(" "))}, TMP_3.$$s = self, TMP_3.$$arity = -1, TMP_3), $a).call($d, "headers");
        })($scope.base, self)
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};
/* Generated by Opal 0.10.3 */
Opal.modules["paggio/html/element"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2, $range = Opal.range;

  Opal.add_stubs(['$require', '$==', '$capitalize', '$const_defined?', '$new', '$const_get', '$each', '$to_proc', '$<<', '$end_with?', '$to_s', '$[]=', '$[]', '$===', '$has_key?', '$unshift', '$|', '$split', '$delete', '$to_a', '$deep_merge!', '$>>', '$extend!', '$pop', '$join', '$heredoc', '$defhelper', '$map', '$empty?', '$upcase', '$inspect']);
  self.$require("paggio/html/element/a");
  self.$require("paggio/html/element/base");
  self.$require("paggio/html/element/blockquote");
  self.$require("paggio/html/element/button");
  self.$require("paggio/html/element/canvas");
  self.$require("paggio/html/element/embed");
  self.$require("paggio/html/element/img");
  self.$require("paggio/html/element/input");
  self.$require("paggio/html/element/link");
  self.$require("paggio/html/element/object");
  self.$require("paggio/html/element/option");
  self.$require("paggio/html/element/optgroup");
  self.$require("paggio/html/element/select");
  self.$require("paggio/html/element/td");
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, $a, $b, TMP_9, $c, TMP_11, TMP_13;

        def.children = def.attributes = def.class_names = def.owner = def.name = nil;
        Opal.defs(self, '$new', TMP_1 = function(owner, name, attributes) {
          var $a, $b, $c, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, const$ = nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

          if (attributes == null) {
            attributes = $hash2([], {});
          }
          TMP_1.$$p = null;
          $zuper = [];
          
          for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
            $zuper[$zuper_index] = arguments[$zuper_index];
          }
          if (self['$==']($scope.get('Element'))) {
            } else {
            return ($a = ($b = self, Opal.find_super_dispatcher(self, 'new', TMP_1, false, $Element)), $a.$$p = $iter, $a).apply($b, $zuper)
          };
          const$ = name.$capitalize();
          if ((($a = self['$const_defined?'](const$)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$const_get(const$).$new(owner, name, attributes)
            } else {
            return ($a = ($c = self, Opal.find_super_dispatcher(self, 'new', TMP_1, false, $Element)), $a.$$p = $iter, $a).apply($c, $zuper)
          };
        }, TMP_1.$$arity = -3);

        Opal.defn(self, '$initialize', TMP_2 = function $$initialize(owner, name, attributes) {
          var self = this;

          if (attributes == null) {
            attributes = $hash2([], {});
          }
          self.owner = owner;
          self.name = name;
          self.attributes = attributes;
          self.children = [];
          return self.class_names = [];
        }, TMP_2.$$arity = -3);

        Opal.defn(self, '$each', TMP_3 = function $$each() {
          var $a, $b, self = this, $iter = TMP_3.$$p, block = $iter || nil;

          TMP_3.$$p = null;
          return ($a = ($b = self.children).$each, $a.$$p = block.$to_proc(), $a).call($b);
        }, TMP_3.$$arity = 0);

        Opal.defn(self, '$<<', TMP_4 = function(what) {
          var self = this;

          self.children['$<<'](what);
          return self;
        }, TMP_4.$$arity = 1);

        Opal.defn(self, '$method_missing', TMP_5 = function $$method_missing(name, content) {
          var $a, $b, $c, self = this, $iter = TMP_5.$$p, block = $iter || nil;

          if (content == null) {
            content = nil;
          }
          TMP_5.$$p = null;
          if ((($a = name.$to_s()['$end_with?']("!")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.attributes['$[]=']("id", name['$[]']($range(0, -2, false)))
            } else {
            self.class_names['$<<'](name)
          };
          if ((($a = Opal.get('Hash')['$==='](content)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            if ((($a = ((($b = content['$has_key?']("class")) !== false && $b !== nil && $b != null) ? $b : content['$has_key?']("classes"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              ($a = self.class_names).$unshift.apply($a, Opal.to_a((content.$delete("class").$to_s().$split()['$|'](content.$delete("classes").$to_a()))))};
            ((Opal.get('Paggio')).$$scope.get('Utils'))['$deep_merge!'](self.attributes, content);
          } else if (content !== false && content !== nil && content != null) {
            self['$>>'](content)};
          if (block !== false && block !== nil && block != null) {
            ($b = ($c = self.owner)['$extend!'], $b.$$p = block.$to_proc(), $b).call($c, self)};
          return self;
        }, TMP_5.$$arity = -2);

        Opal.defn(self, '$[]', TMP_6 = function($a_rest) {
          var $b, self = this, names, last = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          names = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            names[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ((($b = last = self.class_names.$pop()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            self.class_names['$<<']([last].concat(Opal.to_a(names)).$join("-"))};
          return self;
        }, TMP_6.$$arity = -1);

        Opal.defn(self, '$do', TMP_7 = function() {
          var $a, $b, self = this, $iter = TMP_7.$$p, block = $iter || nil;

          TMP_7.$$p = null;
          ($a = ($b = self.owner)['$extend!'], $a.$$p = block.$to_proc(), $a).call($b, self);
          return self;
        }, TMP_7.$$arity = 0);

        Opal.defn(self, '$>>', TMP_8 = function(content) {
          var self = this;

          self['$<<'](((Opal.get('Paggio')).$$scope.get('Utils')).$heredoc(content.$to_s()));
          return self;
        }, TMP_8.$$arity = 1);

        ($a = ($b = self).$defhelper, $a.$$p = (TMP_9 = function(hash){var self = TMP_9.$$s || this, $c, $d, TMP_10;
          if (self.attributes == null) self.attributes = nil;
if (hash == null) hash = nil;
        return self.attributes['$[]=']("style", ($c = ($d = hash).$map, $c.$$p = (TMP_10 = function(name, value){var self = TMP_10.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
          return "" + (name) + ": " + (value)}, TMP_10.$$s = self, TMP_10.$$arity = 2, TMP_10), $c).call($d).$join(";"))}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9), $a).call($b, "style");

        ($a = ($c = self).$defhelper, $a.$$p = (TMP_11 = function(hash){var self = TMP_11.$$s || this, $d, $e, TMP_12;
if (hash == null) hash = nil;
        return ($d = ($e = hash).$each, $d.$$p = (TMP_12 = function(name, value){var self = TMP_12.$$s || this;
            if (self.attributes == null) self.attributes = nil;
if (name == null) name = nil;if (value == null) value = nil;
          return self.attributes['$[]=']("data-" + (name), value.$to_s())}, TMP_12.$$s = self, TMP_12.$$arity = 2, TMP_12), $d).call($e)}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11), $a).call($c, "data");

        return (Opal.defn(self, '$inspect', TMP_13 = function $$inspect() {
          var $a, self = this;

          if ((($a = self.children['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return "#<HTML::Element(" + (self.name.$upcase()) + ")>"
            } else {
            return "#<HTML::Element(" + (self.name.$upcase()) + "): " + (self.children.$inspect()['$[]']($range(1, -2, false))) + ">"
          };
        }, TMP_13.$$arity = 0), nil) && 'inspect';
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null);
};
/* Generated by Opal 0.10.3 */
Opal.modules["paggio/html"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$require', '$attr_reader', '$raise', '$==', '$arity', '$instance_exec', '$to_proc', '$call', '$<<', '$first', '$===', '$instance_eval', '$each', '$end_with?', '$to_s', '$empty?', '$heredoc', '$shift', '$new', '$[]', '$inspect']);
  self.$require("paggio/html/helpers");
  self.$require("paggio/html/element");
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_8, TMP_9, TMP_11;

      def.current = def.roots = def.version = nil;
      self.$attr_reader("version");

      Opal.defn(self, '$initialize', TMP_1 = function $$initialize(version) {
        var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil;

        if (version == null) {
          version = 5;
        }
        TMP_1.$$p = null;
        if (block !== false && block !== nil && block != null) {
          } else {
          Opal.get('Kernel').$raise(Opal.get('ArgumentError'), "no block given")
        };
        self.version = version;
        self.roots = [];
        self.current = nil;
        if (block.$arity()['$=='](0)) {
          return ($a = ($b = self).$instance_exec, $a.$$p = block.$to_proc(), $a).call($b)
          } else {
          return block.$call(self)
        };
      }, TMP_1.$$arity = -1);

      Opal.defn(self, '$<<', TMP_2 = function(what) {
        var $a, self = this;

        return (((($a = self.current) !== false && $a !== nil && $a != null) ? $a : self.roots))['$<<'](what);
      }, TMP_2.$$arity = 1);

      Opal.defn(self, '$root!', TMP_3 = function() {
        var self = this;

        return self.roots.$first();
      }, TMP_3.$$arity = 0);

      Opal.defn(self, '$roots!', TMP_4 = function() {
        var self = this;

        return self.roots;
      }, TMP_4.$$arity = 0);

      Opal.defn(self, '$element!', TMP_5 = function() {
        var self = this;

        return self.current;
      }, TMP_5.$$arity = 0);

      Opal.defn(self, '$extend!', TMP_6 = function(element) {
        var $a, $b, TMP_7, self = this, $iter = TMP_6.$$p, block = $iter || nil, old = nil, result = nil;

        if (element == null) {
          element = nil;
        }
        TMP_6.$$p = null;
        $a = [self.current, element], old = $a[0], self.current = $a[1], $a;
        result = block.$call(self);
        if ((($a = Opal.get('String')['$==='](result)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          ($a = ($b = self.current).$instance_eval, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this;

          return self.inner_html = result}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $a).call($b)};
        self.current = old;
        return self;
      }, TMP_6.$$arity = -1);

      Opal.defn(self, '$each', TMP_8 = function $$each() {
        var $a, $b, self = this, $iter = TMP_8.$$p, block = $iter || nil;

        TMP_8.$$p = null;
        return ($a = ($b = self.roots).$each, $a.$$p = block.$to_proc(), $a).call($b);
      }, TMP_8.$$arity = 0);

      Opal.defn(self, '$method_missing', TMP_9 = function $$method_missing(name, $a_rest) {
        var $b, $c, $d, $e, TMP_10, self = this, args, $iter = TMP_9.$$p, block = $iter || nil, content = nil, element = nil, parent = nil, result = nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        TMP_9.$$p = null;
        $zuper = [];
        
        for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
          $zuper[$zuper_index] = arguments[$zuper_index];
        }
        if ((($b = name.$to_s()['$end_with?']("!")) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          return ($b = ($c = self, Opal.find_super_dispatcher(self, 'method_missing', TMP_9, false)), $b.$$p = $iter, $b).apply($c, $zuper)};
        if ((($b = ((($d = args['$empty?']()) !== false && $d !== nil && $d != null) ? $d : Opal.get('Hash')['$==='](args.$first()))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          } else {
          content = ((Opal.get('Paggio')).$$scope.get('Utils')).$heredoc(args.$shift().$to_s())
        };
        element = ($b = $scope.get('Element')).$new.apply($b, [self, name].concat(Opal.to_a(args)));
        if (content !== false && content !== nil && content != null) {
          element['$<<'](content)};
        if (block !== false && block !== nil && block != null) {
          parent = self.current;
          self.current = element;
          result = block.$call(self);
          self.current = parent;
          if ((($d = Opal.get('String')['$==='](result)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
            ($d = ($e = element).$instance_eval, $d.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this;

            return self.inner_html = result}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10), $d).call($e)};};
        self['$<<'](element);
        return element;
      }, TMP_9.$$arity = -2);

      return (Opal.defn(self, '$inspect', TMP_11 = function $$inspect() {
        var $a, self = this;

        if ((($a = self.roots['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "#<HTML(" + (self.version) + ")>"
          } else {
          return "#<HTML(" + (self.version) + "): " + (self.roots.$inspect()['$[]']($range(1, -2, false))) + ">"
        };
      }, TMP_11.$$arity = 0), nil) && 'inspect';
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null);
};
/* Generated by Opal 0.10.3 */
Opal.modules["paggio/css/unit"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var $a, $b, TMP_23, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$map', '$to_proc', '$attr_reader', '$===', '$respond_to?', '$raise', '$class', '$to_u', '$new', '$==', '$convert', '$type', '$number', '$hash', '$each', '$define_method', '$+', '$compatible?', '$-', '$*', '$/', '$to_i', '$to_f', '$private', '$include?', '$class_eval', '$old_percent', '$match', '$[]', '$__send__', '$downcase']);
  (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $CSS(){};
      var self = $CSS = $klass($base, $super, 'CSS', $CSS);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Unit(){};
        var self = $Unit = $klass($base, $super, 'Unit', $Unit);

        var def = self.$$proto, $scope = self.$$scope, $a, $b, $c, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, $d, TMP_6, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19;

        def.type = def.number = nil;
        Opal.cdecl($scope, 'TYPES', ($a = ($b = ["em", "ex", "ch", "rem", "vh", "vw", "vmin", "vmax", "px", "mm", "cm", "in", "pt", "pc", "s", "deg"]).$map, $a.$$p = "to_sym".$to_proc(), $a).call($b));

        Opal.cdecl($scope, 'COMPATIBLE', ($a = ($c = ["in", "pt", "mm", "cm", "px", "pc"]).$map, $a.$$p = "to_sym".$to_proc(), $a).call($c));

        self.$attr_reader("type", "number");

        Opal.defn(self, '$initialize', TMP_1 = function $$initialize(number, type) {
          var self = this;

          self.number = number;
          return self.type = type;
        }, TMP_1.$$arity = 2);

        Opal.defn(self, '$coerce', TMP_2 = function $$coerce(other) {
          var self = this;

          return [self, other];
        }, TMP_2.$$arity = 1);

        Opal.defn(self, '$==', TMP_3 = function(other) {
          var $a, self = this;

          if ((($a = $scope.get('Unit')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            if ((($a = other['$respond_to?']("to_u")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              } else {
              self.$raise($scope.get('TypeError'), "no implicit conversion of " + (other.$class()) + " into Unit")
            };
            other = other.$to_u();
          };
          if ((($a = $scope.get('Unit')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            other = $scope.get('Unit').$new(other, self.type)
          };
          return self.number['$=='](self.$convert(other, self.type));
        }, TMP_3.$$arity = 1);

        Opal.defn(self, '$===', TMP_4 = function(other) {
          var $a, self = this;

          return (($a = self.type['$=='](other.$type())) ? self.number['$=='](other.$number()) : self.type['$=='](other.$type()));
        }, TMP_4.$$arity = 1);

        Opal.alias(self, 'eql?', '==');

        Opal.defn(self, '$hash', TMP_5 = function $$hash() {
          var self = this;

          return [self.number, self.type].$hash();
        }, TMP_5.$$arity = 0);

        ($a = ($d = $scope.get('TYPES')).$each, $a.$$p = (TMP_6 = function(name){var self = TMP_6.$$s || this, $e, $f, TMP_7;
if (name == null) name = nil;
        return ($e = ($f = self).$define_method, $e.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this;

          return $scope.get('Unit').$new(self.$convert(self, name), name)}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $e).call($f, name)}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $a).call($d);

        Opal.defn(self, '$+', TMP_8 = function(other) {
          var $a, $b, self = this;

          if ((($a = $scope.get('Unit')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            return $scope.get('Unit').$new($rb_plus(self.number, other), self.type)
          };
          if (self.type['$=='](other.$type())) {
            return $scope.get('Unit').$new($rb_plus(self.number, other.$number()), self.type)
          } else if ((($a = ($b = self['$compatible?'](self), $b !== false && $b !== nil && $b != null ?self['$compatible?'](other) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('Unit').$new($rb_plus(self.number, self.$convert(other, self.type)), self.type)
            } else {
            return self.$raise($scope.get('ArgumentError'), "" + (other.$type()) + " isn't compatible with " + (self.type))
          };
        }, TMP_8.$$arity = 1);

        Opal.defn(self, '$-', TMP_9 = function(other) {
          var $a, $b, self = this;

          if ((($a = $scope.get('Unit')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            return $scope.get('Unit').$new($rb_minus(self.number, other), self.type)
          };
          if (self.type['$=='](other.$type())) {
            return $scope.get('Unit').$new($rb_minus(self.number, other.$number()), self.type)
          } else if ((($a = ($b = self['$compatible?'](self), $b !== false && $b !== nil && $b != null ?self['$compatible?'](other) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('Unit').$new($rb_minus(self.number, self.$convert(other, self.type)), self.type)
            } else {
            return self.$raise($scope.get('ArgumentError'), "" + (other.$type()) + " isn't compatible with " + (self.type))
          };
        }, TMP_9.$$arity = 1);

        Opal.defn(self, '$*', TMP_10 = function(other) {
          var $a, $b, self = this;

          if ((($a = $scope.get('Unit')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            return $scope.get('Unit').$new($rb_times(self.number, other), self.type)
          };
          if (self.type['$=='](other.$type())) {
            return $scope.get('Unit').$new($rb_times(self.number, other.$number()), self.type)
          } else if ((($a = ($b = self['$compatible?'](self), $b !== false && $b !== nil && $b != null ?self['$compatible?'](other) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('Unit').$new($rb_times(self.number, self.$convert(other, self.type)), self.type)
            } else {
            return self.$raise($scope.get('ArgumentError'), "" + (other.$type()) + " isn't compatible with " + (self.type))
          };
        }, TMP_10.$$arity = 1);

        Opal.defn(self, '$/', TMP_11 = function(other) {
          var $a, $b, self = this;

          if ((($a = $scope.get('Unit')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            return $scope.get('Unit').$new($rb_divide(self.number, other), self.type)
          };
          if (self.type['$=='](other.$type())) {
            return $scope.get('Unit').$new($rb_divide(self.number, other.$number()), self.type)
          } else if ((($a = ($b = self['$compatible?'](self), $b !== false && $b !== nil && $b != null ?self['$compatible?'](other) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('Unit').$new($rb_divide(self.number, self.$convert(other, self.type)), self.type)
            } else {
            return self.$raise($scope.get('ArgumentError'), "" + (other.$type()) + " isn't compatible with " + (self.type))
          };
        }, TMP_11.$$arity = 1);

        Opal.defn(self, '$-@', TMP_12 = function() {
          var self = this;

          return $scope.get('Unit').$new($rb_times(self.number, -1), self.type);
        }, TMP_12.$$arity = 0);

        Opal.defn(self, '$+@', TMP_13 = function() {
          var self = this;

          return $scope.get('Unit').$new(self.number, self.type);
        }, TMP_13.$$arity = 0);

        Opal.defn(self, '$to_i', TMP_14 = function $$to_i() {
          var self = this;

          return self.number.$to_i();
        }, TMP_14.$$arity = 0);

        Opal.defn(self, '$to_f', TMP_15 = function $$to_f() {
          var self = this;

          return self.number.$to_f();
        }, TMP_15.$$arity = 0);

        Opal.defn(self, '$to_u', TMP_16 = function $$to_u() {
          var self = this;

          return self;
        }, TMP_16.$$arity = 0);

        Opal.defn(self, '$to_s', TMP_17 = function $$to_s() {
          var self = this;

          return "" + (self.number) + (self.type);
        }, TMP_17.$$arity = 0);

        Opal.alias(self, 'to_str', 'to_s');

        Opal.alias(self, 'inspect', 'to_s');

        self.$private();

        Opal.defn(self, '$compatible?', TMP_18 = function(unit) {
          var self = this;

          return $scope.get('COMPATIBLE')['$include?'](unit.$type());
        }, TMP_18.$$arity = 1);

        return (Opal.defn(self, '$convert', TMP_19 = function $$convert(unit, type) {
          var self = this, value = nil, px = nil, $case = nil;

          value = unit.$number();
          if (unit.$type()['$=='](type)) {
            return value};
          px = (function() {$case = unit.$type();if ("in"['$===']($case)) {return $rb_times(value, 96)}else if ("pt"['$===']($case)) {return $rb_divide($rb_times(value, 4.0), 3.0)}else if ("pc"['$===']($case)) {return $rb_divide($rb_times($rb_divide(value, 12), 4.0), 3.0)}else if ("mm"['$===']($case)) {return $rb_times(value, 3.77953)}else if ("cm"['$===']($case)) {return $rb_times($rb_times(value, 10), 3.77953)}else if ("px"['$===']($case)) {return value}else { return nil }})();
          return (function() {$case = type;if ("in"['$===']($case)) {return $rb_divide(px, 96.0)}else if ("pt"['$===']($case)) {return $rb_divide($rb_divide(px, 4.0), 3.0)}else if ("pc"['$===']($case)) {return $rb_divide($rb_divide($rb_times(px, 12), 4.0), 3.0)}else if ("mm"['$===']($case)) {return $rb_divide(px, 3.77953)}else if ("cm"['$===']($case)) {return $rb_divide($rb_divide(px, 10), 3.77953)}else if ("px"['$===']($case)) {return px}else { return nil }})();
        }, TMP_19.$$arity = 2), nil) && 'convert';
      })($scope.base, null)
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null);
  (function($base, $super) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_20, TMP_22;

    ($a = ($b = (((((($scope.get('Paggio')).$$scope.get('CSS'))).$$scope.get('Unit'))).$$scope.get('TYPES'))).$each, $a.$$p = (TMP_20 = function(name){var self = TMP_20.$$s || this, $c, $d, TMP_21;
if (name == null) name = nil;
    return ($c = ($d = self).$define_method, $c.$$p = (TMP_21 = function(){var self = TMP_21.$$s || this;

      return (((($scope.get('Paggio')).$$scope.get('CSS'))).$$scope.get('Unit')).$new(self, name)}, TMP_21.$$s = self, TMP_21.$$arity = 0, TMP_21), $c).call($d, name)}, TMP_20.$$s = self, TMP_20.$$arity = 1, TMP_20), $a).call($b);

    return (Opal.defn(self, '$to_u', TMP_22 = function $$to_u() {
      var self = this;

      return self;
    }, TMP_22.$$arity = 0), nil) && 'to_u';
  })($scope.base, null);
  ($a = ($b = [$scope.get('Fixnum'), $scope.get('Float')]).$each, $a.$$p = (TMP_23 = function(klass){var self = TMP_23.$$s || this, $c, $d, TMP_24;
if (klass == null) klass = nil;
  return ($c = ($d = klass).$class_eval, $c.$$p = (TMP_24 = function(){var self = TMP_24.$$s || this, TMP_25;

    Opal.alias(self, 'old_percent', '%');
      return (Opal.def(self, '$%', TMP_25 = function(other) {
        var self = this;

        if (other == null) {
          other = nil;
        }
        if (other !== false && other !== nil && other != null) {
          return self.$old_percent(other)
          } else {
          return (((($scope.get('Paggio')).$$scope.get('CSS'))).$$scope.get('Unit')).$new(self, "%")
        };
      }, TMP_25.$$arity = -1), nil) && '%';}, TMP_24.$$s = self, TMP_24.$$arity = 0, TMP_24), $c).call($d)}, TMP_23.$$s = self, TMP_23.$$arity = 1, TMP_23), $a).call($b);
  (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope, TMP_26;

    return (Opal.defn(self, '$to_u', TMP_26 = function $$to_u() {
      var $a, self = this, matches = nil, value = nil, unit = nil;

      if ((($a = matches = self.$match(/^([\d+.]+)(.+)?$/)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        value = matches['$[]'](1).$to_f();
        if ((($a = unit = matches['$[]'](2)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return value.$__send__(unit.$downcase())
          } else {
          return value
        };
        } else {
        return 0
      };
    }, TMP_26.$$arity = 0), nil) && 'to_u'
  })($scope.base, null);
  return (function($base, $super) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.$$proto, $scope = self.$$scope, TMP_27;

    return (Opal.defn(self, '$to_u', TMP_27 = function $$to_u() {
      var self = this;

      return 0;
    }, TMP_27.$$arity = 0), nil) && 'to_u'
  })($scope.base, null);
};
/* Generated by Opal 0.10.3 */
Opal.modules["paggio/css/color"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$each', '$define_method', '$new', '$map', '$to_proc']);
  (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $CSS(){};
      var self = $CSS = $klass($base, $super, 'CSS', $CSS);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Color(){};
        var self = $Color = $klass($base, $super, 'Color', $Color);

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        return (Opal.defn(self, '$initialize', TMP_1 = function $$initialize(value, type) {
          var self = this;

          self.internal = value;
          return self.type = type;
        }, TMP_1.$$arity = 2), nil) && 'initialize'
      })($scope.base, null)
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null);
  (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_2, $c, $d;

    return ($a = ($b = ($c = ($d = ["rgb", "rgba", "hsl", "hsla"]).$map, $c.$$p = "to_sym".$to_proc(), $c).call($d)).$each, $a.$$p = (TMP_2 = function(name){var self = TMP_2.$$s || this, $c, $d, TMP_3;
if (name == null) name = nil;
    return ($c = ($d = self).$define_method, $c.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

      return (((($scope.get('Paggio')).$$scope.get('CSS'))).$$scope.get('Color')).$new(self, name)}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $c).call($d, name)}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $a).call($b)
  })($scope.base, null);
  return (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_4, $c, $d;

    return ($a = ($b = ($c = ($d = ["rgb", "rgba", "hsl", "hsla"]).$map, $c.$$p = "to_sym".$to_proc(), $c).call($d)).$each, $a.$$p = (TMP_4 = function(name){var self = TMP_4.$$s || this, $c, $d, TMP_5;
if (name == null) name = nil;
    return ($c = ($d = self).$define_method, $c.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

      return (((($scope.get('Paggio')).$$scope.get('CSS'))).$$scope.get('Color')).$new(self, name)}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $c).call($d, name)}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4), $a).call($b)
  })($scope.base, null);
};
/* Generated by Opal 0.10.3 */
Opal.modules["paggio/css/definition"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $range = Opal.range, $hash2 = Opal.hash2;

  Opal.add_stubs(['$new', '$==', '$arity', '$instance_exec', '$to_proc', '$call', '$empty?', '$each', '$inspect', '$to_s', '$define_method', '$a', '$===', '$first', '$>', '$length', '$raise', '$style', '$name', '$value', '$[]', '$join', '$map', '$to_i', '$*', '$end_with?', '$__send__', '$<<', '$last', '$pop', '$!', '$other', '$shift', '$horizontal?', '$private']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $CSS(){};
      var self = $CSS = $klass($base, $super, 'CSS', $CSS);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Definition(){};
        var self = $Definition = $klass($base, $super, 'Definition', $Definition);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, $a, $b, TMP_6, TMP_8, TMP_9, $c, TMP_10, $d, TMP_12, TMP_16, TMP_22, TMP_25, TMP_26, TMP_28, TMP_29, TMP_30, TMP_31, TMP_32, TMP_33, TMP_35, TMP_36;

        def.style = def.important = nil;
        Opal.cdecl($scope, 'Style', Opal.get('Struct').$new("name", "value", "important"));

        Opal.defn(self, '$initialize', TMP_1 = function $$initialize() {
          var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil;

          TMP_1.$$p = null;
          self.style = [];
          if (block !== false && block !== nil && block != null) {
            if (block.$arity()['$=='](0)) {
              return ($a = ($b = self).$instance_exec, $a.$$p = block.$to_proc(), $a).call($b)
              } else {
              return block.$call(self)
            }
            } else {
            return nil
          };
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$empty?', TMP_2 = function() {
          var self = this;

          return self.style['$empty?']();
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$each', TMP_3 = function $$each() {
          var $a, $b, self = this, $iter = TMP_3.$$p, block = $iter || nil;

          TMP_3.$$p = null;
          return ($a = ($b = self.style).$each, $a.$$p = block.$to_proc(), $a).call($b);
        }, TMP_3.$$arity = 0);

        Opal.defn(self, '$gradient', TMP_4 = function $$gradient($a_rest) {
          var $b, self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          return ($b = $scope.get('Gradient')).$new.apply($b, Opal.to_a(args));
        }, TMP_4.$$arity = -1);

        Opal.defn(self, '$url', TMP_5 = function $$url(value) {
          var self = this;

          return "url(" + (value.$to_s().$inspect()) + ")";
        }, TMP_5.$$arity = 1);

        ($a = ($b = ["url", "blur", "brightness", "rotate", "contrast", "grayscale", "invert", "opacity", "saturate", "sepia"]).$each, $a.$$p = (TMP_6 = function(name){var self = TMP_6.$$s || this, $c, $d, TMP_7;
if (name == null) name = nil;
        return ($c = ($d = self).$define_method, $c.$$p = (TMP_7 = function(value){var self = TMP_7.$$s || this;
if (value == null) value = nil;
          return "" + (name) + "(" + (value) + ")"}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $c).call($d, name)}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $a).call($b);

        Opal.defn(self, '$rgb', TMP_8 = function $$rgb(r, g, b) {
          var self = this;

          return "rgb(" + (r) + ", " + (g) + ", " + (b) + ", " + (self.$a()) + ")";
        }, TMP_8.$$arity = 3);

        Opal.defn(self, '$rgba', TMP_9 = function $$rgba(r, g, b, a) {
          var self = this;

          return "rgba(" + (r) + ", " + (g) + ", " + (b) + ", " + (a) + ")";
        }, TMP_9.$$arity = 4);

        ($a = ($c = ["scale", "skew", "translate"]).$each, $a.$$p = (TMP_10 = function(name){var self = TMP_10.$$s || this, $d, $e, TMP_11;
if (name == null) name = nil;
        return ($d = ($e = self).$define_method, $d.$$p = (TMP_11 = function(a, b){var self = TMP_11.$$s || this;

            if (b == null) {
              b = nil;
            }if (a == null) a = nil;
          if (b !== false && b !== nil && b != null) {
              return "" + (name) + "(" + (a) + ", " + (b) + ")"
              } else {
              return "" + (name) + "(" + (a) + ")"
            }}, TMP_11.$$s = self, TMP_11.$$arity = -2, TMP_11), $d).call($e, name)}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10), $a).call($c);

        ($a = ($d = ["translateX", "translateY", "translateZ", "rotateX", "rotateY", "rotateZ", "skewX", "skewY", "scaleX", "scaleY"]).$each, $a.$$p = (TMP_12 = function(name){var self = TMP_12.$$s || this, $e, $f, TMP_13;
if (name == null) name = nil;
        return ($e = ($f = self).$define_method, $e.$$p = (TMP_13 = function(value){var self = TMP_13.$$s || this;
if (value == null) value = nil;
          return "" + (name) + "(" + (value) + ")"}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13), $e).call($f, name)}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12), $a).call($d);

        Opal.defn(self, '$background', TMP_16 = function $$background($a_rest) {
          var $b, $c, TMP_14, $d, TMP_15, self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ((($b = $scope.get('Gradient')['$==='](args.$first())) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            if ((($b = $rb_gt(args.$length(), 1)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              self.$raise($scope.get('NotImplementedError'), "multiple gradients not implemented yet")};
            return ($b = ($c = args.$first()).$each, $b.$$p = (TMP_14 = function(s){var self = TMP_14.$$s || this, $a;
if (s == null) s = nil;
            return self.$style(((($a = s.$name()) !== false && $a !== nil && $a != null) ? $a : "background-image"), s.$value())}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14), $b).call($c);
          } else if ((($b = Opal.get('Hash')['$==='](args.$first())) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            return ($b = ($d = args.$first()).$each, $b.$$p = (TMP_15 = function(sub, value){var self = TMP_15.$$s || this;
if (sub == null) sub = nil;if (value == null) value = nil;
            return self.$style("background-" + (sub), value)}, TMP_15.$$s = self, TMP_15.$$arity = 2, TMP_15), $b).call($d)
            } else {
            return self.$style("background", args)
          };
        }, TMP_16.$$arity = -1);

        Opal.defn(self, '$border', TMP_22 = function $$border($a_rest) {
          var $b, $c, TMP_17, self = this, args, options = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ((($b = Opal.get('Hash')['$==='](args.$first())) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            if (args.$length()['$=='](1)) {
              options = args.$first()};
            return ($b = ($c = options).$each, $b.$$p = (TMP_17 = function(name, value){var self = TMP_17.$$s || this, $a, $d, TMP_18, $e, TMP_19, $f, TMP_21, $case = nil;
if (name == null) name = nil;if (value == null) value = nil;
            return (function() {$case = name;if ("top"['$===']($case) || "bottom"['$===']($case) || "left"['$===']($case) || "right"['$===']($case)) {if ((($a = Opal.get('Hash')['$==='](value)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                return ($a = ($d = value).$each, $a.$$p = (TMP_18 = function(n, v){var self = TMP_18.$$s || this;
if (n == null) n = nil;if (v == null) v = nil;
                return self.$style("border-" + (name) + "-" + (n), v)}, TMP_18.$$s = self, TMP_18.$$arity = 2, TMP_18), $a).call($d)
                } else {
                return self.$style("border-" + (name), value)
              }}else if ("radius"['$===']($case)) {if ((($a = Opal.get('Hash')['$==='](value)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                return ($a = ($e = value).$each, $a.$$p = (TMP_19 = function(horizontal, value){var self = TMP_19.$$s || this, $f, $g, TMP_20;
if (horizontal == null) horizontal = nil;if (value == null) value = nil;
                return ($f = ($g = value).$each, $f.$$p = (TMP_20 = function(vertical, value){var self = TMP_20.$$s || this;
if (vertical == null) vertical = nil;if (value == null) value = nil;
                  self.$style("-moz-border-radius-" + (horizontal) + (vertical), value);
                    self.$style("-webkit-border-" + (horizontal) + "-" + (vertical) + "-radius", value);
                    return self.$style("border-" + (horizontal) + "-" + (vertical) + "-radius", value);}, TMP_20.$$s = self, TMP_20.$$arity = 2, TMP_20), $f).call($g)}, TMP_19.$$s = self, TMP_19.$$arity = 2, TMP_19), $a).call($e)
                } else {
                self.$style("-moz-border-radius", value);
                self.$style("-webkit-border-radius", value);
                return self.$style("border-radius", value);
              }}else if ("color"['$===']($case)) {if ((($a = Opal.get('Hash')['$==='](value)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                return ($a = ($f = value).$each, $a.$$p = (TMP_21 = function(name, value){var self = TMP_21.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
                return self.$style("border-" + (name) + "-color", value)}, TMP_21.$$s = self, TMP_21.$$arity = 2, TMP_21), $a).call($f)
                } else {
                return self.$style("border-color", value)
              }}else {return self.$style("border-" + (name), value)}})()}, TMP_17.$$s = self, TMP_17.$$arity = 2, TMP_17), $b).call($c);
            } else {
            return self.$style("border", args)
          };
        }, TMP_22.$$arity = -1);

        Opal.defn(self, '$box', TMP_25 = function $$box(options) {
          var $a, $b, TMP_23, self = this;

          if ((($a = Opal.get('Hash')['$==='](options)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return ($a = ($b = options).$each, $a.$$p = (TMP_23 = function(name, value){var self = TMP_23.$$s || this, $c, $d, TMP_24, $case = nil;
if (name == null) name = nil;if (value == null) value = nil;
            return (function() {$case = name;if ("shadow"['$===']($case)) {if ((($c = Opal.get('Array')['$==='](value)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                if ((($c = Opal.get('Array')['$==='](value['$[]'](0))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                  value = ($c = ($d = value).$map, $c.$$p = (TMP_24 = function(v){var self = TMP_24.$$s || this;
if (v == null) v = nil;
                  return v.$join(" ")}, TMP_24.$$s = self, TMP_24.$$arity = 1, TMP_24), $c).call($d).$join(", ")
                  } else {
                  value = value.$join(" ")
                }};
              self.$style("-moz-box-shadow", value);
              self.$style("-webkit-box-shadow", value);
              return self.$style("box-shadow", value);}else {return self.$style("box-" + (name), value)}})()}, TMP_23.$$s = self, TMP_23.$$arity = 2, TMP_23), $a).call($b)
            } else {
            return self.$style("box", options)
          };
        }, TMP_25.$$arity = 1);

        Opal.defn(self, '$opacity', TMP_26 = function $$opacity(value) {
          var self = this;

          self.$style("opacity", value);
          self.$style("-moz-opacity", value);
          self.$style("-ms-filter", "\"progid:DXImageTransform.Microsoft.Alpha(Opacity=" + (($rb_times(value, 100)).$to_i()) + ")\"");
          return self.$style("filter", "alpha(opacity=" + (($rb_times(value, 100)).$to_i()) + ")");
        }, TMP_26.$$arity = 1);

        Opal.defn(self, '$animation', TMP_28 = function $$animation($a_rest) {
          var $b, $c, TMP_27, self = this, args, options = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ((($b = $scope.get('Hash')['$==='](args.$first())) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            if (args.$length()['$=='](1)) {
              options = args.$first()};
            return ($b = ($c = options).$each, $b.$$p = (TMP_27 = function(name, value){var self = TMP_27.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
            self.$style("-webkit-animation-" + (name), value);
              return self.$style("animation-" + (name), value);}, TMP_27.$$s = self, TMP_27.$$arity = 2, TMP_27), $b).call($c);
            } else {
            self.$style("animation", args);
            return self.$style("-webkit-animation", args);
          };
        }, TMP_28.$$arity = -1);

        Opal.defn(self, '$transition', TMP_29 = function $$transition($a_rest) {
          var self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          self.$style("transition", args);
          self.$style("-webkit-transition", args);
          return self.$style("-moz-transition", args);
        }, TMP_29.$$arity = -1);

        Opal.defn(self, '$user_select', TMP_30 = function $$user_select($a_rest) {
          var self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          self.$style("user-select", args);
          self.$style("-webkit-user-select", args);
          self.$style("-moz-user-select", args);
          return self.$style("-ms-user-select", args);
        }, TMP_30.$$arity = -1);

        Opal.defn(self, '$transform', TMP_31 = function $$transform($a_rest) {
          var self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          self.$style("transform", args);
          self.$style("-webkit-transform", args);
          self.$style("-moz-transform", args);
          self.$style("-ms-transform", args);
          return self.$style("-o-transform", args);
        }, TMP_31.$$arity = -1);

        Opal.defn(self, '$filter', TMP_32 = function $$filter($a_rest) {
          var self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          self.$style("filter", args);
          self.$style("-webkit-filter", args);
          self.$style("-moz-filter", args);
          self.$style("-ms-filter", args);
          return self.$style("-o-filter", args);
        }, TMP_32.$$arity = -1);

        Opal.defn(self, '$method_missing', TMP_33 = function $$method_missing(name, $a_rest) {
          var $b, $c, $d, TMP_34, self = this, args, $iter = TMP_33.$$p, block = $iter || nil, argument = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }
          TMP_33.$$p = null;
          name = name.$to_s();
          if ((($b = name['$end_with?']("!")) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            name = name['$[]']($range(0, -2, false));
            self.important = true;
            ($b = ($c = self).$__send__, $b.$$p = block.$to_proc(), $b).apply($c, [name].concat(Opal.to_a(args)));
            self.important = false;
            return nil;};
          if (args.$length()['$=='](1)) {
            argument = args.$first();
            if ((($b = Opal.get('Hash')['$==='](argument)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              ($b = ($d = argument).$each, $b.$$p = (TMP_34 = function(sub, value){var self = TMP_34.$$s || this;
if (sub == null) sub = nil;if (value == null) value = nil;
              return self.$style("" + (name) + "-" + (sub), value)}, TMP_34.$$s = self, TMP_34.$$arity = 2, TMP_34), $b).call($d)
              } else {
              self.$style(name, argument)
            };
            } else {
            self.$style(name, args.$join(" "))
          };
          self.important = false;
          return self;
        }, TMP_33.$$arity = -2);

        Opal.defn(self, '$style', TMP_35 = function $$style(name, value, important) {
          var $a, self = this;

          if (value == null) {
            value = nil;
          }
          if (important == null) {
            important = self.important;
          }
          if ((($a = Opal.get('Array')['$==='](value)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            value = value.$join(" ")};
          if ((($a = $scope.get('Style')['$==='](name)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.style['$<<'](name)
            } else {
            return self.style['$<<']($scope.get('Style').$new(name, value, important))
          };
        }, TMP_35.$$arity = -2);

        Opal.defn(self, '$style!', TMP_36 = function(name, value) {
          var self = this;

          if (value == null) {
            value = nil;
          }
          return self.$style(name, value, true);
        }, TMP_36.$$arity = -2);

        return (function($base, $super) {
          function $Gradient(){};
          var self = $Gradient = $klass($base, $super, 'Gradient', $Gradient);

          var def = self.$$proto, $scope = self.$$scope, TMP_37, TMP_38, TMP_39, TMP_40, TMP_41, TMP_42;

          def.to = def.from = def.start = def.end = nil;
          Opal.defn(self, '$initialize', TMP_37 = function $$initialize($a_rest) {
            var $b, $c, self = this, args, options = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            options = (function() {if ((($b = Opal.get('Hash')['$==='](args.$last())) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              return args.$pop()
              } else {
              return $hash2([], {})
            }; return nil; })();
            self.to = options['$[]']("to");
            self.from = options['$[]']("from");
            if ((($b = ($c = self.to, $c !== false && $c !== nil && $c != null ?self.from['$!']() : $c)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              self.from = self.$other(self.to)
            } else if ((($b = ($c = self.from, $c !== false && $c !== nil && $c != null ?self.to['$!']() : $c)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              self.to = self.$other(self.from)};
            self.start = args.$shift();
            return self.end = args.$shift();
          }, TMP_37.$$arity = -1);

          Opal.defn(self, '$each', TMP_38 = function $$each() {
            var $a, self = this, $iter = TMP_38.$$p, block = $iter || nil;

            TMP_38.$$p = null;
            block.$call(self.$style("-moz-linear-gradient(" + (self.to) + ", " + (self.start) + " 0%, " + (self.end) + " 100%)"));
            if ((($a = self['$horizontal?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              block.$call(self.$style("-webkit-gradient(linear, " + (self.from) + " top, " + (self.to) + " top, color-stop(0%, " + (self.start) + "), color-stop(100%, " + (self.end) + "))"))
              } else {
              block.$call(self.$style("-webkit-gradient(linear, left " + (self.from) + ", left " + (self.to) + ", color-stop(0%, " + (self.start) + "), color-stop(100%, " + (self.end) + "))"))
            };
            block.$call(self.$style("-webkit-linear-gradient(" + (self.to) + ", " + (self.start) + " 0%, " + (self.end) + " 100%)"));
            block.$call(self.$style("-o-linear-gradient(" + (self.to) + ", " + (self.start) + " 0%, " + (self.end) + " 100%)"));
            block.$call(self.$style("-ms-linear-gradient(" + (self.to) + ", " + (self.start) + " 0%, " + (self.end) + " 100%)"));
            return block.$call(self.$style("linear-gradient(to " + (self.to) + ", " + (self.start) + " 0%, " + (self.end) + " 100%)"));
          }, TMP_38.$$arity = 0);

          Opal.defn(self, '$horizontal?', TMP_39 = function() {
            var $a, self = this;

            return ((($a = self.to['$==']("left")) !== false && $a !== nil && $a != null) ? $a : self.to['$==']("right"));
          }, TMP_39.$$arity = 0);

          Opal.defn(self, '$vertical?', TMP_40 = function() {
            var $a, self = this;

            return ((($a = self.to['$==']("top")) !== false && $a !== nil && $a != null) ? $a : self.to['$==']("bottom"));
          }, TMP_40.$$arity = 0);

          self.$private();

          Opal.defn(self, '$other', TMP_41 = function $$other(side) {
            var self = this, $case = nil;

            return (function() {$case = side;if ("left"['$===']($case)) {return "right"}else if ("right"['$===']($case)) {return "left"}else if ("top"['$===']($case)) {return "bottom"}else if ("bottom"['$===']($case)) {return "top"}else { return nil }})();
          }, TMP_41.$$arity = 1);

          return (Opal.defn(self, '$style', TMP_42 = function $$style($a_rest) {
            var $b, self = this, args;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            if (args.$length()['$=='](1)) {
              return $scope.get('Style').$new(nil, args.$first())
              } else {
              return ($b = $scope.get('Style')).$new.apply($b, Opal.to_a(args))
            };
          }, TMP_42.$$arity = -1), nil) && 'style';
        })($scope.base, null);
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};
/* Generated by Opal 0.10.3 */
Opal.modules["paggio/css/rule"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$attr_reader', '$new', '$__send__', '$to_proc']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $CSS(){};
      var self = $CSS = $klass($base, $super, 'CSS', $CSS);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Rule(){};
        var self = $Rule = $klass($base, $super, 'Rule', $Rule);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

        def.definition = nil;
        self.$attr_reader("selector", "media");

        Opal.defn(self, '$initialize', TMP_1 = function $$initialize(selector, media) {
          var self = this;

          self.selector = selector;
          self.media = media;
          return self.definition = $scope.get('Definition').$new();
        }, TMP_1.$$arity = 2);

        return (Opal.defn(self, '$method_missing', TMP_2 = function $$method_missing($a_rest) {
          var $b, $c, self = this, args, $iter = TMP_2.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          TMP_2.$$p = null;
          return ($b = ($c = self.definition).$__send__, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args));
        }, TMP_2.$$arity = -1), nil) && 'method_missing';
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};
/* Generated by Opal 0.10.3 */
Opal.modules["paggio/css/font"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$attr_reader', '$new', '$font', '$__send__', '$to_proc']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $CSS(){};
      var self = $CSS = $klass($base, $super, 'CSS', $CSS);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Font(){};
        var self = $Font = $klass($base, $super, 'Font', $Font);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

        def.definition = nil;
        self.$attr_reader("name");

        Opal.defn(self, '$initialize', TMP_1 = function $$initialize(name) {
          var self = this;

          self.name = name;
          self.definition = $scope.get('Definition').$new();
          return self.$font($hash2(["family"], {"family": name}));
        }, TMP_1.$$arity = 1);

        return (Opal.defn(self, '$method_missing', TMP_2 = function $$method_missing($a_rest) {
          var $b, $c, self = this, args, $iter = TMP_2.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          TMP_2.$$p = null;
          return ($b = ($c = self.definition).$__send__, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args));
        }, TMP_2.$$arity = -1), nil) && 'method_missing';
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};
/* Generated by Opal 0.10.3 */
Opal.modules["paggio/css/animation"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$attr_reader', '$new', '$__send__', '$to_proc', '$<<', '$call', '$%', '$last']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $CSS(){};
      var self = $CSS = $klass($base, $super, 'CSS', $CSS);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Animation(){};
        var self = $Animation = $klass($base, $super, 'Animation', $Animation);

        var def = self.$$proto, $scope = self.$$scope, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7;

        def.steps = nil;
        (function($base, $super) {
          function $Step(){};
          var self = $Step = $klass($base, $super, 'Step', $Step);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

          def.definition = nil;
          self.$attr_reader("value");

          Opal.defn(self, '$initialize', TMP_1 = function $$initialize(value) {
            var self = this;

            self.value = value;
            return self.definition = $scope.get('Definition').$new();
          }, TMP_1.$$arity = 1);

          return (Opal.defn(self, '$method_missing', TMP_2 = function $$method_missing($a_rest) {
            var $b, $c, self = this, args, $iter = TMP_2.$$p, block = $iter || nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            TMP_2.$$p = null;
            return ($b = ($c = self.definition).$__send__, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args));
          }, TMP_2.$$arity = -1), nil) && 'method_missing';
        })($scope.base, $scope.get('BasicObject'));

        self.$attr_reader("name", "steps");

        Opal.defn(self, '$initialize', TMP_3 = function $$initialize(name) {
          var self = this;

          self.name = name;
          return self.steps = [];
        }, TMP_3.$$arity = 1);

        Opal.defn(self, '$step', TMP_4 = function $$step(value) {
          var self = this, $iter = TMP_4.$$p, block = $iter || nil;

          TMP_4.$$p = null;
          self.steps['$<<']($scope.get('Step').$new(value));
          return block.$call();
        }, TMP_4.$$arity = 1);

        Opal.defn(self, '$from', TMP_5 = function $$from(value) {
          var self = this, $iter = TMP_5.$$p, block = $iter || nil;

          TMP_5.$$p = null;
          self.steps['$<<']($scope.get('Step').$new((0)['$%']()));
          return block.$call();
        }, TMP_5.$$arity = 1);

        Opal.defn(self, '$to', TMP_6 = function $$to(value) {
          var self = this, $iter = TMP_6.$$p, block = $iter || nil;

          TMP_6.$$p = null;
          self.steps['$<<']($scope.get('Step').$new((100)['$%']()));
          return block.$call();
        }, TMP_6.$$arity = 1);

        return (Opal.defn(self, '$method_missing', TMP_7 = function $$method_missing($a_rest) {
          var $b, $c, self = this, args, $iter = TMP_7.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          TMP_7.$$p = null;
          return ($b = ($c = self.steps.$last()).$__send__, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args));
        }, TMP_7.$$arity = -1), nil) && 'method_missing';
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};
/* Generated by Opal 0.10.3 */
Opal.modules["paggio/css"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$require', '$each', '$start_with?', '$+', '$[]', '$==', '$attr_reader', '$raise', '$arity', '$instance_exec', '$to_proc', '$call', '$any?', '$include?', '$<<', '$new', '$selector', '$pop', '$method_missing', '$__send__', '$last']);
  self.$require("paggio/css/unit");
  self.$require("paggio/css/color");
  self.$require("paggio/css/definition");
  self.$require("paggio/css/rule");
  self.$require("paggio/css/font");
  self.$require("paggio/css/animation");
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $CSS(){};
      var self = $CSS = $klass($base, $super, 'CSS', $CSS);

      var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_4, TMP_7, TMP_8, TMP_9, TMP_10;

      def.media = def.current = def.fonts = def.animations = nil;
      Opal.defs(self, '$selector', TMP_2 = function $$selector(list) {
        var $a, $b, TMP_1, self = this, result = nil;

        result = "";
        ($a = ($b = list).$each, $a.$$p = (TMP_1 = function(part){var self = TMP_1.$$s || this, $c;
if (part == null) part = nil;
        if ((($c = part['$start_with?']("&")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return result = $rb_plus(result, part['$[]']($range(1, -1, false)))
            } else {
            return result = $rb_plus(result, $rb_plus(" ", part))
          }}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $a).call($b);
        if (result['$[]'](0)['$=='](" ")) {
          return result['$[]']($range(1, -1, false))
          } else {
          return result
        };
      }, TMP_2.$$arity = 1);

      self.$attr_reader("rules", "media", "fonts", "animations");

      Opal.defn(self, '$initialize', TMP_3 = function $$initialize() {
        var $a, $b, self = this, $iter = TMP_3.$$p, block = $iter || nil;

        TMP_3.$$p = null;
        if (block !== false && block !== nil && block != null) {
          } else {
          Opal.get('Kernel').$raise(Opal.get('ArgumentError'), "no block given")
        };
        self.selector = [];
        self.current = [];
        self.rules = [];
        self.fonts = [];
        self.animations = [];
        if (block.$arity()['$=='](0)) {
          return ($a = ($b = self).$instance_exec, $a.$$p = block.$to_proc(), $a).call($b)
          } else {
          return block.$call(self)
        };
      }, TMP_3.$$arity = 0);

      Opal.defn(self, '$rule', TMP_4 = function $$rule($a_rest) {
        var $b, $c, $d, TMP_5, TMP_6, self = this, names, $iter = TMP_4.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        names = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          names[$arg_idx - 0] = arguments[$arg_idx];
        }
        TMP_4.$$p = null;
        if (block !== false && block !== nil && block != null) {
          } else {
          return nil
        };
        if ((($b = ($c = ($d = names)['$any?'], $c.$$p = (TMP_5 = function(n){var self = TMP_5.$$s || this;
if (n == null) n = nil;
        return n['$include?'](",")}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5), $c).call($d)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          Opal.get('Kernel').$raise(Opal.get('ArgumentError'), "selectors cannot contain commas")};
        return ($b = ($c = names).$each, $b.$$p = (TMP_6 = function(name){var self = TMP_6.$$s || this;
          if (self.selector == null) self.selector = nil;
          if (self.current == null) self.current = nil;
          if (self.media == null) self.media = nil;
          if (self.rules == null) self.rules = nil;
if (name == null) name = nil;
        self.selector['$<<'](name);
          self.current['$<<']($scope.get('Rule').$new($scope.get('CSS').$selector(self.selector), self.media));
          block.$call();
          self.selector.$pop();
          return self.rules['$<<'](self.current.$pop());}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $b).call($c);
      }, TMP_4.$$arity = -1);

      Opal.defn(self, '$media', TMP_7 = function $$media(query, $a_rest) {
        var $b, self = this, args, $iter = TMP_7.$$p, block = $iter || nil, old = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        TMP_7.$$p = null;
        if (block !== false && block !== nil && block != null) {
          $b = [self.media, query], old = $b[0], self.media = $b[1], $b;
          block.$call();
          return self.media = old;
          } else {
          return ($b = self).$method_missing.apply($b, ["media", query].concat(Opal.to_a(args)))
        };
      }, TMP_7.$$arity = -2);

      Opal.defn(self, '$font', TMP_8 = function $$font(name, $a_rest) {
        var $b, self = this, args, $iter = TMP_8.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        TMP_8.$$p = null;
        if (block !== false && block !== nil && block != null) {
          self.current['$<<']($scope.get('Font').$new(name));
          block.$call();
          return self.fonts['$<<'](self.current.$pop());
          } else {
          return ($b = self).$method_missing.apply($b, ["font", name].concat(Opal.to_a(args)))
        };
      }, TMP_8.$$arity = -2);

      Opal.defn(self, '$animation', TMP_9 = function $$animation(name, $a_rest) {
        var $b, self = this, args, $iter = TMP_9.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        TMP_9.$$p = null;
        if (block !== false && block !== nil && block != null) {
          self.current['$<<']($scope.get('Animation').$new(name));
          block.$call();
          return self.animations['$<<'](self.current.$pop());
          } else {
          return ($b = self).$method_missing.apply($b, ["animation", name].concat(Opal.to_a(args)))
        };
      }, TMP_9.$$arity = -2);

      return (Opal.defn(self, '$method_missing', TMP_10 = function $$method_missing($a_rest) {
        var $b, $c, self = this, args, $iter = TMP_10.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        TMP_10.$$p = null;
        return ($b = ($c = self.current.$last()).$__send__, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args));
      }, TMP_10.$$arity = -1), nil) && 'method_missing';
    })($scope.base, $scope.get('BasicObject'));

    return (function($base, $super) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $scope = self.$$scope, TMP_11;

      def.current = def.roots = nil;
      return (Opal.defn(self, '$style', TMP_11 = function $$style() {
        var $a, $b, self = this, $iter = TMP_11.$$p, block = $iter || nil;

        TMP_11.$$p = null;
        return (((($a = self.current) !== false && $a !== nil && $a != null) ? $a : self.roots))['$<<'](($a = ($b = $scope.get('CSS')).$new, $a.$$p = block.$to_proc(), $a).call($b));
      }, TMP_11.$$arity = 0), nil) && 'style'
    })($scope.base, $scope.get('BasicObject'));
  })($scope.base, null);
};
/* Generated by Opal 0.10.3 */
Opal.modules["stringio"] = function(Opal) {
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$include', '$new', '$call', '$close', '$attr_accessor', '$length', '$include?', '$!', '$check_readable', '$==', '$===', '$>=', '$raise', '$>', '$+', '$-', '$seek', '$enum_for', '$eof?', '$ord', '$[]', '$check_writable', '$String', '$write', '$closed_write?', '$closed_read?']);
  return (function($base, $super) {
    function $StringIO(){};
    var self = $StringIO = $klass($base, $super, 'StringIO', $StringIO);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18;

    def.position = def.string = def.closed = nil;
    self.$include((($scope.get('IO')).$$scope.get('Readable')));

    self.$include((($scope.get('IO')).$$scope.get('Writable')));

    Opal.defs(self, '$open', TMP_1 = function $$open(string, mode) {
      var self = this, $iter = TMP_1.$$p, block = $iter || nil, io = nil, res = nil;

      if (string == null) {
        string = "";
      }
      if (mode == null) {
        mode = nil;
      }
      TMP_1.$$p = null;
      io = self.$new(string, mode);
      res = block.$call(io);
      io.$close();
      return res;
    }, TMP_1.$$arity = -1);

    self.$attr_accessor("string");

    Opal.defn(self, '$initialize', TMP_2 = function $$initialize(string, mode) {
      var $a, $b, self = this;

      if (string == null) {
        string = "";
      }
      if (mode == null) {
        mode = "rw";
      }
      self.string = string;
      self.position = string.$length();
      if ((($a = ($b = mode['$include?']("r"), $b !== false && $b !== nil && $b != null ?mode['$include?']("w")['$!']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.closed = "write"
      } else if ((($a = ($b = mode['$include?']("w"), $b !== false && $b !== nil && $b != null ?mode['$include?']("r")['$!']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.closed = "read"
        } else {
        return nil
      };
    }, TMP_2.$$arity = -1);

    Opal.defn(self, '$eof?', TMP_3 = function() {
      var self = this;

      self.$check_readable();
      return self.position['$=='](self.string.$length());
    }, TMP_3.$$arity = 0);

    Opal.alias(self, 'eof', 'eof?');

    Opal.defn(self, '$seek', TMP_4 = function $$seek(pos, whence) {
      var $a, self = this, $case = nil;

      if (whence == null) {
        whence = (($scope.get('IO')).$$scope.get('SEEK_SET'));
      }
      $case = whence;if ((($scope.get('IO')).$$scope.get('SEEK_SET'))['$===']($case)) {if ((($a = $rb_ge(pos, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise((($scope.get('Errno')).$$scope.get('EINVAL')))
      };
      self.position = pos;}else if ((($scope.get('IO')).$$scope.get('SEEK_CUR'))['$===']($case)) {if ((($a = $rb_gt($rb_plus(self.position, pos), self.string.$length())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.position = self.string.$length()
        } else {
        self.position = $rb_plus(self.position, pos)
      }}else if ((($scope.get('IO')).$$scope.get('SEEK_END'))['$===']($case)) {if ((($a = $rb_gt(pos, self.string.$length())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.position = 0
        } else {
        self.position = $rb_minus(self.position, pos)
      }};
      return 0;
    }, TMP_4.$$arity = -2);

    Opal.defn(self, '$tell', TMP_5 = function $$tell() {
      var self = this;

      return self.position;
    }, TMP_5.$$arity = 0);

    Opal.alias(self, 'pos', 'tell');

    Opal.alias(self, 'pos=', 'seek');

    Opal.defn(self, '$rewind', TMP_6 = function $$rewind() {
      var self = this;

      return self.$seek(0);
    }, TMP_6.$$arity = 0);

    Opal.defn(self, '$each_byte', TMP_7 = function $$each_byte() {
      var $a, $b, self = this, $iter = TMP_7.$$p, block = $iter || nil, i = nil;

      TMP_7.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        return self.$enum_for("each_byte")
      };
      self.$check_readable();
      i = self.position;
      while (!((($b = self['$eof?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true)))) {
      block.$call(self.string['$[]'](i).$ord());
      i = $rb_plus(i, 1);};
      return self;
    }, TMP_7.$$arity = 0);

    Opal.defn(self, '$each_char', TMP_8 = function $$each_char() {
      var $a, $b, self = this, $iter = TMP_8.$$p, block = $iter || nil, i = nil;

      TMP_8.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        return self.$enum_for("each_char")
      };
      self.$check_readable();
      i = self.position;
      while (!((($b = self['$eof?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true)))) {
      block.$call(self.string['$[]'](i));
      i = $rb_plus(i, 1);};
      return self;
    }, TMP_8.$$arity = 0);

    Opal.defn(self, '$write', TMP_9 = function $$write(string) {
      var self = this, before = nil, after = nil;

      self.$check_writable();
      string = self.$String(string);
      if (self.string.$length()['$=='](self.position)) {
        self.string = $rb_plus(self.string, string);
        return self.position = $rb_plus(self.position, string.$length());
        } else {
        before = self.string['$[]']($range(0, $rb_minus(self.position, 1), false));
        after = self.string['$[]']($range($rb_plus(self.position, string.$length()), -1, false));
        self.string = $rb_plus($rb_plus(before, string), after);
        return self.position = $rb_plus(self.position, string.$length());
      };
    }, TMP_9.$$arity = 1);

    Opal.defn(self, '$read', TMP_10 = function $$read(length, outbuf) {
      var $a, self = this, string = nil, str = nil;

      if (length == null) {
        length = nil;
      }
      if (outbuf == null) {
        outbuf = nil;
      }
      self.$check_readable();
      if ((($a = self['$eof?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return nil};
      string = (function() {if (length !== false && length !== nil && length != null) {
        str = self.string['$[]'](self.position, length);
        self.position = $rb_plus(self.position, length);
        return str;
        } else {
        str = self.string['$[]']($range(self.position, -1, false));
        self.position = self.string.$length();
        return str;
      }; return nil; })();
      if (outbuf !== false && outbuf !== nil && outbuf != null) {
        return outbuf.$write(string)
        } else {
        return string
      };
    }, TMP_10.$$arity = -1);

    Opal.defn(self, '$close', TMP_11 = function $$close() {
      var self = this;

      return self.closed = "both";
    }, TMP_11.$$arity = 0);

    Opal.defn(self, '$close_read', TMP_12 = function $$close_read() {
      var self = this;

      if (self.closed['$==']("write")) {
        return self.closed = "both"
        } else {
        return self.closed = "read"
      };
    }, TMP_12.$$arity = 0);

    Opal.defn(self, '$close_write', TMP_13 = function $$close_write() {
      var self = this;

      if (self.closed['$==']("read")) {
        return self.closed = "both"
        } else {
        return self.closed = "write"
      };
    }, TMP_13.$$arity = 0);

    Opal.defn(self, '$closed?', TMP_14 = function() {
      var self = this;

      return self.closed['$==']("both");
    }, TMP_14.$$arity = 0);

    Opal.defn(self, '$closed_read?', TMP_15 = function() {
      var $a, self = this;

      return ((($a = self.closed['$==']("read")) !== false && $a !== nil && $a != null) ? $a : self.closed['$==']("both"));
    }, TMP_15.$$arity = 0);

    Opal.defn(self, '$closed_write?', TMP_16 = function() {
      var $a, self = this;

      return ((($a = self.closed['$==']("write")) !== false && $a !== nil && $a != null) ? $a : self.closed['$==']("both"));
    }, TMP_16.$$arity = 0);

    Opal.defn(self, '$check_writable', TMP_17 = function $$check_writable() {
      var $a, self = this;

      if ((($a = self['$closed_write?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$raise($scope.get('IOError'), "not opened for writing")
        } else {
        return nil
      };
    }, TMP_17.$$arity = 0);

    return (Opal.defn(self, '$check_readable', TMP_18 = function $$check_readable() {
      var $a, self = this;

      if ((($a = self['$closed_read?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$raise($scope.get('IOError'), "not opened for reading")
        } else {
        return nil
      };
    }, TMP_18.$$arity = 0), nil) && 'check_readable';
  })($scope.base, $scope.get('IO'))
};
/* Generated by Opal 0.10.3 */
Opal.modules["paggio/formatter"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$[]=', '$to_h', '$[]', '$dup', '$deep_merge!', '$call', '$replace', '$===', '$new', '$merge', '$each', '$string', '$indent?', '$+', '$-', '$puts', '$*', '$chomp', '$lines', '$print', '$gsub', '$to_s', '$for', '$version', '$indent', '$format', '$instance_eval', '$empty?', '$map', '$escape', '$<<', '$join', '$include?', '$downcase', '$name', '$value', '$important', '$fonts', '$steps', '$animations', '$media', '$selector', '$deindent', '$reverse', '$rules']);
  self.$require("stringio");
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_14, $c, TMP_17, $d, TMP_24, $e, TMP_25;

    (function($base, $super) {
      function $Formatter(){};
      var self = $Formatter = $klass($base, $super, 'Formatter', $Formatter);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_12, TMP_13;

      def.options = def.io = nil;
      Opal.defs(self, '$to_h', TMP_1 = function $$to_h() {
        var $a, self = this;
        if (self.formatters == null) self.formatters = nil;

        return ((($a = self.formatters) !== false && $a !== nil && $a != null) ? $a : self.formatters = $hash2([], {}));
      }, TMP_1.$$arity = 0);

      Opal.defs(self, '$for', TMP_2 = function(klass) {
        var self = this, $iter = TMP_2.$$p, block = $iter || nil;

        TMP_2.$$p = null;
        if (block !== false && block !== nil && block != null) {
          return self.$to_h()['$[]='](klass, block)
          } else {
          return self.$to_h()['$[]'](klass)
        };
      }, TMP_2.$$arity = 1);

      Opal.defs(self, '$options', TMP_3 = function $$options(options) {
        var self = this, $iter = TMP_3.$$p, block = $iter || nil, old = nil, result = nil;

        TMP_3.$$p = null;
        old = $scope.get('OPTIONS').$dup();
        $scope.get('Utils')['$deep_merge!']($scope.get('OPTIONS'), options);
        result = block.$call();
        $scope.get('OPTIONS').$replace(old);
        return result;
      }, TMP_3.$$arity = 1);

      Opal.cdecl($scope, 'OPTIONS', $hash2(["indent"], {"indent": $hash2(["level", "with"], {"level": 0, "with": "\t"})}));

      Opal.defn(self, '$initialize', TMP_4 = function $$initialize(io, options) {
        var $a, self = this;

        if (io == null) {
          io = nil;
        }
        if (options == null) {
          options = $hash2([], {});
        }
        if ((($a = $scope.get('Hash')['$==='](io)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.io = $scope.get('StringIO').$new();
          self.options = io;
          } else {
          self.io = ((($a = io) !== false && $a !== nil && $a != null) ? $a : $scope.get('StringIO').$new());
          self.options = options;
        };
        return self.options = $scope.get('OPTIONS').$merge(self.options);
      }, TMP_4.$$arity = -1);

      Opal.defn(self, '$format', TMP_6 = function $$format(item) {
        var $a, $b, TMP_5, self = this;

        (function(){var $brk = Opal.new_brk(); try {return ($a = ($b = $scope.get('Formatter').$to_h()).$each, $a.$$p = (TMP_5 = function(klass, block){var self = TMP_5.$$s || this, $c;
if (klass == null) klass = nil;if (block == null) block = nil;
        if ((($c = klass['$==='](item)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            block.$call(self, item);
            
            Opal.brk(nil, $brk);
            } else {
            return nil
          }}, TMP_5.$$s = self, TMP_5.$$brk = $brk, TMP_5.$$arity = 2, TMP_5), $a).call($b)
        } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
        return self;
      }, TMP_6.$$arity = 1);

      Opal.defn(self, '$to_s', TMP_7 = function $$to_s() {
        var self = this;

        return self.io.$string();
      }, TMP_7.$$arity = 0);

      Opal.defn(self, '$indent?', TMP_8 = function() {
        var self = this, $iter = TMP_8.$$p, block = $iter || nil;

        TMP_8.$$p = null;
        try {
          return self.options['$[]']("indent")['$[]']("level")
        } catch ($err) {
          if (Opal.rescue($err, [$scope.get('StandardError')])) {
            try {
              return false
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        };
      }, TMP_8.$$arity = 0);

      Opal.defn(self, '$indent', TMP_9 = function $$indent() {
        var $a, $b, self = this, $iter = TMP_9.$$p, block = $iter || nil;

        TMP_9.$$p = null;
        if ((($a = self['$indent?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if (block !== false && block !== nil && block != null) {
            ($a = "level", $b = self.options['$[]']("indent"), $b['$[]=']($a, $rb_plus($b['$[]']($a), 1)));
            block.$call();
            return ($a = "level", $b = self.options['$[]']("indent"), $b['$[]=']($a, $rb_minus($b['$[]']($a), 1)));
            } else {
            return ($a = "level", $b = self.options['$[]']("indent"), $b['$[]=']($a, $rb_plus($b['$[]']($a), 1)))
          }
        } else if (block !== false && block !== nil && block != null) {
          return block.$call()
          } else {
          return nil
        };
      }, TMP_9.$$arity = 0);

      Opal.defn(self, '$deindent', TMP_10 = function $$deindent() {
        var $a, $b, self = this;

        if ((($a = self['$indent?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return ($a = "level", $b = self.options['$[]']("indent"), $b['$[]=']($a, $rb_minus($b['$[]']($a), 1)))
          } else {
          return nil
        };
      }, TMP_10.$$arity = 0);

      Opal.defn(self, '$print', TMP_12 = function $$print(text) {
        var $a, $b, TMP_11, self = this, level = nil;

        if ((($a = level = self['$indent?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return ($a = ($b = text.$lines()).$each, $a.$$p = (TMP_11 = function(line){var self = TMP_11.$$s || this;
            if (self.io == null) self.io = nil;
            if (self.options == null) self.options = nil;
if (line == null) line = nil;
          return self.io.$puts("" + ($rb_times(self.options['$[]']("indent")['$[]']("with"), level)) + (line.$chomp()))}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11), $a).call($b)
          } else {
          return self.io.$print(text)
        };
      }, TMP_12.$$arity = 1);

      return (Opal.defn(self, '$escape', TMP_13 = function $$escape(string) {
        var self = this;

        return string.$to_s().$gsub(/["><']|&(?!([a-zA-Z]+|(#\d+));)/, $hash2(["&", ">", "<", "\"", "'"], {"&": "&amp;", ">": "&gt;", "<": "&lt;", "\"": "&quot;", "'": "&#39;"}));
      }, TMP_13.$$arity = 1), nil) && 'escape';
    })($scope.base, null);

    ($a = ($b = $scope.get('Formatter')).$for, $a.$$p = (TMP_14 = function(f, item){var self = TMP_14.$$s || this, $c, $d, TMP_15, $case = nil;
if (f == null) f = nil;if (item == null) item = nil;
    $case = item.$version();if ((5)['$===']($case)) {f.$print("<!DOCTYPE html>")};
      f.$print("<html>");
      ($c = ($d = f).$indent, $c.$$p = (TMP_15 = function(){var self = TMP_15.$$s || this, $e, $f, TMP_16;

      return ($e = ($f = item).$each, $e.$$p = (TMP_16 = function(root){var self = TMP_16.$$s || this;
if (root == null) root = nil;
        return f.$format(root)}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16), $e).call($f)}, TMP_15.$$s = self, TMP_15.$$arity = 0, TMP_15), $c).call($d);
      return f.$print("</html>");}, TMP_14.$$s = self, TMP_14.$$arity = 2, TMP_14), $a).call($b, $scope.get('HTML'));

    ($a = ($c = $scope.get('Formatter')).$for, $a.$$p = (TMP_17 = function(f, item){var self = TMP_17.$$s || this, $d, $e, $f, $g, TMP_18, TMP_19, TMP_20, name = nil, attributes = nil, class_names = nil, attrs = nil;
if (f == null) f = nil;if (item == null) item = nil;
    $e = ($f = ($g = item).$instance_eval, $f.$$p = (TMP_18 = function(){var self = TMP_18.$$s || this;
        if (self.name == null) self.name = nil;
        if (self.attributes == null) self.attributes = nil;
        if (self.class_names == null) self.class_names = nil;

      return [self.name, self.attributes, self.class_names]}, TMP_18.$$s = self, TMP_18.$$arity = 0, TMP_18), $f).call($g), $d = Opal.to_ary($e), name = ($d[0] == null ? nil : $d[0]), attributes = ($d[1] == null ? nil : $d[1]), class_names = ($d[2] == null ? nil : $d[2]), $e;
      if ((($d = ($e = attributes['$empty?'](), $e !== false && $e !== nil && $e != null ?class_names['$empty?']() : $e)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
        f.$print("<" + (name) + ">")
        } else {
        attrs = ($d = ($e = attributes).$map, $d.$$p = (TMP_19 = function(key, value){var self = TMP_19.$$s || this;
if (key == null) key = nil;if (value == null) value = nil;
        return "" + (f.$escape(key)) + "=\"" + (f.$escape(value)) + "\""}, TMP_19.$$s = self, TMP_19.$$arity = 2, TMP_19), $d).call($e);
        if ((($d = class_names['$empty?']()) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          } else {
          attrs['$<<']("class=\"" + (f.$escape(class_names.$join(" "))) + "\"")
        };
        f.$print("<" + (name) + " " + (attrs.$join(" ")) + ">");
      };
      if ((($d = ["area", "base", "br", "col", "embed", "hr", "img", "input", "keygen", "link", "menuitem", "meta", "param", "source", "track", "wbr"]['$include?'](name.$to_s().$downcase())) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
        return nil;};
      ($d = ($f = f).$indent, $d.$$p = (TMP_20 = function(){var self = TMP_20.$$s || this, $h, $i, $j, TMP_21, TMP_22, inner = nil;

      if ((($h = inner = ($i = ($j = item).$instance_eval, $i.$$p = (TMP_21 = function(){var self = TMP_21.$$s || this;
          if (self.inner_html == null) self.inner_html = nil;

        return self.inner_html}, TMP_21.$$s = self, TMP_21.$$arity = 0, TMP_21), $i).call($j)) !== nil && $h != null && (!$h.$$is_boolean || $h == true))) {
          return f.$print(inner)
          } else {
          return ($h = ($i = item).$each, $h.$$p = (TMP_22 = function(child){var self = TMP_22.$$s || this, $k, $l, TMP_23, $case = nil;
if (child == null) child = nil;
          return (function() {$case = child;if ($scope.get('String')['$===']($case)) {return f.$print(f.$escape(child))}else if ($scope.get('CSS')['$===']($case)) {f.$print("<style>");
            ($k = ($l = f).$indent, $k.$$p = (TMP_23 = function(){var self = TMP_23.$$s || this;

            return f.$format(child)}, TMP_23.$$s = self, TMP_23.$$arity = 0, TMP_23), $k).call($l);
            return f.$print("</style>");}else {return f.$format(child)}})()}, TMP_22.$$s = self, TMP_22.$$arity = 1, TMP_22), $h).call($i)
        }}, TMP_20.$$s = self, TMP_20.$$arity = 0, TMP_20), $d).call($f);
      return f.$print("</" + (name) + ">");}, TMP_17.$$s = self, TMP_17.$$arity = 2, TMP_17), $a).call($c, (($scope.get('HTML')).$$scope.get('Element')));

    ($a = ($d = $scope.get('Formatter')).$for, $a.$$p = (TMP_24 = function(f, style){var self = TMP_24.$$s || this, $e;
if (f == null) f = nil;if (style == null) style = nil;
    return f.$print("" + (style.$name()) + ": " + (style.$value()) + ((function() {if ((($e = style.$important()) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
        return " !important"
        } else {
        return nil
      }; return nil; })()) + ";")}, TMP_24.$$s = self, TMP_24.$$arity = 2, TMP_24), $a).call($d, (((($scope.get('CSS')).$$scope.get('Definition'))).$$scope.get('Style')));

    return ($a = ($e = $scope.get('Formatter')).$for, $a.$$p = (TMP_25 = function(f, item){var self = TMP_25.$$s || this, $f, $g, TMP_26, $h, TMP_29, $i, TMP_33;
if (f == null) f = nil;if (item == null) item = nil;
    ($f = ($g = item.$fonts()).$each, $f.$$p = (TMP_26 = function(font){var self = TMP_26.$$s || this, $h, $i, TMP_27;
if (font == null) font = nil;
      f.$print("@font-face {");
        ($h = ($i = f).$indent, $h.$$p = (TMP_27 = function(){var self = TMP_27.$$s || this, $j, $k, TMP_28;

        return ($j = ($k = font).$each, $j.$$p = (TMP_28 = function(style){var self = TMP_28.$$s || this;
if (style == null) style = nil;
          return f.$format(style)}, TMP_28.$$s = self, TMP_28.$$arity = 1, TMP_28), $j).call($k)}, TMP_27.$$s = self, TMP_27.$$arity = 0, TMP_27), $h).call($i);
        return f.$print("}");}, TMP_26.$$s = self, TMP_26.$$arity = 1, TMP_26), $f).call($g);
      ($f = ($h = item.$animations()).$each, $f.$$p = (TMP_29 = function(animation){var self = TMP_29.$$s || this, $i, $j, TMP_30;
if (animation == null) animation = nil;
      return ($i = ($j = ["", "-webkit-", "-moz-", "-o-"]).$each, $i.$$p = (TMP_30 = function(platform){var self = TMP_30.$$s || this, $k, $l, TMP_31;
if (platform == null) platform = nil;
        f.$print("@" + (platform) + "keyframes " + (animation.$name()) + " {");
          ($k = ($l = animation.$steps()).$each, $k.$$p = (TMP_31 = function(step){var self = TMP_31.$$s || this, $m, $n, TMP_32;
if (step == null) step = nil;
          f.$print("" + (step.$value()) + " {");
            ($m = ($n = step).$each, $m.$$p = (TMP_32 = function(style){var self = TMP_32.$$s || this;
if (style == null) style = nil;
            return f.$format(style)}, TMP_32.$$s = self, TMP_32.$$arity = 1, TMP_32), $m).call($n);
            return f.$print("}");}, TMP_31.$$s = self, TMP_31.$$arity = 1, TMP_31), $k).call($l);
          return f.$print("}");}, TMP_30.$$s = self, TMP_30.$$arity = 1, TMP_30), $i).call($j)}, TMP_29.$$s = self, TMP_29.$$arity = 1, TMP_29), $f).call($h);
      return ($f = ($i = item.$rules().$reverse()).$each, $f.$$p = (TMP_33 = function(rule){var self = TMP_33.$$s || this, $j, $k, TMP_34, m = nil;
if (rule == null) rule = nil;
      if ((($j = rule['$empty?']()) !== nil && $j != null && (!$j.$$is_boolean || $j == true))) {
          return nil;};
        if ((($j = m = rule.$media()) !== nil && $j != null && (!$j.$$is_boolean || $j == true))) {
          f.$print("@media " + (m) + " {");
          f.$indent();};
        f.$print("" + (rule.$selector()) + " {");
        ($j = ($k = f).$indent, $j.$$p = (TMP_34 = function(){var self = TMP_34.$$s || this, $l, $m, TMP_35;

        return ($l = ($m = rule).$each, $l.$$p = (TMP_35 = function(style){var self = TMP_35.$$s || this;
if (style == null) style = nil;
          return f.$format(style)}, TMP_35.$$s = self, TMP_35.$$arity = 1, TMP_35), $l).call($m)}, TMP_34.$$s = self, TMP_34.$$arity = 0, TMP_34), $j).call($k);
        f.$print("}");
        if ((($j = rule.$media()) !== nil && $j != null && (!$j.$$is_boolean || $j == true))) {
          f.$print("}");
          return f.$deindent();
          } else {
          return nil
        };}, TMP_33.$$s = self, TMP_33.$$arity = 1, TMP_33), $f).call($i);}, TMP_25.$$s = self, TMP_25.$$arity = 2, TMP_25), $a).call($e, $scope.get('CSS'));
  })($scope.base, null);
};
/* Generated by Opal 0.10.3 */
Opal.modules["paggio"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$options', '$to_proc', '$to_s', '$format', '$new', '$tap', '$each']);
  self.$require("paggio/utils");
  self.$require("paggio/html");
  self.$require("paggio/css");
  self.$require("paggio/formatter");
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5;

    Opal.defs(self, '$options', TMP_1 = function $$options(options) {
      var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil;

      TMP_1.$$p = null;
      return ($a = ($b = $scope.get('Formatter')).$options, $a.$$p = block.$to_proc(), $a).call($b, options);
    }, TMP_1.$$arity = 1);

    Opal.defs(self, '$indent', TMP_2 = function $$indent(options) {
      var $a, $b, self = this, $iter = TMP_2.$$p, block = $iter || nil;

      TMP_2.$$p = null;
      return ($a = ($b = self).$options, $a.$$p = block.$to_proc(), $a).call($b, $hash2(["indent"], {"indent": options}));
    }, TMP_2.$$arity = 1);

    Opal.defs(self, '$css', TMP_3 = function $$css($a_rest) {
      var $b, $c, self = this, args, $iter = TMP_3.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_3.$$p = null;
      return $scope.get('Formatter').$new().$format(($b = ($c = $scope.get('CSS')).$new, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args))).$to_s();
    }, TMP_3.$$arity = -1);

    Opal.defs(self, '$html', TMP_4 = function $$html($a_rest) {
      var $b, $c, self = this, args, $iter = TMP_4.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_4.$$p = null;
      return $scope.get('Formatter').$new().$format(($b = ($c = $scope.get('HTML')).$new, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args))).$to_s();
    }, TMP_4.$$arity = -1);

    return (Opal.defs(self, '$html!', TMP_5 = function() {
      var $a, $b, TMP_6, self = this, $iter = TMP_5.$$p, block = $iter || nil;

      TMP_5.$$p = null;
      return ($a = ($b = $scope.get('Formatter').$new()).$tap, $a.$$p = (TMP_6 = function(f){var self = TMP_6.$$s || this, $c, $d, TMP_7, $e, $f;
if (f == null) f = nil;
      return ($c = ($d = ($e = ($f = $scope.get('HTML')).$new, $e.$$p = block.$to_proc(), $e).call($f)).$each, $c.$$p = (TMP_7 = function(root){var self = TMP_7.$$s || this;
if (root == null) root = nil;
        return f.$format(root)}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $c).call($d)}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $a).call($b).$to_s();
    }, TMP_5.$$arity = 0), nil) && 'html!';
  })($scope.base, null);
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/version"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.cdecl($scope, 'VERSION', "0.2.0")
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/utils"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$new', '$encode_uri', '$to_s', '$encode_uri_component', '$[]', '$map', '$split', '$decode_uri_component', '$join']);
  (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.cdecl($scope, 'Size', $scope.get('Struct').$new("width", "height"));

    Opal.cdecl($scope, 'Position', $scope.get('Struct').$new("x", "y"));
  })($scope.base);
  (function($base, $super) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

    Opal.defn(self, '$encode_uri', TMP_1 = function $$encode_uri() {
      var self = this;

      return self.$to_s().$encode_uri();
    }, TMP_1.$$arity = 0);

    return (Opal.defn(self, '$encode_uri_component', TMP_2 = function $$encode_uri_component() {
      var self = this;

      return self.$to_s().$encode_uri_component();
    }, TMP_2.$$arity = 0), nil) && 'encode_uri_component';
  })($scope.base, null);
  (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope, TMP_3, TMP_4, TMP_5, TMP_6;

    Opal.defn(self, '$encode_uri_component', TMP_3 = function $$encode_uri_component() {
      var self = this;

      return encodeURIComponent(self);
    }, TMP_3.$$arity = 0);

    Opal.defn(self, '$encode_uri', TMP_4 = function $$encode_uri() {
      var self = this;

      return encodeURI(self);
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$decode_uri_component', TMP_5 = function $$decode_uri_component() {
      var self = this;

      return decodeURIComponent(self);
    }, TMP_5.$$arity = 0);

    return (Opal.defn(self, '$decode_uri', TMP_6 = function $$decode_uri() {
      var self = this;

      return decodeURI(self);
    }, TMP_6.$$arity = 0), nil) && 'decode_uri';
  })($scope.base, null);
  return (function($base, $super) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $scope = self.$$scope, TMP_8, TMP_10;

    Opal.defs(self, '$decode_uri', TMP_8 = function $$decode_uri(string) {
      var $a, $b, TMP_7, self = this;

      return self['$[]'](($a = ($b = string.$split("&")).$map, $a.$$p = (TMP_7 = function(part){var self = TMP_7.$$s || this, $c, $d, name = nil, value = nil;
if (part == null) part = nil;
      $d = part.$split("="), $c = Opal.to_ary($d), name = ($c[0] == null ? nil : $c[0]), value = ($c[1] == null ? nil : $c[1]), $d;
        return [name.$decode_uri_component(), value.$decode_uri_component()];}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $a).call($b));
    }, TMP_8.$$arity = 1);

    return (Opal.defn(self, '$encode_uri', TMP_10 = function $$encode_uri() {
      var $a, $b, TMP_9, self = this;

      return ($a = ($b = self).$map, $a.$$p = (TMP_9 = function(name, value){var self = TMP_9.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
      return "" + (name.$to_s().$encode_uri_component()) + "=" + (value.$to_s().$encode_uri_component())}, TMP_9.$$s = self, TMP_9.$$arity = 2, TMP_9), $a).call($b).$join("&");
    }, TMP_10.$$arity = 0), nil) && 'encode_uri';
  })($scope.base, null);
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/support"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $gvars = Opal.gvars;

  Opal.add_stubs(['$downcase', '$===', '$!', '$supports?']);
  Opal.cdecl($scope, 'BROWSER_ENGINE', (function() {
  try {return (/MSIE|WebKit|Presto|Gecko/.exec(navigator.userAgent)[0]).$downcase() } catch ($err) { 
    if (Opal.rescue($err, [$scope.get('StandardError')])) {
    return "unknown"
    } else { throw $err; } }})());
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

    self.support = {};

    Opal.defs(self, '$supports?', TMP_1 = function(feature) {
      var $a, $b, self = this, support = nil, $case = nil;
      if (self.support == null) self.support = nil;

      if ((($a = (typeof(self.support[feature]) !== "undefined")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.support[feature]};
      support = (function() {$case = feature;if ("MutationObserver"['$===']($case)) {return (typeof(window.MutationObserver) !== "undefined")}else if ("WebSocket"['$===']($case)) {return (typeof(window.WebSocket) !== "undefined")}else if ("EventSource"['$===']($case)) {return (typeof(window.EventSource) !== "undefined")}else if ("XHR"['$===']($case)) {return (typeof(window.XMLHttpRequest) !== "undefined")}else if ("ActiveX"['$===']($case)) {return (typeof(window.ActiveXObject) !== "undefined")}else if ("WebSQL"['$===']($case)) {return (typeof(window.openDatabase) !== "undefined")}else if ("Query.css"['$===']($case)) {return (typeof(document.querySelectorAll) !== "undefined")}else if ("Query.xpath"['$===']($case)) {return (typeof(document.evaluate) !== "undefined")}else if ("Storage.local"['$===']($case)) {return (typeof(window.localStorage) !== "undefined")}else if ("Storage.global"['$===']($case)) {return (typeof(window.globalStorage) !== "undefined")}else if ("Storage.session"['$===']($case)) {return (typeof(window.sessionStorage) !== "undefined")}else if ("Immediate"['$===']($case)) {return (typeof(window.setImmediate) !== "undefined")}else if ("Immediate (Internet Explorer)"['$===']($case)) {return (typeof(window.msSetImmediate) !== "undefined")}else if ("Immediate (Firefox)"['$===']($case)) {return (typeof(window.mozSetImmediate) !== "undefined")}else if ("Immediate (Opera)"['$===']($case)) {return (typeof(window.oSetImmediate) !== "undefined")}else if ("Immediate (Chrome)"['$===']($case) || "setImmediate (Safari)"['$===']($case)) {return (typeof(window.webkitSetImmediate) !== "undefined")}else if ("CSS.computed"['$===']($case)) {return (typeof(window.getComputedStyle) !== "undefined")}else if ("CSS.current"['$===']($case)) {return (typeof(document.documentElement.currentStyle) !== "undefined")}else if ("Window.send"['$===']($case)) {return (typeof(window.postMessage) !== "undefined")}else if ("Window.send (Asynchronous)"['$===']($case)) {if ((($a = ($b = (typeof(window.postMessage) !== "undefined"), $b !== false && $b !== nil && $b != null ?(typeof(window.importScripts) !== "undefined")['$!']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        
            var ok  = true,
                old = window.onmessage;

            window.onmessage = function() { ok = false; };
            window.postMessage("", "*")
            window.onmessage = old;

            return ok;
          
        } else {
        return nil
      }}else if ("Window.send (Synchronous)"['$===']($case)) {return self['$supports?']("Window.send (Asynchronous)")['$!']()}else if ("Window.innerSize"['$===']($case)) {return (typeof(window.innerHeight) !== "undefined")}else if ("Window.outerSize"['$===']($case)) {return (typeof(window.outerHeight) !== "undefined")}else if ("Window.scroll"['$===']($case)) {return (typeof(document.documentElement.scrollLeft) !== "undefined")}else if ("Window.pageOffset"['$===']($case)) {return (typeof(window.pageXOffset) !== "undefined")}else if ("Attr.isId"['$===']($case)) {
          var div = document.createElement('div');
              div.setAttribute('id', 'xxxxxxxxxxxxx');

          return typeof(div.attributes['id'].isId) !== "undefined";
        }else if ("Element.addBehavior"['$===']($case)) {return (typeof(document.documentElement.addBehavior) !== "undefined")}else if ("Element.className"['$===']($case)) {
          var div = document.createElement("div");
              div.setAttribute('className', 'x');

          return div.className === 'x';
        }else if ("Element.class"['$===']($case)) {
          var div = document.createElement("div");
              div.setAttribute('class', 'x');

          return div.className === 'x';
        }else if ("Element.for"['$===']($case)) {
          var label = document.createElement("label");
              label.setAttribute('for', 'x');

          return label.htmlFor === 'x';
        }else if ("Element.htmlFor"['$===']($case)) {
          var label = document.createElement("label");
              label.setAttribute('htmlFor', 'x');

          return label.htmlFor === 'x';
        }else if ("Element.clientSize"['$===']($case)) {return (typeof(document.documentElement.clientHeight) !== "undefined")}else if ("Element.scroll"['$===']($case)) {return (typeof(document.documentElement.scrollLeft) !== "undefined")}else if ("Element.textContent"['$===']($case)) {return (typeof(document.documentElement.textContent) !== "undefined")}else if ("Element.innerText"['$===']($case)) {return (typeof(document.documentElement.innerText) !== "undefined")}else if ("Element.matches"['$===']($case)) {return (typeof(document.documentElement.matches) !== "undefined")}else if ("Element.matches (Internet Explorer)"['$===']($case)) {return (typeof(document.documentElement.msMatchesSelector) !== "undefined")}else if ("Element.matches (Firefox)"['$===']($case)) {return (typeof(document.documentElement.mozMatchesSelector) !== "undefined")}else if ("Element.matches (Opera)"['$===']($case)) {return (typeof(document.documentElement.oMatchesSelector) !== "undefined")}else if ("Element.matches (Chrome)"['$===']($case) || "Element.matches (Safari)"['$===']($case)) {return (typeof(document.documentElement.webkitMatchesSelector) !== "undefined")}else if ("Element.getBoundingClientRect"['$===']($case)) {return (typeof(document.documentElement.getBoundingClientRect) !== "undefined")}else if ("Event.readystatechange"['$===']($case)) {return "onreadystatechange" in window.document.createElement("script");}else if ("Event.constructor"['$===']($case)) {try {
        new MouseEvent("click");
        return true;
      } catch ($err) {
        if (Opal.rescue($err, [$scope.get('StandardError')])) {
          try {
            return false
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      }}else if ("Event.create"['$===']($case)) {return (typeof(document.createEvent) !== "undefined")}else if ("Event.createObject"['$===']($case)) {return (typeof(document.createEventObject) !== "undefined")}else if ("Event.addListener"['$===']($case)) {return (typeof(document.addEventListener) !== "undefined")}else if ("Event.attach"['$===']($case)) {return (typeof(document.attachEvent) !== "undefined")}else if ("Event.removeListener"['$===']($case)) {return (typeof(document.removeEventListener) !== "undefined")}else if ("Event.detach"['$===']($case)) {return (typeof(document.detachEvent) !== "undefined")}else if ("Event.dispatch"['$===']($case)) {return (typeof(document.dispatchEvent) !== "undefined")}else if ("Event.fire"['$===']($case)) {return (typeof(document.fireEvent) !== "undefined")}else if (/^Event\.([A-Z].*?)$/['$===']($case)) {return ((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)) + "Event") in window;}else if ("Document.view"['$===']($case)) {return (typeof(document.defaultView) !== "undefined")}else if ("Document.window"['$===']($case)) {return (typeof(document.parentWindow) !== "undefined")}else if ("History"['$===']($case)) {return (typeof(window.history.pushState) !== "undefined")}else if ("History.state"['$===']($case)) {return (typeof(window.history.state) !== "undefined")}else if ("Animation.request"['$===']($case)) {return (typeof(window.requestAnimationFrame) !== "undefined")}else if ("Animation.request (Internet Explorer)"['$===']($case)) {return (typeof(window.msRequestAnimationFrame) !== "undefined")}else if ("Animation.request (Firefox)"['$===']($case)) {return (typeof(window.mozRequestAnimationFrame) !== "undefined")}else if ("Animation.request (Opera)"['$===']($case)) {return (typeof(window.oRequestAnimationFrame) !== "undefined")}else if ("Animation.request (Chrome)"['$===']($case) || "Animation.request (Safari)"['$===']($case)) {return (typeof(window.webkitRequestAnimationFrame) !== "undefined")}else if ("Animation.cancel"['$===']($case)) {return (typeof(window.cancelAnimationFrame) !== "undefined")}else if ("Animation.cancel (Internet Explorer)"['$===']($case)) {return (typeof(window.msCancelAnimationFrame) !== "undefined")}else if ("Animation.cancel (Firefox)"['$===']($case)) {return (typeof(window.mozCancelAnimationFrame) !== "undefined")}else if ("Animation.cancel (Opera)"['$===']($case)) {return (typeof(window.oCancelAnimationFrame) !== "undefined")}else if ("Animation.cancel (Chrome)"['$===']($case) || "Animation.cancel (Safari)"['$===']($case)) {return (typeof(window.webkitCancelAnimationFrame) !== "undefined")}else if ("Animation.cancelRequest"['$===']($case)) {return (typeof(window.cancelRequestAnimationFrame) !== "undefined")}else if ("Animation.cancelRequest (Internet Explorer)"['$===']($case)) {return (typeof(window.msCancelRequestAnimationFrame) !== "undefined")}else if ("Animation.cancelRequest (Firefox)"['$===']($case)) {return (typeof(window.mozCancelRequestAnimationFrame) !== "undefined")}else if ("Animation.cancelRequest (Opera)"['$===']($case)) {return (typeof(window.oCancelRequestAnimationFrame) !== "undefined")}else if ("Animation.cancelRequest (Chrome)"['$===']($case) || "Animation.cancelRequest (Safari)"['$===']($case)) {return (typeof(window.webkitCancelRequestAnimationFrame) !== "undefined")}else { return nil }})();
      return self.support[feature] = support;
    }, TMP_1.$$arity = 1);

    Opal.defs(self, '$loaded?', TMP_2 = function(name) {
      var self = this, $case = nil;

      return (function() {$case = name;if ("Sizzle"['$===']($case)) {return (typeof(window.Sizzle) !== "undefined")}else if ("wicked-good-xpath"['$===']($case)) {return (typeof(window.wgxpath) !== "undefined")}else { return nil }})();
    }, TMP_2.$$arity = 1);
  })($scope.base);
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/event/base"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$include', '$call', '$to_n', '$<<', '$converters', '$native?', '$each', '$instance_eval', '$register', '$to_proc', '$attr_reader', '$lambda', '$new', '$stopped?', '$arguments', '$!', '$prevented?', '$class_for', '$off', '$target', '$[]', '$delegated', '$delete', '$last', '$empty?', '$first', '$raise', '$name_for', '$handlers', '$[]=', '$include?', '$callback=', '$on!', '$delegate', '$on', '$handlers=', '$push', '$callbacks', '$attach', '$attach!', '$supports?', '$name', '$==', '$event', '$===', '$warn', '$detach', '$gsub', '$delete_if', '$=~', '$clear', '$none?', '$is_a?', '$create', '$dispatch', '$trigger', '$bubbles=', '$private', '$nil?', '$dup', '$on=', '$parent']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      self.$include($scope.get('Native'));

      (function($base, $super) {
        function $Definition(){};
        var self = $Definition = $klass($base, $super, 'Definition', $Definition);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3;

        def["native"] = nil;
        self.$include($scope.get('Native'));

        Opal.defs(self, '$new', TMP_1 = function() {
          var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil, data = nil;

          TMP_1.$$p = null;
          data = ($a = ($b = self, Opal.find_super_dispatcher(self, 'new', TMP_1, false, $Definition)), $a.$$p = null, $a).call($b, { bubbles: true, cancelable: true });
          if (block !== false && block !== nil && block != null) {
            block.$call(data)};
          return data.$to_n();
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$bubbles=', TMP_2 = function(value) {
          var self = this;

          return self["native"].bubbles = value;
        }, TMP_2.$$arity = 1);

        return (Opal.defn(self, '$cancelable=', TMP_3 = function(value) {
          var self = this;

          return self["native"].cancelable = value;
        }, TMP_3.$$arity = 1), nil) && 'cancelable=';
      })($scope.base, null);

      return (function($base) {
        var $Target, self = $Target = $module($base, 'Target');

        var def = self.$$proto, $scope = self.$$scope, TMP_4, TMP_5, TMP_7, TMP_10, TMP_19, TMP_22, $a, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28, TMP_32, TMP_33, TMP_35, TMP_36, TMP_37, TMP_38, TMP_40, TMP_41, TMP_42, TMP_43, TMP_44, TMP_46;

        Opal.defs(self, '$converters', TMP_4 = function $$converters() {
          var $a, self = this;
          if (self.converters == null) self.converters = nil;

          return ((($a = self.converters) !== false && $a !== nil && $a != null) ? $a : self.converters = []);
        }, TMP_4.$$arity = 0);

        Opal.defs(self, '$register', TMP_5 = function $$register() {
          var self = this, $iter = TMP_5.$$p, block = $iter || nil;

          TMP_5.$$p = null;
          return self.$converters()['$<<'](block);
        }, TMP_5.$$arity = 0);

        Opal.defs(self, '$convert', TMP_7 = function $$convert(value) {try {

          var $a, $b, TMP_6, self = this;

          if ((($a = self['$native?'](value)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            return value
          };
          ($a = ($b = self.$converters()).$each, $a.$$p = (TMP_6 = function(block){var self = TMP_6.$$s || this, $c, result = nil;
if (block == null) block = nil;
          if ((($c = result = block.$call(value)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              Opal.ret(result)
              } else {
              return nil
            }}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $a).call($b);
          return nil;
          } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
        }, TMP_7.$$arity = 1);

        Opal.defs(self, '$included', TMP_10 = function $$included(klass) {
          var $a, $b, TMP_8, self = this;

          return ($a = ($b = klass).$instance_eval, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this, TMP_9;

          return (Opal.defs(self, '$target', TMP_9 = function $$target() {
              var $a, $b, self = this, $iter = TMP_9.$$p, block = $iter || nil;

              TMP_9.$$p = null;
              return ($a = ($b = (($scope.get('Event')).$$scope.get('Target'))).$register, $a.$$p = block.$to_proc(), $a).call($b);
            }, TMP_9.$$arity = 0), nil) && 'target'}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $a).call($b);
        }, TMP_10.$$arity = 1);

        (function($base, $super) {
          function $Callback(){};
          var self = $Callback = $klass($base, $super, 'Callback', $Callback);

          var def = self.$$proto, $scope = self.$$scope, TMP_11, TMP_12, TMP_14, TMP_15, TMP_16;

          def.proc = def.name = nil;
          self.$attr_reader("target", "name", "selector");

          Opal.defn(self, '$initialize', TMP_11 = function $$initialize(target, name, selector) {
            var self = this, $iter = TMP_11.$$p, block = $iter || nil;

            if (selector == null) {
              selector = nil;
            }
            TMP_11.$$p = null;
            self.target = target;
            self.name = name;
            self.selector = selector;
            return self.block = block;
          }, TMP_11.$$arity = -3);

          Opal.defn(self, '$call', TMP_12 = function $$call(event) {
            var self = this;

            return self.$to_proc().$call(event);
          }, TMP_12.$$arity = 1);

          Opal.defn(self, '$to_proc', TMP_14 = function $$to_proc() {
            var $a, $b, $c, TMP_13, self = this;

            return ((($a = self.proc) !== false && $a !== nil && $a != null) ? $a : self.proc = ($b = ($c = self).$lambda, $b.$$p = (TMP_13 = function(event){var self = TMP_13.$$s || this, $d;
              if (self.block == null) self.block = nil;
if (event == null) event = nil;
            
            if (!event.currentTarget) {
              event.currentTarget = self.target.native;
            }
          
              event = $scope.get('Event').$new(event, self);
              if ((($d = event['$stopped?']()) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
                } else {
                ($d = self.block).$call.apply($d, [event].concat(Opal.to_a(event.$arguments())))
              };
              return event['$prevented?']()['$!']();}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13), $b).call($c));
          }, TMP_14.$$arity = 0);

          Opal.defn(self, '$event', TMP_15 = function $$event() {
            var self = this;

            return $scope.get('Event').$class_for(self.name);
          }, TMP_15.$$arity = 0);

          return (Opal.defn(self, '$off', TMP_16 = function $$off() {
            var self = this;

            return self.$target().$off(self);
          }, TMP_16.$$arity = 0), nil) && 'off';
        })($scope.base, null);

        (function($base, $super) {
          function $Delegate(){};
          var self = $Delegate = $klass($base, $super, 'Delegate', $Delegate);

          var def = self.$$proto, $scope = self.$$scope, TMP_17, TMP_18;

          def.target = def.name = def.pair = nil;
          Opal.defn(self, '$initialize', TMP_17 = function $$initialize(target, name, pair) {
            var self = this;

            self.target = target;
            self.name = name;
            return self.pair = pair;
          }, TMP_17.$$arity = 3);

          return (Opal.defn(self, '$off', TMP_18 = function $$off() {
            var $a, self = this, delegate = nil;

            delegate = self.target.$delegated()['$[]'](self.name);
            delegate.$last().$delete(self.pair);
            if ((($a = delegate.$last()['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              delegate.$first().$off();
              return delegate.$delete(self.name);
              } else {
              return nil
            };
          }, TMP_18.$$arity = 0), nil) && 'off';
        })($scope.base, null);

        Opal.cdecl($scope, 'Delegates', $scope.get('Struct').$new("callback", "handlers"));

        Opal.defn(self, '$on', TMP_19 = function $$on(name, selector) {
          var $a, $b, $c, $d, TMP_20, $e, TMP_21, self = this, $iter = TMP_19.$$p, block = $iter || nil, delegate = nil, pair = nil, callback = nil;

          if (selector == null) {
            selector = nil;
          }
          TMP_19.$$p = null;
          if (block !== false && block !== nil && block != null) {
            } else {
            self.$raise($scope.get('ArgumentError'), "no block has been given")
          };
          name = $scope.get('Event').$name_for(name);
          if (selector !== false && selector !== nil && selector != null) {
            if ((($a = delegate = self.$delegated()['$[]'](name)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              pair = [selector, block];
              delegate.$handlers()['$<<'](pair);
              return $scope.get('Delegate').$new(self, name, pair);
              } else {
              delegate = self.$delegated()['$[]='](name, $scope.get('Delegates').$new());
              if ((($a = ["blur", "focus"]['$include?'](name)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                (($a = [($c = ($d = self)['$on!'], $c.$$p = (TMP_20 = function(e){var self = TMP_20.$$s || this;
if (e == null) e = nil;
                return self.$delegate(delegate, e)}, TMP_20.$$s = self, TMP_20.$$arity = 1, TMP_20), $c).call($d, name)]), $b = delegate, $b['$callback='].apply($b, $a), $a[$a.length-1])
                } else {
                (($a = [($c = ($e = self).$on, $c.$$p = (TMP_21 = function(e){var self = TMP_21.$$s || this;
if (e == null) e = nil;
                return self.$delegate(delegate, e)}, TMP_21.$$s = self, TMP_21.$$arity = 1, TMP_21), $c).call($e, name)]), $b = delegate, $b['$callback='].apply($b, $a), $a[$a.length-1])
              };
              pair = [selector, block];
              (($a = [[pair]]), $b = delegate, $b['$handlers='].apply($b, $a), $a[$a.length-1]);
              return $scope.get('Delegate').$new(self, name, pair);
            }
            } else {
            callback = ($a = ($b = $scope.get('Callback')).$new, $a.$$p = block.$to_proc(), $a).call($b, self, name, selector);
            self.$callbacks().$push(callback);
            return self.$attach(callback);
          };
        }, TMP_19.$$arity = -2);

        Opal.defn(self, '$on!', TMP_22 = function(name) {
          var $a, $b, self = this, $iter = TMP_22.$$p, block = $iter || nil, callback = nil;

          TMP_22.$$p = null;
          if (block !== false && block !== nil && block != null) {
            } else {
            self.$raise($scope.get('ArgumentError'), "no block has been given")
          };
          name = $scope.get('Event').$name_for(name);
          callback = ($a = ($b = $scope.get('Callback')).$new, $a.$$p = block.$to_proc(), $a).call($b, self, name);
          self.$callbacks().$push(callback);
          return self['$attach!'](callback);
        }, TMP_22.$$arity = 1);

        if ((($a = $scope.get('Browser')['$supports?']("Event.addListener")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$attach', TMP_23 = function $$attach(callback) {
            var self = this;
            if (self["native"] == null) self["native"] = nil;

            self["native"].addEventListener(callback.$name(), callback.$to_proc());
            return callback;
          }, TMP_23.$$arity = 1);

          Opal.defn(self, '$attach!', TMP_24 = function(callback) {
            var self = this;
            if (self["native"] == null) self["native"] = nil;

            self["native"].addEventListener(callback.$name(), callback.$to_proc(), true);
            return callback;
          }, TMP_24.$$arity = 1);
        } else if ((($a = $scope.get('Browser')['$supports?']("Event.attach")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$attach', TMP_25 = function $$attach(callback) {
            var self = this;
            if (self["native"] == null) self["native"] = nil;

            if (callback.$event()['$==']($scope.get('Custom'))) {
              
            if (!self["native"].$custom) {
              self["native"].$custom = function(event) {
                for (var i = 0, length = self["native"].$callbacks.length; i < length; i++) {
                  var callback = self["native"].$callbacks[i];

                  if ((callback).$event()['$==']($scope.get('Custom'))) {
                    event.type = callback.name;

                    (callback).$call(event);
                  }
                }
              };

              self["native"].attachEvent("ondataavailable", self["native"].$custom);
            }
          ;
              } else {
              self["native"].attachEvent("on" + callback.$name(), callback.$to_proc());
            };
            return callback;
          }, TMP_25.$$arity = 1);

          Opal.defn(self, '$attach!', TMP_26 = function(callback) {
            var self = this, $case = nil;
            if (self["native"] == null) self["native"] = nil;

            $case = callback.$name();if ("blur"['$===']($case)) {self["native"].attachEvent("onfocusout", callback.$to_proc());}else if ("focus"['$===']($case)) {self["native"].attachEvent("onfocusin", callback.$to_proc());}else {self.$warn("attach: capture doesn't work on this browser");
            self.$attach(callback);};
            return callback;
          }, TMP_26.$$arity = 1);
          } else {
          Opal.defn(self, '$attach', TMP_27 = function $$attach($a_rest) {
            var self = this;

            return self.$raise($scope.get('NotImplementedError'));
          }, TMP_27.$$arity = -1);

          Opal.defn(self, '$attach!', TMP_28 = function($a_rest) {
            var self = this;

            return self.$raise($scope.get('NotImplementedError'));
          }, TMP_28.$$arity = -1);
        };

        Opal.defn(self, '$off', TMP_32 = function $$off(what) {
          var $a, $b, TMP_29, $c, TMP_30, $d, TMP_31, self = this, $case = nil;

          if (what == null) {
            what = nil;
          }
          return (function() {$case = what;if ($scope.get('Callback')['$===']($case)) {self.$callbacks().$delete(what);
          return self.$detach(what);}else if ($scope.get('String')['$===']($case)) {if ((($a = ((($b = what['$include?']("*")) !== false && $b !== nil && $b != null) ? $b : what['$include?']("?"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$off($scope.get('Regexp').$new(what.$gsub(/\*/, ".*?").$gsub(/\?/, ".")))
            } else {
            what = $scope.get('Event').$name_for(what);
            return ($a = ($b = self.$callbacks()).$delete_if, $a.$$p = (TMP_29 = function(callback){var self = TMP_29.$$s || this;
if (callback == null) callback = nil;
            if (callback.$name()['$=='](what)) {
                self.$detach(callback);
                return true;
                } else {
                return nil
              }}, TMP_29.$$s = self, TMP_29.$$arity = 1, TMP_29), $a).call($b);
          }}else if ($scope.get('Regexp')['$===']($case)) {return ($a = ($c = self.$callbacks()).$delete_if, $a.$$p = (TMP_30 = function(callback){var self = TMP_30.$$s || this, $d;
if (callback == null) callback = nil;
          if ((($d = callback.$name()['$=~'](what)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
              self.$detach(callback);
              return true;
              } else {
              return nil
            }}, TMP_30.$$s = self, TMP_30.$$arity = 1, TMP_30), $a).call($c)}else {($a = ($d = self.$callbacks()).$each, $a.$$p = (TMP_31 = function(callback){var self = TMP_31.$$s || this;
if (callback == null) callback = nil;
          return self.$detach(callback)}, TMP_31.$$s = self, TMP_31.$$arity = 1, TMP_31), $a).call($d);
          return self.$callbacks().$clear();}})();
        }, TMP_32.$$arity = -1);

        if ((($a = $scope.get('Browser')['$supports?']("Event.removeListener")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$detach', TMP_33 = function $$detach(callback) {
            var self = this;
            if (self["native"] == null) self["native"] = nil;

            return self["native"].removeEventListener(callback.$name(), callback.$to_proc(), false);
          }, TMP_33.$$arity = 1)
        } else if ((($a = $scope.get('Browser')['$supports?']("Event.detach")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$detach', TMP_35 = function $$detach(callback) {
            var $a, $b, $c, TMP_34, self = this;
            if (self["native"] == null) self["native"] = nil;

            if (callback.$event()['$==']($scope.get('Custom'))) {
              if ((($a = ($b = ($c = self.$callbacks())['$none?'], $b.$$p = (TMP_34 = function(c){var self = TMP_34.$$s || this;
if (c == null) c = nil;
              return c.$event()['$==']($scope.get('Custom'))}, TMP_34.$$s = self, TMP_34.$$arity = 1, TMP_34), $b).call($c)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                
              self["native"].detachEvent("ondataavailable", self["native"].$custom);

              delete self["native"].$custom;
            ;
                } else {
                return nil
              }
              } else {
              return self["native"].detachEvent("on" + callback.$name(), callback.$to_proc());
            };
          }, TMP_35.$$arity = 1)
          } else {
          Opal.defn(self, '$detach', TMP_36 = function $$detach(callback) {
            var self = this;

            return self.$raise($scope.get('NotImplementedError'));
          }, TMP_36.$$arity = 1)
        };

        Opal.defn(self, '$trigger', TMP_37 = function $$trigger(event, $a_rest) {
          var $b, $c, self = this, args, $iter = TMP_37.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }
          TMP_37.$$p = null;
          if ((($b = event['$is_a?']($scope.get('String'))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            event = ($b = ($c = $scope.get('Event')).$create, $b.$$p = block.$to_proc(), $b).apply($c, [event].concat(Opal.to_a(args)))};
          return self.$dispatch(event);
        }, TMP_37.$$arity = -2);

        Opal.defn(self, '$trigger!', TMP_38 = function(event, $a_rest) {
          var $b, $c, TMP_39, self = this, args, $iter = TMP_38.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }
          TMP_38.$$p = null;
          return ($b = ($c = self).$trigger, $b.$$p = (TMP_39 = function(e){var self = TMP_39.$$s || this, $a, $d;
if (e == null) e = nil;
          if (block !== false && block !== nil && block != null) {
              block.$call(e)};
            return (($a = [false]), $d = e, $d['$bubbles='].apply($d, $a), $a[$a.length-1]);}, TMP_39.$$s = self, TMP_39.$$arity = 1, TMP_39), $b).apply($c, [event].concat(Opal.to_a(args)));
        }, TMP_38.$$arity = -2);

        if ((($a = $scope.get('Browser')['$supports?']("Event.dispatch")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$dispatch', TMP_40 = function $$dispatch(event) {
            var self = this;
            if (self["native"] == null) self["native"] = nil;

            return self["native"].dispatchEvent(event.$to_n());
          }, TMP_40.$$arity = 1)
        } else if ((($a = $scope.get('Browser')['$supports?']("Event.fire")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$dispatch', TMP_41 = function $$dispatch(event) {
            var $a, self = this;
            if (self["native"] == null) self["native"] = nil;

            if ((($a = $scope.get('Custom')['$==='](event)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self["native"].fireEvent("ondataavailable", event.$to_n());
              } else {
              return self["native"].fireEvent("on" + event.$name(), event.$to_n());
            };
          }, TMP_41.$$arity = 1)
          } else {
          Opal.defn(self, '$dispatch', TMP_42 = function $$dispatch($a_rest) {
            var self = this;

            return self.$raise($scope.get('NotImplementedError'));
          }, TMP_42.$$arity = -1)
        };

        self.$private();

        Opal.defn(self, '$callbacks', TMP_43 = function $$callbacks() {
          var self = this;
          if (self["native"] == null) self["native"] = nil;

          
        if (!self["native"].$callbacks) {
          self["native"].$callbacks = [];
        }

        return self["native"].$callbacks;
      ;
        }, TMP_43.$$arity = 0);

        Opal.defn(self, '$delegated', TMP_44 = function $$delegated() {
          var self = this;
          if (self["native"] == null) self["native"] = nil;

          
        if (!self["native"].$delegated) {
          self["native"].$delegated = $hash2([], {});
        }

        return self["native"].$delegated;
      ;
        }, TMP_44.$$arity = 0);

        Opal.defn(self, '$delegate', TMP_46 = function $$delegate(delegates, event, element) {
          var $a, $b, TMP_45, self = this;

          if (element == null) {
            element = event.$target();
          }
          if ((($a = ((($b = element['$nil?']()) !== false && $b !== nil && $b != null) ? $b : element['$=='](event.$on()))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return nil};
          ($a = ($b = delegates.$handlers()).$each, $a.$$p = (TMP_45 = function(selector, block){var self = TMP_45.$$s || this, $c, $d, new$ = nil;
if (selector == null) selector = nil;if (block == null) block = nil;
          if ((($c = element['$=~'](selector)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              new$ = event.$dup();
              (($c = [element]), $d = new$, $d['$on='].apply($d, $c), $c[$c.length-1]);
              return ($c = block).$call.apply($c, [new$].concat(Opal.to_a(new$.$arguments())));
              } else {
              return nil
            }}, TMP_45.$$s = self, TMP_45.$$arity = 2, TMP_45), $a).call($b);
          return self.$delegate(delegates, event, element.$parent());
        }, TMP_46.$$arity = -3);
      })($scope.base);
    })($scope.base, null)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/event/ui"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $UI(){};
        var self = $UI = $klass($base, $super, 'UI', $UI);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_4, TMP_5;

        Opal.defs(self, '$supported?', TMP_1 = function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.UI");
        }, TMP_1.$$arity = 0);

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3;

          def["native"] = nil;
          Opal.defn(self, '$detail=', TMP_2 = function(value) {
            var self = this;

            return self["native"].detail = value;
          }, TMP_2.$$arity = 1);

          return (Opal.defn(self, '$view=', TMP_3 = function(value) {
            var self = this;

            return self["native"].view = value;
          }, TMP_3.$$arity = 1), nil) && 'view=';
        })($scope.base, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_4 = function $$construct(name, desc) {
              var self = this;

              return new UIEvent(name, desc);
            }, TMP_4.$$arity = 2)
          } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_5 = function $$construct(name, desc) {
              var self = this;

              
        var event = document.createEvent("UIEvent");
            event.initUIEvent(name, desc.bubbles, desc.cancelable,
              desc.view || window, desc.detail || 0);

        return event;
      
            }, TMP_5.$$arity = 2)}};

        self.$alias_native("detail");

        return self.$alias_native("view");
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/event/mouse"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$!', '$nil?', '$[]', '$include', '$new', '$try_convert', '$supported?', '$supports?', '$alias_native', '$x', '$screen', '$y', '$DOM', '$==', '$downcase', '$name']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Mouse(){};
        var self = $Mouse = $klass($base, $super, 'Mouse', $Mouse);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_29, TMP_30, TMP_31, TMP_32, TMP_33, TMP_34, TMP_35, TMP_36, TMP_37, TMP_38, TMP_39, TMP_40, TMP_41, TMP_42, TMP_43, TMP_44, TMP_45, TMP_46, TMP_47, TMP_48, TMP_49, TMP_50, TMP_51;

        def["native"] = nil;
        Opal.defs(self, '$supported?', TMP_1 = function() {
          var self = this;
          if ($gvars.$ == null) $gvars.$ = nil;

          return $gvars.$['$[]']("MouseEvent")['$nil?']()['$!']();
        }, TMP_1.$$arity = 0);

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28;

          def["native"] = nil;
          (function($base, $super) {
            function $Client(){};
            var self = $Client = $klass($base, $super, 'Client', $Client);

            var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3;

            def["native"] = nil;
            self.$include($scope.get('Native'));

            Opal.defn(self, '$x=', TMP_2 = function(value) {
              var self = this;

              return self["native"].clientX = value;
            }, TMP_2.$$arity = 1);

            return (Opal.defn(self, '$y=', TMP_3 = function(value) {
              var self = this;

              return self["native"].clientY = value;
            }, TMP_3.$$arity = 1), nil) && 'y=';
          })($scope.base, null);

          (function($base, $super) {
            function $Layer(){};
            var self = $Layer = $klass($base, $super, 'Layer', $Layer);

            var def = self.$$proto, $scope = self.$$scope, TMP_4, TMP_5;

            def["native"] = nil;
            self.$include($scope.get('Native'));

            Opal.defn(self, '$x=', TMP_4 = function(value) {
              var self = this;

              return self["native"].layerX = value;
            }, TMP_4.$$arity = 1);

            return (Opal.defn(self, '$y=', TMP_5 = function(value) {
              var self = this;

              return self["native"].layerY = value;
            }, TMP_5.$$arity = 1), nil) && 'y=';
          })($scope.base, null);

          (function($base, $super) {
            function $Offset(){};
            var self = $Offset = $klass($base, $super, 'Offset', $Offset);

            var def = self.$$proto, $scope = self.$$scope, TMP_6, TMP_7;

            def["native"] = nil;
            self.$include($scope.get('Native'));

            Opal.defn(self, '$x=', TMP_6 = function(value) {
              var self = this;

              return self["native"].offsetX = value;
            }, TMP_6.$$arity = 1);

            return (Opal.defn(self, '$y=', TMP_7 = function(value) {
              var self = this;

              return self["native"].offsetY= value;
            }, TMP_7.$$arity = 1), nil) && 'y=';
          })($scope.base, null);

          (function($base, $super) {
            function $Page(){};
            var self = $Page = $klass($base, $super, 'Page', $Page);

            var def = self.$$proto, $scope = self.$$scope, TMP_8, TMP_9;

            def["native"] = nil;
            self.$include($scope.get('Native'));

            Opal.defn(self, '$x=', TMP_8 = function(value) {
              var self = this;

              return self["native"].pageX = value;
            }, TMP_8.$$arity = 1);

            return (Opal.defn(self, '$y=', TMP_9 = function(value) {
              var self = this;

              return self["native"].pageY = value;
            }, TMP_9.$$arity = 1), nil) && 'y=';
          })($scope.base, null);

          (function($base, $super) {
            function $Screen(){};
            var self = $Screen = $klass($base, $super, 'Screen', $Screen);

            var def = self.$$proto, $scope = self.$$scope, TMP_10, TMP_11;

            def["native"] = nil;
            self.$include($scope.get('Native'));

            Opal.defn(self, '$x=', TMP_10 = function(value) {
              var self = this;

              return self["native"].screenX = value;
            }, TMP_10.$$arity = 1);

            return (Opal.defn(self, '$y=', TMP_11 = function(value) {
              var self = this;

              return self["native"].screenY = value;
            }, TMP_11.$$arity = 1), nil) && 'y=';
          })($scope.base, null);

          (function($base, $super) {
            function $Ancestor(){};
            var self = $Ancestor = $klass($base, $super, 'Ancestor', $Ancestor);

            var def = self.$$proto, $scope = self.$$scope, TMP_12, TMP_13;

            def["native"] = nil;
            self.$include($scope.get('Native'));

            Opal.defn(self, '$x=', TMP_12 = function(value) {
              var self = this;

              return self["native"].x = value;
            }, TMP_12.$$arity = 1);

            return (Opal.defn(self, '$y=', TMP_13 = function(value) {
              var self = this;

              return self["native"].y = value;
            }, TMP_13.$$arity = 1), nil) && 'y=';
          })($scope.base, null);

          Opal.defn(self, '$x=', TMP_14 = function(value) {
            var self = this;

            return self["native"].screenX = value;
          }, TMP_14.$$arity = 1);

          Opal.defn(self, '$y=', TMP_15 = function(value) {
            var self = this;

            return self["native"].screenY = value;
          }, TMP_15.$$arity = 1);

          Opal.defn(self, '$alt!', TMP_16 = function() {
            var self = this;

            return self["native"].altKey = true;
          }, TMP_16.$$arity = 0);

          Opal.defn(self, '$ctrl!', TMP_17 = function() {
            var self = this;

            return self["native"].ctrlKey = true;
          }, TMP_17.$$arity = 0);

          Opal.defn(self, '$meta!', TMP_18 = function() {
            var self = this;

            return self["native"].metaKey = true;
          }, TMP_18.$$arity = 0);

          Opal.defn(self, '$button=', TMP_19 = function(value) {
            var self = this;

            return self["native"].button = value;
          }, TMP_19.$$arity = 1);

          Opal.defn(self, '$client', TMP_20 = function $$client() {
            var self = this;

            return $scope.get('Client').$new(self["native"]);
          }, TMP_20.$$arity = 0);

          Opal.defn(self, '$layer', TMP_21 = function $$layer() {
            var self = this;

            return $scope.get('Layer').$new(self["native"]);
          }, TMP_21.$$arity = 0);

          Opal.defn(self, '$offset', TMP_22 = function $$offset() {
            var self = this;

            return $scope.get('Offset').$new(self["native"]);
          }, TMP_22.$$arity = 0);

          Opal.defn(self, '$page', TMP_23 = function $$page() {
            var self = this;

            return $scope.get('Page').$new(self["native"]);
          }, TMP_23.$$arity = 0);

          Opal.defn(self, '$screen', TMP_24 = function $$screen() {
            var self = this;

            return $scope.get('Screen').$new(self["native"]);
          }, TMP_24.$$arity = 0);

          Opal.defn(self, '$ancestor', TMP_25 = function $$ancestor() {
            var self = this;

            return $scope.get('Ancestor').$new(self["native"]);
          }, TMP_25.$$arity = 0);

          Opal.defn(self, '$related=', TMP_26 = function(elem) {
            var self = this;

            return self["native"].relatedTarget = $scope.get('Native').$try_convert(elem);
          }, TMP_26.$$arity = 1);

          Opal.defn(self, '$from=', TMP_27 = function(elem) {
            var self = this;

            return self["native"].fromElement = $scope.get('Native').$try_convert(elem);
          }, TMP_27.$$arity = 1);

          return (Opal.defn(self, '$to=', TMP_28 = function(elem) {
            var self = this;

            return self["native"].toElement = $scope.get('Native').$try_convert(elem);
          }, TMP_28.$$arity = 1), nil) && 'to=';
        })($scope.base, (($scope.get('UI')).$$scope.get('Definition')));

        if ((($a = self['$supported?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_29 = function $$construct(name, desc) {
              var self = this;

              return new MouseEvent(name, desc);
            }, TMP_29.$$arity = 2)
          } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_30 = function $$construct(name, desc) {
              var self = this;

              
        var event = document.createEvent("MouseEvent");
            event.initMouseEvent(name, desc.bubbles, desc.cancelable,
              desc.view || window, desc.detail || 0,
              desc.screenX || 0, desc.screenY || 0,
              desc.clientX || 0, desc.clientY || 0,
              desc.ctrlKey || false, desc.altKey || false,
              desc.shiftKey || false, desc.metaKey || false,
              desc.button || 0, desc.relatedTarget || null);

        return event;
      
            }, TMP_30.$$arity = 2)}};

        self.$alias_native("alt?", "altKey");

        self.$alias_native("ctrl?", "ctrlKey");

        self.$alias_native("meta?", "metaKey");

        self.$alias_native("shift?", "shiftKey");

        self.$alias_native("button");

        Opal.defn(self, '$client', TMP_31 = function $$client() {
          var self = this;

          return $scope.get('Position').$new(self["native"].clientX, self["native"].clientY);
        }, TMP_31.$$arity = 0);

        Opal.defn(self, '$layer', TMP_32 = function $$layer() {
          var $a, self = this;

          if ((($a = self["native"].layerX == null) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return $scope.get('Position').$new(self["native"].layerX, self["native"].layerY)
          };
        }, TMP_32.$$arity = 0);

        Opal.defn(self, '$offset', TMP_33 = function $$offset() {
          var $a, self = this;

          if ((($a = self["native"].offsetX == null) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return $scope.get('Position').$new(self["native"].offsetX, self["native"].offsetY)
          };
        }, TMP_33.$$arity = 0);

        Opal.defn(self, '$page', TMP_34 = function $$page() {
          var $a, self = this;

          if ((($a = self["native"].pageX == null) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return $scope.get('Position').$new(self["native"].pageX, self["native"].pageY)
          };
        }, TMP_34.$$arity = 0);

        Opal.defn(self, '$screen', TMP_35 = function $$screen() {
          var $a, self = this;

          if ((($a = self["native"].screenX == null) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return $scope.get('Position').$new(self["native"].screenX, self["native"].screenY)
          };
        }, TMP_35.$$arity = 0);

        Opal.defn(self, '$ancestor', TMP_36 = function $$ancestor() {
          var $a, self = this;

          if ((($a = self["native"].x == null) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return $scope.get('Position').$new(self["native"].x, self["native"].y)
          };
        }, TMP_36.$$arity = 0);

        Opal.defn(self, '$x', TMP_37 = function $$x() {
          var self = this;

          return self.$screen().$x();
        }, TMP_37.$$arity = 0);

        Opal.defn(self, '$y', TMP_38 = function $$y() {
          var self = this;

          return self.$screen().$y();
        }, TMP_38.$$arity = 0);

        Opal.defn(self, '$related', TMP_39 = function $$related() {
          var $a, self = this;

          if ((($a = self["native"].relatedTarget == null) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return self.$DOM(self["native"].relatedTarget)
          };
        }, TMP_39.$$arity = 0);

        Opal.defn(self, '$from', TMP_40 = function $$from() {
          var $a, self = this;

          if ((($a = self["native"].fromElement == null) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return self.$DOM(self["native"].fromElement)
          };
        }, TMP_40.$$arity = 0);

        Opal.defn(self, '$to', TMP_41 = function $$to() {
          var $a, self = this;

          if ((($a = self["native"].toElement == null) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return self.$DOM(self["native"].toElement)
          };
        }, TMP_41.$$arity = 0);

        Opal.defn(self, '$click?', TMP_42 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("click");
        }, TMP_42.$$arity = 0);

        Opal.defn(self, '$double_click?', TMP_43 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("dblclick");
        }, TMP_43.$$arity = 0);

        Opal.defn(self, '$down?', TMP_44 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("mousedown");
        }, TMP_44.$$arity = 0);

        Opal.defn(self, '$enter?', TMP_45 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("mouseenter");
        }, TMP_45.$$arity = 0);

        Opal.defn(self, '$leave?', TMP_46 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("mouseleave");
        }, TMP_46.$$arity = 0);

        Opal.defn(self, '$move?', TMP_47 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("mousemove");
        }, TMP_47.$$arity = 0);

        Opal.defn(self, '$out?', TMP_48 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("mouseout");
        }, TMP_48.$$arity = 0);

        Opal.defn(self, '$over?', TMP_49 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("mouseover");
        }, TMP_49.$$arity = 0);

        Opal.defn(self, '$up?', TMP_50 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("mouseup");
        }, TMP_50.$$arity = 0);

        return (Opal.defn(self, '$show?', TMP_51 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("show");
        }, TMP_51.$$arity = 0), nil) && 'show?';
      })($scope.base, $scope.get('UI'))
    })($scope.base, null)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/event/keyboard"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native', '$code', '$chr', '$==', '$downcase', '$name']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Keyboard(){};
        var self = $Keyboard = $klass($base, $super, 'Keyboard', $Keyboard);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18;

        def["native"] = nil;
        Opal.defs(self, '$supported?', TMP_1 = function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.Keyboard");
        }, TMP_1.$$arity = 0);

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10;

          def["native"] = nil;
          Opal.defn(self, '$alt!', TMP_2 = function() {
            var self = this;

            return self["native"].altKey = true;
          }, TMP_2.$$arity = 0);

          Opal.defn(self, '$ctrl!', TMP_3 = function() {
            var self = this;

            return self["native"].ctrlKey = true;
          }, TMP_3.$$arity = 0);

          Opal.defn(self, '$meta!', TMP_4 = function() {
            var self = this;

            return self["native"].metaKey = true;
          }, TMP_4.$$arity = 0);

          Opal.defn(self, '$shift!', TMP_5 = function() {
            var self = this;

            return self["native"].shiftKey = true;
          }, TMP_5.$$arity = 0);

          Opal.defn(self, '$code=', TMP_6 = function(code) {
            var self = this;

            return self["native"].keyCode = self["native"].which = code;
          }, TMP_6.$$arity = 1);

          Opal.defn(self, '$key=', TMP_7 = function(key) {
            var self = this;

            return self["native"].key = key;
          }, TMP_7.$$arity = 1);

          Opal.defn(self, '$char=', TMP_8 = function(char$) {
            var self = this;

            return self["native"].char = self["native"].charCode = char$;
          }, TMP_8.$$arity = 1);

          Opal.defn(self, '$repeat!', TMP_9 = function() {
            var self = this;

            return self["native"].repeat = true;
          }, TMP_9.$$arity = 0);

          return (Opal.defn(self, '$locale=', TMP_10 = function(value) {
            var self = this;

            return self["native"].locale = value;
          }, TMP_10.$$arity = 1), nil) && 'locale=';
        })($scope.base, (($scope.get('UI')).$$scope.get('Definition')));

        if ((($a = self['$supported?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_11 = function $$construct(name, desc) {
              var self = this;

              return new KeyboardEvent(name, desc);
            }, TMP_11.$$arity = 2)
          } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_12 = function $$construct(name, desc) {
              var self = this;

              
        var modifiers = "";

        if (desc.altKey) {
          modifiers += "Alt ";
        }

        if (desc.ctrlKey) {
          modifiers += "Ctrl ";
        }

        if (desc.shiftKey) {
          modifiers += "Shift" ;
        }

        if (desc.metaKey) {
          modifiers += "Meta ";
        }

        var event = document.createEvent("KeyboardEvent");
            event.initKeyboardEvent(name, desc.bubbles, desc.cancelable,
              desc.view || window, desc.which, 0,
              modifiers, desc.repeat, desc.locale);

        return event;
      
            }, TMP_12.$$arity = 2)}};

        self.$alias_native("alt?", "altKey");

        self.$alias_native("ctrl?", "ctrlKey");

        self.$alias_native("meta?", "metaKey");

        self.$alias_native("shift?", "shiftKey");

        self.$alias_native("locale");

        self.$alias_native("repeat?", "repeat");

        Opal.defn(self, '$key', TMP_13 = function $$key() {
          var self = this;

          return self["native"].key || self["native"].keyIdentifier || nil;
        }, TMP_13.$$arity = 0);

        Opal.defn(self, '$code', TMP_14 = function $$code() {
          var self = this;

          return self["native"].keyCode || self["native"].which || nil;
        }, TMP_14.$$arity = 0);

        Opal.defn(self, '$char', TMP_15 = function() {
          var $a, self = this;

          return self["native"].char || self["native"].charCode || (function() {if ((($a = self.$code()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$code().$chr()
            } else {
            return nil
          }; return nil; })();
        }, TMP_15.$$arity = 0);

        Opal.alias(self, 'to_i', 'key');

        Opal.defn(self, '$down?', TMP_16 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("keydown");
        }, TMP_16.$$arity = 0);

        Opal.defn(self, '$press?', TMP_17 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("keypress");
        }, TMP_17.$$arity = 0);

        return (Opal.defn(self, '$up?', TMP_18 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("keyup");
        }, TMP_18.$$arity = 0), nil) && 'up?';
      })($scope.base, $scope.get('UI'))
    })($scope.base, null)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/event/focus"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$convert', '$supported?', '$DOM']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Focus(){};
        var self = $Focus = $klass($base, $super, 'Focus', $Focus);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_4, TMP_5, TMP_6;

        def["native"] = nil;
        Opal.defs(self, '$supported?', TMP_1 = function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.Focus");
        }, TMP_1.$$arity = 0);

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3;

          def["native"] = nil;
          Opal.defn(self, '$view=', TMP_2 = function(value) {
            var self = this;

            return self["native"].view = $scope.get('Native').$convert(value);
          }, TMP_2.$$arity = 1);

          return (Opal.defn(self, '$related=', TMP_3 = function(elem) {
            var self = this;

            return self["native"].relatedTarget = $scope.get('Native').$convert(elem);
          }, TMP_3.$$arity = 1), nil) && 'related=';
        })($scope.base, (($scope.get('UI')).$$scope.get('Definition')));

        if ((($a = self['$supported?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_4 = function $$construct(name, desc) {
              var self = this;

              return new FocusEvent(name, desc);
            }, TMP_4.$$arity = 2)
          } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_5 = function $$construct(name, desc) {
              var self = this;

              
        var event = document.createEvent("FocusEvent");
            event.initFocusEvent(name, desc.bubbles, desc.cancelable,
              desc.view || window, 0, desc.relatedTarget);

        return event;
      
            }, TMP_5.$$arity = 2)}};

        return (Opal.defn(self, '$related', TMP_6 = function $$related() {
          var self = this;

          return self.$DOM(self["native"].relatedTarget);
        }, TMP_6.$$arity = 0), nil) && 'related';
      })($scope.base, $scope.get('UI'))
    })($scope.base, null)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/event/wheel"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$!', '$nil?', '$[]', '$===', '$alias_native']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Wheel(){};
        var self = $Wheel = $klass($base, $super, 'Wheel', $Wheel);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_6, TMP_7;

        def["native"] = nil;
        Opal.defs(self, '$supported?', TMP_1 = function() {
          var self = this;
          if ($gvars.$ == null) $gvars.$ = nil;

          return $gvars.$['$[]']("WheelEvent")['$nil?']()['$!']();
        }, TMP_1.$$arity = 0);

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_4, TMP_5;

          def["native"] = nil;
          Opal.defn(self, '$x=', TMP_2 = function(value) {
            var self = this;

            return self["native"].deltaX = value;
          }, TMP_2.$$arity = 1);

          Opal.defn(self, '$y=', TMP_3 = function(value) {
            var self = this;

            return self["native"].deltaY = value;
          }, TMP_3.$$arity = 1);

          Opal.defn(self, '$z=', TMP_4 = function(value) {
            var self = this;

            return self["native"].deltaZ = value;
          }, TMP_4.$$arity = 1);

          return (Opal.defn(self, '$mode=', TMP_5 = function(value) {
            var self = this, $case = nil;

            value = (function() {$case = value;if ("pixel"['$===']($case)) {return WheelEvent.DOM_DELTA_PIXEL;}else if ("line"['$===']($case)) {return WheelEvent.DOM_DELTA_LINE;}else if ("page"['$===']($case)) {return WheelEvent.DOM_DELTA_PAGE;}else { return nil }})();
            return self["native"].deltaMode = value;
          }, TMP_5.$$arity = 1), nil) && 'mode=';
        })($scope.base, $scope.get('Definition'));

        Opal.defs(self, '$construct', TMP_6 = function $$construct(name, desc) {
          var self = this;

          return new WheelEvent(name, desc);
        }, TMP_6.$$arity = 2);

        self.$alias_native("x", "deltaX");

        self.$alias_native("y", "deltaY");

        self.$alias_native("z", "deltaZ");

        return (Opal.defn(self, '$mode', TMP_7 = function $$mode() {
          var self = this, $case = nil;

          return (function() {$case = self["native"].deltaMode;if ((WheelEvent.DOM_DELTA_PIXEL)['$===']($case)) {return "pixel"}else if ((WheelEvent.DOM_DELTA_LINE)['$===']($case)) {return "line"}else if ((WheelEvent.DOM_DELTA_PAGE)['$===']($case)) {return "page"}else { return nil }})();
        }, TMP_7.$$arity = 0), nil) && 'mode';
      })($scope.base, $scope.get('UI'))
    })($scope.base, null)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/event/composition"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native', '$==', '$downcase', '$name']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Composition(){};
        var self = $Composition = $klass($base, $super, 'Composition', $Composition);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8;

        Opal.defs(self, '$supported?', TMP_1 = function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.Composition");
        }, TMP_1.$$arity = 0);

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3;

          def["native"] = nil;
          Opal.defn(self, '$data=', TMP_2 = function(value) {
            var self = this;

            return self["native"].data = value;
          }, TMP_2.$$arity = 1);

          return (Opal.defn(self, '$locale=', TMP_3 = function(value) {
            var self = this;

            return self["native"].locale = value;
          }, TMP_3.$$arity = 1), nil) && 'locale=';
        })($scope.base, (($scope.get('UI')).$$scope.get('Definition')));

        if ((($a = self['$supported?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_4 = function $$construct(name, desc) {
              var self = this;

              return new CompositionEvent(name, desc);
            }, TMP_4.$$arity = 2)
          } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_5 = function $$construct(name, desc) {
              var self = this;

              
        var event = document.createEvent("CompositionEvent");
            event.initCompositionEvent(name, desc.bubbles, desc.cancelable,
              desc.view || window, desc.data, desc.locale);

        return event;
      
            }, TMP_5.$$arity = 2)}};

        self.$alias_native("data");

        self.$alias_native("locale");

        Opal.defn(self, '$start?', TMP_6 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("compositionstart");
        }, TMP_6.$$arity = 0);

        Opal.defn(self, '$update?', TMP_7 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("compositionupdate");
        }, TMP_7.$$arity = 0);

        return (Opal.defn(self, '$end?', TMP_8 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("compositionend");
        }, TMP_8.$$arity = 0), nil) && 'end?';
      })($scope.base, $scope.get('UI'))
    })($scope.base, null)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/event/animation"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Animation(){};
        var self = $Animation = $klass($base, $super, 'Animation', $Animation);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_4, TMP_5;

        Opal.defs(self, '$supported?', TMP_1 = function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.Animation");
        }, TMP_1.$$arity = 0);

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3;

          def["native"] = nil;
          Opal.defn(self, '$animation=', TMP_2 = function(value) {
            var self = this;

            return self["native"].animationName = value;
          }, TMP_2.$$arity = 1);

          return (Opal.defn(self, '$elapsed=', TMP_3 = function(value) {
            var self = this;

            return self["native"].elapsedTime = value;
          }, TMP_3.$$arity = 1), nil) && 'elapsed=';
        })($scope.base, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_4 = function $$construct(name, desc) {
              var self = this;

              return new AnimationEvent(name, desc);
            }, TMP_4.$$arity = 2)
          } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_5 = function $$construct(name, desc) {
              var self = this;

              
        var event = document.createEvent("AnimationEvent");
            event.initAnimationEvent(name, desc.bubbles, desc.cancelable,
              desc.animationName, desc.elapsedTime);

        return event;
      
            }, TMP_5.$$arity = 2)}};

        self.$alias_native("name", "animationName");

        return self.$alias_native("elapsed", "elapsedTime");
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/event/audio_processing"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $AudioProcessing(){};
        var self = $AudioProcessing = $klass($base, $super, 'AudioProcessing', $AudioProcessing);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_5;

        Opal.defs(self, '$supported?', TMP_1 = function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.AudioProcessing");
        }, TMP_1.$$arity = 0);

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_4;

          def["native"] = nil;
          Opal.defn(self, '$time=', TMP_2 = function(value) {
            var self = this;

            return self["native"].playbackTime = value;
          }, TMP_2.$$arity = 1);

          Opal.defn(self, '$input=', TMP_3 = function(value) {
            var self = this;

            return self["native"].inputBuffer = value;
          }, TMP_3.$$arity = 1);

          return (Opal.defn(self, '$output=', TMP_4 = function(value) {
            var self = this;

            return self["native"].outputBuffer = value;
          }, TMP_4.$$arity = 1), nil) && 'output=';
        })($scope.base, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_5 = function $$construct(name, desc) {
              var self = this;

              return new AudioProcessingEvent(name, desc);
            }, TMP_5.$$arity = 2)}};

        self.$alias_native("time", "playbackTime");

        self.$alias_native("input", "inputBuffer");

        return self.$alias_native("output", "outputBuffer");
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/event/before_unload"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $BeforeUnload(){};
        var self = $BeforeUnload = $klass($base, $super, 'BeforeUnload', $BeforeUnload);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_2;

        Opal.defs(self, '$supported?', TMP_1 = function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.BeforeUnload");
        }, TMP_1.$$arity = 0);

        if ((($a = self['$supported?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return (Opal.defs(self, '$construct', TMP_2 = function $$construct(name, desc) {
              var self = this;

              return new BeforeUnloadEvent(name, desc);
            }, TMP_2.$$arity = 2), nil) && 'construct'
            } else {
            return nil
          }
          } else {
          return nil
        };
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/event/clipboard"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Clipboard(){};
        var self = $Clipboard = $klass($base, $super, 'Clipboard', $Clipboard);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_4;

        Opal.defs(self, '$supported?', TMP_1 = function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.Clipboard");
        }, TMP_1.$$arity = 0);

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3;

          def["native"] = nil;
          Opal.defn(self, '$data=', TMP_2 = function(value) {
            var self = this;

            return self["native"].data = value;
          }, TMP_2.$$arity = 1);

          return (Opal.defn(self, '$type=', TMP_3 = function(value) {
            var self = this;

            return self["native"].dataType = value;
          }, TMP_3.$$arity = 1), nil) && 'type=';
        })($scope.base, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_4 = function $$construct(name, desc) {
              var self = this;

              return new ClipboardEvent(name, desc);
            }, TMP_4.$$arity = 2)}};

        self.$alias_native("data");

        return self.$alias_native("type", "dataType");
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/event/device_light"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $DeviceLight(){};
        var self = $DeviceLight = $klass($base, $super, 'DeviceLight', $DeviceLight);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_3;

        Opal.defs(self, '$supported?', TMP_1 = function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.DeviceLight");
        }, TMP_1.$$arity = 0);

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope, TMP_2;

          def["native"] = nil;
          return (Opal.defn(self, '$value=', TMP_2 = function(value) {
            var self = this;

            return self["native"].value = value;
          }, TMP_2.$$arity = 1), nil) && 'value='
        })($scope.base, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_3 = function $$construct(name, desc) {
              var self = this;

              return new DeviceLightEvent(name, desc);
            }, TMP_3.$$arity = 2)}};

        return self.$alias_native("value");
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/event/device_motion"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$new', '$to_n', '$supported?', '$alias_native']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $DeviceMotion(){};
        var self = $DeviceMotion = $klass($base, $super, 'DeviceMotion', $DeviceMotion);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_6, TMP_7;

        Opal.defs(self, '$supported?', TMP_1 = function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.DeviceMotion");
        }, TMP_1.$$arity = 0);

        Opal.cdecl($scope, 'Acceleration', $scope.get('Struct').$new("x", "y", "z"));

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_4, TMP_5;

          def["native"] = nil;
          Opal.defn(self, '$acceleration=', TMP_2 = function(value) {
            var self = this;

            return self["native"].acceleration = value.$to_n();
          }, TMP_2.$$arity = 1);

          Opal.defn(self, '$acceleration_with_gravity=', TMP_3 = function(value) {
            var self = this;

            return self["native"].accelerationIncludingGravity = value.$to_n();
          }, TMP_3.$$arity = 1);

          Opal.defn(self, '$rotation=', TMP_4 = function(value) {
            var self = this;

            return self["native"].rotationRate = value;
          }, TMP_4.$$arity = 1);

          return (Opal.defn(self, '$interval=', TMP_5 = function(value) {
            var self = this;

            return self["native"].interval = value;
          }, TMP_5.$$arity = 1), nil) && 'interval=';
        })($scope.base, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_6 = function $$construct(name, desc) {
              var self = this;

              return new DeviceMotionEvent(name, desc);
            }, TMP_6.$$arity = 2)
          } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_7 = function $$construct(name, desc) {
              var self = this;

              
        var event = document.createEvent("DeviceMotionEvent");
            event.initDeviceMotionEvent(name, desc.bubbles, desc.cancelable,
              desc.acceleration, desc.accelerationIncludingGravity,
              desc.rotationRate, desc.interval);

        return event;
      
            }, TMP_7.$$arity = 2)}};

        self.$alias_native("acceleration");

        self.$alias_native("acceleration_with_gravity", "accelerationIncludingGravity");

        self.$alias_native("rotation", "rotationRate");

        return self.$alias_native("interval");
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/event/device_orientation"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $DeviceOrientation(){};
        var self = $DeviceOrientation = $klass($base, $super, 'DeviceOrientation', $DeviceOrientation);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_6, TMP_7;

        Opal.defs(self, '$supported?', TMP_1 = function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.DeviceOrientation");
        }, TMP_1.$$arity = 0);

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_4, TMP_5;

          def["native"] = nil;
          Opal.defn(self, '$absolute=', TMP_2 = function(value) {
            var self = this;

            return self["native"].absolute = value;
          }, TMP_2.$$arity = 1);

          Opal.defn(self, '$alpha=', TMP_3 = function(value) {
            var self = this;

            return self["native"].alpha = value;
          }, TMP_3.$$arity = 1);

          Opal.defn(self, '$beta=', TMP_4 = function(value) {
            var self = this;

            return self["native"].beta = value;
          }, TMP_4.$$arity = 1);

          return (Opal.defn(self, '$gamma=', TMP_5 = function(value) {
            var self = this;

            return self["native"].gamma = value;
          }, TMP_5.$$arity = 1), nil) && 'gamma=';
        })($scope.base, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_6 = function $$construct(name, desc) {
              var self = this;

              return new DeviceOrientationEvent(name, desc);
            }, TMP_6.$$arity = 2)
          } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_7 = function $$construct(name, desc) {
              var self = this;

              
        var event = document.createEvent("DeviceOrientationEvent");
            event.initDeviceOrientationEvent(name, desc.bubbles, desc.cancelable,
              desc.alpha, desc.beta, desc.gamma, desc.absolute);

        return event;
      
            }, TMP_7.$$arity = 2)}};

        self.$alias_native("absolute");

        self.$alias_native("alpha");

        self.$alias_native("beta");

        return self.$alias_native("gamma");
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/event/device_proximity"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $DeviceProximity(){};
        var self = $DeviceProximity = $klass($base, $super, 'DeviceProximity', $DeviceProximity);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_5;

        Opal.defs(self, '$supported?', TMP_1 = function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.DeviceProximity");
        }, TMP_1.$$arity = 0);

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_4;

          def["native"] = nil;
          Opal.defn(self, '$value=', TMP_2 = function(value) {
            var self = this;

            return self["native"].value = value;
          }, TMP_2.$$arity = 1);

          Opal.defn(self, '$min=', TMP_3 = function(value) {
            var self = this;

            return self["native"].min = value;
          }, TMP_3.$$arity = 1);

          return (Opal.defn(self, '$max=', TMP_4 = function(value) {
            var self = this;

            return self["native"].max = value;
          }, TMP_4.$$arity = 1), nil) && 'max=';
        })($scope.base, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_5 = function $$construct(name, desc) {
              var self = this;

              return new DeviceProximityEvent(name, desc);
            }, TMP_5.$$arity = 2)}};

        self.$alias_native("value");

        self.$alias_native("min");

        return self.$alias_native("max");
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/event/drag"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$include', '$new', '$convert', '$elem', '$supported?', '$alias_native', '$x', '$screen', '$y', '$DOM', '$raise']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Drag(){};
        var self = $Drag = $klass($base, $super, 'Drag', $Drag);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21;

        def["native"] = nil;
        Opal.defs(self, '$supported?', TMP_1 = function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.Drag");
        }, TMP_1.$$arity = 0);

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13;

          def["native"] = nil;
          (function($base, $super) {
            function $Client(){};
            var self = $Client = $klass($base, $super, 'Client', $Client);

            var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3;

            def["native"] = nil;
            self.$include($scope.get('Native'));

            Opal.defn(self, '$x=', TMP_2 = function(value) {
              var self = this;

              return self["native"].clientX = value;
            }, TMP_2.$$arity = 1);

            return (Opal.defn(self, '$y=', TMP_3 = function(value) {
              var self = this;

              return self["native"].clientY = value;
            }, TMP_3.$$arity = 1), nil) && 'y=';
          })($scope.base, null);

          (function($base, $super) {
            function $Screen(){};
            var self = $Screen = $klass($base, $super, 'Screen', $Screen);

            var def = self.$$proto, $scope = self.$$scope, TMP_4, TMP_5;

            def["native"] = nil;
            self.$include($scope.get('Native'));

            Opal.defn(self, '$x=', TMP_4 = function(value) {
              var self = this;

              return self["native"].screenX = value;
            }, TMP_4.$$arity = 1);

            return (Opal.defn(self, '$y=', TMP_5 = function(value) {
              var self = this;

              return self["native"].screenY = value;
            }, TMP_5.$$arity = 1), nil) && 'y=';
          })($scope.base, null);

          Opal.defn(self, '$alt!', TMP_6 = function() {
            var self = this;

            return self["native"].altKey = true;
          }, TMP_6.$$arity = 0);

          Opal.defn(self, '$ctrl!', TMP_7 = function() {
            var self = this;

            return self["native"].ctrlKey = true;
          }, TMP_7.$$arity = 0);

          Opal.defn(self, '$meta!', TMP_8 = function() {
            var self = this;

            return self["native"].metaKey = true;
          }, TMP_8.$$arity = 0);

          Opal.defn(self, '$button=', TMP_9 = function(value) {
            var self = this;

            return self["native"].button = value;
          }, TMP_9.$$arity = 1);

          Opal.defn(self, '$client', TMP_10 = function $$client() {
            var self = this;

            return $scope.get('Client').$new(self["native"]);
          }, TMP_10.$$arity = 0);

          Opal.defn(self, '$screen', TMP_11 = function $$screen() {
            var self = this;

            return $scope.get('Screen').$new(self["native"]);
          }, TMP_11.$$arity = 0);

          Opal.defn(self, '$related=', TMP_12 = function(elem) {
            var self = this;

            return self["native"].relatedTarget = $scope.get('Native').$convert(elem);
          }, TMP_12.$$arity = 1);

          return (Opal.defn(self, '$transfer=', TMP_13 = function(value) {
            var self = this;

            return self["native"].dataTransfer = $scope.get('Native').$convert(self.$elem());
          }, TMP_13.$$arity = 1), nil) && 'transfer=';
        })($scope.base, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_14 = function $$construct(name, desc) {
              var self = this;

              return new DragEvent(name, desc);
            }, TMP_14.$$arity = 2)
          } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_15 = function $$construct(name, desc) {
              var self = this;

              
        var event = document.createEvent("DragEvent");
            event.initDragEvent(name, desc.bubbles, desc.cancelable,
              desc.view || window, 0,
              desc.screenX || 0, desc.screenY || 0,
              desc.clientX || 0, desc.clientY || 0,
              desc.ctrlKey, desc.altKey, desc.shiftKey, desc.metaKey,
              desc.button || 0, desc.relatedTarget, desc.dataTransfer);

        return event;
      
            }, TMP_15.$$arity = 2)}};

        self.$alias_native("alt?", "altKey");

        self.$alias_native("ctrl?", "ctrlKey");

        self.$alias_native("meta?", "metaKey");

        self.$alias_native("shift?", "shiftKey");

        self.$alias_native("button");

        Opal.defn(self, '$client', TMP_16 = function $$client() {
          var self = this;

          return $scope.get('Position').$new(self["native"].clientX, self["native"].clientY);
        }, TMP_16.$$arity = 0);

        Opal.defn(self, '$screen', TMP_17 = function $$screen() {
          var $a, self = this;

          if ((($a = (typeof(self["native"].screenX) !== "undefined")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('Position').$new(self["native"].screenX, self["native"].screenY)
            } else {
            return nil
          };
        }, TMP_17.$$arity = 0);

        Opal.defn(self, '$x', TMP_18 = function $$x() {
          var self = this;

          return self.$screen().$x();
        }, TMP_18.$$arity = 0);

        Opal.defn(self, '$y', TMP_19 = function $$y() {
          var self = this;

          return self.$screen().$y();
        }, TMP_19.$$arity = 0);

        Opal.defn(self, '$related', TMP_20 = function $$related() {
          var self = this;

          return self.$DOM(self["native"].relatedTarget);
        }, TMP_20.$$arity = 0);

        return (Opal.defn(self, '$transfer', TMP_21 = function $$transfer() {
          var self = this;

          return self.$raise($scope.get('NotImplementedError'));
        }, TMP_21.$$arity = 0), nil) && 'transfer';
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/event/gamepad"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Gamepad(){};
        var self = $Gamepad = $klass($base, $super, 'Gamepad', $Gamepad);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12;

        def["native"] = nil;
        Opal.defs(self, '$supported?', TMP_1 = function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.Gamepad");
        }, TMP_1.$$arity = 0);

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6;

          def["native"] = nil;
          Opal.defn(self, '$id=', TMP_2 = function(value) {
            var self = this;

            return self["native"].id = value;
          }, TMP_2.$$arity = 1);

          Opal.defn(self, '$index=', TMP_3 = function(value) {
            var self = this;

            return self["native"].index = value;
          }, TMP_3.$$arity = 1);

          Opal.defn(self, '$at=', TMP_4 = function(value) {
            var self = this;

            return self["native"].timestamp = value;
          }, TMP_4.$$arity = 1);

          Opal.defn(self, '$axes=', TMP_5 = function(value) {
            var self = this;

            return self["native"].axes = value;
          }, TMP_5.$$arity = 1);

          return (Opal.defn(self, '$buttons=', TMP_6 = function(value) {
            var self = this;

            return self["native"].buttons = value;
          }, TMP_6.$$arity = 1), nil) && 'buttons=';
        })($scope.base, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_7 = function $$construct(name, desc) {
              var self = this;

              return new GamepadEvent(name, {
        bubbles:    desc.bubbles,
        cancelable: desc.cancelable,
        gamepad:    desc });
            }, TMP_7.$$arity = 2)}};

        Opal.defn(self, '$id', TMP_8 = function $$id() {
          var self = this;

          return self["native"].gamepad.id;
        }, TMP_8.$$arity = 0);

        Opal.defn(self, '$index', TMP_9 = function $$index() {
          var self = this;

          return self["native"].gamepad.index;
        }, TMP_9.$$arity = 0);

        Opal.defn(self, '$at', TMP_10 = function $$at() {
          var self = this;

          return self["native"].gamepad.timestamp;
        }, TMP_10.$$arity = 0);

        Opal.defn(self, '$axes', TMP_11 = function $$axes() {
          var self = this;

          return self["native"].gamepad.axes;
        }, TMP_11.$$arity = 0);

        return (Opal.defn(self, '$buttons', TMP_12 = function $$buttons() {
          var self = this;

          return self["native"].gamepad.buttons;
        }, TMP_12.$$arity = 0), nil) && 'buttons';
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/event/hash_change"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $HashChange(){};
        var self = $HashChange = $klass($base, $super, 'HashChange', $HashChange);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_4;

        Opal.defs(self, '$supported?', TMP_1 = function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.HashChange");
        }, TMP_1.$$arity = 0);

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3;

          def["native"] = nil;
          Opal.defn(self, '$old=', TMP_2 = function(value) {
            var self = this;

            return self["native"].oldURL = value;
          }, TMP_2.$$arity = 1);

          return (Opal.defn(self, '$new=', TMP_3 = function(value) {
            var self = this;

            return self["native"].newURL = value;
          }, TMP_3.$$arity = 1), nil) && 'new=';
        })($scope.base, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_4 = function $$construct(name, desc) {
              var self = this;

              return new HashChangeEvent(name, desc);
            }, TMP_4.$$arity = 2)}};

        self.$alias_native("old", "oldURL");

        return self.$alias_native("new", "newURL");
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/event/progress"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Progress(){};
        var self = $Progress = $klass($base, $super, 'Progress', $Progress);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_5, TMP_6;

        Opal.defs(self, '$supported?', TMP_1 = function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.Progress");
        }, TMP_1.$$arity = 0);

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_4;

          def["native"] = nil;
          Opal.defn(self, '$computable=', TMP_2 = function(value) {
            var self = this;

            return self["native"].computableLength = value;
          }, TMP_2.$$arity = 1);

          Opal.defn(self, '$loaded=', TMP_3 = function(value) {
            var self = this;

            return self["native"].loaded = value;
          }, TMP_3.$$arity = 1);

          return (Opal.defn(self, '$total=', TMP_4 = function(value) {
            var self = this;

            return self["native"].total = value;
          }, TMP_4.$$arity = 1), nil) && 'total=';
        })($scope.base, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_5 = function $$construct(name, desc) {
              var self = this;

              return new ProgressEvent(name, desc);
            }, TMP_5.$$arity = 2)
          } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_6 = function $$construct(name, desc) {
              var self = this;

              
        var event = document.createEvent("ProgressEvent");
            event.initProgressEvent(name, desc.bubbles, desc.cancelable,
              desc.computable, desc.loaded, desc.total);

        return event;
      
            }, TMP_6.$$arity = 2)}};

        self.$alias_native("computable?", "computableLength");

        self.$alias_native("loaded");

        return self.$alias_native("total");
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/event/page_transition"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $PageTransition(){};
        var self = $PageTransition = $klass($base, $super, 'PageTransition', $PageTransition);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_3;

        Opal.defs(self, '$supported?', TMP_1 = function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.PageTransition");
        }, TMP_1.$$arity = 0);

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope, TMP_2;

          def["native"] = nil;
          return (Opal.defn(self, '$persisted=', TMP_2 = function(value) {
            var self = this;

            return self["native"].persisted = value;
          }, TMP_2.$$arity = 1), nil) && 'persisted='
        })($scope.base, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.PageTransition")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_3 = function $$construct(name, desc) {
              var self = this;

              return new PageTransitionEvent(name, desc);
            }, TMP_3.$$arity = 2)}};

        return self.$alias_native("persisted?", "persisted");
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/event/pop_state"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $PopState(){};
        var self = $PopState = $klass($base, $super, 'PopState', $PopState);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_3, TMP_4;

        Opal.defs(self, '$supported?', TMP_1 = function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.PopState");
        }, TMP_1.$$arity = 0);

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope, TMP_2;

          def["native"] = nil;
          return (Opal.defn(self, '$state=', TMP_2 = function(value) {
            var self = this;

            return self["native"].state = value;
          }, TMP_2.$$arity = 1), nil) && 'state='
        })($scope.base, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_3 = function $$construct(name, desc) {
              var self = this;

              return new PopStateEvent(name, desc);
            }, TMP_3.$$arity = 2)
          } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_4 = function $$construct(name, desc) {
              var self = this;

              
        var event = document.createEvent('PopStateEvent');
            event.initPopStateEvent(name, desc.bubbles, desc.cancelable,
              desc.state);

        return event;
      
            }, TMP_4.$$arity = 2)}};

        return self.$alias_native("state");
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/event/storage"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Storage(){};
        var self = $Storage = $klass($base, $super, 'Storage', $Storage);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_7;

        Opal.defs(self, '$supported?', TMP_1 = function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.Storage");
        }, TMP_1.$$arity = 0);

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6;

          def["native"] = nil;
          Opal.defn(self, '$key=', TMP_2 = function(value) {
            var self = this;

            return self["native"].key = value;
          }, TMP_2.$$arity = 1);

          Opal.defn(self, '$new=', TMP_3 = function(value) {
            var self = this;

            return self["native"].newValue = value;
          }, TMP_3.$$arity = 1);

          Opal.defn(self, '$old=', TMP_4 = function(value) {
            var self = this;

            return self["native"].oldValue = value;
          }, TMP_4.$$arity = 1);

          Opal.defn(self, '$area=', TMP_5 = function(value) {
            var self = this;

            return self["native"].storageArea = value;
          }, TMP_5.$$arity = 1);

          return (Opal.defn(self, '$url=', TMP_6 = function(value) {
            var self = this;

            return self["native"].url = value;
          }, TMP_6.$$arity = 1), nil) && 'url=';
        })($scope.base, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_7 = function $$construct(name, desc) {
              var self = this;

              return new StorageEvent(name, desc);
            }, TMP_7.$$arity = 2)}};

        self.$alias_native("key");

        self.$alias_native("new", "newValue");

        self.$alias_native("old", "oldValue");

        self.$alias_native("area", "storageArea");

        return self.$alias_native("url");
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/event/touch"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native', '$==', '$downcase', '$name']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Touch(){};
        var self = $Touch = $klass($base, $super, 'Touch', $Touch);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11;

        Opal.defs(self, '$supported?', TMP_1 = function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.Touch");
        }, TMP_1.$$arity = 0);

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_4, TMP_5;

          def["native"] = nil;
          Opal.defn(self, '$alt!', TMP_2 = function() {
            var self = this;

            return self["native"].altKey = true;
          }, TMP_2.$$arity = 0);

          Opal.defn(self, '$ctrl!', TMP_3 = function() {
            var self = this;

            return self["native"].ctrlKey = true;
          }, TMP_3.$$arity = 0);

          Opal.defn(self, '$meta!', TMP_4 = function() {
            var self = this;

            return self["native"].metaKey = true;
          }, TMP_4.$$arity = 0);

          return (Opal.defn(self, '$shift!', TMP_5 = function() {
            var self = this;

            return self["native"].shiftKey = true;
          }, TMP_5.$$arity = 0), nil) && 'shift!';
        })($scope.base, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_6 = function $$construct(name, desc) {
              var self = this;

              return new TouchEvent(name, desc);
            }, TMP_6.$$arity = 2)}};

        self.$alias_native("alt?", "altKey");

        self.$alias_native("ctrl?", "ctrlKey");

        self.$alias_native("meta?", "metaKey");

        self.$alias_native("shift?", "shiftKey");

        Opal.defn(self, '$cancel?', TMP_7 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("touchcancel");
        }, TMP_7.$$arity = 0);

        Opal.defn(self, '$end?', TMP_8 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("touchend");
        }, TMP_8.$$arity = 0);

        Opal.defn(self, '$leave?', TMP_9 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("touchleave");
        }, TMP_9.$$arity = 0);

        Opal.defn(self, '$move?', TMP_10 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("touchmove");
        }, TMP_10.$$arity = 0);

        return (Opal.defn(self, '$start?', TMP_11 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("touchstart");
        }, TMP_11.$$arity = 0), nil) && 'start?';
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/event/sensor"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Sensor(){};
        var self = $Sensor = $klass($base, $super, 'Sensor', $Sensor);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_2;

        Opal.defs(self, '$supported?', TMP_1 = function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.Sensor");
        }, TMP_1.$$arity = 0);

        if ((($a = self['$supported?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return (Opal.defs(self, '$construct', TMP_2 = function $$construct(name, desc) {
              var self = this;

              return new SensorEvent(name, desc);
            }, TMP_2.$$arity = 2), nil) && 'construct'
            } else {
            return nil
          }
          } else {
          return nil
        };
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["ostruct"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2, $range = Opal.range;

  Opal.add_stubs(['$each_pair', '$[]=', '$new_ostruct_member', '$[]', '$to_sym', '$>', '$length', '$raise', '$new', '$end_with?', '$!=', '$enum_for', '$is_a?', '$==', '$instance_variable_get', '$===', '$eql?', '$dup', '$to_n', '$hash', '$attr_reader', '$__send__', '$singleton_class', '$delete', '$respond_to?', '$define_singleton_method', '$__id__', '$class', '$any?', '$+', '$join', '$map', '$inspect']);
  return (function($base, $super) {
    function $OpenStruct(){};
    var self = $OpenStruct = $klass($base, $super, 'OpenStruct', $OpenStruct);

    var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_17, TMP_19;

    def.table = nil;
    Opal.defn(self, '$initialize', TMP_2 = function $$initialize(hash) {
      var $a, $b, TMP_1, self = this;

      if (hash == null) {
        hash = nil;
      }
      self.table = $hash2([], {});
      if (hash !== false && hash !== nil && hash != null) {
        return ($a = ($b = hash).$each_pair, $a.$$p = (TMP_1 = function(key, value){var self = TMP_1.$$s || this;
          if (self.table == null) self.table = nil;
if (key == null) key = nil;if (value == null) value = nil;
        return self.table['$[]='](self.$new_ostruct_member(key), value)}, TMP_1.$$s = self, TMP_1.$$arity = 2, TMP_1), $a).call($b)
        } else {
        return nil
      };
    }, TMP_2.$$arity = -1);

    Opal.defn(self, '$[]', TMP_3 = function(name) {
      var self = this;

      return self.table['$[]'](name.$to_sym());
    }, TMP_3.$$arity = 1);

    Opal.defn(self, '$[]=', TMP_4 = function(name, value) {
      var self = this;

      return self.table['$[]='](self.$new_ostruct_member(name), value);
    }, TMP_4.$$arity = 2);

    Opal.defn(self, '$method_missing', TMP_5 = function $$method_missing(name, $a_rest) {
      var $b, self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      if ((($b = $rb_gt(args.$length(), 2)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        self.$raise($scope.get('NoMethodError').$new("undefined method `" + (name) + "' for #<OpenStruct>", name))};
      if ((($b = name['$end_with?']("=")) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        if ((($b = args.$length()['$!='](1)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          self.$raise($scope.get('ArgumentError').$new("wrong number of arguments (0 for 1)"))};
        return self.table['$[]='](self.$new_ostruct_member(name['$[]']($range(0, -2, false))), args['$[]'](0));
        } else {
        return self.table['$[]'](name.$to_sym())
      };
    }, TMP_5.$$arity = -2);

    Opal.defn(self, '$each_pair', TMP_6 = function $$each_pair() {
      var $a, $b, TMP_7, self = this, $iter = TMP_6.$$p, $yield = $iter || nil;

      TMP_6.$$p = null;
      if (($yield !== nil)) {
        } else {
        return self.$enum_for("each_pair")
      };
      return ($a = ($b = self.table).$each_pair, $a.$$p = (TMP_7 = function(pair){var self = TMP_7.$$s || this;
if (pair == null) pair = nil;
      return Opal.yield1($yield, pair);}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $a).call($b);
    }, TMP_6.$$arity = 0);

    Opal.defn(self, '$==', TMP_8 = function(other) {
      var $a, self = this;

      if ((($a = other['$is_a?']($scope.get('OpenStruct'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return false
      };
      return self.table['$=='](other.$instance_variable_get("@table"));
    }, TMP_8.$$arity = 1);

    Opal.defn(self, '$===', TMP_9 = function(other) {
      var $a, self = this;

      if ((($a = other['$is_a?']($scope.get('OpenStruct'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return false
      };
      return self.table['$==='](other.$instance_variable_get("@table"));
    }, TMP_9.$$arity = 1);

    Opal.defn(self, '$eql?', TMP_10 = function(other) {
      var $a, self = this;

      if ((($a = other['$is_a?']($scope.get('OpenStruct'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return false
      };
      return self.table['$eql?'](other.$instance_variable_get("@table"));
    }, TMP_10.$$arity = 1);

    Opal.defn(self, '$to_h', TMP_11 = function $$to_h() {
      var self = this;

      return self.table.$dup();
    }, TMP_11.$$arity = 0);

    Opal.defn(self, '$to_n', TMP_12 = function $$to_n() {
      var self = this;

      return self.table.$to_n();
    }, TMP_12.$$arity = 0);

    Opal.defn(self, '$hash', TMP_13 = function $$hash() {
      var self = this;

      return self.table.$hash();
    }, TMP_13.$$arity = 0);

    self.$attr_reader("table");

    Opal.defn(self, '$delete_field', TMP_14 = function $$delete_field(name) {
      var self = this, sym = nil;

      sym = name.$to_sym();
      try {
        self.$singleton_class().$__send__("remove_method", sym, "" + (sym) + "=")
      } catch ($err) {
        if (Opal.rescue($err, [$scope.get('NameError')])) {
          try {
            nil
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };
      return self.table.$delete(sym);
    }, TMP_14.$$arity = 1);

    Opal.defn(self, '$new_ostruct_member', TMP_17 = function $$new_ostruct_member(name) {
      var $a, $b, TMP_15, $c, TMP_16, self = this;

      name = name.$to_sym();
      if ((($a = self['$respond_to?'](name)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        ($a = ($b = self).$define_singleton_method, $a.$$p = (TMP_15 = function(){var self = TMP_15.$$s || this;
          if (self.table == null) self.table = nil;

        return self.table['$[]'](name)}, TMP_15.$$s = self, TMP_15.$$arity = 0, TMP_15), $a).call($b, name);
        ($a = ($c = self).$define_singleton_method, $a.$$p = (TMP_16 = function(x){var self = TMP_16.$$s || this;
          if (self.table == null) self.table = nil;
if (x == null) x = nil;
        return self.table['$[]='](name, x)}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16), $a).call($c, "" + (name) + "=");
      };
      return name;
    }, TMP_17.$$arity = 1);

    var ostruct_ids;

    Opal.defn(self, '$inspect', TMP_19 = function $$inspect() {
      var $a, $b, TMP_18, self = this, result = nil;

      
      var top = (ostruct_ids === undefined),
          ostruct_id = self.$__id__();
    ;
      try {
      result = "#<" + (self.$class());
      
        if (top) {
          ostruct_ids = {};
        }
        if (ostruct_ids.hasOwnProperty(ostruct_id)) {
          return result + ' ...>';
        }
        ostruct_ids[ostruct_id] = true;
      
      if ((($a = self.table['$any?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        result = $rb_plus(result, " ")};
      result = $rb_plus(result, ($a = ($b = self.$each_pair()).$map, $a.$$p = (TMP_18 = function(name, value){var self = TMP_18.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
      return "" + (name) + "=" + (value.$inspect())}, TMP_18.$$s = self, TMP_18.$$arity = 2, TMP_18), $a).call($b).$join(", "));
      result = $rb_plus(result, ">");
      return result;
      } finally {
        
        if (top) {
          ostruct_ids = undefined;
        }
      
      };
    }, TMP_19.$$arity = 0);

    return Opal.alias(self, 'to_s', 'inspect');
  })($scope.base, null)
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/event/custom"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$require', '$supports?', '$end_with?', '$[]', '$to_n', '$merge!', '$Native', '$new', '$has_key?']);
  self.$require("ostruct");
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Custom(){};
        var self = $Custom = $klass($base, $super, 'Custom', $Custom);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8;

        def.detail = nil;
        Opal.defs(self, '$supported?', TMP_1 = function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.Custom");
        }, TMP_1.$$arity = 0);

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope, TMP_2;

          def["native"] = nil;
          return (Opal.defn(self, '$method_missing', TMP_2 = function $$method_missing(name, value) {
            var $a, self = this;

            if ((($a = name['$end_with?']("=")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self["native"][name['$[]']($range(0, -2, false))] = value;
              } else {
              return nil
            };
          }, TMP_2.$$arity = 2), nil) && 'method_missing'
        })($scope.base, $scope.get('Definition'));

        if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          Opal.defs(self, '$construct', TMP_3 = function $$construct(name, desc) {
            var self = this;

            return new CustomEvent(name, {
        bubbles:    desc.bubbles,
        cancelable: desc.cancelable,
        detail:     desc });
          }, TMP_3.$$arity = 2)
        } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          Opal.defs(self, '$construct', TMP_4 = function $$construct(name, desc) {
            var self = this;

            
        var event = document.createEvent("CustomEvent");
            event.initCustomEvent(name, desc.bubbles, desc.cancelable, desc);

        return event;
      
          }, TMP_4.$$arity = 2)
        } else if ((($a = $scope.get('Browser')['$supports?']("Event.createObject")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          Opal.defs(self, '$construct', TMP_5 = function $$construct(name, desc) {
            var self = this;

            return self.$Native(document.createEventObject())['$merge!']({
        type:       name,
        bubbles:    desc.bubbles,
        cancelable: desc.cancelable,
        detail:     desc }).$to_n();
          }, TMP_5.$$arity = 2)
          } else {
          Opal.defs(self, '$construct', TMP_6 = function $$construct(name, desc) {
            var self = this;

            return self.$Native(desc)['$merge!']({
        type:       name,
        bubbles:    desc.bubbles,
        cancelable: desc.cancelable,
        detail:     desc }).$to_n();
          }, TMP_6.$$arity = 2)
        };

        Opal.defn(self, '$initialize', TMP_7 = function $$initialize(event, callback) {
          var $a, $b, self = this, $iter = TMP_7.$$p, $yield = $iter || nil;

          if (callback == null) {
            callback = nil;
          }
          TMP_7.$$p = null;
          ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_7, false)), $a.$$p = null, $a).call($b, event, callback);
          return self.detail = $scope.get('Hash').$new(event.detail);
        }, TMP_7.$$arity = -2);

        return (Opal.defn(self, '$method_missing', TMP_8 = function $$method_missing(id, $a_rest) {
          var $b, $c, self = this, $iter = TMP_8.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

          TMP_8.$$p = null;
          $zuper = [];
          
          for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
            $zuper[$zuper_index] = arguments[$zuper_index];
          }
          if ((($b = self.detail['$has_key?'](id)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            return self.detail['$[]'](id)};
          return ($b = ($c = self, Opal.find_super_dispatcher(self, 'method_missing', TMP_8, false)), $b.$$p = $iter, $b).apply($c, $zuper);
        }, TMP_8.$$arity = -2), nil) && 'method_missing';
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base);
};
/* Generated by Opal 0.10.3 */
Opal.modules["buffer/array"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$[]', '$name_for', '$include', '$attr_reader', '$==', '$for', '$to_n', '$enum_for']);
  return (function($base, $super) {
    function $Buffer(){};
    var self = $Buffer = $klass($base, $super, 'Buffer', $Buffer);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $Array(){};
      var self = $Array = $klass($base, $super, 'Array', $Array);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9;

      def["native"] = nil;
      Opal.defs(self, '$for', TMP_1 = function(bits, type) {
        var self = this;
        if ($gvars.$ == null) $gvars.$ = nil;

        return $gvars.$['$[]']("" + ($scope.get('Buffer').$name_for(bits, type)) + "Array");
      }, TMP_1.$$arity = 2);

      self.$include($scope.get('Enumerable'));

      self.$attr_reader("buffer", "type");

      Opal.defn(self, '$initialize', TMP_2 = function $$initialize(buffer, bits, type) {
        var $a, $b, $c, self = this, $iter = TMP_2.$$p, $yield = $iter || nil;

        if (bits == null) {
          bits = nil;
        }
        if (type == null) {
          type = nil;
        }
        TMP_2.$$p = null;
        if ($scope.get('Native')['$=='](buffer)) {
          ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_2, false)), $a.$$p = null, $a).call($b, buffer)
          } else {
          
        var klass = $scope.get('Array').$for(bits, type);

        ($a = ($c = self, Opal.find_super_dispatcher(self, 'initialize', TMP_2, false)), $a.$$p = null, $a).call($c, new klass(buffer.$to_n()))
      ;
        };
        self.buffer = buffer;
        return self.type = type;
      }, TMP_2.$$arity = -2);

      Opal.defn(self, '$bits', TMP_3 = function $$bits() {
        var self = this;

        return self["native"].BYTES_PER_ELEMENT * 8;
      }, TMP_3.$$arity = 0);

      Opal.defn(self, '$[]', TMP_4 = function(index, offset) {
        var self = this;

        if (offset == null) {
          offset = nil;
        }
        if (offset !== false && offset !== nil && offset != null) {
          return self["native"].subarray(index, offset);
          } else {
          return self["native"][index];
        };
      }, TMP_4.$$arity = -2);

      Opal.defn(self, '$[]=', TMP_5 = function(index, value) {
        var self = this;

        return self["native"][index] = value;
      }, TMP_5.$$arity = 2);

      Opal.defn(self, '$bytesize', TMP_6 = function $$bytesize() {
        var self = this;

        return self["native"].byteLength;
      }, TMP_6.$$arity = 0);

      Opal.defn(self, '$each', TMP_7 = function $$each() {
        var self = this, $iter = TMP_7.$$p, $yield = $iter || nil;

        TMP_7.$$p = null;
        if (($yield !== nil)) {
          } else {
          return self.$enum_for("each")
        };
        
      for (var i = 0, length = self["native"].length; i < length; i++) {
        Opal.yield1($yield, self["native"][i])
      }
    ;
        return self;
      }, TMP_7.$$arity = 0);

      Opal.defn(self, '$length', TMP_8 = function $$length() {
        var self = this;

        return self["native"].length;
      }, TMP_8.$$arity = 0);

      Opal.defn(self, '$merge!', TMP_9 = function(other, offset) {
        var self = this;

        return self["native"].set(other.$to_n(), offset);
      }, TMP_9.$$arity = -2);

      return Opal.alias(self, 'size', 'length');
    })($scope.base, $scope.get('Native'))
  })($scope.base, $scope.get('Native'))
};
/* Generated by Opal 0.10.3 */
Opal.modules["buffer/view"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$include', '$!', '$nil?', '$[]', '$attr_reader', '$native?', '$to_n', '$name_for']);
  return (function($base, $super) {
    function $Buffer(){};
    var self = $Buffer = $klass($base, $super, 'Buffer', $Buffer);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $View(){};
      var self = $View = $klass($base, $super, 'View', $View);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21;

      def["native"] = nil;
      self.$include($scope.get('Native'));

      Opal.defs(self, '$supported?', TMP_1 = function() {
        var self = this;
        if ($gvars.$ == null) $gvars.$ = nil;

        return $gvars.$['$[]']("DataView")['$nil?']()['$!']();
      }, TMP_1.$$arity = 0);

      self.$attr_reader("buffer", "offset");

      Opal.defn(self, '$initialize', TMP_2 = function $$initialize(buffer, offset, length) {
        var $a, $b, $c, $d, $e, self = this, $iter = TMP_2.$$p, $yield = $iter || nil;

        if (offset == null) {
          offset = nil;
        }
        if (length == null) {
          length = nil;
        }
        TMP_2.$$p = null;
        if ((($a = self['$native?'](buffer)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_2, false)), $a.$$p = null, $a).call($b, buffer)
        } else if ((($a = (($c = offset !== false && offset !== nil && offset != null) ? length : offset)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          ($a = ($c = self, Opal.find_super_dispatcher(self, 'initialize', TMP_2, false)), $a.$$p = null, $a).call($c, new DataView(buffer.$to_n(), offset.$to_n(), length.$to_n()))
        } else if (offset !== false && offset !== nil && offset != null) {
          ($a = ($d = self, Opal.find_super_dispatcher(self, 'initialize', TMP_2, false)), $a.$$p = null, $a).call($d, new DataView(buffer.$to_n(), offset.$to_n()))
          } else {
          ($a = ($e = self, Opal.find_super_dispatcher(self, 'initialize', TMP_2, false)), $a.$$p = null, $a).call($e, new DataView(buffer.$to_n()))
        };
        self.buffer = buffer;
        return self.offset = offset;
      }, TMP_2.$$arity = -2);

      Opal.defn(self, '$length', TMP_3 = function $$length() {
        var self = this;

        return self["native"].byteLength;
      }, TMP_3.$$arity = 0);

      Opal.alias(self, 'size', 'length');

      Opal.defn(self, '$get', TMP_4 = function $$get(offset, bits, type, little) {
        var self = this;

        if (bits == null) {
          bits = 8;
        }
        if (type == null) {
          type = "unsigned";
        }
        if (little == null) {
          little = false;
        }
        return self["native"]["get" + $scope.get('Buffer').$name_for(bits, type)](offset, little);
      }, TMP_4.$$arity = -2);

      Opal.alias(self, '[]', 'get');

      Opal.defn(self, '$set', TMP_5 = function $$set(offset, value, bits, type, little) {
        var self = this;

        if (bits == null) {
          bits = 8;
        }
        if (type == null) {
          type = "unsigned";
        }
        if (little == null) {
          little = false;
        }
        return self["native"]["set" + $scope.get('Buffer').$name_for(bits, type)](offset, value, little);
      }, TMP_5.$$arity = -3);

      Opal.alias(self, '[]=', 'set');

      Opal.defn(self, '$get_int8', TMP_6 = function $$get_int8(offset, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].getInt8(offset, little);
      }, TMP_6.$$arity = -2);

      Opal.defn(self, '$set_int8', TMP_7 = function $$set_int8(offset, value, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].setInt8(offset, value, little);
      }, TMP_7.$$arity = -3);

      Opal.defn(self, '$get_uint8', TMP_8 = function $$get_uint8(offset, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].getUint8(offset, little);
      }, TMP_8.$$arity = -2);

      Opal.defn(self, '$set_uint8', TMP_9 = function $$set_uint8(offset, value, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].setUint8(offset, value, little);
      }, TMP_9.$$arity = -3);

      Opal.defn(self, '$get_int16', TMP_10 = function $$get_int16(offset, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].getInt16(offset, little);
      }, TMP_10.$$arity = -2);

      Opal.defn(self, '$set_int16', TMP_11 = function $$set_int16(offset, value, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].setInt16(offset, value, little);
      }, TMP_11.$$arity = -3);

      Opal.defn(self, '$get_uint16', TMP_12 = function $$get_uint16(offset, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].getUint16(offset, little);
      }, TMP_12.$$arity = -2);

      Opal.defn(self, '$set_uint16', TMP_13 = function $$set_uint16(offset, value, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].setUint16(offset, value, little);
      }, TMP_13.$$arity = -3);

      Opal.defn(self, '$get_int32', TMP_14 = function $$get_int32(offset, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].getInt32(offset, little);
      }, TMP_14.$$arity = -2);

      Opal.defn(self, '$set_int32', TMP_15 = function $$set_int32(offset, value, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].setInt32(offset, value, little);
      }, TMP_15.$$arity = -3);

      Opal.defn(self, '$get_uint32', TMP_16 = function $$get_uint32(offset, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].getUint32(offset, little);
      }, TMP_16.$$arity = -2);

      Opal.defn(self, '$set_uint32', TMP_17 = function $$set_uint32(offset, value, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].setUint32(offset, value, little);
      }, TMP_17.$$arity = -3);

      Opal.defn(self, '$get_float32', TMP_18 = function $$get_float32(offset, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].getFloat32(offset, little);
      }, TMP_18.$$arity = -2);

      Opal.defn(self, '$set_float32', TMP_19 = function $$set_float32(offset, value, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].setFloat32(offset, value, little);
      }, TMP_19.$$arity = -3);

      Opal.defn(self, '$get_float64', TMP_20 = function $$get_float64(offset, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].getFloat64(offset, little);
      }, TMP_20.$$arity = -2);

      return (Opal.defn(self, '$set_float64', TMP_21 = function $$set_float64(offset, value, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].setFloat64(offset, value, little);
      }, TMP_21.$$arity = -3), nil) && 'set_float64';
    })($scope.base, null)
  })($scope.base, null)
};
/* Generated by Opal 0.10.3 */
Opal.modules["buffer"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$include', '$!', '$nil?', '$[]', '$===', '$native?', '$new']);
  self.$require("native");
  self.$require("buffer/array");
  self.$require("buffer/view");
  return (function($base, $super) {
    function $Buffer(){};
    var self = $Buffer = $klass($base, $super, 'Buffer', $Buffer);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6;

    def["native"] = nil;
    self.$include($scope.get('Native'));

    Opal.defs(self, '$supported?', TMP_1 = function() {
      var self = this;
      if ($gvars.$ == null) $gvars.$ = nil;

      return $gvars.$['$[]']("ArrayBuffer")['$nil?']()['$!']();
    }, TMP_1.$$arity = 0);

    Opal.defs(self, '$name_for', TMP_2 = function $$name_for(bits, type) {
      var self = this, $case = nil;

      return "" + ((function() {$case = type;if ("unsigned"['$===']($case)) {return "Uint"}else if ("signed"['$===']($case)) {return "Int"}else if ("float"['$===']($case)) {return "Float"}else { return nil }})()) + (bits);
    }, TMP_2.$$arity = 2);

    Opal.defn(self, '$initialize', TMP_3 = function $$initialize(size, bits) {
      var $a, $b, $c, self = this, $iter = TMP_3.$$p, $yield = $iter || nil;

      if (bits == null) {
        bits = 8;
      }
      TMP_3.$$p = null;
      if ((($a = self['$native?'](size)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_3, false)), $a.$$p = null, $a).call($b, size)
        } else {
        return ($a = ($c = self, Opal.find_super_dispatcher(self, 'initialize', TMP_3, false)), $a.$$p = null, $a).call($c, new ArrayBuffer(size * (bits / 8)))
      };
    }, TMP_3.$$arity = -2);

    Opal.defn(self, '$length', TMP_4 = function $$length() {
      var self = this;

      return self["native"].byteLength;
    }, TMP_4.$$arity = 0);

    Opal.alias(self, 'size', 'length');

    Opal.defn(self, '$to_a', TMP_5 = function $$to_a(bits, type) {
      var self = this;

      if (bits == null) {
        bits = 8;
      }
      if (type == null) {
        type = "unsigned";
      }
      return $scope.get('Array').$new(self, bits, type);
    }, TMP_5.$$arity = -1);

    return (Opal.defn(self, '$view', TMP_6 = function $$view(offset, length) {
      var self = this;

      if (offset == null) {
        offset = nil;
      }
      if (length == null) {
        length = nil;
      }
      return $scope.get('View').$new(self, offset, length);
    }, TMP_6.$$arity = -1), nil) && 'view';
  })($scope.base, null);
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/event/message"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$supports?', '$convert', '$supported?', '$new', '$alias_native']);
  self.$require("buffer");
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Message(){};
        var self = $Message = $klass($base, $super, 'Message', $Message);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_5, TMP_6, TMP_7, TMP_8;

        def["native"] = nil;
        Opal.defs(self, '$supported?', TMP_1 = function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.Message");
        }, TMP_1.$$arity = 0);

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_4;

          def["native"] = nil;
          Opal.defn(self, '$data=', TMP_2 = function(value) {
            var self = this;

            return self["native"].data = value;
          }, TMP_2.$$arity = 1);

          Opal.defn(self, '$origin=', TMP_3 = function(value) {
            var self = this;

            return self["native"].origin = value;
          }, TMP_3.$$arity = 1);

          return (Opal.defn(self, '$source=', TMP_4 = function(value) {
            var self = this;

            return self["native"].source = $scope.get('Native').$convert(value);
          }, TMP_4.$$arity = 1), nil) && 'source=';
        })($scope.base, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_5 = function $$construct(name, desc) {
              var self = this;

              return new MessageEvent(name, desc);
            }, TMP_5.$$arity = 2)
          } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_6 = function $$construct(name, desc) {
              var self = this;

              
        var event = document.createEvent("MessageEvent");
            event.initMessageEvent(name, desc.bubbles, desc.cancelable,
              desc.data, desc.origin, "", desc.source || window);

        return event;
      
            }, TMP_6.$$arity = 2)}};

        Opal.defn(self, '$data', TMP_7 = function $$data() {
          var self = this;

          
      if (window.ArrayBuffer && self["native"].data instanceof ArrayBuffer) {
        return $scope.get('Buffer').$new(self["native"].data);
      }
      else if (window.Blob && self["native"].data instanceof Blob) {
        return $scope.get('Blob').$new(self["native"].data);
      }
      else {
        return self["native"].data;
      }
    ;
        }, TMP_7.$$arity = 0);

        self.$alias_native("origin");

        return (Opal.defn(self, '$source', TMP_8 = function $$source() {
          var self = this;

          
      var source = self["native"].source;

      if (window.Window && source instanceof window.Window) {
        return $scope.get('Window').$new(source);
      }
      else {
        return nil;
      }
    ;
        }, TMP_8.$$arity = 0), nil) && 'source';
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base);
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/event/close"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Close(){};
        var self = $Close = $klass($base, $super, 'Close', $Close);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_6, TMP_7;

        Opal.defs(self, '$supported?', TMP_1 = function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.Close");
        }, TMP_1.$$arity = 0);

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_4, TMP_5;

          def["native"] = nil;
          Opal.defn(self, '$code=', TMP_2 = function(value) {
            var self = this;

            return self["native"].code = value;
          }, TMP_2.$$arity = 1);

          Opal.defn(self, '$reason=', TMP_3 = function(value) {
            var self = this;

            return self["native"].reason = value;
          }, TMP_3.$$arity = 1);

          Opal.defn(self, '$clean!', TMP_4 = function(value) {
            var self = this;

            return self["native"].wasClean = true;
          }, TMP_4.$$arity = 1);

          return (Opal.defn(self, '$not_clean!', TMP_5 = function(value) {
            var self = this;

            return self["native"].wasClean = false;
          }, TMP_5.$$arity = 1), nil) && 'not_clean!';
        })($scope.base, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_6 = function $$construct(name, desc) {
              var self = this;

              return new CloseEvent(name, desc);
            }, TMP_6.$$arity = 2)
          } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_7 = function $$construct(name, desc) {
              var self = this;

              
        var event = document.createEvent("CloseEvent");
            event.initCloseEvent(name, desc.bubbles, desc.cancelable,
              desc.wasClean, desc.code, desc.reason);

        return event;
      
            }, TMP_7.$$arity = 2)}};

        self.$alias_native("code");

        self.$alias_native("reason");

        return self.$alias_native("clean?", "wasClean");
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/event"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$gsub', '$[]', '$aliases', '$name_for', '$===', '$class_for', '$new', '$construct', '$to_proc', '$const_get', '$arguments=', '$supports?', '$merge!', '$Native', '$to_n', '$==', '$name', '$attr_reader', '$attr_writer', '$convert', '$alias_native', '$off', '$prevent', '$stop']);
  self.$require("browser/event/base");
  self.$require("browser/event/ui");
  self.$require("browser/event/mouse");
  self.$require("browser/event/keyboard");
  self.$require("browser/event/focus");
  self.$require("browser/event/wheel");
  self.$require("browser/event/composition");
  self.$require("browser/event/animation");
  self.$require("browser/event/audio_processing");
  self.$require("browser/event/before_unload");
  self.$require("browser/event/composition");
  self.$require("browser/event/clipboard");
  self.$require("browser/event/device_light");
  self.$require("browser/event/device_motion");
  self.$require("browser/event/device_orientation");
  self.$require("browser/event/device_proximity");
  self.$require("browser/event/drag");
  self.$require("browser/event/gamepad");
  self.$require("browser/event/hash_change");
  self.$require("browser/event/progress");
  self.$require("browser/event/page_transition");
  self.$require("browser/event/pop_state");
  self.$require("browser/event/storage");
  self.$require("browser/event/touch");
  self.$require("browser/event/sensor");
  self.$require("browser/event/custom");
  self.$require("browser/event/message");
  self.$require("browser/event/close");
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, $a, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22;

      def["native"] = def.on = def.callback = nil;
      Opal.defs(self, '$aliases', TMP_1 = function $$aliases() {
        var $a, self = this;
        if (self.aliases == null) self.aliases = nil;

        return ((($a = self.aliases) !== false && $a !== nil && $a != null) ? $a : self.aliases = $hash2(["dom:load", "hover"], {"dom:load": "DOMContentLoaded", "hover": "mouse:over"}));
      }, TMP_1.$$arity = 0);

      Opal.defs(self, '$name_for', TMP_2 = function $$name_for(name) {
        var $a, self = this;

        return (((($a = self.$aliases()['$[]'](name)) !== false && $a !== nil && $a != null) ? $a : name)).$gsub(":", "");
      }, TMP_2.$$arity = 1);

      Opal.defs(self, '$class_for', TMP_3 = function $$class_for(name) {
        var self = this, $case = nil;

        return (function() {$case = self.$name_for(name);if ("animationend"['$===']($case) || "animationiteration"['$===']($case) || "animationstart"['$===']($case)) {return $scope.get('Animation')}else if ("audioprocess"['$===']($case)) {return $scope.get('AudioProcessing')}else if ("beforeunload"['$===']($case)) {return $scope.get('BeforeUnload')}else if ("compositionend"['$===']($case) || "compositionstart"['$===']($case) || "compositionupdate"['$===']($case)) {return $scope.get('Composition')}else if ("copy"['$===']($case) || "cut"['$===']($case)) {return $scope.get('Clipboard')}else if ("devicelight"['$===']($case)) {return $scope.get('DeviceLight')}else if ("devicemotion"['$===']($case)) {return $scope.get('DeviceMotion')}else if ("deviceorientation"['$===']($case)) {return $scope.get('DeviceOrientation')}else if ("deviceproximity"['$===']($case)) {return $scope.get('DeviceProximity')}else if ("drag"['$===']($case) || "dragend"['$===']($case) || "dragleave"['$===']($case) || "dragover"['$===']($case) || "dragstart"['$===']($case) || "drop"['$===']($case)) {return $scope.get('Drag')}else if ("gamepadconnected"['$===']($case) || "gamepaddisconnected"['$===']($case)) {return $scope.get('Gamepad')}else if ("hashchange"['$===']($case)) {return $scope.get('HashChange')}else if ("load"['$===']($case) || "loadend"['$===']($case) || "loadstart"['$===']($case)) {return $scope.get('Progress')}else if ("pagehide"['$===']($case) || "pageshow"['$===']($case)) {return $scope.get('PageTransition')}else if ("popstate"['$===']($case)) {return $scope.get('PopState')}else if ("storage"['$===']($case)) {return $scope.get('Storage')}else if ("touchcancel"['$===']($case) || "touchend"['$===']($case) || "touchleave"['$===']($case) || "touchmove"['$===']($case) || "touchstart"['$===']($case)) {return $scope.get('Touch')}else if ("compassneedscalibration"['$===']($case) || "userproximity"['$===']($case)) {return $scope.get('Sensor')}else if ("message"['$===']($case)) {return $scope.get('Message')}else if ("close"['$===']($case)) {return $scope.get('Close')}else if ("click"['$===']($case) || "contextmenu"['$===']($case) || "dblclick"['$===']($case) || "mousedown"['$===']($case) || "mouseenter"['$===']($case) || "mouseleave"['$===']($case) || "mousemove"['$===']($case) || "mouseout"['$===']($case) || "mouseover"['$===']($case) || "mouseup"['$===']($case) || "show"['$===']($case)) {return $scope.get('Mouse')}else if ("keydown"['$===']($case) || "keypress"['$===']($case) || "keyup"['$===']($case)) {return $scope.get('Keyboard')}else if ("blur"['$===']($case) || "focus"['$===']($case) || "focusin"['$===']($case) || "focusout"['$===']($case)) {return $scope.get('Focus')}else if ("wheel"['$===']($case)) {return $scope.get('Wheel')}else if ("abort"['$===']($case) || "afterprint"['$===']($case) || "beforeprint"['$===']($case) || "cached"['$===']($case) || "canplay"['$===']($case) || "canplaythrough"['$===']($case) || "change"['$===']($case) || "chargingchange"['$===']($case) || "chargingtimechange"['$===']($case) || "checking"['$===']($case) || "close"['$===']($case) || "dischargingtimechange"['$===']($case) || "DOMContentLoaded"['$===']($case) || "downloading"['$===']($case) || "durationchange"['$===']($case) || "emptied"['$===']($case) || "ended"['$===']($case) || "error"['$===']($case) || "fullscreenchange"['$===']($case) || "fullscreenerror"['$===']($case) || "input"['$===']($case) || "invalid"['$===']($case) || "levelchange"['$===']($case) || "loadeddata"['$===']($case) || "loadedmetadata"['$===']($case) || "noupdate"['$===']($case) || "obsolete"['$===']($case) || "offline"['$===']($case) || "online"['$===']($case) || "open"['$===']($case) || "orientationchange"['$===']($case) || "pause"['$===']($case) || "pointerlockchange"['$===']($case) || "pointerlockerror"['$===']($case) || "play"['$===']($case) || "playing"['$===']($case) || "ratechange"['$===']($case) || "readystatechange"['$===']($case) || "reset"['$===']($case) || "seeked"['$===']($case) || "seeking"['$===']($case) || "stalled"['$===']($case) || "submit"['$===']($case) || "success"['$===']($case) || "suspend"['$===']($case) || "timeupdate"['$===']($case) || "updateready"['$===']($case) || "visibilitychange"['$===']($case) || "volumechange"['$===']($case) || "waiting"['$===']($case)) {return $scope.get('Event')}else {return $scope.get('Custom')}})();
      }, TMP_3.$$arity = 1);

      Opal.defs(self, '$supported?', TMP_4 = function() {
        var self = this;

        return true;
      }, TMP_4.$$arity = 0);

      Opal.defs(self, '$create', TMP_5 = function $$create(name, $a_rest) {
        var $b, $c, $d, self = this, args, $iter = TMP_5.$$p, block = $iter || nil, klass = nil, event = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        TMP_5.$$p = null;
        name = self.$name_for(name);
        klass = self.$class_for(name);
        event = klass.$new(klass.$construct(name, ($b = ($c = klass.$const_get("Definition")).$new, $b.$$p = block.$to_proc(), $b).call($c)));
        (($b = [args]), $d = event, $d['$arguments='].apply($d, $b), $b[$b.length-1]);
        return event;
      }, TMP_5.$$arity = -2);

      if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        Opal.defs(self, '$construct', TMP_6 = function $$construct(name, desc) {
          var self = this;

          return new Event(name, desc);
        }, TMP_6.$$arity = 2)
      } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        Opal.defs(self, '$construct', TMP_7 = function $$construct(name, desc) {try {

          var self = this;

          
        var event = document.createEvent("HTMLEvents");
            event.initEvent(name, desc.bubbles, desc.cancelable);

        Opal.ret(self.$Native(event)['$merge!'](desc));
      
          } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
        }, TMP_7.$$arity = 2)
      } else if ((($a = $scope.get('Browser')['$supports?']("Event.createObject")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        Opal.defs(self, '$construct', TMP_8 = function $$construct(name, desc) {
          var self = this;

          return self.$Native(document.createEventObject())['$merge!'](desc)['$merge!']({ type: name }).$to_n();
        }, TMP_8.$$arity = 2)
        } else {
        Opal.defs(self, '$construct', TMP_9 = function $$construct(name, desc) {
          var self = this;

          return self.$Native(desc)['$merge!']({ type: name }).$to_n();
        }, TMP_9.$$arity = 2)
      };

      Opal.defs(self, '$new', TMP_10 = function(value, callback) {
        var $a, $b, $c, self = this, $iter = TMP_10.$$p, $yield = $iter || nil, klass = nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

        if (callback == null) {
          callback = nil;
        }
        TMP_10.$$p = null;
        $zuper = [];
        
        for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
          $zuper[$zuper_index] = arguments[$zuper_index];
        }
        if (self['$==']($scope.get('Event'))) {
          } else {
          return ($a = ($b = self, Opal.find_super_dispatcher(self, 'new', TMP_10, false, $Event)), $a.$$p = $iter, $a).apply($b, $zuper)
        };
        klass = self.$class_for((function() {if (callback !== false && callback !== nil && callback != null) {
          return callback.$name()
          } else {
          return value.type;
        }; return nil; })());
        if (klass['$==']($scope.get('Event'))) {
          return ($a = ($c = self, Opal.find_super_dispatcher(self, 'new', TMP_10, false, $Event)), $a.$$p = $iter, $a).apply($c, $zuper)
          } else {
          return klass.$new(value, callback)
        };
      }, TMP_10.$$arity = -2);

      self.$attr_reader("callback");

      self.$attr_writer("on");

      Opal.defn(self, '$initialize', TMP_11 = function $$initialize(event, callback) {
        var $a, $b, self = this, $iter = TMP_11.$$p, $yield = $iter || nil;

        if (callback == null) {
          callback = nil;
        }
        TMP_11.$$p = null;
        ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_11, false)), $a.$$p = null, $a).call($b, event);
        return self.callback = callback;
      }, TMP_11.$$arity = -2);

      Opal.defn(self, '$name', TMP_12 = function $$name() {
        var self = this;

        return self["native"].type;
      }, TMP_12.$$arity = 0);

      Opal.defn(self, '$on', TMP_13 = function $$on() {
        var $a, self = this;

        return ((($a = self.on) !== false && $a !== nil && $a != null) ? $a : $scope.get('Target').$convert(self["native"].currentTarget));
      }, TMP_13.$$arity = 0);

      Opal.defn(self, '$target', TMP_14 = function $$target() {
        var self = this;

        return $scope.get('Target').$convert(self["native"].srcElement || self["native"].target);
      }, TMP_14.$$arity = 0);

      Opal.defn(self, '$arguments', TMP_15 = function() {
        var self = this;

        return self["native"].arguments || [];
      }, TMP_15.$$arity = 0);

      Opal.defn(self, '$arguments=', TMP_16 = function(args) {
        var self = this;

        return self["native"].arguments = args;
      }, TMP_16.$$arity = 1);

      self.$alias_native("bubbles?", "bubbles");

      self.$alias_native("cancelable?", "cancelable");

      self.$alias_native("data");

      self.$alias_native("phase", "eventPhase");

      self.$alias_native("at", "timeStamp");

      Opal.defn(self, '$off', TMP_17 = function $$off() {
        var $a, self = this;

        if ((($a = self.callback) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.callback.$off()
          } else {
          return nil
        };
      }, TMP_17.$$arity = 0);

      Opal.defn(self, '$stopped?', TMP_18 = function() {
        var self = this;

        return !!self["native"].stopped;
      }, TMP_18.$$arity = 0);

      Opal.defn(self, '$stop', TMP_19 = function $$stop() {
        var $a, self = this;

        if ((($a = (typeof(self["native"].stopPropagation) !== "undefined")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self["native"].stopPropagation();};
        return self["native"].stopped = true;
      }, TMP_19.$$arity = 0);

      Opal.defn(self, '$prevent', TMP_20 = function $$prevent() {
        var $a, self = this;

        if ((($a = (typeof(self["native"].preventDefault) !== "undefined")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self["native"].preventDefault();};
        return self["native"].prevented = true;
      }, TMP_20.$$arity = 0);

      Opal.defn(self, '$prevented?', TMP_21 = function() {
        var self = this;

        return !!self["native"].prevented;
      }, TMP_21.$$arity = 0);

      return (Opal.defn(self, '$stop!', TMP_22 = function() {
        var self = this;

        self.$prevent();
        return self.$stop();
      }, TMP_22.$$arity = 0), nil) && 'stop!';
    })($scope.base, null)
  })($scope.base);
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/window/view"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$to_n', '$supports?', '$raise']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Window(){};
      var self = $Window = $klass($base, $super, 'Window', $Window);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $View(){};
        var self = $View = $klass($base, $super, 'View', $View);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7;

        def["native"] = nil;
        Opal.defn(self, '$initialize', TMP_1 = function $$initialize(window) {
          var self = this;

          self.window = window;
          return self["native"] = window.$to_n();
        }, TMP_1.$$arity = 1);

        if ((($a = $scope.get('Browser')['$supports?']("Window.innerSize")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$width', TMP_2 = function $$width() {
            var self = this;

            return self["native"].innerWidth;
          }, TMP_2.$$arity = 0);

          return (Opal.defn(self, '$height', TMP_3 = function $$height() {
            var self = this;

            return self["native"].innerHeight;
          }, TMP_3.$$arity = 0), nil) && 'height';
        } else if ((($a = $scope.get('Browser')['$supports?']("Element.clientSize")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$height', TMP_4 = function $$height() {
            var self = this;

            return self["native"].document.documentElement.clientHeight;
          }, TMP_4.$$arity = 0);

          return (Opal.defn(self, '$width', TMP_5 = function $$width() {
            var self = this;

            return self["native"].document.documentElement.clientWidth;
          }, TMP_5.$$arity = 0), nil) && 'width';
          } else {
          Opal.defn(self, '$width', TMP_6 = function $$width() {
            var self = this;

            return self.$raise($scope.get('NotImplementedError'), "window size unsupported");
          }, TMP_6.$$arity = 0);

          return (Opal.defn(self, '$height', TMP_7 = function $$height() {
            var self = this;

            return self.$raise($scope.get('NotImplementedError'), "window size unsupported");
          }, TMP_7.$$arity = 0), nil) && 'height';
        };
      })($scope.base, null)
    })($scope.base, null)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/window/size"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$to_n', '$===', '$first', '$values_at', '$width', '$height', '$supports?', '$raise', '$set']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Window(){};
      var self = $Window = $klass($base, $super, 'Window', $Window);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Size(){};
        var self = $Size = $klass($base, $super, 'Size', $Size);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, $a, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8;

        def["native"] = nil;
        Opal.defn(self, '$initialize', TMP_1 = function $$initialize(window) {
          var self = this;

          self.window = window;
          return self["native"] = window.$to_n();
        }, TMP_1.$$arity = 1);

        Opal.defn(self, '$set', TMP_2 = function $$set($a_rest) {
          var $b, $c, self = this, args, width = nil, height = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ((($b = $scope.get('Hash')['$==='](args.$first())) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            $c = args.$first().$values_at("width", "height"), $b = Opal.to_ary($c), width = ($b[0] == null ? nil : $b[0]), height = ($b[1] == null ? nil : $b[1]), $c
            } else {
            $c = args, $b = Opal.to_ary($c), width = ($b[0] == null ? nil : $b[0]), height = ($b[1] == null ? nil : $b[1]), $c
          };
          ((($b = width) !== false && $b !== nil && $b != null) ? $b : width = self.$width());
          ((($b = height) !== false && $b !== nil && $b != null) ? $b : height = self.$height());
          self["native"].resizeTo(width, height);
          return self;
        }, TMP_2.$$arity = -1);

        if ((($a = $scope.get('Browser')['$supports?']("Window.outerSize")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$width', TMP_3 = function $$width() {
            var self = this;

            return self["native"].outerWidth;
          }, TMP_3.$$arity = 0);

          Opal.defn(self, '$height', TMP_4 = function $$height() {
            var self = this;

            return self["native"].outerHeight;
          }, TMP_4.$$arity = 0);
          } else {
          Opal.defn(self, '$width', TMP_5 = function $$width() {
            var self = this;

            return self.$raise($scope.get('NotImplementedError'), "window outer size not supported");
          }, TMP_5.$$arity = 0);

          Opal.defn(self, '$height', TMP_6 = function $$height() {
            var self = this;

            return self.$raise($scope.get('NotImplementedError'), "window outer size not supported");
          }, TMP_6.$$arity = 0);
        };

        Opal.defn(self, '$width=', TMP_7 = function(value) {
          var self = this;

          return self.$set($hash2(["width"], {"width": value}));
        }, TMP_7.$$arity = 1);

        return (Opal.defn(self, '$height=', TMP_8 = function(value) {
          var self = this;

          return self.$set($hash2(["height"], {"height": value}));
        }, TMP_8.$$arity = 1), nil) && 'height=';
      })($scope.base, null)
    })($scope.base, null)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/window/scroll"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$to_n', '$supports?', '$new', '$raise', '$x', '$position', '$y', '$[]']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Window(){};
      var self = $Window = $klass($base, $super, 'Window', $Window);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Scroll(){};
        var self = $Scroll = $klass($base, $super, 'Scroll', $Scroll);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8;

        def["native"] = nil;
        Opal.defn(self, '$initialize', TMP_1 = function $$initialize(window) {
          var self = this;

          self.window = window;
          return self["native"] = window.$to_n();
        }, TMP_1.$$arity = 1);

        if ((($a = $scope.get('Browser')['$supports?']("Window.scroll")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$position', TMP_2 = function $$position() {
            var self = this;

            
        var doc  = self["native"].document,
            root = doc.documentElement,
            body = doc.body;

        var x = root.scrollLeft || body.scrollLeft,
            y = root.scrollTop  || body.scrollTop;
      ;
            return $scope.get('Position').$new(x, y);
          }, TMP_2.$$arity = 0)
        } else if ((($a = $scope.get('Browser')['$supports?']("Window.pageOffset")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$position', TMP_3 = function $$position() {
            var self = this;

            return $scope.get('Position').$new(self["native"].pageXOffset, self["native"].pageYOffset);
          }, TMP_3.$$arity = 0)
          } else {
          Opal.defn(self, '$position', TMP_4 = function $$position() {
            var self = this;

            return self.$raise($scope.get('NotImplementedError'), "window scroll unsupported");
          }, TMP_4.$$arity = 0)
        };

        Opal.defn(self, '$x', TMP_5 = function $$x() {
          var self = this;

          return self.$position().$x();
        }, TMP_5.$$arity = 0);

        Opal.defn(self, '$y', TMP_6 = function $$y() {
          var self = this;

          return self.$position().$y();
        }, TMP_6.$$arity = 0);

        Opal.defn(self, '$to', TMP_7 = function $$to(what) {
          var $a, self = this, x = nil, y = nil;

          x = ((($a = what['$[]']("x")) !== false && $a !== nil && $a != null) ? $a : self.$x());
          y = ((($a = what['$[]']("y")) !== false && $a !== nil && $a != null) ? $a : self.$y());
          self["native"].scrollTo(x, y);
          return self;
        }, TMP_7.$$arity = 1);

        return (Opal.defn(self, '$by', TMP_8 = function $$by(what) {
          var $a, self = this, x = nil, y = nil;

          x = ((($a = what['$[]']("x")) !== false && $a !== nil && $a != null) ? $a : 0);
          y = ((($a = what['$[]']("y")) !== false && $a !== nil && $a != null) ? $a : 0);
          self["native"].scrollBy(x, y);
          return self;
        }, TMP_8.$$arity = 1), nil) && 'by';
      })($scope.base, null)
    })($scope.base, null)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/window"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $gvars = Opal.gvars, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$delete', '$join', '$map', '$===', '$new', '$include', '$target', '$supports?', '$[]', '$raise', '$alert', '$prompt', '$confirm']);
  self.$require("browser/window/view");
  self.$require("browser/window/size");
  self.$require("browser/window/scroll");
  (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Window(){};
      var self = $Window = $klass($base, $super, 'Window', $Window);

      var def = self.$$proto, $scope = self.$$scope, TMP_2, $a, $b, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12;

      def["native"] = nil;
      Opal.defs(self, '$open', TMP_2 = function $$open(url, options) {
        var $a, $b, TMP_1, self = this, name = nil, features = nil;

        name = options.$delete("name");
        features = ($a = ($b = options).$map, $a.$$p = (TMP_1 = function(key, value){var self = TMP_1.$$s || this, $case = nil;
if (key == null) key = nil;if (value == null) value = nil;
        value = (function() {$case = value;if (true['$===']($case)) {return "yes"}else if (false['$===']($case)) {return "no"}else {return value}})();
          return "" + (key) + "=" + (value);}, TMP_1.$$s = self, TMP_1.$$arity = 2, TMP_1), $a).call($b).$join(",");
        
      var win = window.open(url, name, features);

      if (win == null) {
        return nil;
      }

      return self.$new(win);
    ;
      }, TMP_2.$$arity = 2);

      self.$include($scope.get('Native'));

      self.$include((($scope.get('Event')).$$scope.get('Target')));

      ($a = ($b = self).$target, $a.$$p = (TMP_3 = function(value){var self = TMP_3.$$s || this, $c;
        if ($gvars.window == null) $gvars.window = nil;
if (value == null) value = nil;
      if ((($c = value == window) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          return $gvars.window
          } else {
          return nil
        }}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($b);

      Opal.defn(self, '$alert', TMP_4 = function $$alert(value) {
        var self = this;

        self["native"].alert(value);
        return value;
      }, TMP_4.$$arity = 1);

      Opal.defn(self, '$prompt', TMP_5 = function $$prompt(value) {
        var self = this;

        return self["native"].prompt(value) || nil;
      }, TMP_5.$$arity = 1);

      Opal.defn(self, '$confirm', TMP_6 = function $$confirm(value) {
        var self = this;

        return self["native"].confirm(value) || false;
      }, TMP_6.$$arity = 1);

      Opal.defn(self, '$view', TMP_7 = function $$view() {
        var self = this;

        return $scope.get('View').$new(self);
      }, TMP_7.$$arity = 0);

      Opal.defn(self, '$size', TMP_8 = function $$size() {
        var self = this;

        return $scope.get('Size').$new(self);
      }, TMP_8.$$arity = 0);

      Opal.defn(self, '$scroll', TMP_9 = function $$scroll() {
        var self = this;

        return $scope.get('Scroll').$new(self);
      }, TMP_9.$$arity = 0);

      if ((($a = $scope.get('Browser')['$supports?']("Window.send")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        Opal.defn(self, '$send', TMP_10 = function $$send(message, options) {
          var $a, self = this;

          if (options == null) {
            options = $hash2([], {});
          }
          return self["native"].postMessage(message, ((($a = options['$[]']("to")) !== false && $a !== nil && $a != null) ? $a : "*"));
        }, TMP_10.$$arity = -2)
        } else {
        Opal.defn(self, '$send', TMP_11 = function $$send(message, options) {
          var self = this;

          if (options == null) {
            options = $hash2([], {});
          }
          return self.$raise($scope.get('NotImplementedError'), "message sending unsupported");
        }, TMP_11.$$arity = -2)
      };

      return (Opal.defn(self, '$close', TMP_12 = function $$close() {
        var self = this;

        
      return (window.open('', '_self', '') && window.close()) ||
             (window.opener = null && window.close()) ||
             (window.opener = '' && window.close());
    
      }, TMP_12.$$arity = 0), nil) && 'close';
    })($scope.base, null)
  })($scope.base);
  $gvars.window = (($scope.get('Browser')).$$scope.get('Window')).$new(window);
  return (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_13, TMP_14, TMP_15;

    Opal.defn(self, '$alert', TMP_13 = function $$alert(value) {
      var self = this;
      if ($gvars.window == null) $gvars.window = nil;

      return $gvars.window.$alert(value);
    }, TMP_13.$$arity = 1);

    Opal.defn(self, '$prompt', TMP_14 = function $$prompt(value) {
      var self = this;
      if ($gvars.window == null) $gvars.window = nil;

      return $gvars.window.$prompt(value);
    }, TMP_14.$$arity = 1);

    Opal.defn(self, '$confirm', TMP_15 = function $$confirm(value) {
      var self = this;
      if ($gvars.window == null) $gvars.window = nil;

      return $gvars.window.$confirm(value);
    }, TMP_15.$$arity = 1);
  })($scope.base);
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/dom/node_set"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$new', '$uniq', '$map', '$DOM', '$convert', '$flatten', '$respond_to?', '$each', '$__send__', '$to_proc', '$===', '$at_css', '$at_xpath', '$[]', '$css', '$select', '$=~', '$search', '$xpath']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $NodeSet(){};
        var self = $NodeSet = $klass($base, $super, 'NodeSet', $NodeSet);

        var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_4, TMP_7, TMP_9, TMP_11, TMP_13, TMP_15, TMP_17, TMP_18;

        def.literal = nil;
        Opal.defs(self, '$[]', TMP_2 = function($a_rest) {
          var $b, $c, TMP_1, self = this, nodes;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          nodes = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            nodes[$arg_idx - 0] = arguments[$arg_idx];
          }
          return self.$new(($b = ($c = nodes.$flatten()).$map, $b.$$p = (TMP_1 = function(x){var self = TMP_1.$$s || this;
if (x == null) x = nil;
          return self.$DOM($scope.get('Native').$convert(x))}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $b).call($c).$uniq());
        }, TMP_2.$$arity = -1);

        Opal.defn(self, '$initialize', TMP_3 = function $$initialize(literal) {
          var self = this;

          return self.literal = literal;
        }, TMP_3.$$arity = 1);

        Opal.defn(self, '$method_missing', TMP_4 = function $$method_missing(name, $a_rest) {
          var $b, $c, TMP_5, $d, self = this, args, $iter = TMP_4.$$p, block = $iter || nil, result = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }
          TMP_4.$$p = null;
          if ((($b = self.literal['$respond_to?'](name)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            } else {
            ($b = ($c = self).$each, $b.$$p = (TMP_5 = function(el){var self = TMP_5.$$s || this, $a, $d;
if (el == null) el = nil;
            return ($a = ($d = el).$__send__, $a.$$p = block.$to_proc(), $a).apply($d, [name].concat(Opal.to_a(args)))}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5), $b).call($c);
            return self;
          };
          result = ($b = ($d = self.literal).$__send__, $b.$$p = block.$to_proc(), $b).apply($d, [name].concat(Opal.to_a(args)));
          if ((($b = result === self.literal) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            return self
          } else if ((($b = $scope.get('Array')['$==='](result)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            return $scope.get('NodeSet').$new(result)
            } else {
            return result
          };
        }, TMP_4.$$arity = -2);

        Opal.defn(self, '$at_css', TMP_7 = function $$at_css($a_rest) {try {

          var $b, $c, TMP_6, self = this, rules;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          rules = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            rules[$arg_idx - 0] = arguments[$arg_idx];
          }
          ($b = ($c = self).$each, $b.$$p = (TMP_6 = function(node){var self = TMP_6.$$s || this, $a, $d;
if (node == null) node = nil;
          if ((($a = node = ($d = node).$at_css.apply($d, Opal.to_a(rules))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              Opal.ret(node)
              } else {
              return nil
            }}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $b).call($c);
          return nil;
          } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
        }, TMP_7.$$arity = -1);

        Opal.defn(self, '$at_xpath', TMP_9 = function $$at_xpath($a_rest) {try {

          var $b, $c, TMP_8, self = this, paths;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          paths = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            paths[$arg_idx - 0] = arguments[$arg_idx];
          }
          ($b = ($c = self).$each, $b.$$p = (TMP_8 = function(node){var self = TMP_8.$$s || this, $a, $d;
if (node == null) node = nil;
          if ((($a = node = ($d = node).$at_xpath.apply($d, Opal.to_a(paths))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              Opal.ret(node)
              } else {
              return nil
            }}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8), $b).call($c);
          return nil;
          } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
        }, TMP_9.$$arity = -1);

        Opal.defn(self, '$css', TMP_11 = function $$css(path) {
          var $a, $b, TMP_10, self = this;

          return $scope.get('NodeSet')['$[]'](($a = ($b = self.literal).$map, $a.$$p = (TMP_10 = function(node){var self = TMP_10.$$s || this;
if (node == null) node = nil;
          return node.$css(path)}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10), $a).call($b));
        }, TMP_11.$$arity = 1);

        Opal.defn(self, '$filter', TMP_13 = function $$filter(expression) {
          var $a, $b, TMP_12, self = this;

          return ($a = ($b = self.literal).$select, $a.$$p = (TMP_12 = function(node){var self = TMP_12.$$s || this;
if (node == null) node = nil;
          return node['$=~'](expression)}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12), $a).call($b);
        }, TMP_13.$$arity = 1);

        Opal.defn(self, '$search', TMP_15 = function $$search($a_rest) {
          var $b, $c, TMP_14, self = this, what;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          what = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            what[$arg_idx - 0] = arguments[$arg_idx];
          }
          return $scope.get('NodeSet')['$[]'](($b = ($c = self.literal).$map, $b.$$p = (TMP_14 = function(node){var self = TMP_14.$$s || this, $a;
if (node == null) node = nil;
          return ($a = node).$search.apply($a, Opal.to_a(what))}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14), $b).call($c));
        }, TMP_15.$$arity = -1);

        Opal.defn(self, '$xpath', TMP_17 = function $$xpath(path) {
          var $a, $b, TMP_16, self = this;

          return $scope.get('NodeSet')['$[]'](($a = ($b = self.literal).$map, $a.$$p = (TMP_16 = function(node){var self = TMP_16.$$s || this;
if (node == null) node = nil;
          return node.$xpath(path)}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16), $a).call($b));
        }, TMP_17.$$arity = 1);

        return (Opal.defn(self, '$to_ary', TMP_18 = function $$to_ary() {
          var self = this;

          return self.literal;
        }, TMP_18.$$arity = 0), nil) && 'to_ary';
      })($scope.base, null)
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/dom/node"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$include', '$==', '$[]', '$new', '$raise', '$convert', '$respond_to?', '$each', '$<<', '$native?', '$===', '$>>', '$DOM', '$to_proc', '$parent', '$last', '$pop', '$select!', '$=~', '$remove_child', '$remove', '$children', '$supports?', '$node_type', '$first', '$select', '$element_children', '$to_s', '$next', '$!', '$element?', '$previous', '$try_convert', '$name']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Node(){};
        var self = $Node = $klass($base, $super, 'Node', $Node);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_4, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_12, TMP_13, TMP_14, $a, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30, TMP_31, TMP_32, TMP_33, TMP_34, TMP_35, TMP_36, TMP_37, TMP_38, TMP_39, TMP_40, TMP_41, TMP_42, TMP_43, TMP_44, TMP_45, TMP_46, TMP_47, TMP_48, TMP_49, TMP_50, TMP_51, TMP_52, TMP_53, TMP_54, TMP_55;

        def["native"] = nil;
        self.$include($scope.get('Native'));

        Opal.cdecl($scope, 'ELEMENT_NODE', 1);

        Opal.cdecl($scope, 'ATTRIBUTE_NODE', 2);

        Opal.cdecl($scope, 'TEXT_NODE', 3);

        Opal.cdecl($scope, 'CDATA_SECTION_NODE', 4);

        Opal.cdecl($scope, 'ENTITY_REFERENCE_NOCE', 5);

        Opal.cdecl($scope, 'ENTITY_NODE', 6);

        Opal.cdecl($scope, 'PROCESSING_INSTRUCTION_NODE', 7);

        Opal.cdecl($scope, 'COMMENT_NODE', 8);

        Opal.cdecl($scope, 'DOCUMENT_NODE', 9);

        Opal.cdecl($scope, 'DOCUMENT_TYPE_NODE', 10);

        Opal.cdecl($scope, 'DOCUMENT_FRAGMENT_NODE', 11);

        Opal.cdecl($scope, 'NOTATION_NODE', 12);

        Opal.defs(self, '$new', TMP_1 = function(value) {
          var $a, $b, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, klass = nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;
          if (self.classes == null) self.classes = nil;

          TMP_1.$$p = null;
          $zuper = [];
          
          for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
            $zuper[$zuper_index] = arguments[$zuper_index];
          }
          if (self['$==']($scope.get('Node'))) {
            ((($a = self.classes) !== false && $a !== nil && $a != null) ? $a : self.classes = [nil, $scope.get('Element'), $scope.get('Attribute'), $scope.get('Text'), $scope.get('CDATA'), nil, nil, nil, $scope.get('Comment'), $scope.get('Document'), nil, $scope.get('DocumentFragment')]);
            if ((($a = klass = self.classes['$[]'](value.nodeType)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return klass.$new(value)
              } else {
              return self.$raise($scope.get('ArgumentError'), "cannot instantiate a non derived Node object")
            };
            } else {
            return ($a = ($b = self, Opal.find_super_dispatcher(self, 'new', TMP_1, false, $Node)), $a.$$p = $iter, $a).apply($b, $zuper)
          };
        }, TMP_1.$$arity = 1);

        Opal.defn(self, '$==', TMP_2 = function(other) {
          var self = this;

          return self["native"] === $scope.get('Native').$convert(other);
        }, TMP_2.$$arity = 1);

        Opal.defn(self, '$<<', TMP_4 = function(node) {
          var $a, $b, TMP_3, self = this;

          if ((($a = $scope.get('Opal')['$respond_to?'](node, "each")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            ($a = ($b = node).$each, $a.$$p = (TMP_3 = function(n){var self = TMP_3.$$s || this;
if (n == null) n = nil;
            return self['$<<'](n)}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($b);
            return self;};
          if ((($a = self['$native?'](node)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else if ((($a = $scope.get('String')['$==='](node)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            node = self["native"].ownerDocument.createTextNode(node)
            } else {
            node = $scope.get('Native').$convert(node)
          };
          self["native"].appendChild(node);
          return self;
        }, TMP_4.$$arity = 1);

        Opal.defn(self, '$>>', TMP_6 = function(node) {
          var $a, $b, TMP_5, self = this;

          if ((($a = $scope.get('Opal')['$respond_to?'](node, "each")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            ($a = ($b = node).$each, $a.$$p = (TMP_5 = function(n){var self = TMP_5.$$s || this;
if (n == null) n = nil;
            return self['$>>'](n)}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5), $a).call($b);
            return self;};
          if ((($a = self['$native?'](node)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else if ((($a = $scope.get('String')['$==='](node)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            node = self["native"].ownerDocument.createTextNode(node)
            } else {
            node = $scope.get('Native').$convert(node)
          };
          if ((($a = self["native"].firstChild == null) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self["native"].appendChild(node);
            } else {
            self["native"].insertBefore(node, self["native"].firstChild);
          };
          return self;
        }, TMP_6.$$arity = 1);

        Opal.defn(self, '$add_child', TMP_7 = function $$add_child(node) {
          var $a, $b, self = this, $iter = TMP_7.$$p, block = $iter || nil;

          if (node == null) {
            node = nil;
          }
          TMP_7.$$p = null;
          if (node !== false && node !== nil && node != null) {
            } else {
            node = ($a = ($b = self).$DOM, $a.$$p = block.$to_proc(), $a).call($b)
          };
          return self['$<<'](node);
        }, TMP_7.$$arity = -1);

        Opal.defn(self, '$add_next_sibling', TMP_8 = function $$add_next_sibling(node) {
          var $a, $b, self = this, $iter = TMP_8.$$p, block = $iter || nil;

          if (node == null) {
            node = nil;
          }
          TMP_8.$$p = null;
          if (node !== false && node !== nil && node != null) {
            } else {
            node = ($a = ($b = self).$DOM, $a.$$p = block.$to_proc(), $a).call($b)
          };
          if ((($a = self['$native?'](node)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else if ((($a = $scope.get('String')['$==='](node)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            node = self["native"].ownerDocument.createTextNode(node)
            } else {
            node = $scope.get('Native').$convert(node)
          };
          return self["native"].parentNode.insertBefore(node, self["native"].nextSibling);
        }, TMP_8.$$arity = -1);

        Opal.defn(self, '$add_previous_sibling', TMP_9 = function $$add_previous_sibling(node) {
          var $a, $b, self = this, $iter = TMP_9.$$p, block = $iter || nil;

          if (node == null) {
            node = nil;
          }
          TMP_9.$$p = null;
          if (node !== false && node !== nil && node != null) {
            } else {
            node = ($a = ($b = self).$DOM, $a.$$p = block.$to_proc(), $a).call($b)
          };
          if ((($a = self['$native?'](node)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else if ((($a = $scope.get('String')['$==='](node)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            node = self["native"].ownerDocument.createTextNode(node)
            } else {
            node = $scope.get('Native').$convert(node)
          };
          return self["native"].parentNode.insertBefore(node, self["native"]);
        }, TMP_9.$$arity = -1);

        Opal.alias(self, 'after', 'add_next_sibling');

        Opal.defn(self, '$append_to', TMP_10 = function $$append_to(node) {
          var self = this;

          return node['$<<'](self);
        }, TMP_10.$$arity = 1);

        Opal.defn(self, '$ancestors', TMP_12 = function $$ancestors(expression) {
          var $a, $b, TMP_11, self = this, parents = nil, parent = nil;

          if (expression == null) {
            expression = nil;
          }
          if ((($a = self.$parent()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            return $scope.get('NodeSet')['$[]']()
          };
          parents = [self.$parent()];
          while ((($b = parent = parents.$last().$parent()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          parents['$<<'](parent)};
          if ((($a = $scope.get('Document')['$==='](parents.$last())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            parents.$pop()};
          if (expression !== false && expression !== nil && expression != null) {
            ($a = ($b = parents)['$select!'], $a.$$p = (TMP_11 = function(p){var self = TMP_11.$$s || this;
if (p == null) p = nil;
            return p['$=~'](expression)}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11), $a).call($b)};
          return $scope.get('NodeSet').$new(parents);
        }, TMP_12.$$arity = -1);

        Opal.alias(self, 'before', 'add_previous_sibling');

        Opal.defn(self, '$remove', TMP_13 = function $$remove() {
          var $a, self = this;

          if ((($a = self.$parent()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$parent().$remove_child(self)
            } else {
            return nil
          };
        }, TMP_13.$$arity = 0);

        Opal.defn(self, '$clear', TMP_14 = function $$clear() {
          var self = this;

          return self.$children().$remove();
        }, TMP_14.$$arity = 0);

        if ((($a = $scope.get('Browser')['$supports?']("Element.textContent")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$content', TMP_15 = function $$content() {
            var self = this;

            return self["native"].textContent;
          }, TMP_15.$$arity = 0);

          Opal.defn(self, '$content=', TMP_16 = function(value) {
            var self = this;

            return self["native"].textContent = value;
          }, TMP_16.$$arity = 1);
        } else if ((($a = $scope.get('Browser')['$supports?']("Element.innerText")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$content', TMP_17 = function $$content() {
            var self = this;

            return self["native"].innerText;
          }, TMP_17.$$arity = 0);

          Opal.defn(self, '$content=', TMP_18 = function(value) {
            var self = this;

            return self["native"].innerText = value;
          }, TMP_18.$$arity = 1);
          } else {
          Opal.defn(self, '$content', TMP_19 = function $$content() {
            var self = this;

            return self.$raise($scope.get('NotImplementedError'), "node text content unsupported");
          }, TMP_19.$$arity = 0);

          Opal.defn(self, '$content=', TMP_20 = function(value) {
            var self = this;

            return self.$raise($scope.get('NotImplementedError'), "node text content unsupported");
          }, TMP_20.$$arity = 1);
        };

        Opal.defn(self, '$blank?', TMP_21 = function() {
          var self = this;

          return self.$raise($scope.get('NotImplementedError'));
        }, TMP_21.$$arity = 0);

        Opal.defn(self, '$cdata?', TMP_22 = function() {
          var self = this;

          return self.$node_type()['$==']($scope.get('CDATA_SECTION_NODE'));
        }, TMP_22.$$arity = 0);

        Opal.defn(self, '$child', TMP_23 = function $$child() {
          var self = this;

          return self.$children().$first();
        }, TMP_23.$$arity = 0);

        Opal.defn(self, '$children', TMP_24 = function $$children() {
          var self = this;

          return $scope.get('NodeSet')['$[]']((($scope.get('Native')).$$scope.get('Array')).$new(self["native"].childNodes));
        }, TMP_24.$$arity = 0);

        Opal.defn(self, '$children=', TMP_25 = function(node) {
          var self = this;

          return self.$raise($scope.get('NotImplementedError'));
        }, TMP_25.$$arity = 1);

        Opal.defn(self, '$comment?', TMP_26 = function() {
          var self = this;

          return self.$node_type()['$==']($scope.get('COMMENT_NODE'));
        }, TMP_26.$$arity = 0);

        Opal.defn(self, '$document', TMP_27 = function $$document() {
          var $a, self = this;

          if ((($a = (typeof(self["native"].ownerDocument) !== "undefined")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$DOM(self["native"].ownerDocument)
            } else {
            return nil
          };
        }, TMP_27.$$arity = 0);

        Opal.defn(self, '$document?', TMP_28 = function() {
          var self = this;

          return self.$node_type()['$==']($scope.get('DOCUMENT_NODE'));
        }, TMP_28.$$arity = 0);

        Opal.defn(self, '$elem?', TMP_29 = function() {
          var self = this;

          return self.$node_type()['$==']($scope.get('ELEMENT_NODE'));
        }, TMP_29.$$arity = 0);

        Opal.alias(self, 'element?', 'elem?');

        Opal.defn(self, '$element_children', TMP_30 = function $$element_children() {
          var $a, $b, self = this;

          return ($a = ($b = self.$children()).$select, $a.$$p = "element?".$to_proc(), $a).call($b);
        }, TMP_30.$$arity = 0);

        Opal.alias(self, 'elements', 'element_children');

        Opal.defn(self, '$first_element_child', TMP_31 = function $$first_element_child() {
          var self = this;

          return self.$element_children().$first();
        }, TMP_31.$$arity = 0);

        Opal.defn(self, '$fragment?', TMP_32 = function() {
          var self = this;

          return self.$node_type()['$==']($scope.get('DOCUMENT_FRAGMENT_NODE'));
        }, TMP_32.$$arity = 0);

        Opal.defn(self, '$inner_html', TMP_33 = function $$inner_html() {
          var self = this;

          return self["native"].innerHTML;
        }, TMP_33.$$arity = 0);

        Opal.defn(self, '$inner_html=', TMP_34 = function(value) {
          var self = this;

          return self["native"].innerHTML = value;
        }, TMP_34.$$arity = 1);

        Opal.alias(self, 'inner_text', 'content');

        Opal.alias(self, 'inner_text=', 'content=');

        Opal.defn(self, '$last_element_child', TMP_35 = function $$last_element_child() {
          var self = this;

          return self.$element_children().$last();
        }, TMP_35.$$arity = 0);

        Opal.defn(self, '$name', TMP_36 = function $$name() {
          var self = this;

          return self["native"].nodeName || nil;
        }, TMP_36.$$arity = 0);

        Opal.defn(self, '$name=', TMP_37 = function(value) {
          var self = this;

          return self["native"].nodeName = value.$to_s();
        }, TMP_37.$$arity = 1);

        Opal.defn(self, '$namespace', TMP_38 = function $$namespace() {
          var self = this;

          return self["native"].namespaceURI || nil;
        }, TMP_38.$$arity = 0);

        Opal.defn(self, '$next', TMP_39 = function $$next() {
          var $a, self = this;

          if ((($a = self["native"].nextSibling != null) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$DOM(self["native"].nextSibling)
            } else {
            return nil
          };
        }, TMP_39.$$arity = 0);

        Opal.alias(self, 'next=', 'add_next_sibling');

        Opal.defn(self, '$next_element', TMP_40 = function $$next_element() {
          var $a, $b, $c, self = this, current = nil;

          current = self.$next();
          while ((($b = (($c = current !== false && current !== nil && current != null) ? current['$element?']()['$!']() : current)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          current = current.$next()};
          return current;
        }, TMP_40.$$arity = 0);

        Opal.alias(self, 'next_sibling', 'next');

        Opal.alias(self, 'node_name', 'name');

        Opal.alias(self, 'node_name=', 'name=');

        Opal.defn(self, '$node_type', TMP_41 = function $$node_type() {
          var self = this;

          return self["native"].nodeType;
        }, TMP_41.$$arity = 0);

        Opal.defn(self, '$parent', TMP_42 = function $$parent() {
          var $a, self = this;

          if ((($a = self["native"].parentNode != null) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$DOM(self["native"].parentNode)
            } else {
            return nil
          };
        }, TMP_42.$$arity = 0);

        Opal.defn(self, '$parent=', TMP_43 = function(node) {
          var self = this;

          return self["native"].parentNode = $scope.get('Native').$convert(node);
        }, TMP_43.$$arity = 1);

        Opal.defn(self, '$parse', TMP_44 = function $$parse(text, options) {
          var self = this;

          if (options == null) {
            options = $hash2([], {});
          }
          return self.$raise($scope.get('NotImplementedError'));
        }, TMP_44.$$arity = -2);

        Opal.defn(self, '$path', TMP_45 = function $$path() {
          var self = this;

          return self.$raise($scope.get('NotImplementedError'));
        }, TMP_45.$$arity = 0);

        Opal.defn(self, '$prepend_to', TMP_46 = function $$prepend_to(node) {
          var self = this;

          return node['$>>'](self);
        }, TMP_46.$$arity = 1);

        Opal.defn(self, '$previous', TMP_47 = function $$previous() {
          var $a, self = this;

          if ((($a = self["native"].previousSibling != null) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$DOM(self["native"].previousSibling)
            } else {
            return nil
          };
        }, TMP_47.$$arity = 0);

        Opal.alias(self, 'previous=', 'add_previous_sibling');

        Opal.defn(self, '$previous_element', TMP_48 = function $$previous_element() {
          var $a, $b, $c, self = this, current = nil;

          current = self.$previous();
          while ((($b = (($c = current !== false && current !== nil && current != null) ? current['$element?']()['$!']() : current)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          current = current.$previous()};
          return current;
        }, TMP_48.$$arity = 0);

        Opal.alias(self, 'previous_sibling', 'previous');

        Opal.defn(self, '$remove_child', TMP_49 = function $$remove_child(node) {
          var self = this;

          return self["native"].removeChild($scope.get('Native').$try_convert(node));
        }, TMP_49.$$arity = 1);

        Opal.defn(self, '$replace', TMP_50 = function $$replace(node) {
          var $a, self = this;

          if ((($a = self['$native?'](node)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else if ((($a = $scope.get('String')['$==='](node)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            node = self["native"].ownerDocument.createTextNode(node)
            } else {
            node = $scope.get('Native').$convert(node)
          };
          self["native"].parentNode.replaceChild(node, self["native"]);
          return node;
        }, TMP_50.$$arity = 1);

        Opal.alias(self, 'replace_with', 'replace');

        Opal.alias(self, 'text', 'content');

        Opal.alias(self, 'text=', 'content=');

        Opal.defn(self, '$text?', TMP_51 = function() {
          var self = this;

          return self.$node_type()['$==']($scope.get('TEXT_NODE'));
        }, TMP_51.$$arity = 0);

        Opal.defn(self, '$traverse', TMP_52 = function $$traverse() {
          var self = this, $iter = TMP_52.$$p, block = $iter || nil;

          TMP_52.$$p = null;
          return self.$raise($scope.get('NotImplementedError'));
        }, TMP_52.$$arity = 0);

        Opal.alias(self, 'type', 'node_type');

        Opal.defn(self, '$value', TMP_53 = function $$value() {
          var self = this;

          return self["native"].nodeValue || nil;
        }, TMP_53.$$arity = 0);

        Opal.defn(self, '$value=', TMP_54 = function(value) {
          var self = this;

          return self["native"].nodeValue = value;
        }, TMP_54.$$arity = 1);

        return (Opal.defn(self, '$inspect', TMP_55 = function $$inspect() {
          var self = this;

          return "#<DOM::Node: " + (self.$name()) + ">";
        }, TMP_55.$$arity = 0), nil) && 'inspect';
      })($scope.base, null)
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/dom/attribute"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$include', '$alias_native', '$supports?', '$==', '$name']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Attribute(){};
        var self = $Attribute = $klass($base, $super, 'Attribute', $Attribute);

        var def = self.$$proto, $scope = self.$$scope, $a, TMP_1;

        self.$include($scope.get('Native'));

        self.$alias_native("name");

        self.$alias_native("value");

        self.$alias_native("value=");

        if ((($a = $scope.get('Browser')['$supports?']("Attr.isId")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.$alias_native("id?", "isId")
          } else {
          return (Opal.defn(self, '$id?', TMP_1 = function() {
            var self = this;

            return self.$name()['$==']("id");
          }, TMP_1.$$arity = 0), nil) && 'id?'
        };
      })($scope.base, null)
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/dom/character_data"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$alias_native']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $CharacterData(){};
        var self = $CharacterData = $klass($base, $super, 'CharacterData', $CharacterData);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6;

        def["native"] = nil;
        Opal.defn(self, '$append', TMP_1 = function $$append(string) {
          var self = this;

          self["native"].appendData(string);
          return self;
        }, TMP_1.$$arity = 1);

        Opal.defn(self, '$data', TMP_2 = function $$data() {
          var self = this;

          return self["native"].data;
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$delete', TMP_3 = function(count, offset) {
          var self = this;

          if (offset == null) {
            offset = 0;
          }
          self["native"].deleteData(offset, count);
          return self;
        }, TMP_3.$$arity = -2);

        Opal.defn(self, '$insert', TMP_4 = function $$insert(string, offset) {
          var self = this;

          if (offset == null) {
            offset = 0;
          }
          self["native"].insertData(offset, string);
          return self;
        }, TMP_4.$$arity = -2);

        self.$alias_native("length");

        Opal.defn(self, '$replace', TMP_5 = function $$replace(string, offset, count) {
          var self = this;

          if (offset == null) {
            offset = 0;
          }
          if (count == null) {
            count = self["native"].length;
          }
          self["native"].replaceData(offset, count, string);
          return self;
        }, TMP_5.$$arity = -2);

        return (Opal.defn(self, '$substring', TMP_6 = function $$substring(count, offset) {
          var self = this;

          if (offset == null) {
            offset = 0;
          }
          return self["native"].substringData(offset, count);
        }, TMP_6.$$arity = -2), nil) && 'substring';
      })($scope.base, $scope.get('Node'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/dom/text"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$create_text', '$DOM', '$data']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Text(){};
        var self = $Text = $klass($base, $super, 'Text', $Text);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4;

        def["native"] = nil;
        Opal.defs(self, '$create', TMP_1 = function $$create($a_rest) {
          var $b, self = this, args;
          if ($gvars.document == null) $gvars.document = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          return ($b = $gvars.document).$create_text.apply($b, Opal.to_a(args));
        }, TMP_1.$$arity = -1);

        Opal.defn(self, '$whole', TMP_2 = function $$whole() {
          var self = this;

          return self["native"].wholeText;
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$split', TMP_3 = function $$split(offset) {
          var self = this;

          return self.$DOM(self["native"].splitText(offset));
        }, TMP_3.$$arity = 1);

        return (Opal.defn(self, '$inspect', TMP_4 = function $$inspect() {
          var self = this;

          return "#<DOM::Text: " + (self.$data()) + ">";
        }, TMP_4.$$arity = 0), nil) && 'inspect';
      })($scope.base, $scope.get('CharacterData'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/dom/cdata"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$value']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $CDATA(){};
        var self = $CDATA = $klass($base, $super, 'CDATA', $CDATA);

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        return (Opal.defn(self, '$inspect', TMP_1 = function $$inspect() {
          var self = this;

          return "#<DOM::CDATA: " + (self.$value()) + ">";
        }, TMP_1.$$arity = 0), nil) && 'inspect'
      })($scope.base, $scope.get('Text'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/dom/comment"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$value']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Comment(){};
        var self = $Comment = $klass($base, $super, 'Comment', $Comment);

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        return (Opal.defn(self, '$inspect', TMP_1 = function $$inspect() {
          var self = this;

          return "#<DOM::Comment: " + (self.$value()) + ">";
        }, TMP_1.$$arity = 0), nil) && 'inspect'
      })($scope.base, $scope.get('CharacterData'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/dom/element/attributes"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$attr_reader', '$to_n', '$[]', '$supports?', '$==', '$to_s', '$include', '$enum_for', '$each', '$name', '$value', '$attribute_nodes', '$!', '$[]=']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Attributes(){};
          var self = $Attributes = $klass($base, $super, 'Attributes', $Attributes);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, $b, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_8, TMP_10;

          def.namespace = def["native"] = def.element = nil;
          self.$attr_reader("namespace");

          Opal.defn(self, '$initialize', TMP_1 = function $$initialize(element, options) {
            var self = this;

            self.element = element;
            self["native"] = element.$to_n();
            return self.namespace = options['$[]']("namespace");
          }, TMP_1.$$arity = 2);

          if ((($a = ((($b = $scope.get('Browser')['$supports?']("Element.className")) !== false && $b !== nil && $b != null) ? $b : $scope.get('Browser')['$supports?']("Element.htmlFor"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            Opal.defn(self, '$[]', TMP_2 = function(name, options) {
              var $a, $b, self = this, namespace = nil;

              if (options == null) {
                options = $hash2([], {});
              }
              if ((($a = (($b = name['$==']("class")) ? $scope.get('Browser')['$supports?']("Element.className") : name['$==']("class"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                name = "className"
              } else if ((($a = (($b = name['$==']("for")) ? $scope.get('Browser')['$supports?']("Element.htmlFor") : name['$==']("for"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                name = "htmlFor"};
              if ((($a = namespace = ((($b = options['$[]']("namespace")) !== false && $b !== nil && $b != null) ? $b : self.namespace)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                return self["native"].getAttributeNS(namespace.$to_s(), name.$to_s()) || nil;
                } else {
                return self["native"].getAttribute(name.$to_s()) || nil;
              };
            }, TMP_2.$$arity = -2);

            Opal.defn(self, '$[]=', TMP_3 = function(name, value, options) {
              var $a, $b, self = this, namespace = nil;

              if (options == null) {
                options = $hash2([], {});
              }
              if ((($a = (($b = name['$==']("class")) ? $scope.get('Browser')['$supports?']("Element.className") : name['$==']("class"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                name = "className"
              } else if ((($a = (($b = name['$==']("for")) ? $scope.get('Browser')['$supports?']("Element.htmlFor") : name['$==']("for"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                name = "htmlFor"};
              if ((($a = namespace = ((($b = options['$[]']("namespace")) !== false && $b !== nil && $b != null) ? $b : self.namespace)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                return self["native"].setAttributeNS(namespace.$to_s(), name.$to_s(), value);
                } else {
                return self["native"].setAttribute(name.$to_s(), value.$to_s());
              };
            }, TMP_3.$$arity = -3);
            } else {
            Opal.defn(self, '$[]', TMP_4 = function(name, options) {
              var $a, $b, self = this, namespace = nil;

              if (options == null) {
                options = $hash2([], {});
              }
              if ((($a = namespace = ((($b = options['$[]']("namespace")) !== false && $b !== nil && $b != null) ? $b : self.namespace)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                return self["native"].getAttributeNS(namespace.$to_s(), name.$to_s()) || nil;
                } else {
                return self["native"].getAttribute(name.$to_s()) || nil;
              };
            }, TMP_4.$$arity = -2);

            Opal.defn(self, '$[]=', TMP_5 = function(name, value, options) {
              var $a, $b, self = this, namespace = nil;

              if (options == null) {
                options = $hash2([], {});
              }
              if ((($a = namespace = ((($b = options['$[]']("namespace")) !== false && $b !== nil && $b != null) ? $b : self.namespace)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                return self["native"].setAttributeNS(namespace.$to_s(), name.$to_s(), value);
                } else {
                return self["native"].setAttribute(name.$to_s(), value.$to_s());
              };
            }, TMP_5.$$arity = -3);
          };

          self.$include($scope.get('Enumerable'));

          Opal.defn(self, '$each', TMP_6 = function $$each() {
            var $a, $b, TMP_7, self = this, $iter = TMP_6.$$p, block = $iter || nil;

            TMP_6.$$p = null;
            if ((block !== nil)) {
              } else {
              return self.$enum_for("each")
            };
            ($a = ($b = self.element.$attribute_nodes()).$each, $a.$$p = (TMP_7 = function(attr){var self = TMP_7.$$s || this;
if (attr == null) attr = nil;
            return Opal.yieldX(block, [attr.$name(), attr.$value()]);}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $a).call($b);
            return self;
          }, TMP_6.$$arity = 0);

          Opal.alias(self, 'get', '[]');

          Opal.defn(self, '$has_key?', TMP_8 = function(name) {
            var self = this;

            return self['$[]'](name)['$!']()['$!']();
          }, TMP_8.$$arity = 1);

          Opal.defn(self, '$merge!', TMP_10 = function(hash) {
            var $a, $b, TMP_9, self = this;

            ($a = ($b = hash).$each, $a.$$p = (TMP_9 = function(name, value){var self = TMP_9.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
            return self['$[]='](name, value)}, TMP_9.$$s = self, TMP_9.$$arity = 2, TMP_9), $a).call($b);
            return self;
          }, TMP_10.$$arity = 1);

          return Opal.alias(self, 'set', '[]=');
        })($scope.base, null)
      })($scope.base, $scope.get('Node'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/dom/element/data"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$attr_reader', '$to_n', '$include', '$enum_for', '$call', '$each', '$=~', '$attributes', '$[]']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Data(){};
          var self = $Data = $klass($base, $super, 'Data', $Data);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_5, TMP_6, TMP_7;

          def["native"] = def.element = nil;
          self.$attr_reader("element");

          Opal.defn(self, '$initialize', TMP_1 = function $$initialize(element) {
            var $a, self = this;

            self.element = element;
            self["native"] = element.$to_n();
            if ((($a = (typeof(self["native"].$data) !== "undefined")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return nil
              } else {
              return self["native"].$data = {};
            };
          }, TMP_1.$$arity = 1);

          self.$include($scope.get('Enumerable'));

          Opal.defn(self, '$each', TMP_2 = function $$each() {
            var $a, $b, TMP_3, self = this, $iter = TMP_2.$$p, block = $iter || nil;

            TMP_2.$$p = null;
            if (block !== false && block !== nil && block != null) {
              } else {
              return self.$enum_for("each")
            };
            
      var data = self["native"].$data;

      for (var key in data) {
        block.$call(key, data[key]);
      }
    ;
            ($a = ($b = self.element.$attributes()).$each, $a.$$p = (TMP_3 = function(name, value){var self = TMP_3.$$s || this, $c;
if (name == null) name = nil;if (value == null) value = nil;
            if ((($c = name['$=~'](/^data-(.*)$/)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                return block.$call((($c = $gvars['~']) === nil ? nil : $c['$[]'](1)), value)
                } else {
                return nil
              }}, TMP_3.$$s = self, TMP_3.$$arity = 2, TMP_3), $a).call($b);
            return self;
          }, TMP_2.$$arity = 0);

          Opal.defn(self, '$assign', TMP_5 = function $$assign(data) {
            var $a, $b, TMP_4, self = this;

            ($a = ($b = data).$each, $a.$$p = (TMP_4 = function(name, value){var self = TMP_4.$$s || this;
              if (self["native"] == null) self["native"] = nil;
if (name == null) name = nil;if (value == null) value = nil;
            return self["native"].$data[name] = value;}, TMP_4.$$s = self, TMP_4.$$arity = 2, TMP_4), $a).call($b);
            return self;
          }, TMP_5.$$arity = 1);

          Opal.defn(self, '$[]', TMP_6 = function(name) {
            var $a, self = this, data = nil;

            if ((($a = data = self.element['$[]']("data-" + (name))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return data};
            
      var value = self["native"].$data[name];

      if (value === undefined) {
        return nil;
      }
      else {
        return value;
      }
    ;
          }, TMP_6.$$arity = 1);

          return (Opal.defn(self, '$[]=', TMP_7 = function(name, value) {
            var self = this;

            return self["native"].$data[name] = value;
          }, TMP_7.$$arity = 2), nil) && '[]=';
        })($scope.base, null)
      })($scope.base, $scope.get('Node'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/dom/element/position"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$attr_reader', '$to_n', '$offset', '$get', '$parent', '$new', '$==', '$[]', '$style', '$=~', '$x=', '$+', '$x', '$to_i', '$y=', '$y', '$-']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Position(){};
          var self = $Position = $klass($base, $super, 'Position', $Position);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4;

          def.element = nil;
          self.$attr_reader("element");

          Opal.defn(self, '$initialize', TMP_1 = function $$initialize(element) {
            var self = this;

            self.element = element;
            return self["native"] = element.$to_n();
          }, TMP_1.$$arity = 1);

          Opal.defn(self, '$get', TMP_2 = function $$get() {
            var $a, self = this, offset = nil, position = nil, parent = nil, parent_offset = nil;

            offset = self.element.$offset();
            position = offset.$get();
            parent = offset.$parent();
            parent_offset = (($scope.get('Browser')).$$scope.get('Position')).$new(0, 0);
            if (self.element.$style()['$[]']("position")['$==']("fixed")) {
              if ((($a = parent['$=~']("html")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                } else {
                parent_offset = parent.$offset()
              };
              ($a = parent_offset, $a['$x=']($rb_plus($a.$x(), parent.$style()['$[]']("border-top-width").$to_i())));
              ($a = parent_offset, $a['$y=']($rb_plus($a.$y(), parent.$style()['$[]']("border-left-width").$to_i())));};
            return (($scope.get('Browser')).$$scope.get('Position')).$new($rb_minus($rb_minus(position.$x(), parent_offset.$x()), self.element.$style()['$[]']("margin-left").$to_i()), $rb_minus($rb_minus(position.$y(), parent_offset.$y()), self.element.$style()['$[]']("margin-top").$to_i()));
          }, TMP_2.$$arity = 0);

          Opal.defn(self, '$x', TMP_3 = function $$x() {
            var self = this;

            return self.$get().$x();
          }, TMP_3.$$arity = 0);

          return (Opal.defn(self, '$y', TMP_4 = function $$y() {
            var self = this;

            return self.$get().$y();
          }, TMP_4.$$arity = 0), nil) && 'y';
        })($scope.base, null)
      })($scope.base, $scope.get('Node'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/dom/element/offset"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$attr_reader', '$to_n', '$DOM', '$root', '$document', '$x', '$get', '$set', '$y', '$supports?', '$window', '$new', '$[]', '$style!', '$==', '$[]=', '$style', '$to_u', '$===', '$first', '$+', '$-', '$px']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Offset(){};
          var self = $Offset = $klass($base, $super, 'Offset', $Offset);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, $a, TMP_7, TMP_8, TMP_9;

          def["native"] = def.element = nil;
          self.$attr_reader("element");

          Opal.defn(self, '$initialize', TMP_1 = function $$initialize(element) {
            var self = this;

            self.element = element;
            return self["native"] = element.$to_n();
          }, TMP_1.$$arity = 1);

          Opal.defn(self, '$parent', TMP_2 = function $$parent() {
            var self = this;

            return self.$DOM(self["native"].offsetParent || self.element.$document().$root().$to_n());
          }, TMP_2.$$arity = 0);

          Opal.defn(self, '$x', TMP_3 = function $$x() {
            var self = this;

            return self.$get().$x();
          }, TMP_3.$$arity = 0);

          Opal.defn(self, '$x=', TMP_4 = function(value) {
            var self = this;

            return self.$set(value, nil);
          }, TMP_4.$$arity = 1);

          Opal.defn(self, '$y', TMP_5 = function $$y() {
            var self = this;

            return self.$get().$y();
          }, TMP_5.$$arity = 0);

          Opal.defn(self, '$y=', TMP_6 = function(value) {
            var self = this;

            return self.$set(nil, value);
          }, TMP_6.$$arity = 1);

          if ((($a = $scope.get('Browser')['$supports?']("Element.getBoundingClientRect")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            Opal.defn(self, '$get', TMP_7 = function $$get() {
              var self = this, doc = nil, root = nil, win = nil;

              doc = self.element.$document();
              root = doc.$root().$to_n();
              win = doc.$window().$to_n();
              
        var box = self["native"].getBoundingClientRect(),
            y   = box.top + (win.pageYOffset || root.scrollTop) - (root.clientTop || 0),
            x   = box.left + (win.pageXOffset || root.scrollLeft) - (root.clientLeft || 0);
      ;
              return (($scope.get('Browser')).$$scope.get('Position')).$new(x, y);
            }, TMP_7.$$arity = 0)
            } else {
            Opal.defn(self, '$get', TMP_8 = function $$get() {
              var self = this, doc = nil, root = nil, win = nil;

              doc = self.$document();
              root = doc.$root().$to_n();
              win = doc.$window().$to_n();
              
        var y = (win.pageYOffset || root.scrollTop) - (root.clientTop || 0),
            x = (win.pageXOffset || root.scrollLeft) - (root.clientLeft || 0);
      ;
              return (($scope.get('Browser')).$$scope.get('Position')).$new(x, y);
            }, TMP_8.$$arity = 0)
          };

          return (Opal.defn(self, '$set', TMP_9 = function $$set($a_rest) {
            var $b, $c, self = this, value, position = nil, offset = nil, top = nil, left = nil, x = nil, y = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            value = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              value[$arg_idx - 0] = arguments[$arg_idx];
            }
            position = self.element['$style!']()['$[]']("position");
            if (position['$==']("static")) {
              self.element.$style()['$[]=']("position", "relative")};
            offset = self.$get();
            top = self.element['$style!']()['$[]']("top").$to_u();
            left = self.element['$style!']()['$[]']("left").$to_u();
            if ((($b = (($scope.get('Browser')).$$scope.get('Position'))['$==='](value.$first())) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              $b = [value.$first().$x(), value.$first().$y()], x = $b[0], y = $b[1], $b
            } else if ((($b = $scope.get('Hash')['$==='](value.$first())) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              $b = [value.$first()['$[]']("x"), value.$first()['$[]']("y")], x = $b[0], y = $b[1], $b
              } else {
              $c = value, $b = Opal.to_ary($c), x = ($b[0] == null ? nil : $b[0]), y = ($b[1] == null ? nil : $b[1]), $c
            };
            if (x !== false && x !== nil && x != null) {
              self.element.$style()['$[]=']("left", $rb_plus(($rb_minus(x.$px(), offset.$x())), left))};
            if (y !== false && y !== nil && y != null) {
              return self.element.$style()['$[]=']("top", $rb_plus(($rb_minus(y.$px(), offset.$y())), top))
              } else {
              return nil
            };
          }, TMP_9.$$arity = -1), nil) && 'set';
        })($scope.base, null)
      })($scope.base, $scope.get('Node'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/dom/element/scroll"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$attr_reader', '$to_n', '$supports?', '$===', '$first', '$[]', '$x', '$y', '$new', '$raise', '$position']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Scroll(){};
          var self = $Scroll = $klass($base, $super, 'Scroll', $Scroll);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15;

          def["native"] = nil;
          self.$attr_reader("element");

          Opal.defn(self, '$initialize', TMP_1 = function $$initialize(element) {
            var self = this;

            self.element = element;
            return self["native"] = element.$to_n();
          }, TMP_1.$$arity = 1);

          if ((($a = $scope.get('Browser')['$supports?']("Element.scroll")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            Opal.defn(self, '$to', TMP_2 = function $$to($a_rest) {
              var $b, $c, self = this, args, x = nil, y = nil;

              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              args = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                args[$arg_idx - 0] = arguments[$arg_idx];
              }
              if ((($b = $scope.get('Hash')['$==='](args.$first())) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
                x = ((($b = args.$first()['$[]']("x")) !== false && $b !== nil && $b != null) ? $b : self.$x());
                y = ((($b = args.$first()['$[]']("y")) !== false && $b !== nil && $b != null) ? $b : self.$y());
                } else {
                $c = args, $b = Opal.to_ary($c), x = ($b[0] == null ? nil : $b[0]), y = ($b[1] == null ? nil : $b[1]), $c
              };
              self["native"].scrollTop  = y;
              return self["native"].scrollLeft = x;
            }, TMP_2.$$arity = -1);

            Opal.defn(self, '$position', TMP_3 = function $$position() {
              var self = this;

              return (($scope.get('Browser')).$$scope.get('Position')).$new(self["native"].scrollLeft, self["native"].scrollTop);
            }, TMP_3.$$arity = 0);
          } else if ((($a = $scope.get('Browser')['$supports?']("Element.pageOffset")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            Opal.defn(self, '$to', TMP_4 = function $$to($a_rest) {
              var $b, $c, self = this, args, x = nil, y = nil;

              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              args = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                args[$arg_idx - 0] = arguments[$arg_idx];
              }
              if ((($b = $scope.get('Hash')['$==='](args.$first())) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
                x = ((($b = args.$first()['$[]']("x")) !== false && $b !== nil && $b != null) ? $b : self.$x());
                y = ((($b = args.$first()['$[]']("y")) !== false && $b !== nil && $b != null) ? $b : self.$y());
                } else {
                $c = args, $b = Opal.to_ary($c), x = ($b[0] == null ? nil : $b[0]), y = ($b[1] == null ? nil : $b[1]), $c
              };
              self["native"].pageYOffset = y;
              return self["native"].pageXOffset = x;
            }, TMP_4.$$arity = -1);

            Opal.defn(self, '$position', TMP_5 = function $$position() {
              var self = this;

              return $scope.get('Position').$new(self["native"].pageXOffset, self["native"].pageYOffset);
            }, TMP_5.$$arity = 0);
            } else {
            Opal.defn(self, '$to', TMP_6 = function $$to($a_rest) {
              var self = this, args;

              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              args = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                args[$arg_idx - 0] = arguments[$arg_idx];
              }
              return self.$raise($scope.get('NotImplementedError'), "scroll on element unsupported");
            }, TMP_6.$$arity = -1);

            Opal.defn(self, '$position', TMP_7 = function $$position() {
              var self = this;

              return self.$raise($scope.get('NotImplementedError'), "scroll on element unsupported");
            }, TMP_7.$$arity = 0);
          };

          Opal.defn(self, '$x', TMP_8 = function $$x() {
            var self = this;

            return self.$position().$x();
          }, TMP_8.$$arity = 0);

          Opal.defn(self, '$y', TMP_9 = function $$y() {
            var self = this;

            return self.$position().$y();
          }, TMP_9.$$arity = 0);

          Opal.defn(self, '$height', TMP_10 = function $$height() {
            var self = this;

            return self["native"].scrollHeight;
          }, TMP_10.$$arity = 0);

          Opal.defn(self, '$width', TMP_11 = function $$width() {
            var self = this;

            return self["native"].scrollWidth;
          }, TMP_11.$$arity = 0);

          Opal.defn(self, '$by', TMP_12 = function $$by($a_rest) {
            var $b, $c, self = this, args, x = nil, y = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            if ((($b = $scope.get('Hash')['$==='](args.$first())) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              x = ((($b = args.$first()['$[]']("x")) !== false && $b !== nil && $b != null) ? $b : 0);
              y = ((($b = args.$first()['$[]']("y")) !== false && $b !== nil && $b != null) ? $b : 0);
              } else {
              $c = args, $b = Opal.to_ary($c), x = ($b[0] == null ? nil : $b[0]), y = ($b[1] == null ? nil : $b[1]), $c
            };
            self["native"].scrollBy(x, y);
            return self;
          }, TMP_12.$$arity = -1);

          if ((($a = $scope.get('Browser')['$supports?']("Element.scrollIntoViewIfNeeded")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            Opal.defn(self, '$to', TMP_13 = function $$to(align) {
              var self = this;

              if (align == null) {
                align = true;
              }
              return self["native"].scrollIntoViewIfNeeded(align);
            }, TMP_13.$$arity = -1)
            } else {
            Opal.defn(self, '$to', TMP_14 = function $$to(align) {
              var self = this;

              if (align == null) {
                align = true;
              }
              return self.$raise($scope.get('NotImplementedError'));
            }, TMP_14.$$arity = -1)
          };

          return (Opal.defn(self, '$to!', TMP_15 = function(align) {
            var self = this;

            if (align == null) {
              align = true;
            }
            return self["native"].scrollIntoView(align);
          }, TMP_15.$$arity = -1), nil) && 'to!';
        })($scope.base, null)
      })($scope.base, $scope.get('Node'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/dom/element/size"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$attr_reader', '$to_n', '$[]=', '$style']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Size(){};
          var self = $Size = $klass($base, $super, 'Size', $Size);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5;

          def["native"] = def.element = nil;
          self.$attr_reader("element");

          Opal.defn(self, '$initialize', TMP_1 = function $$initialize(element, $a_rest) {
            var self = this, inc;

            var $args_len = arguments.length, $rest_len = $args_len - 1;
            if ($rest_len < 0) { $rest_len = 0; }
            inc = new Array($rest_len);
            for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
              inc[$arg_idx - 1] = arguments[$arg_idx];
            }
            self.element = element;
            self["native"] = element.$to_n();
            return self.include = inc;
          }, TMP_1.$$arity = -2);

          Opal.defn(self, '$width', TMP_2 = function $$width() {
            var self = this;

            return self["native"].offsetWidth;
          }, TMP_2.$$arity = 0);

          Opal.defn(self, '$width=', TMP_3 = function(value) {
            var self = this;

            return self.element.$style()['$[]=']("width", value);
          }, TMP_3.$$arity = 1);

          Opal.defn(self, '$height', TMP_4 = function $$height() {
            var self = this;

            return self["native"].offsetHeight;
          }, TMP_4.$$arity = 0);

          return (Opal.defn(self, '$height=', TMP_5 = function(value) {
            var self = this;

            return self.element.$style()['$[]=']("height", value);
          }, TMP_5.$$arity = 1), nil) && 'height=';
        })($scope.base, null)
      })($scope.base, $scope.get('Node'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/dom/element/input"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Input(){};
          var self = $Input = $klass($base, $super, 'Input', $Input);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4;

          def["native"] = nil;
          Opal.defn(self, '$value', TMP_1 = function $$value() {
            var self = this;

            
      if (self["native"].value == "") {
        return nil;
      }
      else {
        return self["native"].value;
      }
    ;
          }, TMP_1.$$arity = 0);

          Opal.defn(self, '$value=', TMP_2 = function(value) {
            var self = this;

            return self["native"].value = value;
          }, TMP_2.$$arity = 1);

          Opal.defn(self, '$checked?', TMP_3 = function() {
            var self = this;

            return self["native"].checked;
          }, TMP_3.$$arity = 0);

          return (Opal.defn(self, '$clear', TMP_4 = function $$clear() {
            var self = this;

            return self["native"].value = '';
          }, TMP_4.$$arity = 0), nil) && 'clear';
        })($scope.base, $scope.get('Element'))
      })($scope.base, $scope.get('Node'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/dom/element/select"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$[]', '$new', '$DOM', '$alias_native']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Select(){};
          var self = $Select = $klass($base, $super, 'Select', $Select);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5;

          def["native"] = nil;
          Opal.defn(self, '$value', TMP_1 = function $$value() {
            var self = this;

            
      if (self["native"].value == "") {
        return nil;
      }
      else {
        return self["native"].value;
      }
    ;
          }, TMP_1.$$arity = 0);

          Opal.defn(self, '$labels', TMP_2 = function $$labels() {
            var self = this;

            return $scope.get('NodeSet')['$[]']((($scope.get('Native')).$$scope.get('Array')).$new(self["native"].labels));
          }, TMP_2.$$arity = 0);

          Opal.defn(self, '$options', TMP_3 = function $$options() {
            var self = this;

            return $scope.get('NodeSet')['$[]']((($scope.get('Native')).$$scope.get('Array')).$new(self["native"].options));
          }, TMP_3.$$arity = 0);

          Opal.defn(self, '$option', TMP_4 = function $$option() {
            var self = this;

            return self.$DOM(self["native"].options[self["native"].selectedIndex]);
          }, TMP_4.$$arity = 0);

          Opal.defn(self, '$index', TMP_5 = function $$index() {
            var self = this;

            return self["native"].selectedIndex;
          }, TMP_5.$$arity = 0);

          self.$alias_native("multiple?", "multiple");

          self.$alias_native("required?", "required");

          return self.$alias_native("length");
        })($scope.base, $scope.get('Element'))
      })($scope.base, $scope.get('Node'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/dom/element/image"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $Image(){};
          var self = $Image = $klass($base, $super, 'Image', $Image);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4;

          def["native"] = nil;
          Opal.defn(self, '$complete?', TMP_1 = function() {
            var self = this;

            return self["native"].complete;
          }, TMP_1.$$arity = 0);

          Opal.defn(self, '$cross?', TMP_2 = function() {
            var self = this;

            return self["native"].crossOrigin;
          }, TMP_2.$$arity = 0);

          Opal.defn(self, '$height', TMP_3 = function $$height() {
            var self = this;

            return self["native"].naturalHeight;
          }, TMP_3.$$arity = 0);

          return (Opal.defn(self, '$width', TMP_4 = function $$width() {
            var self = this;

            return self["native"].naturalWidth;
          }, TMP_4.$$arity = 0), nil) && 'width';
        })($scope.base, $scope.get('Element'));

        return Opal.cdecl($scope, 'Img', $scope.get('Image'));
      })($scope.base, $scope.get('Node'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/dom/element/template"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$DOM']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Template(){};
          var self = $Template = $klass($base, $super, 'Template', $Template);

          var def = self.$$proto, $scope = self.$$scope, TMP_1;

          def["native"] = nil;
          return (Opal.defn(self, '$content', TMP_1 = function $$content() {
            var self = this;

            return self.$DOM(self["native"].content);
          }, TMP_1.$$arity = 0), nil) && 'content'
        })($scope.base, $scope.get('Element'))
      })($scope.base, $scope.get('Node'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/dom/element/textarea"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Textarea(){};
          var self = $Textarea = $klass($base, $super, 'Textarea', $Textarea);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3;

          def["native"] = nil;
          Opal.defn(self, '$value', TMP_1 = function $$value() {
            var self = this;

            
      if (self["native"].value == "") {
        return nil;
      }
      else {
        return self["native"].value;
      }
    ;
          }, TMP_1.$$arity = 0);

          Opal.defn(self, '$value=', TMP_2 = function(value) {
            var self = this;

            return self["native"].value = value;
          }, TMP_2.$$arity = 1);

          return (Opal.defn(self, '$clear', TMP_3 = function $$clear() {
            var self = this;

            return self["native"].value = '';
          }, TMP_3.$$arity = 0), nil) && 'clear';
        })($scope.base, $scope.get('Element'))
      })($scope.base, $scope.get('Node'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/dom/element"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $gvars = Opal.gvars, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$create_element', '$==', '$capitalize', '$include?', '$constants', '$new', '$const_get', '$include', '$target', '$DOM', '$supports?', '$loaded?', '$raise', '$[]', '$map', '$xpath', '$get', '$attributes', '$set', '$+', '$class_names', '$empty?', '$join', '$uniq', '$first', '$css', '$each', '$alias_native', '$reject', '$to_proc', '$split', '$===', '$assign', '$height', '$size', '$height=', '$to_s', '$clear', '$document', '$<<', '$to_a', '$downcase', '$name', '$id', '$offset', '$flatten', '$concat', '$replace', '$apply', '$to_n', '$window', '$-', '$width', '$width=']);
  self.$require("browser/dom/element/attributes");
  self.$require("browser/dom/element/data");
  self.$require("browser/dom/element/position");
  self.$require("browser/dom/element/offset");
  self.$require("browser/dom/element/scroll");
  self.$require("browser/dom/element/size");
  self.$require("browser/dom/element/input");
  self.$require("browser/dom/element/select");
  self.$require("browser/dom/element/image");
  self.$require("browser/dom/element/template");
  self.$require("browser/dom/element/textarea");
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, $a, $b, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_18, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30, TMP_31, TMP_32, TMP_33, TMP_34, TMP_35, TMP_36, TMP_37, TMP_38, TMP_40, TMP_41, TMP_42, TMP_43, TMP_44, TMP_45, TMP_46, TMP_47, TMP_48, TMP_49, TMP_50, $c, TMP_51, TMP_52;

        def["native"] = nil;
        Opal.defs(self, '$create', TMP_1 = function $$create($a_rest) {
          var $b, self = this, args;
          if ($gvars.document == null) $gvars.document = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          return ($b = $gvars.document).$create_element.apply($b, Opal.to_a(args));
        }, TMP_1.$$arity = -1);

        Opal.defs(self, '$new', TMP_2 = function(node) {
          var $a, $b, $c, self = this, $iter = TMP_2.$$p, $yield = $iter || nil, name = nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

          TMP_2.$$p = null;
          $zuper = [];
          
          for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
            $zuper[$zuper_index] = arguments[$zuper_index];
          }
          if (self['$==']($scope.get('Element'))) {
            name = (node.nodeName).$capitalize();
            if ((($a = $scope.get('Element').$constants()['$include?'](name)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return $scope.get('Element').$const_get(name).$new(node)
              } else {
              return ($a = ($b = self, Opal.find_super_dispatcher(self, 'new', TMP_2, false, $Element)), $a.$$p = $iter, $a).apply($b, $zuper)
            };
            } else {
            return ($a = ($c = self, Opal.find_super_dispatcher(self, 'new', TMP_2, false, $Element)), $a.$$p = $iter, $a).apply($c, $zuper)
          };
        }, TMP_2.$$arity = 1);

        self.$include((($scope.get('Event')).$$scope.get('Target')));

        ($a = ($b = self).$target, $a.$$p = (TMP_3 = function(value){var self = TMP_3.$$s || this;
if (value == null) value = nil;
        
          try {return self.$DOM(value) } catch ($err) { 
            if (Opal.rescue($err, [$scope.get('StandardError')])) {
            return nil
            } else { throw $err; } }}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($b);

        if ((($a = $scope.get('Browser')['$supports?']("Element.matches")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$=~', TMP_4 = function(selector) {
            var self = this;

            return self["native"].matches(selector);
          }, TMP_4.$$arity = 1)
        } else if ((($a = $scope.get('Browser')['$supports?']("Element.matches (Opera)")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$=~', TMP_5 = function(selector) {
            var self = this;

            return self["native"].oMatchesSelector(selector);
          }, TMP_5.$$arity = 1)
        } else if ((($a = $scope.get('Browser')['$supports?']("Element.matches (Internet Explorer)")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$=~', TMP_6 = function(selector) {
            var self = this;

            return self["native"].msMatchesSelector(selector);
          }, TMP_6.$$arity = 1)
        } else if ((($a = $scope.get('Browser')['$supports?']("Element.matches (Firefox)")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$=~', TMP_7 = function(selector) {
            var self = this;

            return self["native"].mozMatchesSelector(selector);
          }, TMP_7.$$arity = 1)
        } else if ((($a = $scope.get('Browser')['$supports?']("Element.matches (Chrome)")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$=~', TMP_8 = function(selector) {
            var self = this;

            return self["native"].webkitMatchesSelector(selector);
          }, TMP_8.$$arity = 1)
        } else if ((($a = $scope.get('Browser')['$loaded?']("Sizzle")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$=~', TMP_9 = function(selector) {
            var self = this;

            return Sizzle.matchesSelector(self["native"], selector);
          }, TMP_9.$$arity = 1)
          } else {
          Opal.defn(self, '$=~', TMP_10 = function(selector) {
            var self = this;

            return self.$raise($scope.get('NotImplementedError'), "selector matching unsupported");
          }, TMP_10.$$arity = 1)
        };

        Opal.defn(self, '$/', TMP_12 = function($a_rest) {
          var $b, $c, TMP_11, self = this, paths;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          paths = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            paths[$arg_idx - 0] = arguments[$arg_idx];
          }
          return $scope.get('NodeSet')['$[]'](($b = ($c = paths).$map, $b.$$p = (TMP_11 = function(path){var self = TMP_11.$$s || this;
if (path == null) path = nil;
          return self.$xpath(path)}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11), $b).call($c));
        }, TMP_12.$$arity = -1);

        Opal.defn(self, '$[]', TMP_13 = function(name, options) {
          var self = this;

          if (options == null) {
            options = $hash2([], {});
          }
          return self.$attributes().$get(name, options);
        }, TMP_13.$$arity = -2);

        Opal.defn(self, '$[]=', TMP_14 = function(name, value, options) {
          var self = this;

          if (options == null) {
            options = $hash2([], {});
          }
          return self.$attributes().$set(name, value, options);
        }, TMP_14.$$arity = -3);

        Opal.defn(self, '$add_class', TMP_15 = function $$add_class($a_rest) {
          var $b, self = this, names, classes = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          names = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            names[$arg_idx - 0] = arguments[$arg_idx];
          }
          classes = $rb_plus(self.$class_names(), names);
          if ((($b = classes['$empty?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            } else {
            self["native"].className = classes.$uniq().$join(" ");
          };
          return self;
        }, TMP_15.$$arity = -1);

        Opal.defn(self, '$at', TMP_16 = function $$at(path_or_selector) {
          var $a, self = this;

          return ((($a = self.$xpath(path_or_selector).$first()) !== false && $a !== nil && $a != null) ? $a : self.$css(path_or_selector).$first());
        }, TMP_16.$$arity = 1);

        Opal.defn(self, '$at_css', TMP_18 = function $$at_css($a_rest) {
          var $b, $c, TMP_17, self = this, rules, result = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          rules = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            rules[$arg_idx - 0] = arguments[$arg_idx];
          }
          result = nil;
          (function(){var $brk = Opal.new_brk(); try {return ($b = ($c = rules).$each, $b.$$p = (TMP_17 = function(rule){var self = TMP_17.$$s || this, $a;
if (rule == null) rule = nil;
          if ((($a = result = self.$css(rule).$first()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              
              Opal.brk(nil, $brk)
              } else {
              return nil
            }}, TMP_17.$$s = self, TMP_17.$$brk = $brk, TMP_17.$$arity = 1, TMP_17), $b).call($c)
          } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
          return result;
        }, TMP_18.$$arity = -1);

        Opal.defn(self, '$at_xpath', TMP_20 = function $$at_xpath($a_rest) {
          var $b, $c, TMP_19, self = this, paths, result = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          paths = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            paths[$arg_idx - 0] = arguments[$arg_idx];
          }
          result = nil;
          (function(){var $brk = Opal.new_brk(); try {return ($b = ($c = paths).$each, $b.$$p = (TMP_19 = function(path){var self = TMP_19.$$s || this, $a;
if (path == null) path = nil;
          if ((($a = result = self.$xpath(path).$first()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              
              Opal.brk(nil, $brk)
              } else {
              return nil
            }}, TMP_19.$$s = self, TMP_19.$$brk = $brk, TMP_19.$$arity = 1, TMP_19), $b).call($c)
          } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
          return result;
        }, TMP_20.$$arity = -1);

        Opal.alias(self, 'attr', '[]');

        Opal.alias(self, 'attribute', '[]');

        Opal.defn(self, '$attributes', TMP_21 = function $$attributes(options) {
          var self = this;

          if (options == null) {
            options = $hash2([], {});
          }
          return $scope.get('Attributes').$new(self, options);
        }, TMP_21.$$arity = -1);

        Opal.defn(self, '$attribute_nodes', TMP_22 = function $$attribute_nodes() {
          var self = this;

          return $scope.get('NodeSet')['$[]']((($scope.get('Native')).$$scope.get('Array')).$new(self["native"].attributes, $hash2(["get"], {"get": "item"})));
        }, TMP_22.$$arity = 0);

        self.$alias_native("class_name", "className");

        Opal.defn(self, '$class_names', TMP_23 = function $$class_names() {
          var $a, $b, self = this;

          return ($a = ($b = (self["native"].className).$split(/\s+/)).$reject, $a.$$p = "empty?".$to_proc(), $a).call($b);
        }, TMP_23.$$arity = 0);

        if ((($a = $scope.get('Browser')['$supports?']("Query.css")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$css', TMP_24 = function $$css(path) {
            var self = this;

            try {
              return $scope.get('NodeSet')['$[]']((($scope.get('Native')).$$scope.get('Array')).$new(self["native"].querySelectorAll(path)))
            } catch ($err) {
              if (Opal.rescue($err, [$scope.get('StandardError')])) {
                try {
                  return $scope.get('NodeSet')['$[]']()
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            };
          }, TMP_24.$$arity = 1)
        } else if ((($a = $scope.get('Browser')['$loaded?']("Sizzle")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$css', TMP_25 = function $$css(path) {
            var self = this;

            try {
              return $scope.get('NodeSet')['$[]'](Sizzle(path, self["native"]))
            } catch ($err) {
              if (Opal.rescue($err, [$scope.get('StandardError')])) {
                try {
                  return $scope.get('NodeSet')['$[]']()
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            };
          }, TMP_25.$$arity = 1)
          } else {
          Opal.defn(self, '$css', TMP_26 = function $$css(selector) {
            var self = this;

            return self.$raise($scope.get('NotImplementedError'), "query by CSS selector unsupported");
          }, TMP_26.$$arity = 1)
        };

        Opal.defn(self, '$data', TMP_27 = function $$data(value) {
          var $a, self = this, data = nil;

          if (value == null) {
            value = nil;
          }
          data = $scope.get('Data').$new(self);
          if (value !== false && value !== nil && value != null) {
            } else {
            return data
          };
          if ((($a = $scope.get('Hash')['$==='](value)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            data.$assign(value)
            } else {
            self.$raise($scope.get('ArgumentError'), "unknown data type")
          };
          return self;
        }, TMP_27.$$arity = -1);

        Opal.alias(self, 'get_attribute', '[]');

        Opal.alias(self, 'get', '[]');

        Opal.defn(self, '$height', TMP_28 = function $$height() {
          var self = this;

          return self.$size().$height();
        }, TMP_28.$$arity = 0);

        Opal.defn(self, '$height=', TMP_29 = function(value) {
          var $a, $b, self = this;

          return (($a = [value]), $b = self.$size(), $b['$height='].apply($b, $a), $a[$a.length-1]);
        }, TMP_29.$$arity = 1);

        Opal.defn(self, '$id', TMP_30 = function $$id() {
          var self = this;

          
      var id = self["native"].id;

      if (id === "") {
        return nil;
      }
      else {
        return id;
      }
    ;
        }, TMP_30.$$arity = 0);

        Opal.defn(self, '$id=', TMP_31 = function(value) {
          var self = this;

          return self["native"].id = value.$to_s();
        }, TMP_31.$$arity = 1);

        Opal.defn(self, '$inner_dom', TMP_32 = function $$inner_dom() {
          var $a, $b, self = this, $iter = TMP_32.$$p, block = $iter || nil, doc = nil;

          TMP_32.$$p = null;
          self.$clear();
          doc = self.$document();
          return self['$<<'](($a = ($b = $scope.get('Builder')).$new, $a.$$p = block.$to_proc(), $a).call($b, doc, self).$to_a());
        }, TMP_32.$$arity = 0);

        Opal.defn(self, '$inner_dom=', TMP_33 = function(node) {
          var self = this;

          self.$clear();
          return self['$<<'](node);
        }, TMP_33.$$arity = 1);

        Opal.defn(self, '$inspect', TMP_34 = function $$inspect() {
          var $a, self = this, inspect = nil;

          inspect = self.$name().$downcase();
          if ((($a = self.$id()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            inspect = $rb_plus(inspect, $rb_plus($rb_plus(".", self.$id()), "!"))};
          if ((($a = self.$class_names()['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            inspect = $rb_plus(inspect, $rb_plus(".", self.$class_names().$join(".")))
          };
          return "#<DOM::Element: " + (inspect) + ">";
        }, TMP_34.$$arity = 0);

        Opal.defn(self, '$offset', TMP_35 = function $$offset($a_rest) {
          var $b, self = this, values, off = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          values = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            values[$arg_idx - 0] = arguments[$arg_idx];
          }
          off = $scope.get('Offset').$new(self);
          if ((($b = values['$empty?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            } else {
            ($b = off).$set.apply($b, Opal.to_a(values))
          };
          return off;
        }, TMP_35.$$arity = -1);

        Opal.defn(self, '$offset=', TMP_36 = function(value) {
          var $a, self = this;

          return ($a = self.$offset()).$set.apply($a, Opal.to_a(value));
        }, TMP_36.$$arity = 1);

        Opal.defn(self, '$position', TMP_37 = function $$position() {
          var self = this;

          return $scope.get('Position').$new(self);
        }, TMP_37.$$arity = 0);

        Opal.defn(self, '$scroll', TMP_38 = function $$scroll() {
          var self = this;

          return $scope.get('Scroll').$new(self);
        }, TMP_38.$$arity = 0);

        Opal.defn(self, '$search', TMP_40 = function $$search($a_rest) {
          var $b, $c, TMP_39, self = this, selectors;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          selectors = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            selectors[$arg_idx - 0] = arguments[$arg_idx];
          }
          return $scope.get('NodeSet').$new(($b = ($c = selectors).$map, $b.$$p = (TMP_39 = function(selector){var self = TMP_39.$$s || this;
if (selector == null) selector = nil;
          return self.$xpath(selector).$to_a().$concat(self.$css(selector).$to_a())}, TMP_39.$$s = self, TMP_39.$$arity = 1, TMP_39), $b).call($c).$flatten().$uniq());
        }, TMP_40.$$arity = -1);

        Opal.alias(self, 'set', '[]=');

        Opal.alias(self, 'set_attribute', '[]=');

        Opal.defn(self, '$style', TMP_41 = function $$style(data) {
          var $a, $b, self = this, $iter = TMP_41.$$p, block = $iter || nil, style = nil;

          if (data == null) {
            data = nil;
          }
          TMP_41.$$p = null;
          style = (($scope.get('CSS')).$$scope.get('Declaration')).$new(self["native"].style);
          if ((($a = ((($b = data) !== false && $b !== nil && $b != null) ? $b : block)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            return style
          };
          if ((($a = $scope.get('String')['$==='](data)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            style.$replace(data)
          } else if ((($a = $scope.get('Hash')['$==='](data)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            style.$assign(data)
          } else if (block !== false && block !== nil && block != null) {
            ($a = ($b = style).$apply, $a.$$p = block.$to_proc(), $a).call($b)
            } else {
            self.$raise($scope.get('ArgumentError'), "unknown data type")
          };
          return self;
        }, TMP_41.$$arity = -1);

        if ((($a = $scope.get('Browser')['$supports?']("CSS.computed")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$style!', TMP_42 = function() {
            var self = this;

            return (($scope.get('CSS')).$$scope.get('Declaration')).$new(self.$window().$to_n().getComputedStyle(self["native"], null));
          }, TMP_42.$$arity = 0)
        } else if ((($a = $scope.get('Browser')['$supports?']("CSS.current")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$style!', TMP_43 = function() {
            var self = this;

            return (($scope.get('CSS')).$$scope.get('Declaration')).$new(self["native"].currentStyle);
          }, TMP_43.$$arity = 0)
          } else {
          Opal.defn(self, '$style!', TMP_44 = function() {
            var self = this;

            return self.$raise($scope.get('NotImplementedError'), "computed style unsupported");
          }, TMP_44.$$arity = 0)
        };

        Opal.defn(self, '$remove_attribute', TMP_45 = function $$remove_attribute(name) {
          var self = this;

          return self["native"].removeAttribute(name);
        }, TMP_45.$$arity = 1);

        Opal.defn(self, '$remove_class', TMP_46 = function $$remove_class($a_rest) {
          var $b, self = this, names, classes = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          names = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            names[$arg_idx - 0] = arguments[$arg_idx];
          }
          classes = $rb_minus(self.$class_names(), names);
          if ((($b = classes['$empty?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            self["native"].removeAttribute('class');
            } else {
            self["native"].className = classes.$join(" ");
          };
          return self;
        }, TMP_46.$$arity = -1);

        Opal.defn(self, '$size', TMP_47 = function $$size($a_rest) {
          var $b, self = this, inc;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          inc = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            inc[$arg_idx - 0] = arguments[$arg_idx];
          }
          return ($b = $scope.get('Size')).$new.apply($b, [self].concat(Opal.to_a(inc)));
        }, TMP_47.$$arity = -1);

        Opal.defn(self, '$width', TMP_48 = function $$width() {
          var self = this;

          return self.$size().$width();
        }, TMP_48.$$arity = 0);

        Opal.defn(self, '$width=', TMP_49 = function(value) {
          var $a, $b, self = this;

          return (($a = [value]), $b = self.$size(), $b['$width='].apply($b, $a), $a[$a.length-1]);
        }, TMP_49.$$arity = 1);

        Opal.defn(self, '$window', TMP_50 = function $$window() {
          var self = this;

          return self.$document().$window();
        }, TMP_50.$$arity = 0);

        if ((($a = ((($c = $scope.get('Browser')['$supports?']("Query.xpath")) !== false && $c !== nil && $c != null) ? $c : $scope.get('Browser')['$loaded?']("wicked-good-xpath"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$loaded?']("wicked-good-xpath")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            wgxpath.install();};

          return (Opal.defn(self, '$xpath', TMP_51 = function $$xpath(path) {
            var self = this;

            try {
              return $scope.get('NodeSet')['$[]']((($scope.get('Native')).$$scope.get('Array')).$new((self["native"].ownerDocument || self["native"]).evaluate(path,
           self["native"], null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null), $hash2(["get", "length"], {"get": "snapshotItem", "length": "snapshotLength"})))
            } catch ($err) {
              if (Opal.rescue($err, [$scope.get('StandardError')])) {
                try {
                  return $scope.get('NodeSet')['$[]']()
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            };
          }, TMP_51.$$arity = 1), nil) && 'xpath';
          } else {
          return (Opal.defn(self, '$xpath', TMP_52 = function $$xpath(path) {
            var self = this;

            return self.$raise($scope.get('NotImplementedError'), "query by XPath unsupported");
          }, TMP_52.$$arity = 1), nil) && 'xpath'
        };
      })($scope.base, $scope.get('Node'))
    })($scope.base)
  })($scope.base);
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/dom/document"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$DOM', '$first', '$css', '$xpath', '$[]', '$supports?', '$raise', '$ready?', '$call', '$on', '$off', '$convert', '$new']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Document(){};
        var self = $Document = $klass($base, $super, 'Document', $Document);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, $a, TMP_8, TMP_10, TMP_12, TMP_13, TMP_14, TMP_15, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22;

        def["native"] = nil;
        Opal.defn(self, '$[]', TMP_1 = function(what) {
          var $a, self = this;

          
      var result = self["native"].getElementById(what);

      if (result) {
        return self.$DOM(result);
      }
    ;
          return ((($a = self.$css(what).$first()) !== false && $a !== nil && $a != null) ? $a : self.$xpath(what).$first());
        }, TMP_1.$$arity = 1);

        Opal.alias(self, 'at', '[]');

        Opal.defn(self, '$body', TMP_2 = function $$body() {
          var self = this;

          return self.$DOM(self["native"].body);
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$create_element', TMP_3 = function $$create_element(name, options) {
          var $a, self = this, ns = nil;

          if (options == null) {
            options = $hash2([], {});
          }
          if ((($a = ns = options['$[]']("namespace")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$DOM(self["native"].createElementNS(ns, name))
            } else {
            return self.$DOM(self["native"].createElement(name))
          };
        }, TMP_3.$$arity = -2);

        Opal.defn(self, '$create_text', TMP_4 = function $$create_text(content) {
          var self = this;

          return self.$DOM(self["native"].createTextNode(content));
        }, TMP_4.$$arity = 1);

        Opal.defn(self, '$document', TMP_5 = function $$document() {
          var self = this;

          return self;
        }, TMP_5.$$arity = 0);

        Opal.defn(self, '$head', TMP_6 = function $$head() {
          var self = this;

          return self.$DOM(self["native"].getElementsByTagName("head")[0]);
        }, TMP_6.$$arity = 0);

        Opal.defn(self, '$inspect', TMP_7 = function $$inspect() {
          var self = this;

          return "#<DOM::Document>";
        }, TMP_7.$$arity = 0);

        if ((($a = $scope.get('Browser')['$supports?']("Event.addListener")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$ready', TMP_8 = function $$ready() {
            var $a, $b, TMP_9, self = this, $iter = TMP_8.$$p, block = $iter || nil;

            TMP_8.$$p = null;
            if (block !== false && block !== nil && block != null) {
              } else {
              self.$raise($scope.get('ArgumentError'), "no block given")
            };
            if ((($a = self['$ready?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return block.$call()};
            return ($a = ($b = self).$on, $a.$$p = (TMP_9 = function(e){var self = TMP_9.$$s || this;
if (e == null) e = nil;
            e.$off();
              return block.$call();}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9), $a).call($b, "dom:load");
          }, TMP_8.$$arity = 0)
        } else if ((($a = $scope.get('Browser')['$supports?']("Event.attach")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$ready', TMP_10 = function $$ready() {
            var $a, $b, TMP_11, self = this, $iter = TMP_10.$$p, block = $iter || nil;

            TMP_10.$$p = null;
            if (block !== false && block !== nil && block != null) {
              } else {
              self.$raise($scope.get('ArgumentError'), "no block given")
            };
            if ((($a = self['$ready?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return block.$call()};
            return ($a = ($b = self).$on, $a.$$p = (TMP_11 = function(e){var self = TMP_11.$$s || this, $c;
if (e == null) e = nil;
            if ((($c = self['$ready?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                e.$off();
                return block.$call();
                } else {
                return nil
              }}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11), $a).call($b, "ready:state:change");
          }, TMP_10.$$arity = 0)
          } else {
          Opal.defn(self, '$ready', TMP_12 = function $$ready() {
            var self = this, $iter = TMP_12.$$p, block = $iter || nil;

            TMP_12.$$p = null;
            return self.$raise($scope.get('NotImplementedError'), "document ready unsupported");
          }, TMP_12.$$arity = 0)
        };

        Opal.defn(self, '$ready?', TMP_13 = function() {
          var self = this;

          return self["native"].readyState === "complete";
        }, TMP_13.$$arity = 0);

        Opal.defn(self, '$root', TMP_14 = function $$root() {
          var self = this;

          return self.$DOM(self["native"].documentElement);
        }, TMP_14.$$arity = 0);

        Opal.defn(self, '$root=', TMP_15 = function(element) {
          var self = this;

          return self["native"].documentElement = $scope.get('Native').$convert(element);
        }, TMP_15.$$arity = 1);

        Opal.defn(self, '$style_sheets', TMP_17 = function $$style_sheets() {
          var $a, $b, TMP_16, self = this;

          return ($a = ($b = (($scope.get('Native')).$$scope.get('Array'))).$new, $a.$$p = (TMP_16 = function(e){var self = TMP_16.$$s || this;
if (e == null) e = nil;
          return (($scope.get('CSS')).$$scope.get('StyleSheet')).$new(e)}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16), $a).call($b, self["native"].styleSheets);
        }, TMP_17.$$arity = 0);

        Opal.defn(self, '$title', TMP_18 = function $$title() {
          var self = this;

          return self["native"].title;
        }, TMP_18.$$arity = 0);

        Opal.defn(self, '$title=', TMP_19 = function(value) {
          var self = this;

          return self["native"].title = value;
        }, TMP_19.$$arity = 1);

        if ((($a = $scope.get('Browser')['$supports?']("Document.view")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return (Opal.defn(self, '$window', TMP_20 = function $$window() {
            var self = this;

            return $scope.get('Window').$new(self["native"].defaultView);
          }, TMP_20.$$arity = 0), nil) && 'window'
        } else if ((($a = $scope.get('Browser')['$supports?']("Document.window")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return (Opal.defn(self, '$window', TMP_21 = function $$window() {
            var self = this;

            return $scope.get('Window').$new(self["native"].parentWindow);
          }, TMP_21.$$arity = 0), nil) && 'window'
          } else {
          return (Opal.defn(self, '$window', TMP_22 = function $$window() {
            var self = this;

            return self.$raise($scope.get('NotImplementedError'), "window from document unsupported");
          }, TMP_22.$$arity = 0), nil) && 'window'
        };
      })($scope.base, $scope.get('Element'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/dom/document_fragment"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $DocumentFragment(){};
        var self = $DocumentFragment = $klass($base, $super, 'DocumentFragment', $DocumentFragment);

        var def = self.$$proto, $scope = self.$$scope;

        return nil;
      })($scope.base, $scope.get('Element'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/dom/builder"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$<<', '$[]=', '$to_h', '$[]', '$each', '$===', '$call', '$raise', '$attr_reader', '$new', '$to_proc', '$map', '$build', '$for', '$create_text', '$document', '$create_element', '$merge!', '$attributes', '$add_class', '$on', '$inner_html=']);
  (function($base) {
    var $Utils, self = $Utils = $module($base, 'Utils');

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    Opal.defs(self, '$heredoc', TMP_1 = function $$heredoc(string) {
      var self = this;

      return string;
    }, TMP_1.$$arity = 1)
  })($scope.get('Paggio'));
  (function($base, $super) {
    function $Element(){};
    var self = $Element = $klass($base, $super, 'Element', $Element);

    var def = self.$$proto, $scope = self.$$scope, TMP_2;

    def.on = nil;
    return (Opal.defn(self, '$on', TMP_2 = function $$on($a_rest) {
      var $b, self = this, args, $iter = TMP_2.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_2.$$p = null;
      return (((($b = self.on) !== false && $b !== nil && $b != null) ? $b : self.on = []))['$<<']([args, block]);
    }, TMP_2.$$arity = -1), nil) && 'on'
  })((($scope.get('Paggio')).$$scope.get('HTML')), $scope.get('BasicObject'));
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_10, $c, TMP_11, $d, TMP_15;

      (function($base, $super) {
        function $Builder(){};
        var self = $Builder = $klass($base, $super, 'Builder', $Builder);

        var def = self.$$proto, $scope = self.$$scope, TMP_3, TMP_4, TMP_6, TMP_7, TMP_9;

        def.builder = def.roots = nil;
        Opal.defs(self, '$to_h', TMP_3 = function $$to_h() {
          var $a, self = this;
          if (self.builders == null) self.builders = nil;

          return ((($a = self.builders) !== false && $a !== nil && $a != null) ? $a : self.builders = $hash2([], {}));
        }, TMP_3.$$arity = 0);

        Opal.defs(self, '$for', TMP_4 = function(klass) {
          var self = this, $iter = TMP_4.$$p, block = $iter || nil;

          TMP_4.$$p = null;
          if (block !== false && block !== nil && block != null) {
            return self.$to_h()['$[]='](klass, block)
            } else {
            return self.$to_h()['$[]'](klass)
          };
        }, TMP_4.$$arity = 1);

        Opal.defs(self, '$build', TMP_6 = function $$build(builder, item) {try {

          var $a, $b, TMP_5, self = this;

          ($a = ($b = self.$to_h()).$each, $a.$$p = (TMP_5 = function(klass, block){var self = TMP_5.$$s || this, $c;
if (klass == null) klass = nil;if (block == null) block = nil;
          if ((($c = klass['$==='](item)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              Opal.ret(block.$call(builder, item))
              } else {
              return nil
            }}, TMP_5.$$s = self, TMP_5.$$arity = 2, TMP_5), $a).call($b);
          return self.$raise($scope.get('ArgumentError'), "cannot build unknown item " + (item));
          } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
        }, TMP_6.$$arity = 2);

        self.$attr_reader("document", "element");

        Opal.defn(self, '$initialize', TMP_7 = function $$initialize(document) {
          var $a, $b, $c, TMP_8, self = this, $iter = TMP_7.$$p, block = $iter || nil;

          TMP_7.$$p = null;
          self.document = document;
          self.builder = ($a = ($b = (($scope.get('Paggio')).$$scope.get('HTML'))).$new, $a.$$p = block.$to_proc(), $a).call($b);
          return self.roots = ($a = ($c = self.builder.$each()).$map, $a.$$p = (TMP_8 = function(e){var self = TMP_8.$$s || this;
if (e == null) e = nil;
          return $scope.get('Builder').$build(self, e)}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8), $a).call($c);
        }, TMP_7.$$arity = 1);

        return (Opal.defn(self, '$to_a', TMP_9 = function $$to_a() {
          var self = this;

          return self.roots;
        }, TMP_9.$$arity = 0), nil) && 'to_a';
      })($scope.base, null);

      ($a = ($b = $scope.get('Builder')).$for, $a.$$p = (TMP_10 = function(b, item){var self = TMP_10.$$s || this;
if (b == null) b = nil;if (item == null) item = nil;
      return b.$document().$create_text(item)}, TMP_10.$$s = self, TMP_10.$$arity = 2, TMP_10), $a).call($b, $scope.get('String'));

      ($a = ($c = $scope.get('Builder')).$for, $a.$$p = (TMP_11 = function(b, item){var self = TMP_11.$$s || this, $d, $e, TMP_12, $f, TMP_13, $g, TMP_14, dom = nil, on = nil, inner = nil;
if (b == null) b = nil;if (item == null) item = nil;
      dom = b.$document().$create_element(item.name);
        if ((($d = $scope.get('Hash')['$==='](item.attributes)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          dom.$attributes()['$merge!'](item.attributes)};
        ($d = ($e = (item.class_names)).$each, $d.$$p = (TMP_12 = function(value){var self = TMP_12.$$s || this;
if (value == null) value = nil;
        return dom.$add_class(value)}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12), $d).call($e);
        if ((($d = on = item.on || nil) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          ($d = ($f = on).$each, $d.$$p = (TMP_13 = function(args, block){var self = TMP_13.$$s || this, $g, $h;
if (args == null) args = nil;if (block == null) block = nil;
          return ($g = ($h = dom).$on, $g.$$p = block.$to_proc(), $g).apply($h, Opal.to_a(args))}, TMP_13.$$s = self, TMP_13.$$arity = 2, TMP_13), $d).call($f)};
        if ((($d = inner = item.inner_html || nil) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          (($d = [inner]), $g = dom, $g['$inner_html='].apply($g, $d), $d[$d.length-1])
          } else {
          ($d = ($g = item).$each, $d.$$p = (TMP_14 = function(child){var self = TMP_14.$$s || this;
if (child == null) child = nil;
          return dom['$<<']($scope.get('Builder').$build(b, child))}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14), $d).call($g)
        };
        return dom;}, TMP_11.$$s = self, TMP_11.$$arity = 2, TMP_11), $a).call($c, (((($scope.get('Paggio')).$$scope.get('HTML'))).$$scope.get('Element')));

      ($a = ($d = $scope.get('Builder')).$for, $a.$$p = (TMP_15 = function(b, item){var self = TMP_15.$$s || this;
if (b == null) b = nil;if (item == null) item = nil;
      return item}, TMP_15.$$s = self, TMP_15.$$arity = 2, TMP_15), $a).call($d, (($scope.get('DOM')).$$scope.get('Node')));
    })($scope.base)
  })($scope.base);
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/dom/mutation_observer"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$supports?', '$include', '$===', '$==', '$type', '$new', '$[]', '$DOM', '$alias_native', '$call', '$map', '$convert', '$private', '$Native', '$[]=', '$to_n']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $MutationObserver(){};
        var self = $MutationObserver = $klass($base, $super, 'MutationObserver', $MutationObserver);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_9, TMP_11, TMP_13, TMP_14, TMP_15;

        def["native"] = nil;
        Opal.defs(self, '$supported?', TMP_1 = function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("MutationObserver");
        }, TMP_1.$$arity = 0);

        self.$include($scope.get('Native'));

        (function($base, $super) {
          function $Record(){};
          var self = $Record = $klass($base, $super, 'Record', $Record);

          var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8;

          def["native"] = nil;
          self.$include($scope.get('Native'));

          Opal.defn(self, '$type', TMP_2 = function $$type() {
            var self = this, $case = nil;

            return (function() {$case = self["native"].type;if ("attributes"['$===']($case)) {return "attribute"}else if ("childList"['$===']($case)) {return "tree"}else if ("characterData"['$===']($case)) {return "cdata"}else { return nil }})();
          }, TMP_2.$$arity = 0);

          Opal.defn(self, '$attribute?', TMP_3 = function() {
            var self = this;

            return self.$type()['$==']("attribute");
          }, TMP_3.$$arity = 0);

          Opal.defn(self, '$tree?', TMP_4 = function() {
            var self = this;

            return self.$type()['$==']("tree");
          }, TMP_4.$$arity = 0);

          Opal.defn(self, '$cdata?', TMP_5 = function() {
            var self = this;

            return self.$type()['$==']("cdata");
          }, TMP_5.$$arity = 0);

          Opal.defn(self, '$added', TMP_6 = function $$added() {
            var $a, self = this, array = nil;

            array = (function() {if ((($a = self["native"].addedNodes != null) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return (($scope.get('Native')).$$scope.get('Array')).$new(self["native"].addedNodes)
              } else {
              return []
            }; return nil; })();
            return $scope.get('NodeSet')['$[]'](array);
          }, TMP_6.$$arity = 0);

          Opal.defn(self, '$removed', TMP_7 = function $$removed() {
            var $a, self = this, array = nil;

            array = (function() {if ((($a = self["native"].removedNodes != null) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return (($scope.get('Native')).$$scope.get('Array')).$new(self["native"].removedNodes)
              } else {
              return []
            }; return nil; })();
            return $scope.get('NodeSet')['$[]'](array);
          }, TMP_7.$$arity = 0);

          Opal.defn(self, '$target', TMP_8 = function $$target() {
            var self = this;

            return self.$DOM(self["native"].target);
          }, TMP_8.$$arity = 0);

          self.$alias_native("old", "oldValue");

          self.$alias_native("name", "attributeName");

          return self.$alias_native("namespace", "attributeNamespace");
        })($scope.base, null);

        Opal.defn(self, '$initialize', TMP_9 = function $$initialize() {
          var $a, $b, TMP_10, $c, self = this, $iter = TMP_9.$$p, block = $iter || nil;

          TMP_9.$$p = null;
          
      var func = function(records) {
        return block.$call(($a = ($b = (records)).$map, $a.$$p = (TMP_10 = function(r){var self = TMP_10.$$s || this;
if (r == null) r = nil;
          return (((((($scope.get('Browser')).$$scope.get('DOM'))).$$scope.get('MutationObserver'))).$$scope.get('Record')).$new(r)}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10), $a).call($b));
      }
    ;
          return ($a = ($c = self, Opal.find_super_dispatcher(self, 'initialize', TMP_9, false)), $a.$$p = null, $a).call($c, new window.MutationObserver(func));
        }, TMP_9.$$arity = 0);

        Opal.defn(self, '$observe', TMP_11 = function $$observe(target, options) {
          var self = this;

          if (options == null) {
            options = nil;
          }
          if (options !== false && options !== nil && options != null) {
            } else {
            options = $hash2(["children", "tree", "attributes", "cdata"], {"children": true, "tree": true, "attributes": "old", "cdata": "old"})
          };
          self["native"].observe($scope.get('Native').$convert(target), self.$convert(options));
          return self;
        }, TMP_11.$$arity = -2);

        Opal.defn(self, '$take', TMP_13 = function $$take() {
          var $a, $b, TMP_12, self = this;

          return ($a = ($b = (self["native"].takeRecords())).$map, $a.$$p = (TMP_12 = function(r){var self = TMP_12.$$s || this;
if (r == null) r = nil;
          return $scope.get('Record').$new(r)}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12), $a).call($b);
        }, TMP_13.$$arity = 0);

        Opal.defn(self, '$disconnect', TMP_14 = function $$disconnect() {
          var self = this;

          return self["native"].disconnect();
        }, TMP_14.$$arity = 0);

        self.$private();

        return (Opal.defn(self, '$convert', TMP_15 = function $$convert(hash) {
          var $a, self = this, options = nil, attrs = nil, filter = nil, cdata = nil;

          options = self.$Native({});
          if ((($a = hash['$[]']("children")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            options['$[]=']("childList", true)};
          if ((($a = hash['$[]']("tree")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            options['$[]=']("subtree", true)};
          if ((($a = attrs = hash['$[]']("attributes")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            options['$[]=']("attributes", true);
            if (attrs['$==']("old")) {
              options['$[]=']("attributeOldValue", true)};};
          if ((($a = filter = hash['$[]']("filter")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            options['$[]=']("attributeFilter", filter)};
          if ((($a = cdata = hash['$[]']("cdata")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            options['$[]=']("characterData", true);
            if (cdata['$==']("old")) {
              options['$[]=']("characterDataOldValue", true)};};
          return options.$to_n();
        }, TMP_15.$$arity = 1), nil) && 'convert';
      })($scope.base, null)
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/dom"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $gvars = Opal.gvars, $klass = Opal.klass;
  if ($gvars.window == null) $gvars.window = nil;

  Opal.add_stubs(['$require', '$DOM', '$shift', '$to_a', '$new', '$to_proc', '$==', '$length', '$first', '$native?', '$===', '$try_convert', '$raise', '$document']);
  self.$require("browser/dom/node_set");
  self.$require("browser/dom/node");
  self.$require("browser/dom/attribute");
  self.$require("browser/dom/character_data");
  self.$require("browser/dom/text");
  self.$require("browser/dom/cdata");
  self.$require("browser/dom/comment");
  self.$require("browser/dom/element");
  self.$require("browser/dom/document");
  self.$require("browser/dom/document_fragment");
  self.$require("browser/dom/builder");
  self.$require("browser/dom/mutation_observer");
  (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

    Opal.defn(self, '$XML', TMP_1 = function $$XML(what) {
      var self = this;

      
      var doc;

      if (window.DOMParser) {
        doc = new DOMParser().parseFromString(what, 'text/xml');
      }
      else {
        doc       = new ActiveXObject('Microsoft.XMLDOM');
        doc.async = 'false';
        doc.loadXML(what);
      }
    
      return self.$DOM(doc);
    }, TMP_1.$$arity = 1);

    Opal.defn(self, '$DOM', TMP_2 = function $$DOM($a_rest) {
      var $b, $c, self = this, args, $iter = TMP_2.$$p, block = $iter || nil, document = nil, roots = nil, what = nil;
      if ($gvars.document == null) $gvars.document = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_2.$$p = null;
      if (block !== false && block !== nil && block != null) {
        document = ((($b = args.$shift()) !== false && $b !== nil && $b != null) ? $b : $gvars.document);
        roots = ($b = ($c = (((($scope.get('Browser')).$$scope.get('DOM'))).$$scope.get('Builder'))).$new, $b.$$p = block.$to_proc(), $b).call($c, document).$to_a();
        if (roots.$length()['$=='](1)) {
          return roots.$first()
          } else {
          return (((($scope.get('Browser')).$$scope.get('DOM'))).$$scope.get('NodeSet')).$new(roots)
        };
        } else {
        what = args.$shift();
        document = ((($b = args.$shift()) !== false && $b !== nil && $b != null) ? $b : $gvars.document);
        if ((($b = self['$native?'](what)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          return (((($scope.get('Browser')).$$scope.get('DOM'))).$$scope.get('Node')).$new(what)
        } else if ((($b = (((($scope.get('Browser')).$$scope.get('DOM'))).$$scope.get('Node'))['$==='](what)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          return what
        } else if ((($b = $scope.get('String')['$==='](what)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          
          var doc = $scope.get('Native').$try_convert(document).createElement('div');
          doc.innerHTML = what;

          return self.$DOM(doc.childNodes.length == 1 ? doc.childNodes[0] : doc);
        ;
          } else {
          return self.$raise($scope.get('ArgumentError'), "argument not DOM convertible")
        };
      };
    }, TMP_2.$$arity = -1);
  })($scope.base);
  (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Window(){};
      var self = $Window = $klass($base, $super, 'Window', $Window);

      var def = self.$$proto, $scope = self.$$scope, TMP_3;

      def["native"] = nil;
      return (Opal.defn(self, '$document', TMP_3 = function $$document() {
        var self = this;

        return self.$DOM(self["native"].document);
      }, TMP_3.$$arity = 0), nil) && 'document'
    })($scope.base, null)
  })($scope.base);
  return $gvars.document = $gvars.window.$document();
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/css/declaration"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$include', '$new', '$each', '$[]=', '$important', '$name', '$value', '$to_proc', '$to_s', '$enum_for', '$[]', '$alias_native', '$end_with?']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $CSS, self = $CSS = $module($base, 'CSS');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Declaration(){};
        var self = $Declaration = $klass($base, $super, 'Declaration', $Declaration);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_3, TMP_4, TMP_5, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12;

        def["native"] = nil;
        self.$include($scope.get('Native'));

        self.$include($scope.get('Enumerable'));

        Opal.defn(self, '$rule', TMP_1 = function $$rule() {
          var $a, self = this;

          if ((($a = (typeof(self["native"].parentRule) !== "undefined")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('Rule').$new(self["native"].parentRule)
            } else {
            return nil
          };
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$assign', TMP_3 = function $$assign(data) {
          var $a, $b, TMP_2, self = this;

          ($a = ($b = data).$each, $a.$$p = (TMP_2 = function(name, value){var self = TMP_2.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
          return self['$[]='](name, value)}, TMP_2.$$s = self, TMP_2.$$arity = 2, TMP_2), $a).call($b);
          return self;
        }, TMP_3.$$arity = 1);

        Opal.defn(self, '$replace', TMP_4 = function $$replace(string) {
          var self = this;

          return self["native"].cssText = string;
        }, TMP_4.$$arity = 1);

        Opal.defn(self, '$apply', TMP_5 = function $$apply() {
          var $a, $b, TMP_6, $c, $d, self = this, $iter = TMP_5.$$p, block = $iter || nil;

          TMP_5.$$p = null;
          return ($a = ($b = ($c = ($d = (((($scope.get('Paggio')).$$scope.get('CSS'))).$$scope.get('Definition'))).$new, $c.$$p = block.$to_proc(), $c).call($d)).$each, $a.$$p = (TMP_6 = function(style){var self = TMP_6.$$s || this, $c;
            if (self["native"] == null) self["native"] = nil;
if (style == null) style = nil;
          if ((($c = style.$important()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return self["native"].setProperty(style.$name(), style.$value(), "important");
              } else {
              return self["native"].setProperty(style.$name(), style.$value(), "");
            }}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $a).call($b);
        }, TMP_5.$$arity = 0);

        Opal.defn(self, '$delete', TMP_7 = function(name) {
          var self = this;

          return self["native"].removeProperty(name);
        }, TMP_7.$$arity = 1);

        Opal.defn(self, '$[]', TMP_8 = function(name) {
          var self = this;

          
      var result = self["native"].getPropertyValue(name);

      if (result == null || result === "") {
        return nil;
      }

      return result;
    ;
        }, TMP_8.$$arity = 1);

        Opal.defn(self, '$[]=', TMP_9 = function(name, value) {
          var self = this;

          return self["native"].setProperty(name, value.$to_s(), "");
        }, TMP_9.$$arity = 2);

        Opal.defn(self, '$important?', TMP_10 = function(name) {
          var self = this;

          return self["native"].getPropertyPriority(name) == "important";
        }, TMP_10.$$arity = 1);

        Opal.defn(self, '$each', TMP_11 = function $$each() {
          var self = this, $iter = TMP_11.$$p, block = $iter || nil;

          TMP_11.$$p = null;
          if ((block !== nil)) {
            } else {
            return self.$enum_for("each")
          };
          
      for (var i = 0, length = self["native"].length; i < length; i++) {
        var name  = self["native"].item(i);

        Opal.yieldX(block, [name, self['$[]'](name)])
      }
    ;
          return self;
        }, TMP_11.$$arity = 0);

        self.$alias_native("length");

        self.$alias_native("to_s", "cssText");

        return (Opal.defn(self, '$method_missing', TMP_12 = function $$method_missing(name, value) {
          var $a, self = this;

          if (value == null) {
            value = nil;
          }
          if ((($a = name['$end_with?']("=")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self['$[]='](name['$[]']($range(0, -2, false)), value)
            } else {
            return self['$[]'](name)
          };
        }, TMP_12.$$arity = -2), nil) && 'method_missing';
      })($scope.base, null)
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/css/style_sheet"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$include', '$is_a?', '$to_n', '$alias_native', '$new', '$DOM', '$===', '$join', '$map', '$insert', '$length', '$find', '$log', '$==', '$id', '$rules', '$__send__', '$to_proc']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $CSS, self = $CSS = $module($base, 'CSS');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $StyleSheet(){};
        var self = $StyleSheet = $klass($base, $super, 'StyleSheet', $StyleSheet);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_6, TMP_7, TMP_8, TMP_10, TMP_12, TMP_13;

        def["native"] = nil;
        self.$include($scope.get('Native'));

        Opal.defn(self, '$initialize', TMP_1 = function $$initialize(what) {
          var $a, $b, $c, self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

          TMP_1.$$p = null;
          if ((($a = what['$is_a?']((($scope.get('DOM')).$$scope.get('Element')))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_1, false)), $a.$$p = null, $a).call($b, what.$to_n().sheet)
            } else {
            return ($a = ($c = self, Opal.find_super_dispatcher(self, 'initialize', TMP_1, false)), $a.$$p = null, $a).call($c, what)
          };
        }, TMP_1.$$arity = 1);

        self.$alias_native("disabled?", "disabled");

        self.$alias_native("href");

        self.$alias_native("title");

        self.$alias_native("type");

        Opal.defn(self, '$media', TMP_2 = function $$media() {
          var $a, self = this;

          if ((($a = self["native"].media != null) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('Media').$new(self["native"].media)
            } else {
            return nil
          };
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$owner', TMP_3 = function $$owner() {
          var self = this;

          return self.$DOM(self["native"].ownerNode);
        }, TMP_3.$$arity = 0);

        Opal.defn(self, '$parent', TMP_4 = function $$parent() {
          var $a, self = this;

          if ((($a = self["native"].parentStyleSheet != null) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('Sheet').$new(self["native"].parentStyleSheet)
            } else {
            return nil
          };
        }, TMP_4.$$arity = 0);

        Opal.defn(self, '$rules', TMP_6 = function $$rules() {
          var $a, $b, TMP_5, self = this;

          return ($a = ($b = (($scope.get('Native')).$$scope.get('Array'))).$new, $a.$$p = (TMP_5 = function(e){var self = TMP_5.$$s || this;
if (e == null) e = nil;
          return $scope.get('Rule').$new(e)}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5), $a).call($b, self["native"].cssRules);
        }, TMP_6.$$arity = 0);

        Opal.defn(self, '$delete', TMP_7 = function(index) {
          var self = this;

          return self["native"].deleteRule(index);
        }, TMP_7.$$arity = 1);

        Opal.defn(self, '$insert', TMP_8 = function $$insert(index, rule) {
          var self = this;

          return self["native"].insertRule(rule, index);
        }, TMP_8.$$arity = 2);

        Opal.defn(self, '$rule', TMP_10 = function $$rule(selector, body) {
          var $a, $b, TMP_9, self = this;

          if ((($a = $scope.get('String')['$==='](selector)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            selector = selector.$join(", ")
          };
          if ((($a = $scope.get('String')['$==='](body)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            body = ($a = ($b = body).$map, $a.$$p = (TMP_9 = function(name, value){var self = TMP_9.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
            return "" + (name) + ": " + (value) + ";"}, TMP_9.$$s = self, TMP_9.$$arity = 2, TMP_9), $a).call($b).$join("\n")
          };
          return self.$insert(self.$length(), "" + (selector) + " { " + (body) + " }");
        }, TMP_10.$$arity = 2);

        Opal.defn(self, '$[]', TMP_12 = function(id) {
          var $a, $b, TMP_11, self = this;

          return ($a = ($b = self.$rules()).$find, $a.$$p = (TMP_11 = function(r){var self = TMP_11.$$s || this;
if (r == null) r = nil;
          self.$log(r);
            return r.$id()['$=='](id);}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11), $a).call($b);
        }, TMP_12.$$arity = 1);

        Opal.defn(self, '$method_missing', TMP_13 = function $$method_missing($a_rest) {
          var $b, $c, self = this, args, $iter = TMP_13.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          TMP_13.$$p = null;
          return ($b = ($c = self.$rules()).$__send__, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args));
        }, TMP_13.$$arity = -1);

        return (function($base, $super) {
          function $Media(){};
          var self = $Media = $klass($base, $super, 'Media', $Media);

          var def = self.$$proto, $scope = self.$$scope, TMP_14, TMP_15;

          def["native"] = nil;
          self.$alias_native("text", "mediaText");

          self.$alias_native("to_s", "mediaText");

          Opal.defn(self, '$push', TMP_14 = function $$push(medium) {
            var self = this;

            self["native"].appendMedium(medium);
            return self;
          }, TMP_14.$$arity = 1);

          return (Opal.defn(self, '$delete', TMP_15 = function(medium) {
            var self = this;

            return self["native"].deleteMedium(medium);
          }, TMP_15.$$arity = 1), nil) && 'delete';
        })($scope.base, (($scope.get('Native')).$$scope.get('Array')));
      })($scope.base, null)
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/css/rule"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$include', '$==', '$[]', '$new', '$raise', '$alias_native']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $CSS, self = $CSS = $module($base, 'CSS');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Rule(){};
        var self = $Rule = $klass($base, $super, 'Rule', $Rule);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3;

        def["native"] = nil;
        self.$include($scope.get('Native'));

        Opal.cdecl($scope, 'STYLE_RULE', 1);

        Opal.cdecl($scope, 'CHARSET_RULE', 2);

        Opal.cdecl($scope, 'IMPORT_RULE', 3);

        Opal.cdecl($scope, 'MEDIA_RULE', 4);

        Opal.cdecl($scope, 'FONT_FACE_RULE', 5);

        Opal.cdecl($scope, 'PAGE_RULE', 6);

        Opal.cdecl($scope, 'KEYFRAMES_RULE', 7);

        Opal.cdecl($scope, 'KEYFRAME_RULE', 8);

        Opal.cdecl($scope, 'NAMESPACE_RULE', 10);

        Opal.cdecl($scope, 'COUNTER_STYLE_RULE', 11);

        Opal.cdecl($scope, 'SUPPORTS_RULE', 12);

        Opal.cdecl($scope, 'DOCUMENT_RULE', 13);

        Opal.cdecl($scope, 'FONT_FEATURE_VALUES_RULE', 14);

        Opal.cdecl($scope, 'VIEWPORT_RULE', 15);

        Opal.cdecl($scope, 'REGION_STYLE_RULE', 16);

        Opal.defs(self, '$new', TMP_1 = function(rule) {
          var $a, $b, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, klass = nil;
          if (self.classes == null) self.classes = nil;

          TMP_1.$$p = null;
          if (self['$==']($scope.get('Rule'))) {
            ((($a = self.classes) !== false && $a !== nil && $a != null) ? $a : self.classes = [nil, $scope.get('Style')]);
            if ((($a = klass = self.classes['$[]'](rule.type)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return klass.$new(rule)
              } else {
              return self.$raise($scope.get('ArgumentError'), "cannot instantiate a non derived Rule object")
            };
            } else {
            return ($a = ($b = self, Opal.find_super_dispatcher(self, 'new', TMP_1, false, $Rule)), $a.$$p = null, $a).call($b, rule)
          };
        }, TMP_1.$$arity = 1);

        self.$alias_native("text", "cssText");

        self.$alias_native("to_s", "cssText");

        Opal.defn(self, '$parent', TMP_2 = function $$parent() {
          var $a, self = this;

          if ((($a = self["native"].parentRule != null) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('Rule').$new(self["native"].parentRule)
            } else {
            return nil
          };
        }, TMP_2.$$arity = 0);

        return (Opal.defn(self, '$style_sheet', TMP_3 = function $$style_sheet() {
          var $a, self = this;

          if ((($a = self["native"].parentStyleSheet != null) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('StyleSheet').$new(self["native"].parentStyleSheet)
            } else {
            return nil
          };
        }, TMP_3.$$arity = 0), nil) && 'style_sheet';
      })($scope.base, null)
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/css/rule/style"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$alias_native', '$new', '$__send__', '$to_proc', '$declaration']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $CSS, self = $CSS = $module($base, 'CSS');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Rule(){};
        var self = $Rule = $klass($base, $super, 'Rule', $Rule);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Style(){};
          var self = $Style = $klass($base, $super, 'Style', $Style);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

          def["native"] = nil;
          self.$alias_native("selector", "selectorText");

          self.$alias_native("id", "selectorText");

          Opal.defn(self, '$declaration', TMP_1 = function $$declaration() {
            var self = this;

            return $scope.get('Declaration').$new(self["native"].style);
          }, TMP_1.$$arity = 0);

          return (Opal.defn(self, '$method_missing', TMP_2 = function $$method_missing($a_rest) {
            var $b, $c, self = this, args, $iter = TMP_2.$$p, block = $iter || nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            TMP_2.$$p = null;
            return ($b = ($c = self.$declaration()).$__send__, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args));
          }, TMP_2.$$arity = -1), nil) && 'method_missing';
        })($scope.base, $scope.get('Rule'))
      })($scope.base, null)
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/css"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$create_element', '$[]=', '$inner_text=', '$css', '$to_proc']);
  self.$require("browser/css/declaration");
  self.$require("browser/css/style_sheet");
  self.$require("browser/css/rule");
  self.$require("browser/css/rule/style");
  return (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    Opal.defn(self, '$CSS', TMP_1 = function $$CSS(text) {
      var $a, $b, $c, $d, self = this, $iter = TMP_1.$$p, block = $iter || nil, style = nil;
      if ($gvars.document == null) $gvars.document = nil;

      if (text == null) {
        text = nil;
      }
      TMP_1.$$p = null;
      style = $gvars.document.$create_element("style");
      style['$[]=']("type", "text/css");
      if (block !== false && block !== nil && block != null) {
        (($a = [($c = ($d = $scope.get('Paggio')).$css, $c.$$p = block.$to_proc(), $c).call($d)]), $b = style, $b['$inner_text='].apply($b, $a), $a[$a.length-1])
        } else {
        (($a = [text]), $b = style, $b['$inner_text='].apply($b, $a), $a[$a.length-1])
      };
      return style;
    }, TMP_1.$$arity = -1)
  })($scope.base);
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  self.$require("native");
  self.$require("paggio");
  self.$require("browser/version");
  self.$require("browser/utils");
  self.$require("browser/support");
  self.$require("browser/event");
  self.$require("browser/window");
  self.$require("browser/dom");
  return self.$require("browser/css");
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/interval"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$attr_reader', '$convert', '$nil?', '$stopped?', '$aborted?', '$raise', '$call', '$tap', '$to_proc', '$new', '$every', '$every!']);
  (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Interval(){};
      var self = $Interval = $klass($base, $super, 'Interval', $Interval);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7;

      def.id = def.aborted = def.window = def.block = def.every = nil;
      self.$attr_reader("every");

      Opal.defn(self, '$initialize', TMP_1 = function $$initialize(window, time) {
        var self = this, $iter = TMP_1.$$p, block = $iter || nil;

        TMP_1.$$p = null;
        self.window = $scope.get('Native').$convert(window);
        self.every = time;
        self.block = block;
        return self.aborted = false;
      }, TMP_1.$$arity = 2);

      Opal.defn(self, '$stopped?', TMP_2 = function() {
        var self = this;

        return self.id['$nil?']();
      }, TMP_2.$$arity = 0);

      Opal.defn(self, '$aborted?', TMP_3 = function() {
        var self = this;

        return self.aborted;
      }, TMP_3.$$arity = 0);

      Opal.defn(self, '$abort', TMP_4 = function $$abort() {
        var self = this;

        self.window.clearInterval(self.id);
        self.aborted = true;
        return self.id = nil;
      }, TMP_4.$$arity = 0);

      Opal.defn(self, '$stop', TMP_5 = function $$stop() {
        var $a, self = this;

        if ((($a = self['$stopped?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil};
        self.window.clearInterval(self.id);
        self.stopped = true;
        return self.id = nil;
      }, TMP_5.$$arity = 0);

      Opal.defn(self, '$start', TMP_6 = function $$start() {
        var $a, self = this;

        if ((($a = self['$aborted?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$raise("the interval has been aborted")};
        if ((($a = self['$stopped?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          return nil
        };
        return self.id = self.window.setInterval(self.block, self.every * 1000);
      }, TMP_6.$$arity = 0);

      return (Opal.defn(self, '$call', TMP_7 = function $$call() {
        var self = this;

        return self.block.$call();
      }, TMP_7.$$arity = 0), nil) && 'call';
    })($scope.base, null);

    (function($base, $super) {
      function $Window(){};
      var self = $Window = $klass($base, $super, 'Window', $Window);

      var def = self.$$proto, $scope = self.$$scope, TMP_8, TMP_9;

      def["native"] = nil;
      Opal.defn(self, '$every', TMP_8 = function $$every(time) {
        var $a, $b, $c, $d, self = this, $iter = TMP_8.$$p, block = $iter || nil;

        TMP_8.$$p = null;
        return ($a = ($b = ($c = ($d = $scope.get('Interval')).$new, $c.$$p = block.$to_proc(), $c).call($d, self["native"], time)).$tap, $a.$$p = "start".$to_proc(), $a).call($b);
      }, TMP_8.$$arity = 1);

      return (Opal.defn(self, '$every!', TMP_9 = function(time) {
        var $a, $b, self = this, $iter = TMP_9.$$p, block = $iter || nil;

        TMP_9.$$p = null;
        return ($a = ($b = $scope.get('Interval')).$new, $a.$$p = block.$to_proc(), $a).call($b, self["native"], time);
      }, TMP_9.$$arity = 1), nil) && 'every!';
    })($scope.base, null);
  })($scope.base);
  (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_10, TMP_11;

    Opal.defn(self, '$every', TMP_10 = function $$every(time) {
      var $a, $b, self = this, $iter = TMP_10.$$p, block = $iter || nil;
      if ($gvars.window == null) $gvars.window = nil;

      TMP_10.$$p = null;
      return ($a = ($b = $gvars.window).$every, $a.$$p = block.$to_proc(), $a).call($b, time);
    }, TMP_10.$$arity = 1);

    Opal.defn(self, '$every!', TMP_11 = function(time) {
      var $a, $b, self = this, $iter = TMP_11.$$p, block = $iter || nil;
      if ($gvars.window == null) $gvars.window = nil;

      TMP_11.$$p = null;
      return ($a = ($b = $gvars.window)['$every!'], $a.$$p = block.$to_proc(), $a).call($b, time);
    }, TMP_11.$$arity = 1);
  })($scope.base);
  return (function($base, $super) {
    function $Proc(){};
    var self = $Proc = $klass($base, $super, 'Proc', $Proc);

    var def = self.$$proto, $scope = self.$$scope, TMP_12, TMP_13;

    Opal.defn(self, '$every', TMP_12 = function $$every(time) {
      var $a, $b, self = this;
      if ($gvars.window == null) $gvars.window = nil;

      return ($a = ($b = $gvars.window).$every, $a.$$p = self.$to_proc(), $a).call($b, time);
    }, TMP_12.$$arity = 1);

    return (Opal.defn(self, '$every!', TMP_13 = function(time) {
      var $a, $b, self = this;
      if ($gvars.window == null) $gvars.window = nil;

      return ($a = ($b = $gvars.window)['$every!'], $a.$$p = self.$to_proc(), $a).call($b, time);
    }, TMP_13.$$arity = 1), nil) && 'every!';
  })($scope.base, null);
};
/* Generated by Opal 0.10.3 */
Opal.modules["browser/delay"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$attr_reader', '$convert', '$to_n', '$tap', '$to_proc', '$new', '$after', '$after!']);
  (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Delay(){};
      var self = $Delay = $klass($base, $super, 'Delay', $Delay);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3;

      def.window = def.id = def.block = def.after = nil;
      self.$attr_reader("after");

      Opal.defn(self, '$initialize', TMP_1 = function $$initialize(window, time) {
        var self = this, $iter = TMP_1.$$p, block = $iter || nil;

        TMP_1.$$p = null;
        self.window = $scope.get('Native').$convert(window);
        self.after = time;
        return self.block = block;
      }, TMP_1.$$arity = 2);

      Opal.defn(self, '$abort', TMP_2 = function $$abort() {
        var self = this;

        return self.window.clearTimeout(self.id);
      }, TMP_2.$$arity = 0);

      return (Opal.defn(self, '$start', TMP_3 = function $$start() {
        var self = this;

        return self.id = self.window.setTimeout(self.block.$to_n(), self.after * 1000);
      }, TMP_3.$$arity = 0), nil) && 'start';
    })($scope.base, null);

    (function($base, $super) {
      function $Window(){};
      var self = $Window = $klass($base, $super, 'Window', $Window);

      var def = self.$$proto, $scope = self.$$scope, TMP_4, TMP_5;

      def["native"] = nil;
      Opal.defn(self, '$after', TMP_4 = function $$after(time) {
        var $a, $b, $c, $d, self = this, $iter = TMP_4.$$p, block = $iter || nil;

        TMP_4.$$p = null;
        return ($a = ($b = ($c = ($d = $scope.get('Delay')).$new, $c.$$p = block.$to_proc(), $c).call($d, self["native"], time)).$tap, $a.$$p = "start".$to_proc(), $a).call($b);
      }, TMP_4.$$arity = 1);

      return (Opal.defn(self, '$after!', TMP_5 = function(time) {
        var $a, $b, self = this, $iter = TMP_5.$$p, block = $iter || nil;

        TMP_5.$$p = null;
        return ($a = ($b = $scope.get('Delay')).$new, $a.$$p = block.$to_proc(), $a).call($b, self["native"], time);
      }, TMP_5.$$arity = 1), nil) && 'after!';
    })($scope.base, null);
  })($scope.base);
  (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_6, TMP_7;

    Opal.defn(self, '$after', TMP_6 = function $$after(time) {
      var $a, $b, self = this, $iter = TMP_6.$$p, block = $iter || nil;
      if ($gvars.window == null) $gvars.window = nil;

      TMP_6.$$p = null;
      return ($a = ($b = $gvars.window).$after, $a.$$p = block.$to_proc(), $a).call($b, time);
    }, TMP_6.$$arity = 1);

    Opal.defn(self, '$after!', TMP_7 = function(time) {
      var $a, $b, self = this, $iter = TMP_7.$$p, block = $iter || nil;
      if ($gvars.window == null) $gvars.window = nil;

      TMP_7.$$p = null;
      return ($a = ($b = $gvars.window)['$after!'], $a.$$p = block.$to_proc(), $a).call($b, time);
    }, TMP_7.$$arity = 1);
  })($scope.base);
  return (function($base, $super) {
    function $Proc(){};
    var self = $Proc = $klass($base, $super, 'Proc', $Proc);

    var def = self.$$proto, $scope = self.$$scope, TMP_8, TMP_9;

    Opal.defn(self, '$after', TMP_8 = function $$after(time) {
      var $a, $b, self = this;
      if ($gvars.window == null) $gvars.window = nil;

      return ($a = ($b = $gvars.window).$after, $a.$$p = self.$to_proc(), $a).call($b, time);
    }, TMP_8.$$arity = 1);

    return (Opal.defn(self, '$after!', TMP_9 = function(time) {
      var $a, $b, self = this;
      if ($gvars.window == null) $gvars.window = nil;

      return ($a = ($b = $gvars.window)['$after!'], $a.$$p = self.$to_proc(), $a).call($b, time);
    }, TMP_9.$$arity = 1), nil) && 'after!';
  })($scope.base, null);
};
/* Generated by Opal 0.10.3 */
Opal.modules["promise_extras"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$then', '$build_routes', '$to_proc']);
  return (function($base, $super) {
    function $Promise(){};
    var self = $Promise = $klass($base, $super, 'Promise', $Promise);

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    return (Opal.defn(self, '$then_build_routes', TMP_1 = function $$then_build_routes() {
      var $a, $b, TMP_2, self = this, $iter = TMP_1.$$p, block = $iter || nil;

      TMP_1.$$p = null;
      return ($a = ($b = self).$then, $a.$$p = (TMP_2 = function($c_rest){var self = TMP_2.$$s || this, args, $d, $e;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
      return ($d = ($e = (((($scope.get('React')).$$scope.get('Router'))).$$scope.get('DSL'))).$build_routes, $d.$$p = block.$to_proc(), $d).apply($e, Opal.to_a(args))}, TMP_2.$$s = self, TMP_2.$$arity = -1, TMP_2), $a).call($b);
    }, TMP_1.$$arity = 0), nil) && 'then_build_routes'
  })($scope.base, null)
};
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("react")):"function"==typeof define&&define.amd?define(["react"],t):"object"==typeof exports?exports.ReactRouter=t(require("react")):e.ReactRouter=t(e.React)}(this,function(e){return function(e){function t(r){if(n[r])return n[r].exports;var o=n[r]={exports:{},id:r,loaded:!1};return e[r].call(o.exports,o,o.exports,t),o.loaded=!0,o.exports}var n={};return t.m=e,t.c=n,t.p="",t(0)}([function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}t.__esModule=!0,t.createMemoryHistory=t.hashHistory=t.browserHistory=t.applyRouterMiddleware=t.formatPattern=t.useRouterHistory=t.match=t.routerShape=t.locationShape=t.PropTypes=t.RoutingContext=t.RouterContext=t.createRoutes=t.useRoutes=t.RouteContext=t.Lifecycle=t.History=t.Route=t.Redirect=t.IndexRoute=t.IndexRedirect=t.withRouter=t.IndexLink=t.Link=t.Router=void 0;var o=n(5);Object.defineProperty(t,"createRoutes",{enumerable:!0,get:function(){return o.createRoutes}});var u=n(15);Object.defineProperty(t,"locationShape",{enumerable:!0,get:function(){return u.locationShape}}),Object.defineProperty(t,"routerShape",{enumerable:!0,get:function(){return u.routerShape}});var a=n(8);Object.defineProperty(t,"formatPattern",{enumerable:!0,get:function(){return a.formatPattern}});var i=n(38),s=r(i),c=n(20),f=r(c),l=n(32),d=r(l),p=n(51),h=r(p),v=n(33),y=r(v),m=n(34),g=r(m),_=n(21),R=r(_),O=n(36),P=r(O),b=n(31),x=r(b),w=n(35),M=r(w),j=n(37),E=r(j),S=n(50),A=r(S),C=n(10),k=r(C),T=n(39),H=r(T),q=r(u),L=n(48),U=r(L),N=n(25),B=r(N),I=n(41),D=r(I),W=n(42),F=r(W),K=n(46),Q=r(K),V=n(23),$=r(V);t.Router=s["default"],t.Link=f["default"],t.IndexLink=d["default"],t.withRouter=h["default"],t.IndexRedirect=y["default"],t.IndexRoute=g["default"],t.Redirect=R["default"],t.Route=P["default"],t.History=x["default"],t.Lifecycle=M["default"],t.RouteContext=E["default"],t.useRoutes=A["default"],t.RouterContext=k["default"],t.RoutingContext=H["default"],t.PropTypes=q["default"],t.match=U["default"],t.useRouterHistory=B["default"],t.applyRouterMiddleware=D["default"],t.browserHistory=F["default"],t.hashHistory=Q["default"],t.createMemoryHistory=$["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(-1!==t.indexOf("deprecated")){if(s[t])return;s[t]=!0}t="[react-router] "+t;for(var n=arguments.length,r=Array(n>2?n-2:0),o=2;n>o;o++)r[o-2]=arguments[o];i["default"].apply(void 0,[e,t].concat(r))}function u(){s={}}t.__esModule=!0,t["default"]=o,t._resetWarned=u;var a=n(4),i=r(a),s={}},function(t,n){t.exports=e},function(e,t,n){"use strict";var r=function(e,t,n,r,o,u,a,i){if(!e){var s;if(void 0===t)s=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,r,o,u,a,i],f=0;s=new Error(t.replace(/%s/g,function(){return c[f++]})),s.name="Invariant Violation"}throw s.framesToPop=1,s}};e.exports=r},function(e,t,n){"use strict";var r=function(){};e.exports=r},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e){return null==e||p["default"].isValidElement(e)}function u(e){return o(e)||Array.isArray(e)&&e.every(o)}function a(e,t,n){e=e||"UnknownComponent";for(var r in t)if(Object.prototype.hasOwnProperty.call(t,r)){var o=t[r](n,r,e);o instanceof Error}}function i(e,t){return l({},e,t)}function s(e){var t=e.type,n=i(t.defaultProps,e.props);if(t.propTypes&&a(t.displayName||t.name,t.propTypes,n),n.children){var r=c(n.children,n);r.length&&(n.childRoutes=r),delete n.children}return n}function c(e,t){var n=[];return p["default"].Children.forEach(e,function(e){if(p["default"].isValidElement(e))if(e.type.createRouteFromReactElement){var r=e.type.createRouteFromReactElement(e,t);r&&n.push(r)}else n.push(s(e))}),n}function f(e){return u(e)?e=c(e):e&&!Array.isArray(e)&&(e=[e]),e}t.__esModule=!0;var l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};t.isReactChildren=u,t.createRouteFromReactElement=s,t.createRoutesFromReactChildren=c,t.createRoutes=f;var d=n(2),p=r(d),h=n(1);r(h)},function(e,t,n){"use strict";function r(e,t,n){return e[t]?new Error("<"+n+'> should not have a "'+t+'" prop'):void 0}t.__esModule=!0,t.routes=t.route=t.components=t.component=t.history=void 0,t.falsy=r;var o=n(2),u=o.PropTypes.func,a=o.PropTypes.object,i=o.PropTypes.arrayOf,s=o.PropTypes.oneOfType,c=o.PropTypes.element,f=o.PropTypes.shape,l=o.PropTypes.string,d=(t.history=f({listen:u.isRequired,push:u.isRequired,replace:u.isRequired,go:u.isRequired,goBack:u.isRequired,goForward:u.isRequired}),t.component=s([u,l])),p=(t.components=s([d,a]),t.route=s([a,c]));t.routes=s([p,i(p)])},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e){var t=e.match(/^https?:\/\/[^\/]*/);return null==t?e:e.substring(t[0].length)}function u(e){var t=o(e),n="",r="",u=t.indexOf("#");-1!==u&&(r=t.substring(u),t=t.substring(0,u));var a=t.indexOf("?");return-1!==a&&(n=t.substring(a),t=t.substring(0,a)),""===t&&(t="/"),{pathname:t,search:n,hash:r}}t.__esModule=!0,t.extractPath=o,t.parsePath=u;var a=n(4);r(a)},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e){return e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function u(e){for(var t="",n=[],r=[],u=void 0,a=0,i=/:([a-zA-Z_$][a-zA-Z0-9_$]*)|\*\*|\*|\(|\)/g;u=i.exec(e);)u.index!==a&&(r.push(e.slice(a,u.index)),t+=o(e.slice(a,u.index))),u[1]?(t+="([^/]+)",n.push(u[1])):"**"===u[0]?(t+="(.*)",n.push("splat")):"*"===u[0]?(t+="(.*?)",n.push("splat")):"("===u[0]?t+="(?:":")"===u[0]&&(t+=")?"),r.push(u[0]),a=i.lastIndex;return a!==e.length&&(r.push(e.slice(a,e.length)),t+=o(e.slice(a,e.length))),{pattern:e,regexpSource:t,paramNames:n,tokens:r}}function a(e){return e in p||(p[e]=u(e)),p[e]}function i(e,t){"/"!==e.charAt(0)&&(e="/"+e);var n=a(e),r=n.regexpSource,o=n.paramNames,u=n.tokens;"/"!==e.charAt(e.length-1)&&(r+="/?"),"*"===u[u.length-1]&&(r+="$");var i=t.match(new RegExp("^"+r,"i"));if(null==i)return null;var s=i[0],c=t.substr(s.length);if(c){if("/"!==s.charAt(s.length-1))return null;c="/"+c}return{remainingPathname:c,paramNames:o,paramValues:i.slice(1).map(function(e){return e&&decodeURIComponent(e)})}}function s(e){return a(e).paramNames}function c(e,t){var n=i(e,t);if(!n)return null;var r=n.paramNames,o=n.paramValues,u={};return r.forEach(function(e,t){u[e]=o[t]}),u}function f(e,t){t=t||{};for(var n=a(e),r=n.tokens,o=0,u="",i=0,s=void 0,c=void 0,f=void 0,l=0,p=r.length;p>l;++l)s=r[l],"*"===s||"**"===s?(f=Array.isArray(t.splat)?t.splat[i++]:t.splat,null!=f||o>0?void 0:(0,d["default"])(!1),null!=f&&(u+=encodeURI(f))):"("===s?o+=1:")"===s?o-=1:":"===s.charAt(0)?(c=s.substring(1),f=t[c],null!=f||o>0?void 0:(0,d["default"])(!1),null!=f&&(u+=encodeURIComponent(f))):u+=s;return u.replace(/\/+/g,"/")}t.__esModule=!0,t.compilePattern=a,t.matchPattern=i,t.getParamNames=s,t.getParams=c,t.formatPattern=f;var l=n(3),d=r(l),p={}},function(e,t){"use strict";t.__esModule=!0;var n="PUSH";t.PUSH=n;var r="REPLACE";t.REPLACE=r;var o="POP";t.POP=o,t["default"]={PUSH:n,REPLACE:r,POP:o}},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}t.__esModule=!0;var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e},u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=n(3),i=r(a),s=n(2),c=r(s),f=n(11),l=(r(f),n(45)),d=r(l),p=n(5),h=n(1),v=(r(h),c["default"].PropTypes),y=v.array,m=v.func,g=v.object,_=c["default"].createClass({displayName:"RouterContext",propTypes:{history:g,router:g.isRequired,location:g.isRequired,routes:y.isRequired,params:g.isRequired,components:y.isRequired,createElement:m.isRequired},getDefaultProps:function(){return{createElement:c["default"].createElement}},childContextTypes:{history:g,location:g.isRequired,router:g.isRequired},getChildContext:function(){var e=this.props,t=e.router,n=e.history,r=e.location;return t||(t=u({},n,{setRouteLeaveHook:n.listenBeforeLeavingRoute}),delete t.listenBeforeLeavingRoute),{history:n,location:r,router:t}},createElement:function(e,t){return null==e?null:this.props.createElement(e,t)},render:function(){var e=this,t=this.props,n=t.history,r=t.location,a=t.routes,s=t.params,f=t.components,l=null;return f&&(l=f.reduceRight(function(t,i,c){if(null==i)return t;var f=a[c],l=(0,d["default"])(f,s),h={history:n,location:r,params:s,route:f,routeParams:l,routes:a};if((0,p.isReactChildren)(t))h.children=t;else if(t)for(var v in t)Object.prototype.hasOwnProperty.call(t,v)&&(h[v]=t[v]);if("object"===("undefined"==typeof i?"undefined":o(i))){var y={};for(var m in i)Object.prototype.hasOwnProperty.call(i,m)&&(y[m]=e.createElement(i[m],u({key:m},h)));return y}return e.createElement(i,h)},l)),null===l||l===!1||c["default"].isValidElement(l)?void 0:(0,i["default"])(!1),l}});t["default"]=_,e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}t.__esModule=!0,t.canUseMembrane=void 0;var o=n(1),u=(r(o),t.canUseMembrane=!1,function(e){return e});t["default"]=u},function(e,t){"use strict";t.__esModule=!0;var n=!("undefined"==typeof window||!window.document||!window.document.createElement);t.canUseDOM=n},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e){return s.stringify(e).replace(/%20/g,"+")}function u(e){return function(){function t(e){if(null==e.query){var t=e.search;e.query=P(t.substring(1)),e[h]={search:t,searchBase:""}}return e}function n(e,t){var n,r=e[h],o=t?O(t):"";if(!r&&!o)return e;"string"==typeof e&&(e=l.parsePath(e));var u=void 0;u=r&&e.search===r.search?r.searchBase:e.search||"";var i=u;return o&&(i+=(i?"&":"?")+o),a({},e,(n={search:i},n[h]={search:i,searchBase:u},n))}function r(e){return R.listenBefore(function(n,r){f["default"](e,t(n),r)})}function u(e){return R.listen(function(n){e(t(n))})}function i(e){R.push(n(e,e.query))}function s(e){R.replace(n(e,e.query))}function c(e,t){return R.createPath(n(e,t||e.query))}function d(e,t){return R.createHref(n(e,t||e.query))}function y(e){for(var r=arguments.length,o=Array(r>1?r-1:0),u=1;r>u;u++)o[u-1]=arguments[u];var a=R.createLocation.apply(R,[n(e,e.query)].concat(o));return e.query&&(a.query=e.query),t(a)}function m(e,t,n){"string"==typeof t&&(t=l.parsePath(t)),i(a({state:e},t,{query:n}))}function g(e,t,n){"string"==typeof t&&(t=l.parsePath(t)),s(a({state:e},t,{query:n}))}var _=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],R=e(_),O=_.stringifyQuery,P=_.parseQueryString;return"function"!=typeof O&&(O=o),"function"!=typeof P&&(P=v),a({},R,{listenBefore:r,listen:u,push:i,replace:s,createPath:c,createHref:d,createLocation:y,pushState:p["default"](m,"pushState is deprecated; use push instead"),replaceState:p["default"](g,"replaceState is deprecated; use replace instead")})}}t.__esModule=!0;var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=n(4),s=(r(i),n(60)),c=n(19),f=r(c),l=n(7),d=n(18),p=r(d),h="$searchBase",v=s.parse;t["default"]=u,e.exports=t["default"]},function(e,t){"use strict";function n(e,t,n){function r(){return a=!0,i?void(c=[].concat(Array.prototype.slice.call(arguments))):void n.apply(this,arguments)}function o(){if(!a&&(s=!0,!i)){for(i=!0;!a&&e>u&&s;)s=!1,t.call(this,u++,o,r);return i=!1,a?void n.apply(this,c):void(u>=e&&s&&(a=!0,n()))}}var u=0,a=!1,i=!1,s=!1,c=void 0;o()}function r(e,t,n){function r(e,t,r){a||(t?(a=!0,n(t)):(u[e]=r,a=++i===o,a&&n(null,u)))}var o=e.length,u=[];if(0===o)return n(null,u);var a=!1,i=0;e.forEach(function(e,n){t(e,n,function(e,t){r(n,e,t)})})}t.__esModule=!0,t.loopAsync=n,t.mapAsync=r},function(e,t,n){"use strict";function r(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t["default"]=e,t}function o(e){return e&&e.__esModule?e:{"default":e}}t.__esModule=!0,t.router=t.routes=t.route=t.components=t.component=t.location=t.history=t.falsy=t.locationShape=t.routerShape=void 0;var u=n(2),a=n(11),i=(o(a),n(6)),s=r(i),c=n(1),f=(o(c),u.PropTypes.func),l=u.PropTypes.object,d=u.PropTypes.shape,p=u.PropTypes.string,h=t.routerShape=d({push:f.isRequired,replace:f.isRequired,go:f.isRequired,goBack:f.isRequired,goForward:f.isRequired,setRouteLeaveHook:f.isRequired,isActive:f.isRequired}),v=t.locationShape=d({pathname:p.isRequired,search:p.isRequired,state:l,action:p.isRequired,key:p}),y=t.falsy=s.falsy,m=t.history=s.history,g=t.location=v,_=t.component=s.component,R=t.components=s.components,O=t.route=s.route,P=(t.routes=s.routes,t.router=h),b={falsy:y,history:m,location:g,component:_,components:R,route:O,router:P};t["default"]=b},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e){for(var t in e)if(Object.prototype.hasOwnProperty.call(e,t))return!0;return!1}function u(e,t){function n(t){var n=arguments.length<=1||void 0===arguments[1]?!1:arguments[1],r=arguments.length<=2||void 0===arguments[2]?null:arguments[2],o=void 0;return n&&n!==!0||null!==r?(t={pathname:t,query:n},o=r||!1):(t=e.createLocation(t),o=n),(0,p["default"])(t,o,O.location,O.routes,O.params)}function r(t){return e.createLocation(t,s.REPLACE)}function u(e,n){P&&P.location===e?i(P,n):(0,m["default"])(t,e,function(t,r){t?n(t):r?i(a({},r,{location:e}),n):n()})}function i(e,t){function n(n,r){return n||r?o(n,r):void(0,v["default"])(e,function(n,r){n?t(n):t(null,null,O=a({},e,{components:r}))})}function o(e,n){e?t(e):t(null,r(n))}var u=(0,f["default"])(O,e),i=u.leaveRoutes,s=u.changeRoutes,c=u.enterRoutes;(0,l.runLeaveHooks)(i),i.filter(function(e){return-1===c.indexOf(e)}).forEach(g),(0,l.runChangeHooks)(s,O,e,function(t,r){return t||r?o(t,r):void(0,l.runEnterHooks)(c,e,n)})}function c(e){var t=arguments.length<=1||void 0===arguments[1]?!0:arguments[1];return e.__id__||t&&(e.__id__=b++)}function d(e){return e.reduce(function(e,t){return e.push.apply(e,x[c(t)]),e},[])}function h(e,n){(0,m["default"])(t,e,function(t,r){if(null==r)return void n();P=a({},r,{location:e});for(var o=d((0,f["default"])(O,P).leaveRoutes),u=void 0,i=0,s=o.length;null==u&&s>i;++i)u=o[i](e);n(u)})}function y(){if(O.routes){for(var e=d(O.routes),t=void 0,n=0,r=e.length;"string"!=typeof t&&r>n;++n)t=e[n]();return t}}function g(e){var t=c(e,!1);t&&(delete x[t],o(x)||(w&&(w(),w=null),M&&(M(),M=null)))}function _(t,n){var r=c(t),u=x[r];if(u)-1===u.indexOf(n)&&u.push(n);else{var a=!o(x);x[r]=[n],a&&(w=e.listenBefore(h),e.listenBeforeUnload&&(M=e.listenBeforeUnload(y)))}return function(){var e=x[r];if(e){var o=e.filter(function(e){return e!==n});0===o.length?g(t):x[r]=o}}}function R(t){return e.listen(function(n){O.location===n?t(null,O):u(n,function(n,r,o){n?t(n):r?e.transitionTo(r):o&&t(null,o)})})}var O={},P=void 0,b=1,x=Object.create(null),w=void 0,M=void 0;return{isActive:n,match:u,listenBeforeLeavingRoute:_,listen:R}}t.__esModule=!0;var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};t["default"]=u;var i=n(1),s=(r(i),n(9)),c=n(43),f=r(c),l=n(40),d=n(47),p=r(d),h=n(44),v=r(h),y=n(49),m=r(y);e.exports=t["default"]},function(e,t){"use strict";function n(e,t,n){e.addEventListener?e.addEventListener(t,n,!1):e.attachEvent("on"+t,n)}function r(e,t,n){e.removeEventListener?e.removeEventListener(t,n,!1):e.detachEvent("on"+t,n)}function o(){return window.location.href.split("#")[1]||""}function u(e){window.location.replace(window.location.pathname+window.location.search+"#"+e)}function a(){return window.location.pathname+window.location.search+window.location.hash}function i(e){e&&window.history.go(e)}function s(e,t){t(window.confirm(e))}function c(){var e=navigator.userAgent;return-1===e.indexOf("Android 2.")&&-1===e.indexOf("Android 4.0")||-1===e.indexOf("Mobile Safari")||-1!==e.indexOf("Chrome")||-1!==e.indexOf("Windows Phone")?window.history&&"pushState"in window.history:!1}function f(){var e=navigator.userAgent;return-1===e.indexOf("Firefox")}t.__esModule=!0,t.addEventListener=n,t.removeEventListener=r,t.getHashPath=o,t.replaceHashPath=u,t.getWindowPath=a,t.go=i,t.getUserConfirmation=s,t.supportsHistory=c,t.supportsGoWithoutReloadUsingHash=f},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){return function(){return e.apply(this,arguments)}}t.__esModule=!0;var u=n(4);r(u);t["default"]=o,e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t,n){var r=e(t,n);e.length<2&&n(r)}t.__esModule=!0;var u=n(4);r(u);t["default"]=o,e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}function u(e){return 0===e.button}function a(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}function i(e){for(var t in e)if(Object.prototype.hasOwnProperty.call(e,t))return!1;return!0}function s(e,t){var n=t.query,r=t.hash,o=t.state;return n||r||o?{pathname:e,query:n,hash:r,state:o}:e}t.__esModule=!0;var c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},f=n(2),l=r(f),d=n(1),p=(r(d),n(15)),h=l["default"].PropTypes,v=h.bool,y=h.object,m=h.string,g=h.func,_=h.oneOfType,R=l["default"].createClass({displayName:"Link",contextTypes:{router:p.routerShape},propTypes:{to:_([m,y]).isRequired,query:y,hash:m,state:y,activeStyle:y,activeClassName:m,onlyActiveOnIndex:v.isRequired,onClick:g,target:m},getDefaultProps:function(){return{onlyActiveOnIndex:!1,style:{}}},handleClick:function(e){var t=!0;if(this.props.onClick&&this.props.onClick(e),!a(e)&&u(e)){if(e.defaultPrevented===!0&&(t=!1),this.props.target)return void(t||e.preventDefault());if(e.preventDefault(),t){var n=this.props,r=n.to,o=n.query,i=n.hash,c=n.state,f=s(r,{query:o,hash:i,state:c});this.context.router.push(f)}}},render:function(){var e=this.props,t=e.to,n=e.query,r=e.hash,u=e.state,a=e.activeClassName,f=e.activeStyle,d=e.onlyActiveOnIndex,p=o(e,["to","query","hash","state","activeClassName","activeStyle","onlyActiveOnIndex"]),h=this.context.router;if(h){var v=s(t,{query:n,hash:r,state:u});p.href=h.createHref(v),(a||null!=f&&!i(f))&&h.isActive(v,d)&&(a&&(p.className?p.className+=" "+a:p.className=a),f&&(p.style=c({},p.style,f)))}return l["default"].createElement("a",c({},p,{onClick:this.handleClick}))}});t["default"]=R,e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}t.__esModule=!0;var o=n(2),u=r(o),a=n(3),i=r(a),s=n(5),c=n(8),f=n(6),l=u["default"].PropTypes,d=l.string,p=l.object,h=u["default"].createClass({displayName:"Redirect",statics:{createRouteFromReactElement:function(e){var t=(0,s.createRouteFromReactElement)(e);return t.from&&(t.path=t.from),t.onEnter=function(e,n){var r=e.location,o=e.params,u=void 0;if("/"===t.to.charAt(0))u=(0,c.formatPattern)(t.to,o);else if(t.to){var a=e.routes.indexOf(t),i=h.getRoutePattern(e.routes,a-1),s=i.replace(/\/*$/,"/")+t.to;u=(0,c.formatPattern)(s,o)}else u=r.pathname;n({pathname:u,query:t.query||r.query,state:t.state||r.state})},t},getRoutePattern:function(e,t){for(var n="",r=t;r>=0;r--){var o=e[r],u=o.path||"";if(n=u.replace(/\/*$/,"/")+n,0===u.indexOf("/"))break}return"/"+n}},propTypes:{path:d,from:d,to:d.isRequired,query:p,state:p,onEnter:f.falsy,children:f.falsy},render:function(){(0,i["default"])(!1)}});t["default"]=h,e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){return a({},e,{setRouteLeaveHook:t.listenBeforeLeavingRoute,isActive:t.isActive})}function u(e,t){return e=a({},e,t)}t.__esModule=!0;var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};t.createRouterObject=o,t.createRoutingHistory=u;var i=n(11);r(i)},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e){var t=(0,f["default"])(e),n=function(){return t},r=(0,a["default"])((0,s["default"])(n))(e);return r.__v2_compatible__=!0,r}t.__esModule=!0,t["default"]=o;var u=n(13),a=r(u),i=n(30),s=r(i),c=n(58),f=r(c);e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}t.__esModule=!0,t["default"]=function(e){var t=void 0;return a&&(t=(0,u["default"])(e)()),t};var o=n(25),u=r(o),a=!("undefined"==typeof window||!window.document||!window.document.createElement);e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e){return function(t){var n=(0,a["default"])((0,s["default"])(e))(t);return n.__v2_compatible__=!0,n}}t.__esModule=!0,t["default"]=o;var u=n(13),a=r(u),i=n(30),s=r(i);e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e){return s+e}function u(e,t){try{null==t?window.sessionStorage.removeItem(o(e)):window.sessionStorage.setItem(o(e),JSON.stringify(t))}catch(n){if(n.name===f)return;if(c.indexOf(n.name)>=0&&0===window.sessionStorage.length)return;throw n}}function a(e){var t=void 0;try{t=window.sessionStorage.getItem(o(e))}catch(n){if(n.name===f)return null}if(t)try{return JSON.parse(t)}catch(n){}return null}t.__esModule=!0,t.saveState=u,t.readState=a;var i=n(4),s=(r(i),"@@History/"),c=["QuotaExceededError","QUOTA_EXCEEDED_ERR"],f="SecurityError"},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e){function t(e){return s.canUseDOM?void 0:i["default"](!1),n.listen(e)}var n=l["default"](u({getUserConfirmation:c.getUserConfirmation},e,{go:c.go}));return u({},n,{listen:t})}t.__esModule=!0;var u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=n(3),i=r(a),s=n(12),c=n(17),f=n(29),l=r(f);t["default"]=o,e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e){return"string"==typeof e&&"/"===e.charAt(0)}function u(){var e=m.getHashPath();return o(e)?!0:(m.replaceHashPath("/"+e),!1)}function a(e,t,n){return e+(-1===e.indexOf("?")?"?":"&")+(t+"="+n)}function i(e,t){return e.replace(new RegExp("[?&]?"+t+"=[a-zA-Z0-9]+"),"")}function s(e,t){var n=e.match(new RegExp("\\?.*?\\b"+t+"=(.+?)\\b"));return n&&n[1]}function c(){function e(){var e=m.getHashPath(),t=void 0,n=void 0;j?(t=s(e,j),e=i(e,j),t?n=g.readState(t):(n=null,t=E.createKey(),m.replaceHashPath(a(e,j,t)))):t=n=null;var r=v.parsePath(e);return E.createLocation(f({},r,{state:n}),void 0,t)}function t(t){function n(){u()&&r(e())}var r=t.transitionTo;return u(),m.addEventListener(window,"hashchange",n),function(){m.removeEventListener(window,"hashchange",n)}}function n(e){var t=e.basename,n=e.pathname,r=e.search,o=e.state,u=e.action,i=e.key;if(u!==h.POP){var s=(t||"")+n+r;j?(s=a(s,j,i),g.saveState(i,o)):e.key=e.state=null;var c=m.getHashPath();u===h.PUSH?c!==s&&(window.location.hash=s):c!==s&&m.replaceHashPath(s)}}function r(e){1===++S&&(A=t(E));var n=E.listenBefore(e);return function(){n(),0===--S&&A()}}function o(e){1===++S&&(A=t(E));var n=E.listen(e);return function(){n(),0===--S&&A()}}function c(e){E.push(e)}function l(e){E.replace(e)}function d(e){E.go(e)}function _(e){return"#"+E.createHref(e)}function P(e){1===++S&&(A=t(E)),E.registerTransitionHook(e)}function b(e){E.unregisterTransitionHook(e),0===--S&&A()}function x(e,t){E.pushState(e,t)}function w(e,t){E.replaceState(e,t)}var M=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];y.canUseDOM?void 0:p["default"](!1);var j=M.queryKey;(void 0===j||j)&&(j="string"==typeof j?j:O);var E=R["default"](f({},M,{getCurrentLocation:e,finishTransition:n,saveState:g.saveState})),S=0,A=void 0;m.supportsGoWithoutReloadUsingHash();return f({},E,{listenBefore:r,listen:o,push:c,replace:l,go:d,createHref:_,registerTransitionHook:P,unregisterTransitionHook:b,pushState:x,replaceState:w})}t.__esModule=!0;var f=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},l=n(4),d=(r(l),n(3)),p=r(d),h=n(9),v=n(7),y=n(12),m=n(17),g=n(26),_=n(27),R=r(_),O="_k";t["default"]=c,e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e){return Math.random().toString(36).substr(2,e)}function u(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.key===t.key&&f["default"](e.state,t.state)}function a(){function e(e){return N.push(e),function(){N=N.filter(function(t){return t!==e})}}function t(){return W&&W.action===p.POP?B.indexOf(W.key):D?B.indexOf(D.key):-1}function n(e){var n=t();D=e,D.action===p.PUSH?B=[].concat(B.slice(0,n+1),[D.key]):D.action===p.REPLACE&&(B[n]=D.key),I.forEach(function(e){e(D)})}function r(e){if(I.push(e),D)e(D);else{var t=k();B=[t.key],n(t)}return function(){I=I.filter(function(t){return t!==e})}}function a(e,t){d.loopAsync(N.length,function(t,n,r){m["default"](N[t],e,function(e){null!=e?r(e):n()})},function(e){L&&"string"==typeof e?L(e,function(e){t(e!==!1)}):t(e!==!1)})}function s(e){D&&u(D,e)||(W=e,a(e,function(t){if(W===e)if(t){if(e.action===p.PUSH){var r=P(D),o=P(e);o===r&&f["default"](D.state,e.state)&&(e.action=p.REPLACE)}T(e)!==!1&&n(e)}else if(D&&e.action===p.POP){var u=B.indexOf(D.key),a=B.indexOf(e.key);-1!==u&&-1!==a&&q(u-a)}}))}function c(e){s(x(e,p.PUSH,O()))}function h(e){s(x(e,p.REPLACE,O()))}function y(){q(-1)}function g(){q(1)}function O(){return o(U)}function P(e){if(null==e||"string"==typeof e)return e;var t=e.pathname,n=e.search,r=e.hash,o=t;return n&&(o+=n),r&&(o+=r),o}function b(e){return P(e)}function x(e,t){var n=arguments.length<=2||void 0===arguments[2]?O():arguments[2];return"object"==typeof t&&("string"==typeof e&&(e=l.parsePath(e)),e=i({},e,{state:t}),t=n,n=arguments[3]||O()),v["default"](e,t,n)}function w(e){D?(M(D,e),n(D)):M(k(),e)}function M(e,t){e.state=i({},e.state,t),H(e.key,e.state)}function j(e){-1===N.indexOf(e)&&N.push(e)}function E(e){N=N.filter(function(t){return t!==e})}function S(e,t){"string"==typeof t&&(t=l.parsePath(t)),c(i({state:e},t))}function A(e,t){"string"==typeof t&&(t=l.parsePath(t)),h(i({state:e},t))}var C=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],k=C.getCurrentLocation,T=C.finishTransition,H=C.saveState,q=C.go,L=C.getUserConfirmation,U=C.keyLength;"number"!=typeof U&&(U=R);var N=[],B=[],I=[],D=void 0,W=void 0;return{listenBefore:e,listen:r,transitionTo:s,push:c,replace:h,go:q,goBack:y,goForward:g,createKey:O,createPath:P,createHref:b,createLocation:x,setState:_["default"](w,"setState is deprecated; use location.key to save state instead"),registerTransitionHook:_["default"](j,"registerTransitionHook is deprecated; use listenBefore instead"),unregisterTransitionHook:_["default"](E,"unregisterTransitionHook is deprecated; use the callback returned from listenBefore instead"),pushState:_["default"](S,"pushState is deprecated; use push instead"),replaceState:_["default"](A,"replaceState is deprecated; use replace instead")}}t.__esModule=!0;var i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},s=n(4),c=(r(s),n(52)),f=r(c),l=n(7),d=n(55),p=n(9),h=n(57),v=r(h),y=n(19),m=r(y),g=n(18),_=r(g),R=6;t["default"]=a,e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e){return function(){function t(e){return _&&null==e.basename&&(0===e.pathname.indexOf(_)?(e.pathname=e.pathname.substring(_.length),e.basename=_,""===e.pathname&&(e.pathname="/")):e.basename=""),e}function n(e){if(!_)return e;"string"==typeof e&&(e=i.parsePath(e));var t=e.pathname,n="/"===_.slice(-1)?_:_+"/",r="/"===t.charAt(0)?t.slice(1):t,o=n+r;return u({},e,{pathname:o})}function r(e){return g.listenBefore(function(n,r){c["default"](e,t(n),r)})}function o(e){return g.listen(function(n){e(t(n))})}function s(e){g.push(n(e))}function f(e){g.replace(n(e))}function d(e){return g.createPath(n(e))}function p(e){return g.createHref(n(e))}function h(e){for(var r=arguments.length,o=Array(r>1?r-1:0),u=1;r>u;u++)o[u-1]=arguments[u];return t(g.createLocation.apply(g,[n(e)].concat(o)))}function v(e,t){"string"==typeof t&&(t=i.parsePath(t)),s(u({state:e},t))}function y(e,t){"string"==typeof t&&(t=i.parsePath(t)),f(u({state:e},t))}var m=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],g=e(m),_=m.basename;if(null==_&&a.canUseDOM){var R=document.getElementsByTagName("base")[0];R&&(_=R.getAttribute("href"))}return u({},g,{listenBefore:r,listen:o,push:s,replace:f,createPath:d,createHref:p,createLocation:h,pushState:l["default"](v,"pushState is deprecated; use push instead"),replaceState:l["default"](y,"replaceState is deprecated; use replace instead")})}}t.__esModule=!0;var u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=n(12),i=n(7),s=n(19),c=r(s),f=n(18),l=r(f);t["default"]=o,e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}t.__esModule=!0;var o=n(1),u=(r(o),n(6)),a={contextTypes:{history:u.history},componentWillMount:function(){this.history=this.context.history}};t["default"]=a,e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}t.__esModule=!0;var o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},u=n(2),a=r(u),i=n(20),s=r(i),c=a["default"].createClass({displayName:"IndexLink",render:function(){return a["default"].createElement(s["default"],o({},this.props,{onlyActiveOnIndex:!0}))}});t["default"]=c,e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}t.__esModule=!0;var o=n(2),u=r(o),a=n(1),i=(r(a),n(3)),s=r(i),c=n(21),f=r(c),l=n(6),d=u["default"].PropTypes,p=d.string,h=d.object,v=u["default"].createClass({displayName:"IndexRedirect",statics:{createRouteFromReactElement:function(e,t){t&&(t.indexRoute=f["default"].createRouteFromReactElement(e))}},propTypes:{to:p.isRequired,query:h,state:h,onEnter:l.falsy,children:l.falsy},render:function(){(0,s["default"])(!1)}});t["default"]=v,e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}t.__esModule=!0;var o=n(2),u=r(o),a=n(1),i=(r(a),n(3)),s=r(i),c=n(5),f=n(6),l=u["default"].PropTypes.func,d=u["default"].createClass({displayName:"IndexRoute",statics:{createRouteFromReactElement:function(e,t){t&&(t.indexRoute=(0,c.createRouteFromReactElement)(e))}},propTypes:{path:f.falsy,component:f.component,components:f.components,getComponent:l,getComponents:l},render:function(){(0,s["default"])(!1)}});t["default"]=d,e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}t.__esModule=!0;var o=n(1),u=(r(o),n(2)),a=r(u),i=n(3),s=r(i),c=a["default"].PropTypes.object,f={contextTypes:{history:c.isRequired,route:c},propTypes:{route:c},componentDidMount:function(){this.routerWillLeave?void 0:(0,s["default"])(!1);
var e=this.props.route||this.context.route;e?void 0:(0,s["default"])(!1),this._unlistenBeforeLeavingRoute=this.context.history.listenBeforeLeavingRoute(e,this.routerWillLeave)},componentWillUnmount:function(){this._unlistenBeforeLeavingRoute&&this._unlistenBeforeLeavingRoute()}};t["default"]=f,e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}t.__esModule=!0;var o=n(2),u=r(o),a=n(3),i=r(a),s=n(5),c=n(6),f=u["default"].PropTypes,l=f.string,d=f.func,p=u["default"].createClass({displayName:"Route",statics:{createRouteFromReactElement:s.createRouteFromReactElement},propTypes:{path:l,component:c.component,components:c.components,getComponent:d,getComponents:d},render:function(){(0,i["default"])(!1)}});t["default"]=p,e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}t.__esModule=!0;var o=n(1),u=(r(o),n(2)),a=r(u),i=a["default"].PropTypes.object,s={propTypes:{route:i.isRequired},childContextTypes:{route:i.isRequired},getChildContext:function(){return{route:this.props.route}},componentWillMount:function(){}};t["default"]=s,e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}function u(e){return!e||!e.__v2_compatible__}t.__esModule=!0;var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=n(28),s=r(i),c=n(13),f=r(c),l=n(2),d=r(l),p=n(16),h=r(p),v=n(6),y=n(10),m=r(y),g=n(5),_=n(22),R=n(1),O=(r(R),d["default"].PropTypes),P=O.func,b=O.object,x=d["default"].createClass({displayName:"Router",propTypes:{history:b,children:v.routes,routes:v.routes,render:P,createElement:P,onError:P,onUpdate:P,matchContext:b},getDefaultProps:function(){return{render:function(e){return d["default"].createElement(m["default"],e)}}},getInitialState:function(){return{location:null,routes:null,params:null,components:null}},handleError:function(e){if(!this.props.onError)throw e;this.props.onError.call(this,e)},componentWillMount:function(){var e=this,t=this.props,n=(t.parseQueryString,t.stringifyQuery,this.createRouterObjects()),r=n.history,o=n.transitionManager,u=n.router;this._unlisten=o.listen(function(t,n){t?e.handleError(t):e.setState(n,e.props.onUpdate)}),this.history=r,this.router=u},createRouterObjects:function(){var e=this.props.matchContext;if(e)return e;var t=this.props.history,n=this.props,r=n.routes,o=n.children;u(t)&&(t=this.wrapDeprecatedHistory(t));var a=(0,h["default"])(t,(0,g.createRoutes)(r||o)),i=(0,_.createRouterObject)(t,a),s=(0,_.createRoutingHistory)(t,a);return{history:s,transitionManager:a,router:i}},wrapDeprecatedHistory:function(e){var t=this.props,n=t.parseQueryString,r=t.stringifyQuery,o=void 0;return o=e?function(){return e}:s["default"],(0,f["default"])(o)({parseQueryString:n,stringifyQuery:r})},componentWillReceiveProps:function(e){},componentWillUnmount:function(){this._unlisten&&this._unlisten()},render:function w(){var e=this.state,t=e.location,n=e.routes,r=e.params,u=e.components,i=this.props,s=i.createElement,w=i.render,c=o(i,["createElement","render"]);return null==t?null:(Object.keys(x.propTypes).forEach(function(e){return delete c[e]}),w(a({},c,{history:this.history,router:this.router,location:t,routes:n,params:r,components:u,createElement:s})))}});t["default"]=x,e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}t.__esModule=!0;var o=n(2),u=r(o),a=n(10),i=r(a),s=n(1),c=(r(s),u["default"].createClass({displayName:"RoutingContext",componentWillMount:function(){},render:function(){return u["default"].createElement(i["default"],this.props)}}));t["default"]=c,e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t,n){return function(){for(var r=arguments.length,o=Array(r),u=0;r>u;u++)o[u]=arguments[u];if(e.apply(t,o),e.length<n){var a=o[o.length-1];a()}}}function u(e){return e.reduce(function(e,t){return t.onEnter&&e.push(o(t.onEnter,t,3)),e},[])}function a(e){return e.reduce(function(e,t){return t.onChange&&e.push(o(t.onChange,t,4)),e},[])}function i(e,t,n){function r(e,t,n){return t?void(o={pathname:t,query:n,state:e}):void(o=e)}if(!e)return void n();var o=void 0;(0,l.loopAsync)(e,function(e,n,u){t(e,r,function(e){e||o?u(e,o):n()})},n)}function s(e,t,n){var r=u(e);return i(r.length,function(e,n,o){r[e](t,n,o)},n)}function c(e,t,n,r){var o=a(e);return i(o.length,function(e,r,u){o[e](t,n,r,u)},r)}function f(e){for(var t=0,n=e.length;n>t;++t)e[t].onLeave&&e[t].onLeave.call(e[t])}t.__esModule=!0,t.runEnterHooks=s,t.runChangeHooks=c,t.runLeaveHooks=f;var l=n(14),d=n(1);r(d)},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}t.__esModule=!0;var o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},u=n(2),a=r(u),i=n(10),s=r(i);t["default"]=function(){for(var e=arguments.length,t=Array(e),n=0;e>n;n++)t[n]=arguments[n];var r=t.map(function(e){return e.renderRouterContext}).filter(function(e){return e}),i=t.map(function(e){return e.renderRouteComponent}).filter(function(e){return e}),c=function(){var e=arguments.length<=0||void 0===arguments[0]?u.createElement:arguments[0];return function(t,n){return i.reduceRight(function(e,t){return t(e,n)},e(t,n))}};return function(e){return r.reduceRight(function(t,n){return n(t,e)},a["default"].createElement(s["default"],o({},e,{createElement:c(e.createElement)})))}},e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}t.__esModule=!0;var o=n(56),u=r(o),a=n(24),i=r(a);t["default"]=(0,i["default"])(u["default"]),e.exports=t["default"]},function(e,t,n){"use strict";function r(e,t,n){if(!e.path)return!1;var r=(0,u.getParamNames)(e.path);return r.some(function(e){return t.params[e]!==n.params[e]})}function o(e,t){var n=e&&e.routes,o=t.routes,u=void 0,a=void 0,i=void 0;return n?!function(){var s=!1;u=n.filter(function(n){if(s)return!0;var u=-1===o.indexOf(n)||r(n,e,t);return u&&(s=!0),u}),u.reverse(),i=[],a=[],o.forEach(function(e){var t=-1===n.indexOf(e),r=-1!==u.indexOf(e);t||r?i.push(e):a.push(e)})}():(u=[],a=[],i=o),{leaveRoutes:u,changeRoutes:a,enterRoutes:i}}t.__esModule=!0;var u=n(8);t["default"]=o,e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t,n){if(t.component||t.components)return void n(null,t.component||t.components);var r=t.getComponent||t.getComponents;if(!r)return void n();var o=e.location,u=void 0;u=a({},e,o),r.call(t,u,n)}function u(e,t){(0,i.mapAsync)(e.routes,function(t,n,r){o(e,t,r)},t)}t.__esModule=!0;var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=n(14),s=(n(11),n(1));r(s);t["default"]=u,e.exports=t["default"]},function(e,t,n){"use strict";function r(e,t){var n={};if(!e.path)return n;var r=(0,o.getParamNames)(e.path);for(var u in t)Object.prototype.hasOwnProperty.call(t,u)&&-1!==r.indexOf(u)&&(n[u]=t[u]);return n}t.__esModule=!0;var o=n(8);t["default"]=r,e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}t.__esModule=!0;var o=n(28),u=r(o),a=n(24),i=r(a);t["default"]=(0,i["default"])(u["default"]),e.exports=t["default"]},function(e,t,n){"use strict";function r(e,t){if(e==t)return!0;if(null==e||null==t)return!1;if(Array.isArray(e))return Array.isArray(t)&&e.length===t.length&&e.every(function(e,n){return r(e,t[n])});if("object"===("undefined"==typeof e?"undefined":s(e))){for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n))if(void 0===e[n]){if(void 0!==t[n])return!1}else{if(!Object.prototype.hasOwnProperty.call(t,n))return!1;if(!r(e[n],t[n]))return!1}return!0}return String(e)===String(t)}function o(e,t){return"/"!==t.charAt(0)&&(t="/"+t),"/"!==e.charAt(e.length-1)&&(e+="/"),"/"!==t.charAt(t.length-1)&&(t+="/"),t===e}function u(e,t,n){for(var r=e,o=[],u=[],a=0,i=t.length;i>a;++a){var s=t[a],f=s.path||"";if("/"===f.charAt(0)&&(r=e,o=[],u=[]),null!==r&&f){var l=(0,c.matchPattern)(f,r);if(l?(r=l.remainingPathname,o=[].concat(o,l.paramNames),u=[].concat(u,l.paramValues)):r=null,""===r)return o.every(function(e,t){return String(u[t])===String(n[e])})}}return!1}function a(e,t){return null==t?null==e:null==e?!0:r(e,t)}function i(e,t,n,r,i){var s=e.pathname,c=e.query;return null==n?!1:("/"!==s.charAt(0)&&(s="/"+s),o(s,n.pathname)||!t&&u(s,r,i)?a(c,n.query):!1)}t.__esModule=!0;var s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e};t["default"]=i;var c=n(8);e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}function u(e,t){var n=e.history,r=e.routes,u=e.location,i=o(e,["history","routes","location"]);n||u?void 0:(0,s["default"])(!1),n=n?n:(0,f["default"])(i);var c=(0,d["default"])(n,(0,p.createRoutes)(r)),l=void 0;u?u=n.createLocation(u):l=n.listen(function(e){u=e});var v=(0,h.createRouterObject)(n,c);n=(0,h.createRoutingHistory)(n,c),c.match(u,function(e,r,o){t(e,r,o&&a({},o,{history:n,router:v,matchContext:{history:n,transitionManager:c,router:v}})),l&&l()})}t.__esModule=!0;var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=n(3),s=r(i),c=n(23),f=r(c),l=n(16),d=r(l),p=n(5),h=n(22);t["default"]=u,e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t,n){if(e.childRoutes)return[null,e.childRoutes];if(!e.getChildRoutes)return[];var r=!0,o=void 0;return e.getChildRoutes(t,function(e,t){return t=!e&&(0,v.createRoutes)(t),r?void(o=[e,t]):void n(e,t)}),r=!1,o}function u(e,t,n){e.indexRoute?n(null,e.indexRoute):e.getIndexRoute?e.getIndexRoute(t,function(e,t){n(e,!e&&(0,v.createRoutes)(t)[0])}):e.childRoutes?!function(){var r=e.childRoutes.filter(function(e){return!e.path});(0,p.loopAsync)(r.length,function(e,n,o){u(r[e],t,function(t,u){if(t||u){var a=[r[e]].concat(Array.isArray(u)?u:[u]);o(t,a)}else n()})},function(e,t){n(null,t)})}():n()}function a(e,t,n){return t.reduce(function(e,t,r){var o=n&&n[r];return Array.isArray(e[t])?e[t].push(o):t in e?e[t]=[e[t],o]:e[t]=o,e},e)}function i(e,t){return a({},e,t)}function s(e,t,n,r,a,s){var f=e.path||"";if("/"===f.charAt(0)&&(n=t.pathname,r=[],a=[]),null!==n&&f){var d=(0,h.matchPattern)(f,n);if(d?(n=d.remainingPathname,r=[].concat(r,d.paramNames),a=[].concat(a,d.paramValues)):n=null,""===n){var p=function(){var n={routes:[e],params:i(r,a)};return u(e,t,function(e,t){if(e)s(e);else{if(Array.isArray(t)){var r;(r=n.routes).push.apply(r,t)}else t&&n.routes.push(t);s(null,n)}}),{v:void 0}}();if("object"===("undefined"==typeof p?"undefined":l(p)))return p.v}}if(null!=n||e.childRoutes){var v=function(o,u){o?s(o):u?c(u,t,function(t,n){t?s(t):n?(n.routes.unshift(e),s(null,n)):s()},n,r,a):s()},y=o(e,t,v);y&&v.apply(void 0,y)}else s()}function c(e,t,n,r){var o=arguments.length<=4||void 0===arguments[4]?[]:arguments[4],u=arguments.length<=5||void 0===arguments[5]?[]:arguments[5];void 0===r&&("/"!==t.pathname.charAt(0)&&(t=f({},t,{pathname:"/"+t.pathname})),r=t.pathname),(0,p.loopAsync)(e.length,function(n,a,i){s(e[n],t,r,o,u,function(e,t){e||t?i(e,t):a()})},n)}t.__esModule=!0;var f=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e};t["default"]=c;var d=n(1),p=(r(d),n(14)),h=n(8),v=n(5);e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}function u(e){return function(){var t=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],n=t.routes,r=o(t,["routes"]),u=(0,s["default"])(e)(r),i=(0,f["default"])(u,n);return a({},u,i)}}t.__esModule=!0;var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=n(13),s=r(i),c=n(16),f=r(c),l=n(1);r(l);t["default"]=u,e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e){return e.displayName||e.name||"Component"}function u(e){var t=s["default"].createClass({displayName:"WithRouter",contextTypes:{router:l.routerShape},render:function(){return s["default"].createElement(e,a({},this.props,{router:this.context.router}))}});return t.displayName="withRouter("+o(e)+")",t.WrappedComponent=e,(0,f["default"])(t,e)}t.__esModule=!0;var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};t["default"]=u;var i=n(2),s=r(i),c=n(59),f=r(c),l=n(15);e.exports=t["default"]},function(e,t,n){function r(e){return null===e||void 0===e}function o(e){return e&&"object"==typeof e&&"number"==typeof e.length?"function"!=typeof e.copy||"function"!=typeof e.slice?!1:!(e.length>0&&"number"!=typeof e[0]):!1}function u(e,t,n){var u,f;if(r(e)||r(t))return!1;if(e.prototype!==t.prototype)return!1;if(s(e))return s(t)?(e=a.call(e),t=a.call(t),c(e,t,n)):!1;if(o(e)){if(!o(t))return!1;if(e.length!==t.length)return!1;for(u=0;u<e.length;u++)if(e[u]!==t[u])return!1;return!0}try{var l=i(e),d=i(t)}catch(p){return!1}if(l.length!=d.length)return!1;for(l.sort(),d.sort(),u=l.length-1;u>=0;u--)if(l[u]!=d[u])return!1;for(u=l.length-1;u>=0;u--)if(f=l[u],!c(e[f],t[f],n))return!1;return typeof e==typeof t}var a=Array.prototype.slice,i=n(54),s=n(53),c=e.exports=function(e,t,n){return n||(n={}),e===t?!0:e instanceof Date&&t instanceof Date?e.getTime()===t.getTime():!e||!t||"object"!=typeof e&&"object"!=typeof t?n.strict?e===t:e==t:u(e,t,n)}},function(e,t){function n(e){return"[object Arguments]"==Object.prototype.toString.call(e)}function r(e){return e&&"object"==typeof e&&"number"==typeof e.length&&Object.prototype.hasOwnProperty.call(e,"callee")&&!Object.prototype.propertyIsEnumerable.call(e,"callee")||!1}var o="[object Arguments]"==function(){return Object.prototype.toString.call(arguments)}();t=e.exports=o?n:r,t.supported=n,t.unsupported=r},function(e,t){function n(e){var t=[];for(var n in e)t.push(n);return t}t=e.exports="function"==typeof Object.keys?Object.keys:n,t.shim=n},function(e,t){"use strict";function n(e,t,n){function o(){return i=!0,s?void(f=[].concat(r.call(arguments))):void n.apply(this,arguments)}function u(){if(!i&&(c=!0,!s)){for(s=!0;!i&&e>a&&c;)c=!1,t.call(this,a++,u,o);return s=!1,i?void n.apply(this,f):void(a>=e&&c&&(i=!0,n()))}}var a=0,i=!1,s=!1,c=!1,f=void 0;u()}t.__esModule=!0;var r=Array.prototype.slice;t.loopAsync=n},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(){function e(e){e=e||window.history.state||{};var t=l.getWindowPath(),n=e,r=n.key,o=void 0;r?o=d.readState(r):(o=null,r=_.createKey(),m&&window.history.replaceState(u({},e,{key:r}),null));var a=c.parsePath(t);return _.createLocation(u({},a,{state:o}),void 0,r)}function t(t){function n(t){void 0!==t.state&&r(e(t.state))}var r=t.transitionTo;return l.addEventListener(window,"popstate",n),function(){l.removeEventListener(window,"popstate",n)}}function n(e){var t=e.basename,n=e.pathname,r=e.search,o=e.hash,u=e.state,a=e.action,i=e.key;if(a!==s.POP){d.saveState(i,u);var c=(t||"")+n+r+o,f={key:i};if(a===s.PUSH){if(g)return window.location.href=c,!1;window.history.pushState(f,null,c)}else{if(g)return window.location.replace(c),!1;window.history.replaceState(f,null,c)}}}function r(e){1===++R&&(O=t(_));var n=_.listenBefore(e);return function(){n(),0===--R&&O()}}function o(e){1===++R&&(O=t(_));var n=_.listen(e);return function(){n(),0===--R&&O()}}function a(e){1===++R&&(O=t(_)),_.registerTransitionHook(e)}function p(e){_.unregisterTransitionHook(e),0===--R&&O()}var v=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];f.canUseDOM?void 0:i["default"](!1);var y=v.forceRefresh,m=l.supportsHistory(),g=!m||y,_=h["default"](u({},v,{getCurrentLocation:e,finishTransition:n,saveState:d.saveState})),R=0,O=void 0;return u({},_,{listenBefore:r,listen:o,registerTransitionHook:a,unregisterTransitionHook:p})}t.__esModule=!0;var u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=n(3),i=r(a),s=n(9),c=n(7),f=n(12),l=n(17),d=n(26),p=n(27),h=r(p);t["default"]=o,e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(){var e=arguments.length<=0||void 0===arguments[0]?"/":arguments[0],t=arguments.length<=1||void 0===arguments[1]?i.POP:arguments[1],n=arguments.length<=2||void 0===arguments[2]?null:arguments[2],r=arguments.length<=3||void 0===arguments[3]?null:arguments[3];"string"==typeof e&&(e=s.parsePath(e)),"object"==typeof t&&(e=u({},e,{state:t}),t=n||i.POP,n=r);var o=e.pathname||"/",a=e.search||"",c=e.hash||"",f=e.state||null;return{pathname:o,search:a,hash:c,state:f,action:t,key:n}}t.__esModule=!0;var u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=n(4),i=(r(a),n(9)),s=n(7);t["default"]=o,e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e){return e.filter(function(e){return e.state}).reduce(function(e,t){return e[t.key]=t.state,e},{})}function u(){function e(e,t){m[e]=t}function t(e){return m[e]}function n(){var e=v[y],n=e.basename,r=e.pathname,o=e.search,u=(n||"")+r+(o||""),i=void 0,s=void 0;e.key?(i=e.key,s=t(i)):(i=d.createKey(),s=null,e.key=i);var c=f.parsePath(u);return d.createLocation(a({},c,{state:s}),void 0,i)}function r(e){var t=y+e;return t>=0&&t<v.length}function u(e){if(e){if(!r(e))return;y+=e;var t=n();d.transitionTo(a({},t,{action:l.POP}))}}function i(t){switch(t.action){case l.PUSH:y+=1,y<v.length&&v.splice(y),v.push(t),e(t.key,t.state);break;case l.REPLACE:v[y]=t,e(t.key,t.state)}}var s=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];Array.isArray(s)?s={entries:s}:"string"==typeof s&&(s={entries:[s]});var d=p["default"](a({},s,{getCurrentLocation:n,finishTransition:i,saveState:e,go:u})),h=s,v=h.entries,y=h.current;"string"==typeof v?v=[v]:Array.isArray(v)||(v=["/"]),v=v.map(function(e){var t=d.createKey();return"string"==typeof e?{pathname:e,key:t}:"object"==typeof e&&e?a({},e,{key:t}):void c["default"](!1)}),null==y?y=v.length-1:y>=0&&y<v.length?void 0:c["default"](!1);var m=o(v);return d}t.__esModule=!0;var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=n(4),s=(r(i),n(3)),c=r(s),f=n(7),l=n(9),d=n(29),p=r(d);t["default"]=u,e.exports=t["default"]},function(e,t){"use strict";var n={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,mixins:!0,propTypes:!0,type:!0},r={name:!0,length:!0,prototype:!0,caller:!0,arguments:!0,arity:!0};e.exports=function(e,t){for(var o=Object.getOwnPropertyNames(t),u=0;u<o.length;++u)if(!n[o[u]]&&!r[o[u]])try{e[o[u]]=t[o[u]]}catch(a){}return e}},function(e,t,n){"use strict";var r=n(61);t.extract=function(e){return e.split("?")[1]||""},t.parse=function(e){return"string"!=typeof e?{}:(e=e.trim().replace(/^(\?|#|&)/,""),e?e.split("&").reduce(function(e,t){var n=t.replace(/\+/g," ").split("="),r=n.shift(),o=n.length>0?n.join("="):void 0;return r=decodeURIComponent(r),o=void 0===o?null:decodeURIComponent(o),e.hasOwnProperty(r)?Array.isArray(e[r])?e[r].push(o):e[r]=[e[r],o]:e[r]=o,e},{}):{})},t.stringify=function(e){return e?Object.keys(e).sort().map(function(t){var n=e[t];return void 0===n?"":null===n?t:Array.isArray(n)?n.slice().sort().map(function(e){return r(t)+"="+r(e)}).join("&"):r(t)+"="+r(n)}).filter(function(e){return e.length>0}).join("&"):""}},function(e,t){"use strict";e.exports=function(e){return encodeURIComponent(e).replace(/[!'()*]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}}])});
/* Generated by Opal 0.10.3 */
Opal.modules["react/router"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$include', '$[]', '$[]=', '$to_n', '$delete', '$Link', '$to_proc', '$new', '$on', '$replace', '$merge', '$build_routes', '$children_to_n', '$routes', '$respond_to?', '$history', '$each', '$camelcase', '$send', '$Router', '$gather_params', '$imports', '$lambda', '$stringify_query', '$parse_query_string', '$on_update', '$class_eval', '$first', '$detect', '$==', '$convert_props', '$create_element', '$convert_or_create_element', '$on_error', '$private', '$flatten', '$!', '$is_a?']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Router(){};
      var self = $Router = $klass($base, $super, 'Router', $Router);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_5, TMP_7, TMP_8, TMP_9, TMP_10, TMP_13, TMP_14, TMP_16, TMP_18, TMP_20, TMP_24, TMP_26, TMP_27, TMP_28;

      self.$include((($scope.get('React')).$$scope.get('Component')));

      Opal.defs(self, '$Link', TMP_1 = function $$Link(to, opts) {
        var $a, $b, self = this, $iter = TMP_1.$$p, children = $iter || nil;

        if (opts == null) {
          opts = $hash2([], {});
        }
        TMP_1.$$p = null;
        if ((($a = opts['$[]']("active_class")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          opts['$[]=']("activeClassName", opts.$delete("active_class").$to_n())};
        if ((($a = opts['$[]']("active_style")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          opts['$[]=']("activeStyle", opts.$delete("active_style").$to_n())};
        if ((($a = opts['$[]']("only_active_on_index")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          opts['$[]=']("onlyActiveOnIndex", opts.$delete("only_active_on_index").$to_n())};
        opts['$[]=']("to", to.$to_n());
        return ($a = ($b = $scope.get('Native')).$Link, $a.$$p = children.$to_proc(), $a).call($b, opts);
      }, TMP_1.$$arity = -2);

      Opal.defn(self, '$route', TMP_2 = function $$route($a_rest) {
        var $b, $c, self = this, args, $iter = TMP_2.$$p, children = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        TMP_2.$$p = null;
        return ($b = ($c = (($scope.get('DSL')).$$scope.get('Route'))).$new, $b.$$p = children.$to_proc(), $b).apply($c, Opal.to_a(args));
      }, TMP_2.$$arity = -1);

      Opal.defn(self, '$index', TMP_3 = function $$index(opts) {
        var self = this;

        if (opts == null) {
          opts = $hash2([], {});
        }
        return (($scope.get('DSL')).$$scope.get('Index')).$new(opts);
      }, TMP_3.$$arity = -1);

      Opal.defn(self, '$redirect', TMP_5 = function $$redirect(from, opts) {
        var $a, $b, TMP_4, self = this;

        if (opts == null) {
          opts = $hash2([], {});
        }
        return ($a = ($b = (($scope.get('DSL')).$$scope.get('Route')).$new(opts.$merge($hash2(["path"], {"path": from})))).$on, $a.$$p = (TMP_4 = function(c){var self = TMP_4.$$s || this;
if (c == null) c = nil;
        return c.$replace(opts['$[]']("to"))}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4), $a).call($b, "enter");
      }, TMP_5.$$arity = -2);

      Opal.defn(self, '$index_redirect', TMP_7 = function $$index_redirect(opts) {
        var $a, $b, TMP_6, self = this;

        if (opts == null) {
          opts = $hash2([], {});
        }
        return ($a = ($b = (($scope.get('DSL')).$$scope.get('Index')).$new(opts)).$on, $a.$$p = (TMP_6 = function(c){var self = TMP_6.$$s || this;
if (c == null) c = nil;
        return c.$replace(opts['$[]']("to"))}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $a).call($b, "enter");
      }, TMP_7.$$arity = -1);

      Opal.defn(self, '$build_routes', TMP_8 = function $$build_routes() {
        var $a, $b, self = this, $iter = TMP_8.$$p, block = $iter || nil;

        TMP_8.$$p = null;
        return ($a = ($b = (((($scope.get('React')).$$scope.get('Router'))).$$scope.get('DSL'))).$build_routes, $a.$$p = block.$to_proc(), $a).call($b);
      }, TMP_8.$$arity = 0);

      Opal.defn(self, '$hash_history', TMP_9 = function $$hash_history() {
        var self = this;

        return window.ReactRouter.hashHistory;
      }, TMP_9.$$arity = 0);

      Opal.defn(self, '$browser_history', TMP_10 = function $$browser_history() {
        var self = this;

        return window.ReactRouter.browserHistory;
      }, TMP_10.$$arity = 0);

      Opal.defn(self, '$gather_params', TMP_13 = function $$gather_params() {
        var $a, $b, TMP_11, $c, TMP_12, self = this, params = nil;

        params = $hash2(["routes"], {"routes": (((($scope.get('React')).$$scope.get('Router'))).$$scope.get('DSL')).$children_to_n(($a = ($b = self).$build_routes, $a.$$p = (TMP_11 = function(){var self = TMP_11.$$s || this;

        return self.$routes()}, TMP_11.$$s = self, TMP_11.$$arity = 0, TMP_11), $a).call($b))});
        if ((($a = self['$respond_to?']("history")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          params['$[]=']("history", self.$history())};
        ($a = ($c = ["create_element", "stringify_query", "parse_query_string", "on_error", "on_update"]).$each, $a.$$p = (TMP_12 = function(method){var self = TMP_12.$$s || this, $d;
if (method == null) method = nil;
        if ((($d = self['$respond_to?'](method)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
            return params['$[]='](method.$camelcase(false), self.$send("" + (method) + "_wrapper"))
            } else {
            return nil
          }}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12), $a).call($c);
        return params;
      }, TMP_13.$$arity = 0);

      Opal.defn(self, '$render', TMP_14 = function $$render() {
        var self = this;

        return $scope.get('Native').$Router(self.$gather_params());
      }, TMP_14.$$arity = 0);

      (function($base, $super) {
        function $Native(){};
        var self = $Native = $klass($base, $super, 'Native', $Native);

        var def = self.$$proto, $scope = self.$$scope;

        return self.$imports("ReactRouter")
      })($scope.base, (($scope.get('React')).$$scope.get('NativeLibrary')));

      Opal.defn(self, '$stringify_query_wrapper', TMP_16 = function $$stringify_query_wrapper() {
        var $a, $b, TMP_15, self = this;

        return ($a = ($b = self).$lambda, $a.$$p = (TMP_15 = function(query){var self = TMP_15.$$s || this;
if (query == null) query = nil;
        return self.$stringify_query(query)}, TMP_15.$$s = self, TMP_15.$$arity = 1, TMP_15), $a).call($b);
      }, TMP_16.$$arity = 0);

      Opal.defn(self, '$parse_query_string_wrapper', TMP_18 = function $$parse_query_string_wrapper() {
        var $a, $b, TMP_17, self = this;

        return ($a = ($b = self).$lambda, $a.$$p = (TMP_17 = function(query_string){var self = TMP_17.$$s || this;
if (query_string == null) query_string = nil;
        return self.$parse_query_string(query_string)}, TMP_17.$$s = self, TMP_17.$$arity = 1, TMP_17), $a).call($b);
      }, TMP_18.$$arity = 0);

      Opal.defn(self, '$on_update_wrapper', TMP_20 = function $$on_update_wrapper() {
        var $a, $b, TMP_19, self = this;

        return ($a = ($b = self).$lambda, $a.$$p = (TMP_19 = function(){var self = TMP_19.$$s || this;

        return self.$on_update($scope.get('Hash').$new(this.props), $scope.get('Hash').$new(this.state))}, TMP_19.$$s = self, TMP_19.$$arity = 0, TMP_19), $a).call($b);
      }, TMP_20.$$arity = 0);

      Opal.defn(self, '$create_element_wrapper', TMP_24 = function $$create_element_wrapper() {
        var $a, $b, TMP_21, self = this;

        return ($a = ($b = self).$lambda, $a.$$p = (TMP_21 = function(component, props){var self = TMP_21.$$s || this, $c, $d, TMP_22, $e, TMP_23, comp_classes = nil, rb_component = nil, rb_props = nil, result = nil;
if (component == null) component = nil;if (props == null) props = nil;
        comp_classes = ($c = ($d = (($scope.get('React')).$$scope.get('API'))).$class_eval, $c.$$p = (TMP_22 = function(){var self = TMP_22.$$s || this, $e;

          return (($e = Opal.cvars['@@component_classes']) == null ? nil : $e)}, TMP_22.$$s = self, TMP_22.$$arity = 0, TMP_22), $c).call($d);
          rb_component = ($c = ($e = comp_classes).$detect, $c.$$p = (TMP_23 = function(_key, value){var self = TMP_23.$$s || this;
if (_key == null) _key = nil;if (value == null) value = nil;
          return value['$=='](component)}, TMP_23.$$s = self, TMP_23.$$arity = 2, TMP_23), $c).call($e).$first();
          rb_props = self.$convert_props(props);
          result = self.$create_element(rb_component, rb_props);
          return self.$convert_or_create_element(result, component, props, rb_component, rb_props);}, TMP_21.$$s = self, TMP_21.$$arity = 2, TMP_21), $a).call($b);
      }, TMP_24.$$arity = 0);

      Opal.defn(self, '$on_error_wrapper', TMP_26 = function $$on_error_wrapper() {
        var $a, $b, TMP_25, self = this;

        return ($a = ($b = self).$lambda, $a.$$p = (TMP_25 = function(message){var self = TMP_25.$$s || this;
if (message == null) message = nil;
        return self.$on_error(message)}, TMP_25.$$s = self, TMP_25.$$arity = 1, TMP_25), $a).call($b);
      }, TMP_26.$$arity = 0);

      self.$private();

      Opal.defn(self, '$convert_props', TMP_27 = function $$convert_props(props) {
        var self = this, children_are_null = nil;

        children_are_null = props.children == undefined || props.children == null;
        return $hash2(["children", "history", "location", "params", "route", "route_params", "routes"], {"children": (function() {if (children_are_null !== false && children_are_null !== nil && children_are_null != null) {
          return []
          } else {
          return [props.children].$flatten()
        }; return nil; })(), "history": props.history, "location": props.location, "params": props.params, "route": props.route, "route_params": props.route_params, "routes": props.routes});
      }, TMP_27.$$arity = 1);

      return (Opal.defn(self, '$convert_or_create_element', TMP_28 = function $$convert_or_create_element(result, component, props, rb_component, rb_props) {
        var $a, self = this, is_result_native_react_element = nil;

        is_result_native_react_element = !!result._isReactElement;
        if (is_result_native_react_element !== false && is_result_native_react_element !== nil && is_result_native_react_element != null) {
          return result
        } else if ((($a = result['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return React.createElement(component, props);
        } else if ((($a = result['$is_a?']((($scope.get('React')).$$scope.get('Element')))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return result.$to_n()
          } else {
          return $scope.get('React').$create_element(rb_component, rb_props).$to_n()
        };
      }, TMP_28.$$arity = 5), nil) && 'convert_or_create_element';
    })($scope.base, null)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["react/router/dsl"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$[]', '$evaluate_children', '$to_proc', '$tap', '$<<', '$call', '$[]=', '$collect', '$to_n', '$to_json']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Router(){};
      var self = $Router = $klass($base, $super, 'Router', $Router);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $DSL(){};
        var self = $DSL = $klass($base, $super, 'DSL', $DSL);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_4, TMP_5, TMP_7;

        Opal.defs(self, '$build_routes', TMP_1 = function $$build_routes($a_rest) {
          var $b, $c, self = this, args, $iter = TMP_1.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          TMP_1.$$p = null;
          return ($b = ($c = self).$evaluate_children, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args))['$[]'](0);
        }, TMP_1.$$arity = -1);

        Opal.defs(self, '$evaluate_children', TMP_2 = function $$evaluate_children($a_rest) {
          var $b, $c, TMP_3, self = this, args, $iter = TMP_2.$$p, children = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          TMP_2.$$p = null;
          return ($b = ($c = [[], nil]).$tap, $b.$$p = (TMP_3 = function(new_routes){var self = TMP_3.$$s || this, $a, $d, saved_routes = nil;
            if (self.routes == null) self.routes = nil;
if (new_routes == null) new_routes = nil;
          if (children !== false && children !== nil && children != null) {
              $d = [self.routes, new_routes], $a = Opal.to_ary($d), saved_routes = ($a[0] == null ? nil : $a[0]), self.routes = ($a[1] == null ? nil : $a[1]), $d;
              self.routes['$<<'](($a = children).$call.apply($a, Opal.to_a(args)));
              return self.routes = saved_routes;
              } else {
              return nil
            }}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $b).call($c);
        }, TMP_2.$$arity = -1);

        Opal.defs(self, '$add_element', TMP_4 = function $$add_element(element) {
          var self = this;
          if (self.routes == null) self.routes = nil;

          return self.routes['$[]'](0)['$<<'](element);
        }, TMP_4.$$arity = 1);

        Opal.defs(self, '$set_index', TMP_5 = function $$set_index(index) {
          var self = this;
          if (self.routes == null) self.routes = nil;

          return self.routes['$[]='](1, index);
        }, TMP_5.$$arity = 1);

        return (Opal.defs(self, '$children_to_n', TMP_7 = function $$children_to_n(children) {
          var $a, $b, TMP_6, self = this;

          return ($a = ($b = children).$collect, $a.$$p = (TMP_6 = function(e){var self = TMP_6.$$s || this;
if (e == null) e = nil;
          return e.$to_json().$to_n()}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $a).call($b);
        }, TMP_7.$$arity = 1), nil) && 'children_to_n';
      })($scope.base, null)
    })($scope.base, null)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["react/router/dsl/route/hooks"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$[]=']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Router(){};
      var self = $Router = $klass($base, $super, 'Router', $Router);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $DSL(){};
        var self = $DSL = $klass($base, $super, 'DSL', $DSL);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Route(){};
          var self = $Route = $klass($base, $super, 'Route', $Route);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

          def.opts = def.components = nil;
          Opal.defn(self, '$on', TMP_1 = function $$on(hook) {
            var self = this, $iter = TMP_1.$$p, block = $iter || nil;

            TMP_1.$$p = null;
            self.opts['$[]=']("on_" + (hook), block);
            return self;
          }, TMP_1.$$arity = 1);

          return (Opal.defn(self, '$mounts', TMP_2 = function $$mounts(name) {
            var $a, self = this, $iter = TMP_2.$$p, block = $iter || nil;

            if (name == null) {
              name = nil;
            }
            TMP_2.$$p = null;
            if (name !== false && name !== nil && name != null) {
              ((($a = self.components) !== false && $a !== nil && $a != null) ? $a : self.components = $hash2([], {}));
              return self.components['$[]='](name, block);
              } else {
              return self.component = block
            };
          }, TMP_2.$$arity = -1), nil) && 'mounts';
        })($scope.base, null)
      })($scope.base, null)
    })($scope.base, null)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["react/router/dsl/route/wrappers"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$lambda', '$evaluate_children', '$to_proc', '$new', '$<', '$class', '$is_a?', '$fail', '$call', '$to_n', '$then', '$children_to_n', '$each', '$respond_to?', '$proc', '$<<', '$[]=', '$create_native_react_class', '$when', '$[]']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Router(){};
      var self = $Router = $klass($base, $super, 'Router', $Router);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $DSL(){};
        var self = $DSL = $klass($base, $super, 'DSL', $DSL);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Route(){};
          var self = $Route = $klass($base, $super, 'Route', $Route);

          var def = self.$$proto, $scope = self.$$scope, TMP_4, TMP_10, TMP_14, TMP_17, TMP_20, TMP_22, TMP_26;

          Opal.defn(self, '$get_child_routes_wrapper', TMP_4 = function $$get_child_routes_wrapper() {
            var $a, $b, TMP_1, self = this;

            return ($a = ($b = self).$lambda, $a.$$p = (TMP_1 = function(location, callBack){var self = TMP_1.$$s || this, $c, $d, $e, $f, TMP_2, $g, TMP_3, children = nil, index = nil, promise = nil;
              if (self.get_children == null) self.get_children = nil;
if (location == null) location = nil;if (callBack == null) callBack = nil;
            $d = ($e = ($f = (((($scope.get('React')).$$scope.get('Router'))).$$scope.get('DSL'))).$evaluate_children, $e.$$p = self.get_children.$to_proc(), $e).call($f, $scope.get('TransitionContext').$new($hash2(["location"], {"location": location}))), $c = Opal.to_ary($d), children = ($c[0] == null ? nil : $c[0]), index = ($c[1] == null ? nil : $c[1]), promise = ($c[2] == null ? nil : $c[2]), $d;
              if ((($c = ((($d = $rb_lt(promise.$class(), $scope.get('Promise'))) !== false && $d !== nil && $d != null) ? $d : promise['$is_a?']($scope.get('Promise')))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                return ($c = ($d = ($e = ($g = promise).$then, $e.$$p = (TMP_3 = function(children){var self = TMP_3.$$s || this;
if (children == null) children = nil;
                return callBack.$call(nil.$to_n(), (((($scope.get('React')).$$scope.get('Router'))).$$scope.get('DSL')).$children_to_n(children))}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $e).call($g)).$fail, $c.$$p = (TMP_2 = function(err_object){var self = TMP_2.$$s || this;
if (err_object == null) err_object = nil;
                return callBack.$call(err_object, nil.$to_n())}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $c).call($d)
                } else {
                return callBack.$call(nil.$to_n(), $scope.get('DSL').$children_to_n(children))
              };}, TMP_1.$$s = self, TMP_1.$$arity = 2, TMP_1), $a).call($b);
          }, TMP_4.$$arity = 0);

          Opal.defn(self, '$get_components_wrapper', TMP_10 = function $$get_components_wrapper() {
            var $a, $b, TMP_5, self = this;

            return ($a = ($b = self).$lambda, $a.$$p = (TMP_5 = function(nextState, callBack){var self = TMP_5.$$s || this, $c, $d, TMP_6, $e, TMP_9, $f, result_hash = nil, promises = nil;
              if (self.components == null) self.components = nil;
if (nextState == null) nextState = nil;if (callBack == null) callBack = nil;
            result_hash = $hash2([], {});
              promises = [];
              ($c = ($d = self.components).$each, $c.$$p = (TMP_6 = function(name, proc_or_comp){var self = TMP_6.$$s || this, $e, $f, TMP_7, $g, $h, TMP_8, comp = nil;
if (name == null) name = nil;if (proc_or_comp == null) proc_or_comp = nil;
              if ((($e = proc_or_comp['$respond_to?']("call")) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
                  comp = self.$proc().$call($scope.get('TransitionContext').$new($hash2(["next_state"], {"next_state": nextState})));
                  if ((($e = ((($f = $rb_lt(comp.$class(), $scope.get('Promise'))) !== false && $f !== nil && $f != null) ? $f : comp['$is_a?']($scope.get('Promise')))) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
                    promises['$<<'](comp);
                    return ($e = ($f = ($g = ($h = comp).$then, $g.$$p = (TMP_8 = function(component){var self = TMP_8.$$s || this;
if (component == null) component = nil;
                    return result_hash['$[]='](name, (($scope.get('React')).$$scope.get('API')).$create_native_react_class(component))}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8), $g).call($h)).$fail, $e.$$p = (TMP_7 = function(err_object){var self = TMP_7.$$s || this;
if (err_object == null) err_object = nil;
                    return callBack(err_object, null);}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $e).call($f);
                    } else {
                    return result_hash['$[]='](name, (($scope.get('React')).$$scope.get('API')).$create_native_react_class(comp))
                  };
                  } else {
                  return result_hash['$[]='](name, (($scope.get('React')).$$scope.get('API')).$create_native_react_class(proc_or_comp))
                }}, TMP_6.$$s = self, TMP_6.$$arity = 2, TMP_6), $c).call($d);
              return ($c = ($e = ($f = $scope.get('Promise')).$when.apply($f, Opal.to_a(promises))).$then, $c.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this;

              return callBack(null, result_hash.$to_n());}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $c).call($e);}, TMP_5.$$s = self, TMP_5.$$arity = 2, TMP_5), $a).call($b).$to_n();
          }, TMP_10.$$arity = 0);

          Opal.defn(self, '$get_component_wrapper', TMP_14 = function $$get_component_wrapper() {
            var $a, $b, TMP_11, self = this;

            return ($a = ($b = self).$lambda, $a.$$p = (TMP_11 = function(nextState, callBack){var self = TMP_11.$$s || this, $c, $d, TMP_12, $e, $f, TMP_13, comp = nil;
              if (self.component == null) self.component = nil;
if (nextState == null) nextState = nil;if (callBack == null) callBack = nil;
            comp = self.component.$call($scope.get('TransitionContext').$new($hash2(["next_state"], {"next_state": nextState})));
              if ((($c = ((($d = $rb_lt(comp.$class(), $scope.get('Promise'))) !== false && $d !== nil && $d != null) ? $d : comp['$is_a?']($scope.get('Promise')))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                return ($c = ($d = ($e = ($f = comp).$then, $e.$$p = (TMP_13 = function(component){var self = TMP_13.$$s || this;
if (component == null) component = nil;
                component = (($scope.get('React')).$$scope.get('API')).$create_native_react_class(component);
                  return callBack(null, component);}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13), $e).call($f)).$fail, $c.$$p = (TMP_12 = function(err_object){var self = TMP_12.$$s || this;
if (err_object == null) err_object = nil;
                return callBack(err_object, null);}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12), $c).call($d)
                } else {
                comp = (($scope.get('React')).$$scope.get('API')).$create_native_react_class(comp);
                return callBack(null, comp);
              };}, TMP_11.$$s = self, TMP_11.$$arity = 2, TMP_11), $a).call($b).$to_n();
          }, TMP_14.$$arity = 0);

          Opal.defn(self, '$on_enter_wrapper', TMP_17 = function $$on_enter_wrapper() {
            var $a, $b, TMP_15, self = this;

            return ($a = ($b = self).$lambda, $a.$$p = (TMP_15 = function(nextState, replace, callBack){var self = TMP_15.$$s || this, $c, $d, TMP_16, comp = nil;
              if (self.opts == null) self.opts = nil;
if (nextState == null) nextState = nil;if (replace == null) replace = nil;if (callBack == null) callBack = nil;
            comp = self.opts['$[]']("on_enter").$call($scope.get('TransitionContext').$new($hash2(["next_state", "replace"], {"next_state": nextState, "replace": replace})));
              if ((($c = ((($d = $rb_lt(comp.$class(), $scope.get('Promise'))) !== false && $d !== nil && $d != null) ? $d : comp['$is_a?']($scope.get('Promise')))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                return ($c = ($d = comp).$then, $c.$$p = (TMP_16 = function(){var self = TMP_16.$$s || this;

                return callBack();}, TMP_16.$$s = self, TMP_16.$$arity = 0, TMP_16), $c).call($d)
                } else {
                return callBack();
              };}, TMP_15.$$s = self, TMP_15.$$arity = 3, TMP_15), $a).call($b).$to_n();
          }, TMP_17.$$arity = 0);

          Opal.defn(self, '$on_change_wrapper', TMP_20 = function $$on_change_wrapper(proc) {
            var $a, $b, TMP_18, self = this;

            return ($a = ($b = self).$lambda, $a.$$p = (TMP_18 = function(prevState, nextState, replace, callBack){var self = TMP_18.$$s || this, $c, $d, TMP_19, comp = nil;
              if (self.opts == null) self.opts = nil;
if (prevState == null) prevState = nil;if (nextState == null) nextState = nil;if (replace == null) replace = nil;if (callBack == null) callBack = nil;
            comp = self.opts['$[]']("on_change").$call($scope.get('TransitionContext').$new($hash2(["prev_state", "next_state", "replace"], {"prev_state": prevState, "next_state": nextState, "replace": replace})));
              if ((($c = ((($d = $rb_lt(comp.$class(), $scope.get('Promise'))) !== false && $d !== nil && $d != null) ? $d : comp['$is_a?']($scope.get('Promise')))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                return ($c = ($d = comp).$then, $c.$$p = (TMP_19 = function(){var self = TMP_19.$$s || this;

                return callBack();}, TMP_19.$$s = self, TMP_19.$$arity = 0, TMP_19), $c).call($d)
                } else {
                return callBack();
              };}, TMP_18.$$s = self, TMP_18.$$arity = 4, TMP_18), $a).call($b).$to_n();
          }, TMP_20.$$arity = 1);

          Opal.defn(self, '$on_leave_wrapper', TMP_22 = function $$on_leave_wrapper(proc) {
            var $a, $b, TMP_21, self = this;

            return ($a = ($b = self).$lambda, $a.$$p = (TMP_21 = function(){var self = TMP_21.$$s || this;
              if (self.opts == null) self.opts = nil;

            return self.opts['$[]']("on_leave").$call($scope.get('TransitionContext').$new())}, TMP_21.$$s = self, TMP_21.$$arity = 0, TMP_21), $a).call($b).$to_n();
          }, TMP_22.$$arity = 1);

          return (Opal.defn(self, '$get_index_route_wrapper', TMP_26 = function $$get_index_route_wrapper() {
            var $a, $b, TMP_23, self = this;

            return ($a = ($b = self).$lambda, $a.$$p = (TMP_23 = function(location, callBack){var self = TMP_23.$$s || this, $c, $d, TMP_24, $e, $f, TMP_25, comp = nil;
              if (self.opts == null) self.opts = nil;
if (location == null) location = nil;if (callBack == null) callBack = nil;
            comp = self.opts['$[]']("index").$call($scope.get('TransitionContext').$new($hash2(["location"], {"location": location})));
              if ((($c = ((($d = $rb_lt(comp.$class(), $scope.get('Promise'))) !== false && $d !== nil && $d != null) ? $d : comp['$is_a?']($scope.get('Promise')))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                return ($c = ($d = ($e = ($f = comp).$then, $e.$$p = (TMP_25 = function(component){var self = TMP_25.$$s || this;
if (component == null) component = nil;
                return callBack(null, {component: component});}, TMP_25.$$s = self, TMP_25.$$arity = 1, TMP_25), $e).call($f)).$fail, $c.$$p = (TMP_24 = function(err_object){var self = TMP_24.$$s || this;
if (err_object == null) err_object = nil;
                return callBack(err_object, null);}, TMP_24.$$s = self, TMP_24.$$arity = 1, TMP_24), $c).call($d)
                } else {
                return callBack(null, {component: comp});
              };}, TMP_23.$$s = self, TMP_23.$$arity = 2, TMP_23), $a).call($b).$to_n();
          }, TMP_26.$$arity = 0), nil) && 'get_index_route_wrapper';
        })($scope.base, null)
      })($scope.base, null)
    })($scope.base, null)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["react/router/dsl/route"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$is_a?', '$[]', '$raise', '$+', '$evaluate_children', '$==', '$arity', '$new', '$delete', '$>', '$save_element', '$add_element', '$[]=', '$get_child_routes_wrapper', '$map', '$to_proc', '$detect', '$respond_to?', '$get_components_wrapper', '$get_component_wrapper', '$create_native_react_class', '$lookup_component', '$router', '$each', '$camelcase', '$send', '$get_index_route_wrapper', '$to_json', '$include?']);
  self.$require("react/router/dsl/route/hooks");
  self.$require("react/router/dsl/route/wrappers");
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Router(){};
      var self = $Router = $klass($base, $super, 'Router', $Router);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $DSL(){};
        var self = $DSL = $klass($base, $super, 'DSL', $DSL);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Route(){};
          var self = $Route = $klass($base, $super, 'Route', $Route);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_3, TMP_7;

          def.path = def.get_children = def.children = def.components = def.component = def.index = def.opts = nil;
          Opal.defn(self, '$initialize', TMP_1 = function $$initialize($a_rest) {
            var $b, $c, $d, $e, TMP_2, self = this, args, $iter = TMP_1.$$p, children = $iter || nil, path = nil, opts = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            TMP_1.$$p = null;
            path = (function() {if ((($b = args['$[]'](0)['$is_a?']($scope.get('Hash'))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              return nil
              } else {
              return args['$[]'](0)
            }; return nil; })();
            opts = (function() {if ((($b = args['$[]'](0)['$is_a?']($scope.get('Hash'))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              return args['$[]'](0)
              } else {
              return ((($b = args['$[]'](1)) !== false && $b !== nil && $b != null) ? $b : $hash2([], {}))
            }; return nil; })();
            if ((($b = opts['$is_a?']($scope.get('Hash'))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              } else {
              self.$raise("Route expects an optional path followed by an options hash, " + ("instead we got route(" + ((function() {if (path !== false && path !== nil && path != null) {
                return $rb_plus($rb_plus("\"", path), "\", ")
                } else {
                return nil
              }; return nil; })()) + " " + (opts) + ")"))
            };
            $c = ($d = ($e = $scope.get('DSL')).$evaluate_children, $d.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this, $a, $f;

            if ((($a = (($f = children !== false && children !== nil && children != null) ? children.$arity()['$=='](0) : children)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                Opal.yieldX(children, [])};
              if ((($a = opts['$[]']("index")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                return $scope.get('Index').$new($hash2(["mounts"], {"mounts": opts['$[]']("index")}))
                } else {
                return nil
              };}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2), $d).call($e), $b = Opal.to_ary($c), self.children = ($b[0] == null ? nil : $b[0]), self.index = ($b[1] == null ? nil : $b[1]), $c;
            opts.$delete("index");
            if ((($b = (($c = children !== false && children !== nil && children != null) ? $rb_gt(children.$arity(), 0) : children)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              self.get_children = children};
            self.path = path;
            if ((($b = opts['$[]']("mounts")['$is_a?']($scope.get('Hash'))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              self.components = opts['$[]']("mounts")
              } else {
              self.component = opts['$[]']("mounts")
            };
            opts.$delete("mounts");
            self.opts = opts;
            return self.$save_element();
          }, TMP_1.$$arity = -1);

          Opal.defn(self, '$save_element', TMP_3 = function $$save_element() {
            var self = this;

            return $scope.get('DSL').$add_element(self);
          }, TMP_3.$$arity = 0);

          return (Opal.defn(self, '$to_json', TMP_7 = function $$to_json() {
            var $a, $b, $c, $d, TMP_4, TMP_5, $e, TMP_6, self = this, hash = nil;

            hash = $hash2([], {});
            if ((($a = self.path) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              hash['$[]=']("path", self.path)};
            if ((($a = self.get_children) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              hash['$[]=']("getChildRoutes", self.$get_child_routes_wrapper())
              } else {
              hash['$[]=']("childRoutes", ($a = ($b = self.children).$map, $a.$$p = "to_json".$to_proc(), $a).call($b))
            };
            if ((($a = self.components) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              if ((($a = ($c = ($d = self.components).$detect, $c.$$p = (TMP_4 = function(_k, v){var self = TMP_4.$$s || this;
if (_k == null) _k = nil;if (v == null) v = nil;
              return v['$respond_to?']("call")}, TMP_4.$$s = self, TMP_4.$$arity = 2, TMP_4), $c).call($d)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                hash['$[]=']("getComponents", self.$get_components_wrapper())
                } else {
                hash['$[]=']("components", self.components)
              }
            } else if ((($a = self.component['$respond_to?']("call")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              hash['$[]=']("getComponent", self.$get_component_wrapper())
            } else if ((($a = self.component) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              hash['$[]=']("component", (($scope.get('React')).$$scope.get('API')).$create_native_react_class(self.component))
              } else {
              hash['$[]=']("component", $scope.get('DSL').$router().$lookup_component(self.path))
            };
            ($a = ($c = ["enter", "change", "leave"]).$each, $a.$$p = (TMP_5 = function(hook){var self = TMP_5.$$s || this, $e;
              if (self.opts == null) self.opts = nil;
if (hook == null) hook = nil;
            if ((($e = self.opts['$[]']("on_" + (hook))) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
                return hash['$[]=']("on" + (hook.$camelcase()), self.$send("on_" + (hook) + "_wrapper"))
                } else {
                return nil
              }}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5), $a).call($c);
            if ((($a = self.index['$respond_to?']("call")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              hash['$[]=']("getIndexRoute", self.$get_index_route_wrapper())
            } else if ((($a = self.index) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              hash['$[]=']("indexRoute", self.index.$to_json())};
            ($a = ($e = self.opts).$each, $a.$$p = (TMP_6 = function(key, value){var self = TMP_6.$$s || this, $f;
if (key == null) key = nil;if (value == null) value = nil;
            if ((($f = ["on_enter", "on_change", "on_leave"]['$include?'](key)) !== nil && $f != null && (!$f.$$is_boolean || $f == true))) {
                return nil
                } else {
                return hash['$[]='](key, value)
              }}, TMP_6.$$s = self, TMP_6.$$arity = 2, TMP_6), $a).call($e);
            return hash;
          }, TMP_7.$$arity = 0), nil) && 'to_json';
        })($scope.base, null)
      })($scope.base, null)
    })($scope.base, null)
  })($scope.base);
};
/* Generated by Opal 0.10.3 */
Opal.modules["react/router/dsl/index"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$set_index']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Router(){};
      var self = $Router = $klass($base, $super, 'Router', $Router);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $DSL(){};
        var self = $DSL = $klass($base, $super, 'DSL', $DSL);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Index(){};
          var self = $Index = $klass($base, $super, 'Index', $Index);

          var def = self.$$proto, $scope = self.$$scope, TMP_1;

          return (Opal.defn(self, '$save_element', TMP_1 = function $$save_element() {
            var self = this;

            return $scope.get('DSL').$set_index(self);
          }, TMP_1.$$arity = 0), nil) && 'save_element'
        })($scope.base, (((((($scope.get('React')).$$scope.get('Router'))).$$scope.get('DSL'))).$$scope.get('Route')))
      })($scope.base, null)
    })($scope.base, null)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["react/router/dsl/transition_context"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$new', '$[]', '$attr_reader', '$to_n']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Router(){};
      var self = $Router = $klass($base, $super, 'Router', $Router);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $DSL(){};
        var self = $DSL = $klass($base, $super, 'DSL', $DSL);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $TransitionContext(){};
          var self = $TransitionContext = $klass($base, $super, 'TransitionContext', $TransitionContext);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3;

          def.replace = def.promise = nil;
          Opal.defn(self, '$initialize', TMP_1 = function $$initialize(opts) {
            var self = this;

            if (opts == null) {
              opts = $hash2([], {});
            }
            self.prev_state = $scope.get('Hash').$new(opts['$[]']("prev_state"));
            self.next_state = $scope.get('Hash').$new(opts['$[]']("next_state"));
            self.replace = opts['$[]']("replace");
            return self.location = $scope.get('Hash').$new(opts['$[]']("location"));
          }, TMP_1.$$arity = -1);

          self.$attr_reader("prev_state");

          self.$attr_reader("next_state");

          self.$attr_reader("location");

          Opal.defn(self, '$replace', TMP_2 = function $$replace(url) {
            var self = this;

            self.replace(url.$to_n());
            return url;
          }, TMP_2.$$arity = 1);

          return (Opal.defn(self, '$promise', TMP_3 = function $$promise() {
            var $a, self = this;

            return ((($a = self.promise) !== false && $a !== nil && $a != null) ? $a : self.promise = $scope.get('Promise').$new());
          }, TMP_3.$$arity = 0), nil) && 'promise';
        })($scope.base, null)
      })($scope.base, null)
    })($scope.base, null)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["patches/react"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$[]', '$is_a?', '$each', '$as_node']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $RenderingContext(){};
      var self = $RenderingContext = $klass($base, $super, 'RenderingContext', $RenderingContext);

      var def = self.$$proto, $scope = self.$$scope, TMP_2;

      return (Opal.defs(self, '$remove_nodes_from_args', TMP_2 = function $$remove_nodes_from_args(args) {
        var $a, $b, TMP_1, self = this;

        if ((($a = ($b = args['$[]'](0), $b !== false && $b !== nil && $b != null ?args['$[]'](0)['$is_a?']($scope.get('Hash')) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return ($a = ($b = args['$[]'](0)).$each, $a.$$p = (TMP_1 = function(key, value){var self = TMP_1.$$s || this, $c, $d;
if (key == null) key = nil;if (value == null) value = nil;
          if ((($c = ($d = value['$is_a?'], $d !== false && $d !== nil && $d != null ?value['$is_a?']($scope.get('Element')) : $d)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return value.$as_node()
              } else {
              return nil
            }}, TMP_1.$$s = self, TMP_1.$$arity = 2, TMP_1), $a).call($b)
          } else {
          return nil
        };
      }, TMP_2.$$arity = 1), nil) && 'remove_nodes_from_args'
    })($scope.base, null)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["hyper-router"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$==', '$require']);
  if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
    self.$require("hyper-react");
    self.$require("promise");
    self.$require("promise_extras");
    self.$require("react/router/react-router");
    self.$require("react/router");
    self.$require("react/router/dsl");
    self.$require("react/router/dsl/route");
    self.$require("react/router/dsl/index");
    self.$require("react/router/dsl/transition_context");
    return self.$require("patches/react");}
};
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("react"));
	else if(typeof define === 'function' && define.amd)
		define(["react"], factory);
	else if(typeof exports === 'object')
		exports["ReactRouter"] = factory(require("react"));
	else
		root["ReactRouter"] = factory(root["React"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_21__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.DefaultRoute = __webpack_require__(1);
	exports.Link = __webpack_require__(2);
	exports.NotFoundRoute = __webpack_require__(3);
	exports.Redirect = __webpack_require__(4);
	exports.Route = __webpack_require__(5);
	exports.ActiveHandler = __webpack_require__(6);
	exports.RouteHandler = exports.ActiveHandler;

	exports.HashLocation = __webpack_require__(7);
	exports.HistoryLocation = __webpack_require__(8);
	exports.RefreshLocation = __webpack_require__(9);
	exports.StaticLocation = __webpack_require__(10);
	exports.TestLocation = __webpack_require__(11);

	exports.ImitateBrowserBehavior = __webpack_require__(12);
	exports.ScrollToTopBehavior = __webpack_require__(13);

	exports.History = __webpack_require__(14);
	exports.Navigation = __webpack_require__(15);
	exports.State = __webpack_require__(16);

	exports.createRoute = __webpack_require__(17).createRoute;
	exports.createDefaultRoute = __webpack_require__(17).createDefaultRoute;
	exports.createNotFoundRoute = __webpack_require__(17).createNotFoundRoute;
	exports.createRedirect = __webpack_require__(17).createRedirect;
	exports.createRoutesFromReactChildren = __webpack_require__(18);

	exports.create = __webpack_require__(19);
	exports.run = __webpack_require__(20);

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

	var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

	var PropTypes = __webpack_require__(22);
	var RouteHandler = __webpack_require__(6);
	var Route = __webpack_require__(5);

	/**
	 * A <DefaultRoute> component is a special kind of <Route> that
	 * renders when its parent matches but none of its siblings do.
	 * Only one such route may be used at any given level in the
	 * route hierarchy.
	 */

	var DefaultRoute = (function (_Route) {
	  function DefaultRoute() {
	    _classCallCheck(this, DefaultRoute);

	    if (_Route != null) {
	      _Route.apply(this, arguments);
	    }
	  }

	  _inherits(DefaultRoute, _Route);

	  return DefaultRoute;
	})(Route);

	// TODO: Include these in the above class definition
	// once we can use ES7 property initializers.
	// https://github.com/babel/babel/issues/619

	DefaultRoute.propTypes = {
	  name: PropTypes.string,
	  path: PropTypes.falsy,
	  children: PropTypes.falsy,
	  handler: PropTypes.func.isRequired
	};

	DefaultRoute.defaultProps = {
	  handler: RouteHandler
	};

	module.exports = DefaultRoute;

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

	var React = __webpack_require__(21);
	var assign = __webpack_require__(33);
	var PropTypes = __webpack_require__(22);

	function isLeftClickEvent(event) {
	  return event.button === 0;
	}

	function isModifiedEvent(event) {
	  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
	}

	/**
	 * <Link> components are used to create an <a> element that links to a route.
	 * When that route is active, the link gets an "active" class name (or the
	 * value of its `activeClassName` prop).
	 *
	 * For example, assuming you have the following route:
	 *
	 *   <Route name="showPost" path="/posts/:postID" handler={Post}/>
	 *
	 * You could use the following component to link to that route:
	 *
	 *   <Link to="showPost" params={{ postID: "123" }} />
	 *
	 * In addition to params, links may pass along query string parameters
	 * using the `query` prop.
	 *
	 *   <Link to="showPost" params={{ postID: "123" }} query={{ show:true }}/>
	 */

	var Link = (function (_React$Component) {
	  function Link() {
	    _classCallCheck(this, Link);

	    if (_React$Component != null) {
	      _React$Component.apply(this, arguments);
	    }
	  }

	  _inherits(Link, _React$Component);

	  _createClass(Link, [{
	    key: 'handleClick',
	    value: function handleClick(event) {
	      var allowTransition = true;
	      var clickResult;

	      if (this.props.onClick) clickResult = this.props.onClick(event);

	      if (isModifiedEvent(event) || !isLeftClickEvent(event)) {
	        return;
	      }if (clickResult === false || event.defaultPrevented === true) allowTransition = false;

	      event.preventDefault();

	      if (allowTransition) this.context.router.transitionTo(this.props.to, this.props.params, this.props.query);
	    }
	  }, {
	    key: 'getHref',

	    /**
	     * Returns the value of the "href" attribute to use on the DOM element.
	     */
	    value: function getHref() {
	      return this.context.router.makeHref(this.props.to, this.props.params, this.props.query);
	    }
	  }, {
	    key: 'getClassName',

	    /**
	     * Returns the value of the "class" attribute to use on the DOM element, which contains
	     * the value of the activeClassName property when this <Link> is active.
	     */
	    value: function getClassName() {
	      var className = this.props.className;

	      if (this.getActiveState()) className += ' ' + this.props.activeClassName;

	      return className;
	    }
	  }, {
	    key: 'getActiveState',
	    value: function getActiveState() {
	      return this.context.router.isActive(this.props.to, this.props.params, this.props.query);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var props = assign({}, this.props, {
	        href: this.getHref(),
	        className: this.getClassName(),
	        onClick: this.handleClick.bind(this)
	      });

	      if (props.activeStyle && this.getActiveState()) props.style = props.activeStyle;

	      return React.DOM.a(props, this.props.children);
	    }
	  }]);

	  return Link;
	})(React.Component);

	// TODO: Include these in the above class definition
	// once we can use ES7 property initializers.
	// https://github.com/babel/babel/issues/619

	Link.contextTypes = {
	  router: PropTypes.router.isRequired
	};

	Link.propTypes = {
	  activeClassName: PropTypes.string.isRequired,
	  to: PropTypes.oneOfType([PropTypes.string, PropTypes.route]).isRequired,
	  params: PropTypes.object,
	  query: PropTypes.object,
	  activeStyle: PropTypes.object,
	  onClick: PropTypes.func
	};

	Link.defaultProps = {
	  activeClassName: 'active',
	  className: ''
	};

	module.exports = Link;

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

	var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

	var PropTypes = __webpack_require__(22);
	var RouteHandler = __webpack_require__(6);
	var Route = __webpack_require__(5);

	/**
	 * A <NotFoundRoute> is a special kind of <Route> that
	 * renders when the beginning of its parent's path matches
	 * but none of its siblings do, including any <DefaultRoute>.
	 * Only one such route may be used at any given level in the
	 * route hierarchy.
	 */

	var NotFoundRoute = (function (_Route) {
	  function NotFoundRoute() {
	    _classCallCheck(this, NotFoundRoute);

	    if (_Route != null) {
	      _Route.apply(this, arguments);
	    }
	  }

	  _inherits(NotFoundRoute, _Route);

	  return NotFoundRoute;
	})(Route);

	// TODO: Include these in the above class definition
	// once we can use ES7 property initializers.
	// https://github.com/babel/babel/issues/619

	NotFoundRoute.propTypes = {
	  name: PropTypes.string,
	  path: PropTypes.falsy,
	  children: PropTypes.falsy,
	  handler: PropTypes.func.isRequired
	};

	NotFoundRoute.defaultProps = {
	  handler: RouteHandler
	};

	module.exports = NotFoundRoute;

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

	var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

	var PropTypes = __webpack_require__(22);
	var Route = __webpack_require__(5);

	/**
	 * A <Redirect> component is a special kind of <Route> that always
	 * redirects to another route when it matches.
	 */

	var Redirect = (function (_Route) {
	  function Redirect() {
	    _classCallCheck(this, Redirect);

	    if (_Route != null) {
	      _Route.apply(this, arguments);
	    }
	  }

	  _inherits(Redirect, _Route);

	  return Redirect;
	})(Route);

	// TODO: Include these in the above class definition
	// once we can use ES7 property initializers.
	// https://github.com/babel/babel/issues/619

	Redirect.propTypes = {
	  path: PropTypes.string,
	  from: PropTypes.string, // Alias for path.
	  to: PropTypes.string,
	  handler: PropTypes.falsy
	};

	// Redirects should not have a default handler
	Redirect.defaultProps = {};

	module.exports = Redirect;

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

	var React = __webpack_require__(21);
	var invariant = __webpack_require__(34);
	var PropTypes = __webpack_require__(22);
	var RouteHandler = __webpack_require__(6);

	/**
	 * <Route> components specify components that are rendered to the page when the
	 * URL matches a given pattern.
	 *
	 * Routes are arranged in a nested tree structure. When a new URL is requested,
	 * the tree is searched depth-first to find a route whose path matches the URL.
	 * When one is found, all routes in the tree that lead to it are considered
	 * "active" and their components are rendered into the DOM, nested in the same
	 * order as they are in the tree.
	 *
	 * The preferred way to configure a router is using JSX. The XML-like syntax is
	 * a great way to visualize how routes are laid out in an application.
	 *
	 *   var routes = [
	 *     <Route handler={App}>
	 *       <Route name="login" handler={Login}/>
	 *       <Route name="logout" handler={Logout}/>
	 *       <Route name="about" handler={About}/>
	 *     </Route>
	 *   ];
	 *   
	 *   Router.run(routes, function (Handler) {
	 *     React.render(<Handler/>, document.body);
	 *   });
	 *
	 * Handlers for Route components that contain children can render their active
	 * child route using a <RouteHandler> element.
	 *
	 *   var App = React.createClass({
	 *     render: function () {
	 *       return (
	 *         <div class="application">
	 *           <RouteHandler/>
	 *         </div>
	 *       );
	 *     }
	 *   });
	 *
	 * If no handler is provided for the route, it will render a matched child route.
	 */

	var Route = (function (_React$Component) {
	  function Route() {
	    _classCallCheck(this, Route);

	    if (_React$Component != null) {
	      _React$Component.apply(this, arguments);
	    }
	  }

	  _inherits(Route, _React$Component);

	  _createClass(Route, [{
	    key: 'render',
	    value: function render() {
	      invariant(false, '%s elements are for router configuration only and should not be rendered', this.constructor.name);
	    }
	  }]);

	  return Route;
	})(React.Component);

	// TODO: Include these in the above class definition
	// once we can use ES7 property initializers.
	// https://github.com/babel/babel/issues/619

	Route.propTypes = {
	  name: PropTypes.string,
	  path: PropTypes.string,
	  handler: PropTypes.func,
	  ignoreScrollBehavior: PropTypes.bool
	};

	Route.defaultProps = {
	  handler: RouteHandler
	};

	module.exports = Route;

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

	var React = __webpack_require__(21);
	var ContextWrapper = __webpack_require__(23);
	var assign = __webpack_require__(33);
	var PropTypes = __webpack_require__(22);

	var REF_NAME = '__routeHandler__';

	/**
	 * A <RouteHandler> component renders the active child route handler
	 * when routes are nested.
	 */

	var RouteHandler = (function (_React$Component) {
	  function RouteHandler() {
	    _classCallCheck(this, RouteHandler);

	    if (_React$Component != null) {
	      _React$Component.apply(this, arguments);
	    }
	  }

	  _inherits(RouteHandler, _React$Component);

	  _createClass(RouteHandler, [{
	    key: 'getChildContext',
	    value: function getChildContext() {
	      return {
	        routeDepth: this.context.routeDepth + 1
	      };
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this._updateRouteComponent(this.refs[REF_NAME]);
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate() {
	      this._updateRouteComponent(this.refs[REF_NAME]);
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this._updateRouteComponent(null);
	    }
	  }, {
	    key: '_updateRouteComponent',
	    value: function _updateRouteComponent(component) {
	      this.context.router.setRouteComponentAtDepth(this.getRouteDepth(), component);
	    }
	  }, {
	    key: 'getRouteDepth',
	    value: function getRouteDepth() {
	      return this.context.routeDepth;
	    }
	  }, {
	    key: 'createChildRouteHandler',
	    value: function createChildRouteHandler(props) {
	      var route = this.context.router.getRouteAtDepth(this.getRouteDepth());

	      if (route == null) {
	        return null;
	      }var childProps = assign({}, props || this.props, {
	        ref: REF_NAME,
	        params: this.context.router.getCurrentParams(),
	        query: this.context.router.getCurrentQuery()
	      });

	      return React.createElement(route.handler, childProps);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var handler = this.createChildRouteHandler();
	      // <script/> for things like <CSSTransitionGroup/> that don't like null
	      return handler ? React.createElement(
	        ContextWrapper,
	        null,
	        handler
	      ) : React.createElement('script', null);
	    }
	  }]);

	  return RouteHandler;
	})(React.Component);

	// TODO: Include these in the above class definition
	// once we can use ES7 property initializers.
	// https://github.com/babel/babel/issues/619

	RouteHandler.contextTypes = {
	  routeDepth: PropTypes.number.isRequired,
	  router: PropTypes.router.isRequired
	};

	RouteHandler.childContextTypes = {
	  routeDepth: PropTypes.number.isRequired
	};

	module.exports = RouteHandler;

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var LocationActions = __webpack_require__(24);
	var History = __webpack_require__(14);

	var _listeners = [];
	var _isListening = false;
	var _actionType;

	function notifyChange(type) {
	  if (type === LocationActions.PUSH) History.length += 1;

	  var change = {
	    path: HashLocation.getCurrentPath(),
	    type: type
	  };

	  _listeners.forEach(function (listener) {
	    listener.call(HashLocation, change);
	  });
	}

	function ensureSlash() {
	  var path = HashLocation.getCurrentPath();

	  if (path.charAt(0) === '/') {
	    return true;
	  }HashLocation.replace('/' + path);

	  return false;
	}

	function onHashChange() {
	  if (ensureSlash()) {
	    // If we don't have an _actionType then all we know is the hash
	    // changed. It was probably caused by the user clicking the Back
	    // button, but may have also been the Forward button or manual
	    // manipulation. So just guess 'pop'.
	    var curActionType = _actionType;
	    _actionType = null;
	    notifyChange(curActionType || LocationActions.POP);
	  }
	}

	/**
	 * A Location that uses `window.location.hash`.
	 */
	var HashLocation = {

	  addChangeListener: function addChangeListener(listener) {
	    _listeners.push(listener);

	    // Do this BEFORE listening for hashchange.
	    ensureSlash();

	    if (!_isListening) {
	      if (window.addEventListener) {
	        window.addEventListener('hashchange', onHashChange, false);
	      } else {
	        window.attachEvent('onhashchange', onHashChange);
	      }

	      _isListening = true;
	    }
	  },

	  removeChangeListener: function removeChangeListener(listener) {
	    _listeners = _listeners.filter(function (l) {
	      return l !== listener;
	    });

	    if (_listeners.length === 0) {
	      if (window.removeEventListener) {
	        window.removeEventListener('hashchange', onHashChange, false);
	      } else {
	        window.removeEvent('onhashchange', onHashChange);
	      }

	      _isListening = false;
	    }
	  },

	  push: function push(path) {
	    _actionType = LocationActions.PUSH;
	    window.location.hash = path;
	  },

	  replace: function replace(path) {
	    _actionType = LocationActions.REPLACE;
	    window.location.replace(window.location.pathname + window.location.search + '#' + path);
	  },

	  pop: function pop() {
	    _actionType = LocationActions.POP;
	    History.back();
	  },

	  getCurrentPath: function getCurrentPath() {
	    return decodeURI(
	    // We can't use window.location.hash here because it's not
	    // consistent across browsers - Firefox will pre-decode it!
	    window.location.href.split('#')[1] || '');
	  },

	  toString: function toString() {
	    return '<HashLocation>';
	  }

	};

	module.exports = HashLocation;

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var LocationActions = __webpack_require__(24);
	var History = __webpack_require__(14);

	var _listeners = [];
	var _isListening = false;

	function notifyChange(type) {
	  var change = {
	    path: HistoryLocation.getCurrentPath(),
	    type: type
	  };

	  _listeners.forEach(function (listener) {
	    listener.call(HistoryLocation, change);
	  });
	}

	function onPopState(event) {
	  if (event.state === undefined) {
	    return;
	  } // Ignore extraneous popstate events in WebKit.

	  notifyChange(LocationActions.POP);
	}

	/**
	 * A Location that uses HTML5 history.
	 */
	var HistoryLocation = {

	  addChangeListener: function addChangeListener(listener) {
	    _listeners.push(listener);

	    if (!_isListening) {
	      if (window.addEventListener) {
	        window.addEventListener('popstate', onPopState, false);
	      } else {
	        window.attachEvent('onpopstate', onPopState);
	      }

	      _isListening = true;
	    }
	  },

	  removeChangeListener: function removeChangeListener(listener) {
	    _listeners = _listeners.filter(function (l) {
	      return l !== listener;
	    });

	    if (_listeners.length === 0) {
	      if (window.addEventListener) {
	        window.removeEventListener('popstate', onPopState, false);
	      } else {
	        window.removeEvent('onpopstate', onPopState);
	      }

	      _isListening = false;
	    }
	  },

	  push: function push(path) {
	    window.history.pushState({ path: path }, '', path);
	    History.length += 1;
	    notifyChange(LocationActions.PUSH);
	  },

	  replace: function replace(path) {
	    window.history.replaceState({ path: path }, '', path);
	    notifyChange(LocationActions.REPLACE);
	  },

	  pop: History.back,

	  getCurrentPath: function getCurrentPath() {
	    return decodeURI(window.location.pathname + window.location.search);
	  },

	  toString: function toString() {
	    return '<HistoryLocation>';
	  }

	};

	module.exports = HistoryLocation;

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var HistoryLocation = __webpack_require__(8);
	var History = __webpack_require__(14);

	/**
	 * A Location that uses full page refreshes. This is used as
	 * the fallback for HistoryLocation in browsers that do not
	 * support the HTML5 history API.
	 */
	var RefreshLocation = {

	  push: function push(path) {
	    window.location = path;
	  },

	  replace: function replace(path) {
	    window.location.replace(path);
	  },

	  pop: History.back,

	  getCurrentPath: HistoryLocation.getCurrentPath,

	  toString: function toString() {
	    return '<RefreshLocation>';
	  }

	};

	module.exports = RefreshLocation;

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var invariant = __webpack_require__(34);

	function throwCannotModify() {
	  invariant(false, 'You cannot modify a static location');
	}

	/**
	 * A location that only ever contains a single path. Useful in
	 * stateless environments like servers where there is no path history,
	 * only the path that was used in the request.
	 */

	var StaticLocation = (function () {
	  function StaticLocation(path) {
	    _classCallCheck(this, StaticLocation);

	    this.path = path;
	  }

	  _createClass(StaticLocation, [{
	    key: 'getCurrentPath',
	    value: function getCurrentPath() {
	      return this.path;
	    }
	  }, {
	    key: 'toString',
	    value: function toString() {
	      return '<StaticLocation path="' + this.path + '">';
	    }
	  }]);

	  return StaticLocation;
	})();

	// TODO: Include these in the above class definition
	// once we can use ES7 property initializers.
	// https://github.com/babel/babel/issues/619

	StaticLocation.prototype.push = throwCannotModify;
	StaticLocation.prototype.replace = throwCannotModify;
	StaticLocation.prototype.pop = throwCannotModify;

	module.exports = StaticLocation;

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var invariant = __webpack_require__(34);
	var LocationActions = __webpack_require__(24);
	var History = __webpack_require__(14);

	/**
	 * A location that is convenient for testing and does not require a DOM.
	 */

	var TestLocation = (function () {
	  function TestLocation(history) {
	    _classCallCheck(this, TestLocation);

	    this.history = history || [];
	    this.listeners = [];
	    this._updateHistoryLength();
	  }

	  _createClass(TestLocation, [{
	    key: 'needsDOM',
	    get: function () {
	      return false;
	    }
	  }, {
	    key: '_updateHistoryLength',
	    value: function _updateHistoryLength() {
	      History.length = this.history.length;
	    }
	  }, {
	    key: '_notifyChange',
	    value: function _notifyChange(type) {
	      var change = {
	        path: this.getCurrentPath(),
	        type: type
	      };

	      for (var i = 0, len = this.listeners.length; i < len; ++i) this.listeners[i].call(this, change);
	    }
	  }, {
	    key: 'addChangeListener',
	    value: function addChangeListener(listener) {
	      this.listeners.push(listener);
	    }
	  }, {
	    key: 'removeChangeListener',
	    value: function removeChangeListener(listener) {
	      this.listeners = this.listeners.filter(function (l) {
	        return l !== listener;
	      });
	    }
	  }, {
	    key: 'push',
	    value: function push(path) {
	      this.history.push(path);
	      this._updateHistoryLength();
	      this._notifyChange(LocationActions.PUSH);
	    }
	  }, {
	    key: 'replace',
	    value: function replace(path) {
	      invariant(this.history.length, 'You cannot replace the current path with no history');

	      this.history[this.history.length - 1] = path;

	      this._notifyChange(LocationActions.REPLACE);
	    }
	  }, {
	    key: 'pop',
	    value: function pop() {
	      this.history.pop();
	      this._updateHistoryLength();
	      this._notifyChange(LocationActions.POP);
	    }
	  }, {
	    key: 'getCurrentPath',
	    value: function getCurrentPath() {
	      return this.history[this.history.length - 1];
	    }
	  }, {
	    key: 'toString',
	    value: function toString() {
	      return '<TestLocation>';
	    }
	  }]);

	  return TestLocation;
	})();

	module.exports = TestLocation;

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var LocationActions = __webpack_require__(24);

	/**
	 * A scroll behavior that attempts to imitate the default behavior
	 * of modern browsers.
	 */
	var ImitateBrowserBehavior = {

	  updateScrollPosition: function updateScrollPosition(position, actionType) {
	    switch (actionType) {
	      case LocationActions.PUSH:
	      case LocationActions.REPLACE:
	        window.scrollTo(0, 0);
	        break;
	      case LocationActions.POP:
	        if (position) {
	          window.scrollTo(position.x, position.y);
	        } else {
	          window.scrollTo(0, 0);
	        }
	        break;
	    }
	  }

	};

	module.exports = ImitateBrowserBehavior;

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * A scroll behavior that always scrolls to the top of the page
	 * after a transition.
	 */
	"use strict";

	var ScrollToTopBehavior = {

	  updateScrollPosition: function updateScrollPosition() {
	    window.scrollTo(0, 0);
	  }

	};

	module.exports = ScrollToTopBehavior;

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var invariant = __webpack_require__(34);
	var canUseDOM = __webpack_require__(35).canUseDOM;

	var History = {

	  /**
	   * The current number of entries in the history.
	   *
	   * Note: This property is read-only.
	   */
	  length: 1,

	  /**
	   * Sends the browser back one entry in the history.
	   */
	  back: function back() {
	    invariant(canUseDOM, 'Cannot use History.back without a DOM');

	    // Do this first so that History.length will
	    // be accurate in location change listeners.
	    History.length -= 1;

	    window.history.back();
	  }

	};

	module.exports = History;

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var PropTypes = __webpack_require__(22);

	/**
	 * A mixin for components that modify the URL.
	 *
	 * Example:
	 *
	 *   var MyLink = React.createClass({
	 *     mixins: [ Router.Navigation ],
	 *     handleClick(event) {
	 *       event.preventDefault();
	 *       this.transitionTo('aRoute', { the: 'params' }, { the: 'query' });
	 *     },
	 *     render() {
	 *       return (
	 *         <a onClick={this.handleClick}>Click me!</a>
	 *       );
	 *     }
	 *   });
	 */
	var Navigation = {

	  contextTypes: {
	    router: PropTypes.router.isRequired
	  },

	  /**
	   * Returns an absolute URL path created from the given route
	   * name, URL parameters, and query values.
	   */
	  makePath: function makePath(to, params, query) {
	    return this.context.router.makePath(to, params, query);
	  },

	  /**
	   * Returns a string that may safely be used as the href of a
	   * link to the route with the given name.
	   */
	  makeHref: function makeHref(to, params, query) {
	    return this.context.router.makeHref(to, params, query);
	  },

	  /**
	   * Transitions to the URL specified in the arguments by pushing
	   * a new URL onto the history stack.
	   */
	  transitionTo: function transitionTo(to, params, query) {
	    this.context.router.transitionTo(to, params, query);
	  },

	  /**
	   * Transitions to the URL specified in the arguments by replacing
	   * the current URL in the history stack.
	   */
	  replaceWith: function replaceWith(to, params, query) {
	    this.context.router.replaceWith(to, params, query);
	  },

	  /**
	   * Transitions to the previous URL.
	   */
	  goBack: function goBack() {
	    return this.context.router.goBack();
	  }

	};

	module.exports = Navigation;

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var PropTypes = __webpack_require__(22);

	/**
	 * A mixin for components that need to know the path, routes, URL
	 * params and query that are currently active.
	 *
	 * Example:
	 *
	 *   var AboutLink = React.createClass({
	 *     mixins: [ Router.State ],
	 *     render() {
	 *       var className = this.props.className;
	 *
	 *       if (this.isActive('about'))
	 *         className += ' is-active';
	 *
	 *       return React.DOM.a({ className: className }, this.props.children);
	 *     }
	 *   });
	 */
	var State = {

	  contextTypes: {
	    router: PropTypes.router.isRequired
	  },

	  /**
	   * Returns the current URL path.
	   */
	  getPath: function getPath() {
	    return this.context.router.getCurrentPath();
	  },

	  /**
	   * Returns the current URL path without the query string.
	   */
	  getPathname: function getPathname() {
	    return this.context.router.getCurrentPathname();
	  },

	  /**
	   * Returns an object of the URL params that are currently active.
	   */
	  getParams: function getParams() {
	    return this.context.router.getCurrentParams();
	  },

	  /**
	   * Returns an object of the query params that are currently active.
	   */
	  getQuery: function getQuery() {
	    return this.context.router.getCurrentQuery();
	  },

	  /**
	   * Returns an array of the routes that are currently active.
	   */
	  getRoutes: function getRoutes() {
	    return this.context.router.getCurrentRoutes();
	  },

	  /**
	   * A helper method to determine if a given route, params, and query
	   * are active.
	   */
	  isActive: function isActive(to, params, query) {
	    return this.context.router.isActive(to, params, query);
	  }

	};

	module.exports = State;

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var assign = __webpack_require__(33);
	var invariant = __webpack_require__(34);
	var warning = __webpack_require__(36);
	var PathUtils = __webpack_require__(25);

	var _currentRoute;

	var Route = (function () {
	  function Route(name, path, ignoreScrollBehavior, isDefault, isNotFound, onEnter, onLeave, handler) {
	    _classCallCheck(this, Route);

	    this.name = name;
	    this.path = path;
	    this.paramNames = PathUtils.extractParamNames(this.path);
	    this.ignoreScrollBehavior = !!ignoreScrollBehavior;
	    this.isDefault = !!isDefault;
	    this.isNotFound = !!isNotFound;
	    this.onEnter = onEnter;
	    this.onLeave = onLeave;
	    this.handler = handler;
	  }

	  _createClass(Route, [{
	    key: 'appendChild',

	    /**
	     * Appends the given route to this route's child routes.
	     */
	    value: function appendChild(route) {
	      invariant(route instanceof Route, 'route.appendChild must use a valid Route');

	      if (!this.childRoutes) this.childRoutes = [];

	      this.childRoutes.push(route);
	    }
	  }, {
	    key: 'toString',
	    value: function toString() {
	      var string = '<Route';

	      if (this.name) string += ' name="' + this.name + '"';

	      string += ' path="' + this.path + '">';

	      return string;
	    }
	  }], [{
	    key: 'createRoute',

	    /**
	     * Creates and returns a new route. Options may be a URL pathname string
	     * with placeholders for named params or an object with any of the following
	     * properties:
	     *
	     * - name                     The name of the route. This is used to lookup a
	     *                            route relative to its parent route and should be
	     *                            unique among all child routes of the same parent
	     * - path                     A URL pathname string with optional placeholders
	     *                            that specify the names of params to extract from
	     *                            the URL when the path matches. Defaults to `/${name}`
	     *                            when there is a name given, or the path of the parent
	     *                            route, or /
	     * - ignoreScrollBehavior     True to make this route (and all descendants) ignore
	     *                            the scroll behavior of the router
	     * - isDefault                True to make this route the default route among all
	     *                            its siblings
	     * - isNotFound               True to make this route the "not found" route among
	     *                            all its siblings
	     * - onEnter                  A transition hook that will be called when the
	     *                            router is going to enter this route
	     * - onLeave                  A transition hook that will be called when the
	     *                            router is going to leave this route
	     * - handler                  A React component that will be rendered when
	     *                            this route is active
	     * - parentRoute              The parent route to use for this route. This option
	     *                            is automatically supplied when creating routes inside
	     *                            the callback to another invocation of createRoute. You
	     *                            only ever need to use this when declaring routes
	     *                            independently of one another to manually piece together
	     *                            the route hierarchy
	     *
	     * The callback may be used to structure your route hierarchy. Any call to
	     * createRoute, createDefaultRoute, createNotFoundRoute, or createRedirect
	     * inside the callback automatically uses this route as its parent.
	     */
	    value: function createRoute(options, callback) {
	      options = options || {};

	      if (typeof options === 'string') options = { path: options };

	      var parentRoute = _currentRoute;

	      if (parentRoute) {
	        warning(options.parentRoute == null || options.parentRoute === parentRoute, 'You should not use parentRoute with createRoute inside another route\'s child callback; it is ignored');
	      } else {
	        parentRoute = options.parentRoute;
	      }

	      var name = options.name;
	      var path = options.path || name;

	      if (path && !(options.isDefault || options.isNotFound)) {
	        if (PathUtils.isAbsolute(path)) {
	          if (parentRoute) {
	            invariant(path === parentRoute.path || parentRoute.paramNames.length === 0, 'You cannot nest path "%s" inside "%s"; the parent requires URL parameters', path, parentRoute.path);
	          }
	        } else if (parentRoute) {
	          // Relative paths extend their parent.
	          path = PathUtils.join(parentRoute.path, path);
	        } else {
	          path = '/' + path;
	        }
	      } else {
	        path = parentRoute ? parentRoute.path : '/';
	      }

	      if (options.isNotFound && !/\*$/.test(path)) path += '*'; // Auto-append * to the path of not found routes.

	      var route = new Route(name, path, options.ignoreScrollBehavior, options.isDefault, options.isNotFound, options.onEnter, options.onLeave, options.handler);

	      if (parentRoute) {
	        if (route.isDefault) {
	          invariant(parentRoute.defaultRoute == null, '%s may not have more than one default route', parentRoute);

	          parentRoute.defaultRoute = route;
	        } else if (route.isNotFound) {
	          invariant(parentRoute.notFoundRoute == null, '%s may not have more than one not found route', parentRoute);

	          parentRoute.notFoundRoute = route;
	        }

	        parentRoute.appendChild(route);
	      }

	      // Any routes created in the callback
	      // use this route as their parent.
	      if (typeof callback === 'function') {
	        var currentRoute = _currentRoute;
	        _currentRoute = route;
	        callback.call(route, route);
	        _currentRoute = currentRoute;
	      }

	      return route;
	    }
	  }, {
	    key: 'createDefaultRoute',

	    /**
	     * Creates and returns a route that is rendered when its parent matches
	     * the current URL.
	     */
	    value: function createDefaultRoute(options) {
	      return Route.createRoute(assign({}, options, { isDefault: true }));
	    }
	  }, {
	    key: 'createNotFoundRoute',

	    /**
	     * Creates and returns a route that is rendered when its parent matches
	     * the current URL but none of its siblings do.
	     */
	    value: function createNotFoundRoute(options) {
	      return Route.createRoute(assign({}, options, { isNotFound: true }));
	    }
	  }, {
	    key: 'createRedirect',

	    /**
	     * Creates and returns a route that automatically redirects the transition
	     * to another route. In addition to the normal options to createRoute, this
	     * function accepts the following options:
	     *
	     * - from         An alias for the `path` option. Defaults to *
	     * - to           The path/route/route name to redirect to
	     * - params       The params to use in the redirect URL. Defaults
	     *                to using the current params
	     * - query        The query to use in the redirect URL. Defaults
	     *                to using the current query
	     */
	    value: function createRedirect(options) {
	      return Route.createRoute(assign({}, options, {
	        path: options.path || options.from || '*',
	        onEnter: function onEnter(transition, params, query) {
	          transition.redirect(options.to, options.params || params, options.query || query);
	        }
	      }));
	    }
	  }]);

	  return Route;
	})();

	module.exports = Route;

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	/* jshint -W084 */
	'use strict';

	var React = __webpack_require__(21);
	var assign = __webpack_require__(33);
	var warning = __webpack_require__(36);
	var DefaultRoute = __webpack_require__(1);
	var NotFoundRoute = __webpack_require__(3);
	var Redirect = __webpack_require__(4);
	var Route = __webpack_require__(17);

	function checkPropTypes(componentName, propTypes, props) {
	  componentName = componentName || 'UnknownComponent';

	  for (var propName in propTypes) {
	    if (propTypes.hasOwnProperty(propName)) {
	      var error = propTypes[propName](props, propName, componentName);

	      if (error instanceof Error) warning(false, error.message);
	    }
	  }
	}

	function createRouteOptions(props) {
	  var options = assign({}, props);
	  var handler = options.handler;

	  if (handler) {
	    options.onEnter = handler.willTransitionTo;
	    options.onLeave = handler.willTransitionFrom;
	  }

	  return options;
	}

	function createRouteFromReactElement(element) {
	  if (!React.isValidElement(element)) {
	    return;
	  }var type = element.type;
	  var props = assign({}, type.defaultProps, element.props);

	  if (type.propTypes) checkPropTypes(type.displayName, type.propTypes, props);

	  if (type === DefaultRoute) {
	    return Route.createDefaultRoute(createRouteOptions(props));
	  }if (type === NotFoundRoute) {
	    return Route.createNotFoundRoute(createRouteOptions(props));
	  }if (type === Redirect) {
	    return Route.createRedirect(createRouteOptions(props));
	  }return Route.createRoute(createRouteOptions(props), function () {
	    if (props.children) createRoutesFromReactChildren(props.children);
	  });
	}

	/**
	 * Creates and returns an array of routes created from the given
	 * ReactChildren, all of which should be one of <Route>, <DefaultRoute>,
	 * <NotFoundRoute>, or <Redirect>, e.g.:
	 *
	 *   var { createRoutesFromReactChildren, Route, Redirect } = require('react-router');
	 *
	 *   var routes = createRoutesFromReactChildren(
	 *     <Route path="/" handler={App}>
	 *       <Route name="user" path="/user/:userId" handler={User}>
	 *         <Route name="task" path="tasks/:taskId" handler={Task}/>
	 *         <Redirect from="todos/:taskId" to="task"/>
	 *       </Route>
	 *     </Route>
	 *   );
	 */
	function createRoutesFromReactChildren(children) {
	  var routes = [];

	  React.Children.forEach(children, function (child) {
	    if (child = createRouteFromReactElement(child)) routes.push(child);
	  });

	  return routes;
	}

	module.exports = createRoutesFromReactChildren;

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	/* jshint -W058 */
	'use strict';

	var React = __webpack_require__(21);
	var warning = __webpack_require__(36);
	var invariant = __webpack_require__(34);
	var canUseDOM = __webpack_require__(35).canUseDOM;
	var LocationActions = __webpack_require__(24);
	var ImitateBrowserBehavior = __webpack_require__(12);
	var HashLocation = __webpack_require__(7);
	var HistoryLocation = __webpack_require__(8);
	var RefreshLocation = __webpack_require__(9);
	var StaticLocation = __webpack_require__(10);
	var ScrollHistory = __webpack_require__(26);
	var createRoutesFromReactChildren = __webpack_require__(18);
	var isReactChildren = __webpack_require__(27);
	var Transition = __webpack_require__(28);
	var PropTypes = __webpack_require__(22);
	var Redirect = __webpack_require__(29);
	var History = __webpack_require__(14);
	var Cancellation = __webpack_require__(30);
	var Match = __webpack_require__(31);
	var Route = __webpack_require__(17);
	var supportsHistory = __webpack_require__(32);
	var PathUtils = __webpack_require__(25);

	/**
	 * The default location for new routers.
	 */
	var DEFAULT_LOCATION = canUseDOM ? HashLocation : '/';

	/**
	 * The default scroll behavior for new routers.
	 */
	var DEFAULT_SCROLL_BEHAVIOR = canUseDOM ? ImitateBrowserBehavior : null;

	function hasProperties(object, properties) {
	  for (var propertyName in properties) if (properties.hasOwnProperty(propertyName) && object[propertyName] !== properties[propertyName]) {
	    return false;
	  }return true;
	}

	function hasMatch(routes, route, prevParams, nextParams, prevQuery, nextQuery) {
	  return routes.some(function (r) {
	    if (r !== route) return false;

	    var paramNames = route.paramNames;
	    var paramName;

	    // Ensure that all params the route cares about did not change.
	    for (var i = 0, len = paramNames.length; i < len; ++i) {
	      paramName = paramNames[i];

	      if (nextParams[paramName] !== prevParams[paramName]) return false;
	    }

	    // Ensure the query hasn't changed.
	    return hasProperties(prevQuery, nextQuery) && hasProperties(nextQuery, prevQuery);
	  });
	}

	function addRoutesToNamedRoutes(routes, namedRoutes) {
	  var route;
	  for (var i = 0, len = routes.length; i < len; ++i) {
	    route = routes[i];

	    if (route.name) {
	      invariant(namedRoutes[route.name] == null, 'You may not have more than one route named "%s"', route.name);

	      namedRoutes[route.name] = route;
	    }

	    if (route.childRoutes) addRoutesToNamedRoutes(route.childRoutes, namedRoutes);
	  }
	}

	function routeIsActive(activeRoutes, routeName) {
	  return activeRoutes.some(function (route) {
	    return route.name === routeName;
	  });
	}

	function paramsAreActive(activeParams, params) {
	  for (var property in params) if (String(activeParams[property]) !== String(params[property])) {
	    return false;
	  }return true;
	}

	function queryIsActive(activeQuery, query) {
	  for (var property in query) if (String(activeQuery[property]) !== String(query[property])) {
	    return false;
	  }return true;
	}

	/**
	 * Creates and returns a new router using the given options. A router
	 * is a ReactComponent class that knows how to react to changes in the
	 * URL and keep the contents of the page in sync.
	 *
	 * Options may be any of the following:
	 *
	 * - routes           (required) The route config
	 * - location         The location to use. Defaults to HashLocation when
	 *                    the DOM is available, "/" otherwise
	 * - scrollBehavior   The scroll behavior to use. Defaults to ImitateBrowserBehavior
	 *                    when the DOM is available, null otherwise
	 * - onError          A function that is used to handle errors
	 * - onAbort          A function that is used to handle aborted transitions
	 *
	 * When rendering in a server-side environment, the location should simply
	 * be the URL path that was used in the request, including the query string.
	 */
	function createRouter(options) {
	  options = options || {};

	  if (isReactChildren(options)) options = { routes: options };

	  var mountedComponents = [];
	  var location = options.location || DEFAULT_LOCATION;
	  var scrollBehavior = options.scrollBehavior || DEFAULT_SCROLL_BEHAVIOR;
	  var state = {};
	  var nextState = {};
	  var pendingTransition = null;
	  var dispatchHandler = null;

	  if (typeof location === 'string') location = new StaticLocation(location);

	  if (location instanceof StaticLocation) {
	    warning(!canUseDOM || ("production") === 'test', 'You should not use a static location in a DOM environment because ' + 'the router will not be kept in sync with the current URL');
	  } else {
	    invariant(canUseDOM || location.needsDOM === false, 'You cannot use %s without a DOM', location);
	  }

	  // Automatically fall back to full page refreshes in
	  // browsers that don't support the HTML history API.
	  if (location === HistoryLocation && !supportsHistory()) location = RefreshLocation;

	  var Router = React.createClass({

	    displayName: 'Router',

	    statics: {

	      isRunning: false,

	      cancelPendingTransition: function cancelPendingTransition() {
	        if (pendingTransition) {
	          pendingTransition.cancel();
	          pendingTransition = null;
	        }
	      },

	      clearAllRoutes: function clearAllRoutes() {
	        Router.cancelPendingTransition();
	        Router.namedRoutes = {};
	        Router.routes = [];
	      },

	      /**
	       * Adds routes to this router from the given children object (see ReactChildren).
	       */
	      addRoutes: function addRoutes(routes) {
	        if (isReactChildren(routes)) routes = createRoutesFromReactChildren(routes);

	        addRoutesToNamedRoutes(routes, Router.namedRoutes);

	        Router.routes.push.apply(Router.routes, routes);
	      },

	      /**
	       * Replaces routes of this router from the given children object (see ReactChildren).
	       */
	      replaceRoutes: function replaceRoutes(routes) {
	        Router.clearAllRoutes();
	        Router.addRoutes(routes);
	        Router.refresh();
	      },

	      /**
	       * Performs a match of the given path against this router and returns an object
	       * with the { routes, params, pathname, query } that match. Returns null if no
	       * match can be made.
	       */
	      match: function match(path) {
	        return Match.findMatch(Router.routes, path);
	      },

	      /**
	       * Returns an absolute URL path created from the given route
	       * name, URL parameters, and query.
	       */
	      makePath: function makePath(to, params, query) {
	        var path;
	        if (PathUtils.isAbsolute(to)) {
	          path = to;
	        } else {
	          var route = to instanceof Route ? to : Router.namedRoutes[to];

	          invariant(route instanceof Route, 'Cannot find a route named "%s"', to);

	          path = route.path;
	        }

	        return PathUtils.withQuery(PathUtils.injectParams(path, params), query);
	      },

	      /**
	       * Returns a string that may safely be used as the href of a link
	       * to the route with the given name, URL parameters, and query.
	       */
	      makeHref: function makeHref(to, params, query) {
	        var path = Router.makePath(to, params, query);
	        return location === HashLocation ? '#' + path : path;
	      },

	      /**
	       * Transitions to the URL specified in the arguments by pushing
	       * a new URL onto the history stack.
	       */
	      transitionTo: function transitionTo(to, params, query) {
	        var path = Router.makePath(to, params, query);

	        if (pendingTransition) {
	          // Replace so pending location does not stay in history.
	          location.replace(path);
	        } else {
	          location.push(path);
	        }
	      },

	      /**
	       * Transitions to the URL specified in the arguments by replacing
	       * the current URL in the history stack.
	       */
	      replaceWith: function replaceWith(to, params, query) {
	        location.replace(Router.makePath(to, params, query));
	      },

	      /**
	       * Transitions to the previous URL if one is available. Returns true if the
	       * router was able to go back, false otherwise.
	       *
	       * Note: The router only tracks history entries in your application, not the
	       * current browser session, so you can safely call this function without guarding
	       * against sending the user back to some other site. However, when using
	       * RefreshLocation (which is the fallback for HistoryLocation in browsers that
	       * don't support HTML5 history) this method will *always* send the client back
	       * because we cannot reliably track history length.
	       */
	      goBack: function goBack() {
	        if (History.length > 1 || location === RefreshLocation) {
	          location.pop();
	          return true;
	        }

	        warning(false, 'goBack() was ignored because there is no router history');

	        return false;
	      },

	      handleAbort: options.onAbort || function (abortReason) {
	        if (location instanceof StaticLocation) throw new Error('Unhandled aborted transition! Reason: ' + abortReason);

	        if (abortReason instanceof Cancellation) {
	          return;
	        } else if (abortReason instanceof Redirect) {
	          location.replace(Router.makePath(abortReason.to, abortReason.params, abortReason.query));
	        } else {
	          location.pop();
	        }
	      },

	      handleError: options.onError || function (error) {
	        // Throw so we don't silently swallow async errors.
	        throw error; // This error probably originated in a transition hook.
	      },

	      handleLocationChange: function handleLocationChange(change) {
	        Router.dispatch(change.path, change.type);
	      },

	      /**
	       * Performs a transition to the given path and calls callback(error, abortReason)
	       * when the transition is finished. If both arguments are null the router's state
	       * was updated. Otherwise the transition did not complete.
	       *
	       * In a transition, a router first determines which routes are involved by beginning
	       * with the current route, up the route tree to the first parent route that is shared
	       * with the destination route, and back down the tree to the destination route. The
	       * willTransitionFrom hook is invoked on all route handlers we're transitioning away
	       * from, in reverse nesting order. Likewise, the willTransitionTo hook is invoked on
	       * all route handlers we're transitioning to.
	       *
	       * Both willTransitionFrom and willTransitionTo hooks may either abort or redirect the
	       * transition. To resolve asynchronously, they may use the callback argument. If no
	       * hooks wait, the transition is fully synchronous.
	       */
	      dispatch: function dispatch(path, action) {
	        Router.cancelPendingTransition();

	        var prevPath = state.path;
	        var isRefreshing = action == null;

	        if (prevPath === path && !isRefreshing) {
	          return;
	        } // Nothing to do!

	        // Record the scroll position as early as possible to
	        // get it before browsers try update it automatically.
	        if (prevPath && action === LocationActions.PUSH) Router.recordScrollPosition(prevPath);

	        var match = Router.match(path);

	        warning(match != null, 'No route matches path "%s". Make sure you have <Route path="%s"> somewhere in your routes', path, path);

	        if (match == null) match = {};

	        var prevRoutes = state.routes || [];
	        var prevParams = state.params || {};
	        var prevQuery = state.query || {};

	        var nextRoutes = match.routes || [];
	        var nextParams = match.params || {};
	        var nextQuery = match.query || {};

	        var fromRoutes, toRoutes;
	        if (prevRoutes.length) {
	          fromRoutes = prevRoutes.filter(function (route) {
	            return !hasMatch(nextRoutes, route, prevParams, nextParams, prevQuery, nextQuery);
	          });

	          toRoutes = nextRoutes.filter(function (route) {
	            return !hasMatch(prevRoutes, route, prevParams, nextParams, prevQuery, nextQuery);
	          });
	        } else {
	          fromRoutes = [];
	          toRoutes = nextRoutes;
	        }

	        var transition = new Transition(path, Router.replaceWith.bind(Router, path));
	        pendingTransition = transition;

	        var fromComponents = mountedComponents.slice(prevRoutes.length - fromRoutes.length);

	        Transition.from(transition, fromRoutes, fromComponents, function (error) {
	          if (error || transition.abortReason) return dispatchHandler.call(Router, error, transition); // No need to continue.

	          Transition.to(transition, toRoutes, nextParams, nextQuery, function (error) {
	            dispatchHandler.call(Router, error, transition, {
	              path: path,
	              action: action,
	              pathname: match.pathname,
	              routes: nextRoutes,
	              params: nextParams,
	              query: nextQuery
	            });
	          });
	        });
	      },

	      /**
	       * Starts this router and calls callback(router, state) when the route changes.
	       *
	       * If the router's location is static (i.e. a URL path in a server environment)
	       * the callback is called only once. Otherwise, the location should be one of the
	       * Router.*Location objects (e.g. Router.HashLocation or Router.HistoryLocation).
	       */
	      run: function run(callback) {
	        invariant(!Router.isRunning, 'Router is already running');

	        dispatchHandler = function (error, transition, newState) {
	          if (error) Router.handleError(error);

	          if (pendingTransition !== transition) return;

	          pendingTransition = null;

	          if (transition.abortReason) {
	            Router.handleAbort(transition.abortReason);
	          } else {
	            callback.call(Router, Router, nextState = newState);
	          }
	        };

	        if (!(location instanceof StaticLocation)) {
	          if (location.addChangeListener) location.addChangeListener(Router.handleLocationChange);

	          Router.isRunning = true;
	        }

	        // Bootstrap using the current path.
	        Router.refresh();
	      },

	      refresh: function refresh() {
	        Router.dispatch(location.getCurrentPath(), null);
	      },

	      stop: function stop() {
	        Router.cancelPendingTransition();

	        if (location.removeChangeListener) location.removeChangeListener(Router.handleLocationChange);

	        Router.isRunning = false;
	      },

	      getLocation: function getLocation() {
	        return location;
	      },

	      getScrollBehavior: function getScrollBehavior() {
	        return scrollBehavior;
	      },

	      getRouteAtDepth: function getRouteAtDepth(routeDepth) {
	        var routes = state.routes;
	        return routes && routes[routeDepth];
	      },

	      setRouteComponentAtDepth: function setRouteComponentAtDepth(routeDepth, component) {
	        mountedComponents[routeDepth] = component;
	      },

	      /**
	       * Returns the current URL path + query string.
	       */
	      getCurrentPath: function getCurrentPath() {
	        return state.path;
	      },

	      /**
	       * Returns the current URL path without the query string.
	       */
	      getCurrentPathname: function getCurrentPathname() {
	        return state.pathname;
	      },

	      /**
	       * Returns an object of the currently active URL parameters.
	       */
	      getCurrentParams: function getCurrentParams() {
	        return state.params;
	      },

	      /**
	       * Returns an object of the currently active query parameters.
	       */
	      getCurrentQuery: function getCurrentQuery() {
	        return state.query;
	      },

	      /**
	       * Returns an array of the currently active routes.
	       */
	      getCurrentRoutes: function getCurrentRoutes() {
	        return state.routes;
	      },

	      /**
	       * Returns true if the given route, params, and query are active.
	       */
	      isActive: function isActive(to, params, query) {
	        if (PathUtils.isAbsolute(to)) {
	          return to === state.path;
	        }return routeIsActive(state.routes, to) && paramsAreActive(state.params, params) && (query == null || queryIsActive(state.query, query));
	      }

	    },

	    mixins: [ScrollHistory],

	    propTypes: {
	      children: PropTypes.falsy
	    },

	    childContextTypes: {
	      routeDepth: PropTypes.number.isRequired,
	      router: PropTypes.router.isRequired
	    },

	    getChildContext: function getChildContext() {
	      return {
	        routeDepth: 1,
	        router: Router
	      };
	    },

	    getInitialState: function getInitialState() {
	      return state = nextState;
	    },

	    componentWillReceiveProps: function componentWillReceiveProps() {
	      this.setState(state = nextState);
	    },

	    componentWillUnmount: function componentWillUnmount() {
	      Router.stop();
	    },

	    render: function render() {
	      var route = Router.getRouteAtDepth(0);
	      return route ? React.createElement(route.handler, this.props) : null;
	    }

	  });

	  Router.clearAllRoutes();

	  if (options.routes) Router.addRoutes(options.routes);

	  return Router;
	}

	module.exports = createRouter;

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var createRouter = __webpack_require__(19);

	/**
	 * A high-level convenience method that creates, configures, and
	 * runs a router in one shot. The method signature is:
	 *
	 *   Router.run(routes[, location ], callback);
	 *
	 * Using `window.location.hash` to manage the URL, you could do:
	 *
	 *   Router.run(routes, function (Handler) {
	 *     React.render(<Handler/>, document.body);
	 *   });
	 * 
	 * Using HTML5 history and a custom "cursor" prop:
	 * 
	 *   Router.run(routes, Router.HistoryLocation, function (Handler) {
	 *     React.render(<Handler cursor={cursor}/>, document.body);
	 *   });
	 *
	 * Returns the newly created router.
	 *
	 * Note: If you need to specify further options for your router such
	 * as error/abort handling or custom scroll behavior, use Router.create
	 * instead.
	 *
	 *   var router = Router.create(options);
	 *   router.run(function (Handler) {
	 *     // ...
	 *   });
	 */
	function runRouter(routes, location, callback) {
	  if (typeof location === 'function') {
	    callback = location;
	    location = null;
	  }

	  var router = createRouter({
	    routes: routes,
	    location: location
	  });

	  router.run(callback);

	  return router;
	}

	module.exports = runRouter;

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_21__;

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var assign = __webpack_require__(33);
	var ReactPropTypes = __webpack_require__(21).PropTypes;
	var Route = __webpack_require__(17);

	var PropTypes = assign({}, ReactPropTypes, {

	  /**
	   * Indicates that a prop should be falsy.
	   */
	  falsy: function falsy(props, propName, componentName) {
	    if (props[propName]) {
	      return new Error('<' + componentName + '> should not have a "' + propName + '" prop');
	    }
	  },

	  /**
	   * Indicates that a prop should be a Route object.
	   */
	  route: ReactPropTypes.instanceOf(Route),

	  /**
	   * Indicates that a prop should be a Router object.
	   */
	  //router: ReactPropTypes.instanceOf(Router) // TODO
	  router: ReactPropTypes.func

	});

	module.exports = PropTypes;

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

	/**
	 * This component is necessary to get around a context warning
	 * present in React 0.13.0. It sovles this by providing a separation
	 * between the "owner" and "parent" contexts.
	 */

	var React = __webpack_require__(21);

	var ContextWrapper = (function (_React$Component) {
	  function ContextWrapper() {
	    _classCallCheck(this, ContextWrapper);

	    if (_React$Component != null) {
	      _React$Component.apply(this, arguments);
	    }
	  }

	  _inherits(ContextWrapper, _React$Component);

	  _createClass(ContextWrapper, [{
	    key: 'render',
	    value: function render() {
	      return this.props.children;
	    }
	  }]);

	  return ContextWrapper;
	})(React.Component);

	module.exports = ContextWrapper;

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Actions that modify the URL.
	 */
	'use strict';

	var LocationActions = {

	  /**
	   * Indicates a new location is being pushed to the history stack.
	   */
	  PUSH: 'push',

	  /**
	   * Indicates the current location should be replaced.
	   */
	  REPLACE: 'replace',

	  /**
	   * Indicates the most recent entry should be removed from the history stack.
	   */
	  POP: 'pop'

	};

	module.exports = LocationActions;

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var invariant = __webpack_require__(34);
	var assign = __webpack_require__(38);
	var qs = __webpack_require__(39);

	var paramCompileMatcher = /:([a-zA-Z_$][a-zA-Z0-9_$]*)|[*.()\[\]\\+|{}^$]/g;
	var paramInjectMatcher = /:([a-zA-Z_$][a-zA-Z0-9_$?]*[?]?)|[*]/g;
	var paramInjectTrailingSlashMatcher = /\/\/\?|\/\?\/|\/\?/g;
	var queryMatcher = /\?(.*)$/;

	var _compiledPatterns = {};

	function compilePattern(pattern) {
	  if (!(pattern in _compiledPatterns)) {
	    var paramNames = [];
	    var source = pattern.replace(paramCompileMatcher, function (match, paramName) {
	      if (paramName) {
	        paramNames.push(paramName);
	        return '([^/?#]+)';
	      } else if (match === '*') {
	        paramNames.push('splat');
	        return '(.*?)';
	      } else {
	        return '\\' + match;
	      }
	    });

	    _compiledPatterns[pattern] = {
	      matcher: new RegExp('^' + source + '$', 'i'),
	      paramNames: paramNames
	    };
	  }

	  return _compiledPatterns[pattern];
	}

	var PathUtils = {

	  /**
	   * Returns true if the given path is absolute.
	   */
	  isAbsolute: function isAbsolute(path) {
	    return path.charAt(0) === '/';
	  },

	  /**
	   * Joins two URL paths together.
	   */
	  join: function join(a, b) {
	    return a.replace(/\/*$/, '/') + b;
	  },

	  /**
	   * Returns an array of the names of all parameters in the given pattern.
	   */
	  extractParamNames: function extractParamNames(pattern) {
	    return compilePattern(pattern).paramNames;
	  },

	  /**
	   * Extracts the portions of the given URL path that match the given pattern
	   * and returns an object of param name => value pairs. Returns null if the
	   * pattern does not match the given path.
	   */
	  extractParams: function extractParams(pattern, path) {
	    var _compilePattern = compilePattern(pattern);

	    var matcher = _compilePattern.matcher;
	    var paramNames = _compilePattern.paramNames;

	    var match = path.match(matcher);

	    if (!match) {
	      return null;
	    }var params = {};

	    paramNames.forEach(function (paramName, index) {
	      params[paramName] = match[index + 1];
	    });

	    return params;
	  },

	  /**
	   * Returns a version of the given route path with params interpolated. Throws
	   * if there is a dynamic segment of the route path for which there is no param.
	   */
	  injectParams: function injectParams(pattern, params) {
	    params = params || {};

	    var splatIndex = 0;

	    return pattern.replace(paramInjectMatcher, function (match, paramName) {
	      paramName = paramName || 'splat';

	      // If param is optional don't check for existence
	      if (paramName.slice(-1) === '?') {
	        paramName = paramName.slice(0, -1);

	        if (params[paramName] == null) return '';
	      } else {
	        invariant(params[paramName] != null, 'Missing "%s" parameter for path "%s"', paramName, pattern);
	      }

	      var segment;
	      if (paramName === 'splat' && Array.isArray(params[paramName])) {
	        segment = params[paramName][splatIndex++];

	        invariant(segment != null, 'Missing splat # %s for path "%s"', splatIndex, pattern);
	      } else {
	        segment = params[paramName];
	      }

	      return segment;
	    }).replace(paramInjectTrailingSlashMatcher, '/');
	  },

	  /**
	   * Returns an object that is the result of parsing any query string contained
	   * in the given path, null if the path contains no query string.
	   */
	  extractQuery: function extractQuery(path) {
	    var match = path.match(queryMatcher);
	    return match && qs.parse(match[1]);
	  },

	  /**
	   * Returns a version of the given path without the query string.
	   */
	  withoutQuery: function withoutQuery(path) {
	    return path.replace(queryMatcher, '');
	  },

	  /**
	   * Returns a version of the given path with the parameters in the given
	   * query merged into the query string.
	   */
	  withQuery: function withQuery(path, query) {
	    var existingQuery = PathUtils.extractQuery(path);

	    if (existingQuery) query = query ? assign(existingQuery, query) : existingQuery;

	    var queryString = qs.stringify(query, { arrayFormat: 'brackets' });

	    if (queryString) {
	      return PathUtils.withoutQuery(path) + '?' + queryString;
	    }return PathUtils.withoutQuery(path);
	  }

	};

	module.exports = PathUtils;

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var invariant = __webpack_require__(34);
	var canUseDOM = __webpack_require__(35).canUseDOM;
	var getWindowScrollPosition = __webpack_require__(37);

	function shouldUpdateScroll(state, prevState) {
	  if (!prevState) {
	    return true;
	  } // Don't update scroll position when only the query has changed.
	  if (state.pathname === prevState.pathname) {
	    return false;
	  }var routes = state.routes;
	  var prevRoutes = prevState.routes;

	  var sharedAncestorRoutes = routes.filter(function (route) {
	    return prevRoutes.indexOf(route) !== -1;
	  });

	  return !sharedAncestorRoutes.some(function (route) {
	    return route.ignoreScrollBehavior;
	  });
	}

	/**
	 * Provides the router with the ability to manage window scroll position
	 * according to its scroll behavior.
	 */
	var ScrollHistory = {

	  statics: {

	    /**
	     * Records curent scroll position as the last known position for the given URL path.
	     */
	    recordScrollPosition: function recordScrollPosition(path) {
	      if (!this.scrollHistory) this.scrollHistory = {};

	      this.scrollHistory[path] = getWindowScrollPosition();
	    },

	    /**
	     * Returns the last known scroll position for the given URL path.
	     */
	    getScrollPosition: function getScrollPosition(path) {
	      if (!this.scrollHistory) this.scrollHistory = {};

	      return this.scrollHistory[path] || null;
	    }

	  },

	  componentWillMount: function componentWillMount() {
	    invariant(this.constructor.getScrollBehavior() == null || canUseDOM, 'Cannot use scroll behavior without a DOM');
	  },

	  componentDidMount: function componentDidMount() {
	    this._updateScroll();
	  },

	  componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
	    this._updateScroll(prevState);
	  },

	  _updateScroll: function _updateScroll(prevState) {
	    if (!shouldUpdateScroll(this.state, prevState)) {
	      return;
	    }var scrollBehavior = this.constructor.getScrollBehavior();

	    if (scrollBehavior) scrollBehavior.updateScrollPosition(this.constructor.getScrollPosition(this.state.path), this.state.action);
	  }

	};

	module.exports = ScrollHistory;

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(21);

	function isValidChild(object) {
	  return object == null || React.isValidElement(object);
	}

	function isReactChildren(object) {
	  return isValidChild(object) || Array.isArray(object) && object.every(isValidChild);
	}

	module.exports = isReactChildren;

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	/* jshint -W058 */

	'use strict';

	var Cancellation = __webpack_require__(30);
	var Redirect = __webpack_require__(29);

	/**
	 * Encapsulates a transition to a given path.
	 *
	 * The willTransitionTo and willTransitionFrom handlers receive
	 * an instance of this class as their first argument.
	 */
	function Transition(path, retry) {
	  this.path = path;
	  this.abortReason = null;
	  // TODO: Change this to router.retryTransition(transition)
	  this.retry = retry.bind(this);
	}

	Transition.prototype.abort = function (reason) {
	  if (this.abortReason == null) this.abortReason = reason || 'ABORT';
	};

	Transition.prototype.redirect = function (to, params, query) {
	  this.abort(new Redirect(to, params, query));
	};

	Transition.prototype.cancel = function () {
	  this.abort(new Cancellation());
	};

	Transition.from = function (transition, routes, components, callback) {
	  routes.reduce(function (callback, route, index) {
	    return function (error) {
	      if (error || transition.abortReason) {
	        callback(error);
	      } else if (route.onLeave) {
	        try {
	          route.onLeave(transition, components[index], callback);

	          // If there is no callback in the argument list, call it automatically.
	          if (route.onLeave.length < 3) callback();
	        } catch (e) {
	          callback(e);
	        }
	      } else {
	        callback();
	      }
	    };
	  }, callback)();
	};

	Transition.to = function (transition, routes, params, query, callback) {
	  routes.reduceRight(function (callback, route) {
	    return function (error) {
	      if (error || transition.abortReason) {
	        callback(error);
	      } else if (route.onEnter) {
	        try {
	          route.onEnter(transition, params, query, callback);

	          // If there is no callback in the argument list, call it automatically.
	          if (route.onEnter.length < 4) callback();
	        } catch (e) {
	          callback(e);
	        }
	      } else {
	        callback();
	      }
	    };
	  }, callback)();
	};

	module.exports = Transition;

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Encapsulates a redirect to the given route.
	 */
	"use strict";

	function Redirect(to, params, query) {
	  this.to = to;
	  this.params = params;
	  this.query = query;
	}

	module.exports = Redirect;

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Represents a cancellation caused by navigating away
	 * before the previous transition has fully resolved.
	 */
	"use strict";

	function Cancellation() {}

	module.exports = Cancellation;

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	/* jshint -W084 */
	var PathUtils = __webpack_require__(25);

	function deepSearch(route, pathname, query) {
	  // Check the subtree first to find the most deeply-nested match.
	  var childRoutes = route.childRoutes;
	  if (childRoutes) {
	    var match, childRoute;
	    for (var i = 0, len = childRoutes.length; i < len; ++i) {
	      childRoute = childRoutes[i];

	      if (childRoute.isDefault || childRoute.isNotFound) continue; // Check these in order later.

	      if (match = deepSearch(childRoute, pathname, query)) {
	        // A route in the subtree matched! Add this route and we're done.
	        match.routes.unshift(route);
	        return match;
	      }
	    }
	  }

	  // No child routes matched; try the default route.
	  var defaultRoute = route.defaultRoute;
	  if (defaultRoute && (params = PathUtils.extractParams(defaultRoute.path, pathname))) {
	    return new Match(pathname, params, query, [route, defaultRoute]);
	  } // Does the "not found" route match?
	  var notFoundRoute = route.notFoundRoute;
	  if (notFoundRoute && (params = PathUtils.extractParams(notFoundRoute.path, pathname))) {
	    return new Match(pathname, params, query, [route, notFoundRoute]);
	  } // Last attempt: check this route.
	  var params = PathUtils.extractParams(route.path, pathname);
	  if (params) {
	    return new Match(pathname, params, query, [route]);
	  }return null;
	}

	var Match = (function () {
	  function Match(pathname, params, query, routes) {
	    _classCallCheck(this, Match);

	    this.pathname = pathname;
	    this.params = params;
	    this.query = query;
	    this.routes = routes;
	  }

	  _createClass(Match, null, [{
	    key: 'findMatch',

	    /**
	     * Attempts to match depth-first a route in the given route's
	     * subtree against the given path and returns the match if it
	     * succeeds, null if no match can be made.
	     */
	    value: function findMatch(routes, path) {
	      var pathname = PathUtils.withoutQuery(path);
	      var query = PathUtils.extractQuery(path);
	      var match = null;

	      for (var i = 0, len = routes.length; match == null && i < len; ++i) match = deepSearch(routes[i], pathname, query);

	      return match;
	    }
	  }]);

	  return Match;
	})();

	module.exports = Match;

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function supportsHistory() {
	  /*! taken from modernizr
	   * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
	   * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
	   * changed to avoid false negatives for Windows Phones: https://github.com/rackt/react-router/issues/586
	   */
	  var ua = navigator.userAgent;
	  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) {
	    return false;
	  }
	  return window.history && 'pushState' in window.history;
	}

	module.exports = supportsHistory;

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Object.assign
	 */

	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

	'use strict';

	function assign(target, sources) {
	  if (target == null) {
	    throw new TypeError('Object.assign target cannot be null or undefined');
	  }

	  var to = Object(target);
	  var hasOwnProperty = Object.prototype.hasOwnProperty;

	  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
	    var nextSource = arguments[nextIndex];
	    if (nextSource == null) {
	      continue;
	    }

	    var from = Object(nextSource);

	    // We don't currently support accessors nor proxies. Therefore this
	    // copy cannot throw. If we ever supported this then we must handle
	    // exceptions and side-effects. We don't support symbols so they won't
	    // be transferred.

	    for (var key in from) {
	      if (hasOwnProperty.call(from, key)) {
	        to[key] = from[key];
	      }
	    }
	  }

	  return to;
	}

	module.exports = assign;

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule invariant
	 */

	"use strict";

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var invariant = function invariant(condition, format, a, b, c, d, e, f) {
	  if (false) {
	    if (format === undefined) {
	      throw new Error("invariant requires an error message argument");
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error("Minified exception occurred; use the non-minified dev environment " + "for the full error message and additional helpful warnings.");
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error("Invariant Violation: " + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};

	module.exports = invariant;

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ExecutionEnvironment
	 */

	/*jslint evil: true */

	'use strict';

	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {

	  canUseDOM: canUseDOM,

	  canUseWorkers: typeof Worker !== 'undefined',

	  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

	  canUseViewport: canUseDOM && !!window.screen,

	  isInWorker: !canUseDOM // For now, this is true - might change in the future.

	};

	module.exports = ExecutionEnvironment;

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule warning
	 */

	"use strict";

	var emptyFunction = __webpack_require__(40);

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = emptyFunction;

	if (false) {
	  warning = function (condition, format) {
	    for (var args = [], $__0 = 2, $__1 = arguments.length; $__0 < $__1; $__0++) args.push(arguments[$__0]);
	    if (format === undefined) {
	      throw new Error("`warning(condition, format, ...args)` requires a warning " + "message argument");
	    }

	    if (format.length < 10 || /^[s\W]*$/.test(format)) {
	      throw new Error("The warning format should be able to uniquely identify this " + "warning. Please, use a more descriptive format than: " + format);
	    }

	    if (format.indexOf("Failed Composite propType: ") === 0) {
	      return; // Ignore CompositeComponent proptype check.
	    }

	    if (!condition) {
	      var argIndex = 0;
	      var message = "Warning: " + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      console.warn(message);
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch (x) {}
	    }
	  };
	}

	module.exports = warning;

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var invariant = __webpack_require__(34);
	var canUseDOM = __webpack_require__(35).canUseDOM;

	/**
	 * Returns the current scroll position of the window as { x, y }.
	 */
	function getWindowScrollPosition() {
	  invariant(canUseDOM, 'Cannot get current scroll position without a DOM');

	  return {
	    x: window.pageXOffset || document.documentElement.scrollLeft,
	    y: window.pageYOffset || document.documentElement.scrollTop
	  };
	}

	module.exports = getWindowScrollPosition;

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function ToObject(val) {
		if (val == null) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	module.exports = Object.assign || function (target, source) {
		var from;
		var keys;
		var to = ToObject(target);

		for (var s = 1; s < arguments.length; s++) {
			from = arguments[s];
			keys = Object.keys(Object(from));

			for (var i = 0; i < keys.length; i++) {
				to[keys[i]] = from[keys[i]];
			}
		}

		return to;
	};

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(41);

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyFunction
	 */

	"use strict";

	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}

	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	function emptyFunction() {}

	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};

	module.exports = emptyFunction;

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	// Load modules

	'use strict';

	var Stringify = __webpack_require__(42);
	var Parse = __webpack_require__(43);

	// Declare internals

	var internals = {};

	module.exports = {
	    stringify: Stringify,
	    parse: Parse
	};

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	// Load modules

	'use strict';

	var Utils = __webpack_require__(44);

	// Declare internals

	var internals = {
	    delimiter: '&',
	    arrayPrefixGenerators: {
	        brackets: function brackets(prefix, key) {
	            return prefix + '[]';
	        },
	        indices: function indices(prefix, key) {
	            return prefix + '[' + key + ']';
	        },
	        repeat: function repeat(prefix, key) {
	            return prefix;
	        }
	    }
	};

	internals.stringify = function (obj, prefix, generateArrayPrefix) {

	    if (Utils.isBuffer(obj)) {
	        obj = obj.toString();
	    } else if (obj instanceof Date) {
	        obj = obj.toISOString();
	    } else if (obj === null) {
	        obj = '';
	    }

	    if (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean') {

	        return [encodeURIComponent(prefix) + '=' + encodeURIComponent(obj)];
	    }

	    var values = [];

	    if (typeof obj === 'undefined') {
	        return values;
	    }

	    var objKeys = Object.keys(obj);
	    for (var i = 0, il = objKeys.length; i < il; ++i) {
	        var key = objKeys[i];
	        if (Array.isArray(obj)) {
	            values = values.concat(internals.stringify(obj[key], generateArrayPrefix(prefix, key), generateArrayPrefix));
	        } else {
	            values = values.concat(internals.stringify(obj[key], prefix + '[' + key + ']', generateArrayPrefix));
	        }
	    }

	    return values;
	};

	module.exports = function (obj, options) {

	    options = options || {};
	    var delimiter = typeof options.delimiter === 'undefined' ? internals.delimiter : options.delimiter;

	    var keys = [];

	    if (typeof obj !== 'object' || obj === null) {

	        return '';
	    }

	    var arrayFormat;
	    if (options.arrayFormat in internals.arrayPrefixGenerators) {
	        arrayFormat = options.arrayFormat;
	    } else if ('indices' in options) {
	        arrayFormat = options.indices ? 'indices' : 'repeat';
	    } else {
	        arrayFormat = 'indices';
	    }

	    var generateArrayPrefix = internals.arrayPrefixGenerators[arrayFormat];

	    var objKeys = Object.keys(obj);
	    for (var i = 0, il = objKeys.length; i < il; ++i) {
	        var key = objKeys[i];
	        keys = keys.concat(internals.stringify(obj[key], key, generateArrayPrefix));
	    }

	    return keys.join(delimiter);
	};

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	// Load modules

	'use strict';

	var Utils = __webpack_require__(44);

	// Declare internals

	var internals = {
	    delimiter: '&',
	    depth: 5,
	    arrayLimit: 20,
	    parameterLimit: 1000
	};

	internals.parseValues = function (str, options) {

	    var obj = {};
	    var parts = str.split(options.delimiter, options.parameterLimit === Infinity ? undefined : options.parameterLimit);

	    for (var i = 0, il = parts.length; i < il; ++i) {
	        var part = parts[i];
	        var pos = part.indexOf(']=') === -1 ? part.indexOf('=') : part.indexOf(']=') + 1;

	        if (pos === -1) {
	            obj[Utils.decode(part)] = '';
	        } else {
	            var key = Utils.decode(part.slice(0, pos));
	            var val = Utils.decode(part.slice(pos + 1));

	            if (Object.prototype.hasOwnProperty(key)) {
	                continue;
	            }

	            if (!obj.hasOwnProperty(key)) {
	                obj[key] = val;
	            } else {
	                obj[key] = [].concat(obj[key]).concat(val);
	            }
	        }
	    }

	    return obj;
	};

	internals.parseObject = function (chain, val, options) {

	    if (!chain.length) {
	        return val;
	    }

	    var root = chain.shift();

	    var obj = {};
	    if (root === '[]') {
	        obj = [];
	        obj = obj.concat(internals.parseObject(chain, val, options));
	    } else {
	        var cleanRoot = root[0] === '[' && root[root.length - 1] === ']' ? root.slice(1, root.length - 1) : root;
	        var index = parseInt(cleanRoot, 10);
	        var indexString = '' + index;
	        if (!isNaN(index) && root !== cleanRoot && indexString === cleanRoot && index >= 0 && index <= options.arrayLimit) {

	            obj = [];
	            obj[index] = internals.parseObject(chain, val, options);
	        } else {
	            obj[cleanRoot] = internals.parseObject(chain, val, options);
	        }
	    }

	    return obj;
	};

	internals.parseKeys = function (key, val, options) {

	    if (!key) {
	        return;
	    }

	    // The regex chunks

	    var parent = /^([^\[\]]*)/;
	    var child = /(\[[^\[\]]*\])/g;

	    // Get the parent

	    var segment = parent.exec(key);

	    // Don't allow them to overwrite object prototype properties

	    if (Object.prototype.hasOwnProperty(segment[1])) {
	        return;
	    }

	    // Stash the parent if it exists

	    var keys = [];
	    if (segment[1]) {
	        keys.push(segment[1]);
	    }

	    // Loop through children appending to the array until we hit depth

	    var i = 0;
	    while ((segment = child.exec(key)) !== null && i < options.depth) {

	        ++i;
	        if (!Object.prototype.hasOwnProperty(segment[1].replace(/\[|\]/g, ''))) {
	            keys.push(segment[1]);
	        }
	    }

	    // If there's a remainder, just add whatever is left

	    if (segment) {
	        keys.push('[' + key.slice(segment.index) + ']');
	    }

	    return internals.parseObject(keys, val, options);
	};

	module.exports = function (str, options) {

	    if (str === '' || str === null || typeof str === 'undefined') {

	        return {};
	    }

	    options = options || {};
	    options.delimiter = typeof options.delimiter === 'string' || Utils.isRegExp(options.delimiter) ? options.delimiter : internals.delimiter;
	    options.depth = typeof options.depth === 'number' ? options.depth : internals.depth;
	    options.arrayLimit = typeof options.arrayLimit === 'number' ? options.arrayLimit : internals.arrayLimit;
	    options.parameterLimit = typeof options.parameterLimit === 'number' ? options.parameterLimit : internals.parameterLimit;

	    var tempObj = typeof str === 'string' ? internals.parseValues(str, options) : str;
	    var obj = {};

	    // Iterate over the keys and setup the new object

	    var keys = Object.keys(tempObj);
	    for (var i = 0, il = keys.length; i < il; ++i) {
	        var key = keys[i];
	        var newObj = internals.parseKeys(key, tempObj[key], options);
	        obj = Utils.merge(obj, newObj);
	    }

	    return Utils.compact(obj);
	};

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	// Load modules

	// Declare internals

	'use strict';

	var internals = {};

	exports.arrayToObject = function (source) {

	    var obj = {};
	    for (var i = 0, il = source.length; i < il; ++i) {
	        if (typeof source[i] !== 'undefined') {

	            obj[i] = source[i];
	        }
	    }

	    return obj;
	};

	exports.merge = function (target, source) {

	    if (!source) {
	        return target;
	    }

	    if (typeof source !== 'object') {
	        if (Array.isArray(target)) {
	            target.push(source);
	        } else {
	            target[source] = true;
	        }

	        return target;
	    }

	    if (typeof target !== 'object') {
	        target = [target].concat(source);
	        return target;
	    }

	    if (Array.isArray(target) && !Array.isArray(source)) {

	        target = exports.arrayToObject(target);
	    }

	    var keys = Object.keys(source);
	    for (var k = 0, kl = keys.length; k < kl; ++k) {
	        var key = keys[k];
	        var value = source[key];

	        if (!target[key]) {
	            target[key] = value;
	        } else {
	            target[key] = exports.merge(target[key], value);
	        }
	    }

	    return target;
	};

	exports.decode = function (str) {

	    try {
	        return decodeURIComponent(str.replace(/\+/g, ' '));
	    } catch (e) {
	        return str;
	    }
	};

	exports.compact = function (obj, refs) {

	    if (typeof obj !== 'object' || obj === null) {

	        return obj;
	    }

	    refs = refs || [];
	    var lookup = refs.indexOf(obj);
	    if (lookup !== -1) {
	        return refs[lookup];
	    }

	    refs.push(obj);

	    if (Array.isArray(obj)) {
	        var compacted = [];

	        for (var i = 0, il = obj.length; i < il; ++i) {
	            if (typeof obj[i] !== 'undefined') {
	                compacted.push(obj[i]);
	            }
	        }

	        return compacted;
	    }

	    var keys = Object.keys(obj);
	    for (i = 0, il = keys.length; i < il; ++i) {
	        var key = keys[i];
	        obj[key] = exports.compact(obj[key], refs);
	    }

	    return obj;
	};

	exports.isRegExp = function (obj) {
	    return Object.prototype.toString.call(obj) === '[object RegExp]';
	};

	exports.isBuffer = function (obj) {

	    if (obj === null || typeof obj === 'undefined') {

	        return false;
	    }

	    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
	};

/***/ }
/******/ ])
});
/* Generated by Opal 0.10.3 */
Opal.modules["time"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$strftime']);
  return (function($base, $super) {
    function $Time(){};
    var self = $Time = $klass($base, $super, 'Time', $Time);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

    Opal.defs(self, '$parse', TMP_1 = function $$parse(str) {
      var self = this;

      return new Date(Date.parse(str));
    }, TMP_1.$$arity = 1);

    return (Opal.defn(self, '$iso8601', TMP_2 = function $$iso8601() {
      var self = this;

      return self.$strftime("%FT%T%z");
    }, TMP_2.$$arity = 0), nil) && 'iso8601';
  })($scope.base, null)
};
/* Generated by Opal 0.10.3 */
Opal.modules["date"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$include', '$<=>', '$nonzero?', '$d', '$zero?', '$new', '$class', '$-@', '$+@', '$===', '$coerce', '$==', '$>', '$+', '$allocate', '$join', '$compact', '$map', '$to_proc', '$downcase', '$wrap', '$raise', '$clone', '$jd', '$>>', '$wday', '$-', '$to_s', '$alias_method']);
  return (function($base, $super) {
    function $Date(){};
    var self = $Date = $klass($base, $super, 'Date', $Date);

    var def = self.$$proto, $scope = self.$$scope, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30, TMP_31, TMP_32, TMP_33, TMP_34, TMP_35, TMP_36, TMP_37, TMP_38, TMP_39, TMP_40, TMP_41, TMP_42, TMP_43, TMP_44, TMP_45, TMP_46, TMP_47, TMP_48, TMP_49, TMP_50;

    def.date = nil;
    (function($base, $super) {
      function $Infinity(){};
      var self = $Infinity = $klass($base, $super, 'Infinity', $Infinity);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12;

      def.d = nil;
      self.$include($scope.get('Comparable'));

      Opal.defn(self, '$initialize', TMP_1 = function $$initialize(d) {
        var self = this;

        if (d == null) {
          d = 1;
        }
        return self.d = d['$<=>'](0);
      }, TMP_1.$$arity = -1);

      Opal.defn(self, '$d', TMP_2 = function $$d() {
        var self = this;

        return self.d;
      }, TMP_2.$$arity = 0);

      Opal.defn(self, '$zero?', TMP_3 = function() {
        var self = this;

        return false;
      }, TMP_3.$$arity = 0);

      Opal.defn(self, '$finite?', TMP_4 = function() {
        var self = this;

        return false;
      }, TMP_4.$$arity = 0);

      Opal.defn(self, '$infinite?', TMP_5 = function() {
        var self = this;

        return self.$d()['$nonzero?']();
      }, TMP_5.$$arity = 0);

      Opal.defn(self, '$nan?', TMP_6 = function() {
        var self = this;

        return self.$d()['$zero?']();
      }, TMP_6.$$arity = 0);

      Opal.defn(self, '$abs', TMP_7 = function $$abs() {
        var self = this;

        return self.$class().$new();
      }, TMP_7.$$arity = 0);

      Opal.defn(self, '$-@', TMP_8 = function() {
        var self = this;

        return self.$class().$new(self.$d()['$-@']());
      }, TMP_8.$$arity = 0);

      Opal.defn(self, '$+@', TMP_9 = function() {
        var self = this;

        return self.$class().$new(self.$d()['$+@']());
      }, TMP_9.$$arity = 0);

      Opal.defn(self, '$<=>', TMP_10 = function(other) {
        var $a, $b, self = this, $case = nil, l = nil, r = nil;

        $case = other;if ($scope.get('Infinity')['$===']($case)) {return self.$d()['$<=>'](other.$d())}else if ($scope.get('Numeric')['$===']($case)) {return self.$d()}else {try {
          $b = other.$coerce(self), $a = Opal.to_ary($b), l = ($a[0] == null ? nil : $a[0]), r = ($a[1] == null ? nil : $a[1]), $b;
          return l['$<=>'](r);
        } catch ($err) {
          if (Opal.rescue($err, [$scope.get('NoMethodError')])) {
            try {
              nil
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        }};
        return nil;
      }, TMP_10.$$arity = 1);

      Opal.defn(self, '$coerce', TMP_11 = function $$coerce(other) {
        var $a, $b, self = this, $iter = TMP_11.$$p, $yield = $iter || nil, $case = nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

        TMP_11.$$p = null;
        $zuper = [];
        
        for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
          $zuper[$zuper_index] = arguments[$zuper_index];
        }
        return (function() {$case = other;if ($scope.get('Numeric')['$===']($case)) {return [self.$d()['$-@'](), self.$d()]}else {return ($a = ($b = self, Opal.find_super_dispatcher(self, 'coerce', TMP_11, false)), $a.$$p = $iter, $a).apply($b, $zuper)}})();
      }, TMP_11.$$arity = 1);

      return (Opal.defn(self, '$to_f', TMP_12 = function $$to_f() {
        var $a, self = this;

        if (self.d['$=='](0)) {
          return 0};
        if ((($a = $rb_gt(self.d, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return (($scope.get('Float')).$$scope.get('INFINITY'))
          } else {
          return (($scope.get('Float')).$$scope.get('INFINITY'))['$-@']()
        };
      }, TMP_12.$$arity = 0), nil) && 'to_f';
    })($scope.base, $scope.get('Numeric'));

    Opal.cdecl($scope, 'JULIAN', $scope.get('Infinity').$new());

    Opal.cdecl($scope, 'GREGORIAN', $scope.get('Infinity').$new()['$-@']());

    Opal.cdecl($scope, 'ITALY', 2299161);

    Opal.cdecl($scope, 'ENGLAND', 2361222);

    Opal.cdecl($scope, 'MONTHNAMES', $rb_plus([nil], ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]));

    Opal.cdecl($scope, 'ABBR_MONTHNAMES', ["jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec"]);

    Opal.cdecl($scope, 'DAYNAMES', ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);

    Opal.cdecl($scope, 'ABBR_DAYNAMES', ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]);

    (function(self) {
      var $scope = self.$$scope, def = self.$$proto, TMP_13, TMP_14, TMP_15, TMP_16;

      Opal.alias(self, 'civil', 'new');
      Opal.defn(self, '$wrap', TMP_13 = function $$wrap(native$) {
        var self = this, instance = nil;

        instance = self.$allocate();
        instance.date = native$;
        return instance;
      }, TMP_13.$$arity = 1);
      Opal.defn(self, '$parse', TMP_14 = function $$parse(string, comp) {
        var $a, $b, $c, self = this;

        if (comp == null) {
          comp = true;
        }
        
        var current_date = new Date();

        var current_day = current_date.getDate(),
            current_month = current_date.getMonth(),
            current_year = current_date.getFullYear(),
            current_wday = current_date.getDay(),
            full_month_name_regexp = $scope.get('MONTHNAMES').$compact().$join("|");

        function match1(match) { return match[1]; }
        function match2(match) { return match[2]; }
        function match3(match) { return match[3]; }
        function match4(match) { return match[4]; }

        // Converts passed short year (0..99)
        // to a 4-digits year in the range (1969..2068)
        function fromShortYear(fn) {
          return function(match) {
            var short_year = fn(match);

            if (short_year >= 69) {
              short_year += 1900;
            } else {
              short_year += 2000;
            }
            return short_year;
          }
        }

        // Converts month abbr (nov) to a month number
        function fromMonthAbbr(fn) {
          return function(match) {
            var abbr = fn(match);
            return $scope.get('ABBR_MONTHNAMES').indexOf(abbr) + 1;
          }
        }

        function toInt(fn) {
          return function(match) {
            var value = fn(match);
            return parseInt(value, 10);
          }
        }

        // Depending on the 'comp' value appends 20xx to a passed year
        function to2000(fn) {
          return function(match) {
            var value = fn(match);
            if (comp) {
              return value + 2000;
            } else {
              return value;
            }
          }
        }

        // Converts passed week day name to a day number
        function fromDayName(fn) {
          return function(match) {
            var dayname = fn(match),
                wday = ($a = ($b = $scope.get('DAYNAMES')).$map, $a.$$p = "downcase".$to_proc(), $a).call($b).indexOf((dayname).$downcase());

            return current_day - current_wday + wday;
          }
        }

        // Converts passed month name to a month number
        function fromFullMonthName(fn) {
          return function(match) {
            var month_name = fn(match);
            return ($a = ($c = $scope.get('MONTHNAMES').$compact()).$map, $a.$$p = "downcase".$to_proc(), $a).call($c).indexOf((month_name).$downcase()) + 1;
          }
        }

        var rules = [
          {
            // DD as month day number
            regexp: /^(\d{2})$/,
            year: current_year,
            month: current_month,
            day: toInt(match1)
          },
          {
            // DDD as year day number
            regexp: /^(\d{3})$/,
            year: current_year,
            month: 0,
            day: toInt(match1)
          },
          {
            // MMDD as month and day
            regexp: /^(\d{2})(\d{2})$/,
            year: current_year,
            month: toInt(match1),
            day: toInt(match2)
          },
          {
            // YYDDD as year and day number in 1969--2068
            regexp: /^(\d{2})(\d{3})$/,
            year: fromShortYear(toInt(match1)),
            month: 0,
            day: toInt(match2)
          },
          {
            // YYMMDD as year, month and day in 1969--2068
            regexp: /^(\d{2})(\d{2})(\d{2})$/,
            year: fromShortYear(toInt(match1)),
            month: toInt(match2),
            day: toInt(match3)
          },
          {
            // YYYYDDD as year and day number
            regexp: /^(\d{4})(\d{3})$/,
            year: toInt(match1),
            month: 0,
            day: toInt(match2)
          },
          {
            // YYYYMMDD as year, month and day number
            regexp: /^(\d{4})(\d{2})(\d{2})$/,
            year: toInt(match1),
            month: toInt(match2),
            day: toInt(match3)
          },
          {
            // mmm YYYY
            regexp: /^([a-z]{3})[\s\.\/\-](\d{3,4})$/,
            year: toInt(match2),
            month: fromMonthAbbr(match1),
            day: 1
          },
          {
            // DD mmm YYYY
            regexp: /^(\d{1,2})[\s\.\/\-]([a-z]{3})[\s\.\/\-](\d{3,4})$/i,
            year: toInt(match3),
            month: fromMonthAbbr(match2),
            day: toInt(match1)
          },
          {
            // mmm DD YYYY
            regexp: /^([a-z]{3})[\s\.\/\-](\d{1,2})[\s\.\/\-](\d{3,4})$/i,
            year: toInt(match3),
            month: fromMonthAbbr(match1),
            day: toInt(match2)
          },
          {
            // YYYY mmm DD
            regexp: /^(\d{3,4})[\s\.\/\-]([a-z]{3})[\s\.\/\-](\d{1,2})$/i,
            year: toInt(match1),
            month: fromMonthAbbr(match2),
            day: toInt(match3)
          },
          {
            // YYYY-MM-DD YYYY/MM/DD YYYY.MM.DD
            regexp: /^(\-?\d{3,4})[\s\.\/\-](\d{1,2})[\s\.\/\-](\d{1,2})$/,
            year: toInt(match1),
            month: toInt(match2),
            day: toInt(match3)
          },
          {
            // YY-MM-DD
            regexp: /^(\d{2})[\s\.\/\-](\d{1,2})[\s\.\/\-](\d{1,2})$/,
            year: to2000(toInt(match1)),
            month: toInt(match2),
            day: toInt(match3)
          },
          {
            // DD-MM-YYYY
            regexp: /^(\d{1,2})[\s\.\/\-](\d{1,2})[\s\.\/\-](\-?\d{3,4})$/,
            year: toInt(match3),
            month: toInt(match2),
            day: toInt(match1)
          },
          {
            // ddd
            regexp: new RegExp("^(" + $scope.get('DAYNAMES').$join("|") + ")$", 'i'),
            year: current_year,
            month: current_month,
            day: fromDayName(match1)
          },
          {
            // monthname daynumber YYYY
            regexp: new RegExp("^(" + full_month_name_regexp + ")[\\s\\.\\/\\-](\\d{1,2})(th|nd|rd)[\\s\\.\\/\\-](\\-?\\d{3,4})$", "i"),
            year: toInt(match4),
            month: fromFullMonthName(match1),
            day: toInt(match2)
          },
          {
            // monthname daynumber
            regexp: new RegExp("^(" + full_month_name_regexp + ")[\\s\\.\\/\\-](\\d{1,2})(th|nd|rd)", "i"),
            year: current_year,
            month: fromFullMonthName(match1),
            day: toInt(match2)
          },
          {
            // daynumber monthname YYYY
            regexp: new RegExp("^(\\d{1,2})(th|nd|rd)[\\s\\.\\/\\-](" + full_month_name_regexp + ")[\\s\\.\\/\\-](\\-?\\d{3,4})$", "i"),
            year: toInt(match4),
            month: fromFullMonthName(match3),
            day: toInt(match1)
          },
          {
            // YYYY monthname daynumber
            regexp: new RegExp("^(\\-?\\d{3,4})[\\s\\.\\/\\-](" + full_month_name_regexp + ")[\\s\\.\\/\\-](\\d{1,2})(th|nd|rd)$", "i"),
            year: toInt(match1),
            month: fromFullMonthName(match2),
            day: toInt(match3)
          }
        ]

        var rule, i, match;

        for (i = 0; i < rules.length; i++) {
          rule = rules[i];
          match = rule.regexp.exec(string);
          if (match) {
            var year = rule.year;
            if (typeof(year) === 'function') {
              year = year(match);
            }

            var month = rule.month;
            if (typeof(month) === 'function') {
              month = month(match) - 1
            }

            var day = rule.day;
            if (typeof(day) === 'function') {
              day = day(match);
            }

            var result = new Date(year, month, day);

            // an edge case, JS can't handle 'new Date(1)', minimal year is 1970
            if (year >= 0 && year <= 1970) {
              result.setFullYear(year);
            }

            return self.$wrap(result);
          }
        }
      ;
        return self.$raise($scope.get('ArgumentError'), "invalid date");
      }, TMP_14.$$arity = -2);
      Opal.defn(self, '$today', TMP_15 = function $$today() {
        var self = this;

        return self.$wrap(new Date());
      }, TMP_15.$$arity = 0);
      return (Opal.defn(self, '$gregorian_leap?', TMP_16 = function(year) {
        var self = this;

        return (new Date(year, 1, 29).getMonth()-1) === 0;
      }, TMP_16.$$arity = 1), nil) && 'gregorian_leap?';
    })(Opal.get_singleton_class(self));

    Opal.defn(self, '$initialize', TMP_17 = function $$initialize(year, month, day, start) {
      var self = this;

      if (year == null) {
        year = -4712;
      }
      if (month == null) {
        month = 1;
      }
      if (day == null) {
        day = 1;
      }
      if (start == null) {
        start = $scope.get('ITALY');
      }
      return self.date = new Date(year, month - 1, day);
    }, TMP_17.$$arity = -1);

    Opal.defn(self, '$-', TMP_18 = function(date) {
      var self = this;

      
      if (date.$$is_number) {
        var result = self.$clone();
        result.date.setDate(self.date.getDate() - date);
        return result;
      }
      else if (date.date) {
        return Math.round((self.date - date.date) / (1000 * 60 * 60 * 24));
      }
      else {
        self.$raise($scope.get('TypeError'));
      }
    ;
    }, TMP_18.$$arity = 1);

    Opal.defn(self, '$+', TMP_19 = function(date) {
      var self = this;

      
      if (date.$$is_number) {
        var result = self.$clone();
        result.date.setDate(self.date.getDate() + date);
        return result;
      }
      else {
        self.$raise($scope.get('TypeError'));
      }
    ;
    }, TMP_19.$$arity = 1);

    Opal.defn(self, '$<', TMP_20 = function(other) {
      var self = this;

      
      var a = self.date, b = other.date;
      a.setHours(0, 0, 0, 0);
      b.setHours(0, 0, 0, 0);
      return a < b;
    ;
    }, TMP_20.$$arity = 1);

    Opal.defn(self, '$<=', TMP_21 = function(other) {
      var self = this;

      
      var a = self.date, b = other.date;
      a.setHours(0, 0, 0, 0);
      b.setHours(0, 0, 0, 0);
      return a <= b;
    ;
    }, TMP_21.$$arity = 1);

    Opal.defn(self, '$>', TMP_22 = function(other) {
      var self = this;

      
      var a = self.date, b = other.date;
      a.setHours(0, 0, 0, 0);
      b.setHours(0, 0, 0, 0);
      return a > b;
    ;
    }, TMP_22.$$arity = 1);

    Opal.defn(self, '$>=', TMP_23 = function(other) {
      var self = this;

      
      var a = self.date, b = other.date;
      a.setHours(0, 0, 0, 0);
      b.setHours(0, 0, 0, 0);
      return a >= b;
    ;
    }, TMP_23.$$arity = 1);

    Opal.defn(self, '$<=>', TMP_24 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self.$jd()['$<=>'](other)
      }

      var a = self.date, b = other.date;
      a.setHours(0, 0, 0, 0);
      b.setHours(0, 0, 0, 0);

      if (a < b) {
        return -1;
      }
      else if (a > b) {
        return 1;
      }
      else {
        return 0;
      }
    ;
    }, TMP_24.$$arity = 1);

    Opal.defn(self, '$==', TMP_25 = function(other) {
      var self = this;

      
      var a = self.date, b = other.date;
      return (a.getFullYear() === b.getFullYear() && a.getMonth() === b.getMonth() && a.getDate() === b.getDate());
    ;
    }, TMP_25.$$arity = 1);

    Opal.defn(self, '$>>', TMP_26 = function(n) {
      var self = this;

      
      if (!n.$$is_number) {
        self.$raise($scope.get('TypeError'));
      }

      var result = self.$clone(), date = result.date, cur = date.getDate();
      date.setDate(1);
      date.setMonth(date.getMonth() + n);
      date.setDate(Math.min(cur, days_in_month(date.getFullYear(), date.getMonth())));
      return result;
    ;
    }, TMP_26.$$arity = 1);

    Opal.defn(self, '$<<', TMP_27 = function(n) {
      var self = this;

      
      if (!n.$$is_number) {
        self.$raise($scope.get('TypeError'));
      }

      return self['$>>'](-n);
    ;
    }, TMP_27.$$arity = 1);

    Opal.alias(self, 'eql?', '==');

    Opal.defn(self, '$clone', TMP_28 = function $$clone() {
      var self = this;

      return $scope.get('Date').$wrap(new Date(self.date.getTime()));
    }, TMP_28.$$arity = 0);

    Opal.defn(self, '$day', TMP_29 = function $$day() {
      var self = this;

      return self.date.getDate();
    }, TMP_29.$$arity = 0);

    Opal.defn(self, '$friday?', TMP_30 = function() {
      var self = this;

      return self.$wday()['$=='](5);
    }, TMP_30.$$arity = 0);

    Opal.defn(self, '$jd', TMP_31 = function $$jd() {
      var self = this;

      
    //Adapted from http://www.physics.sfasu.edu/astro/javascript/julianday.html

    var mm = self.date.getMonth() + 1,
        dd = self.date.getDate(),
        yy = self.date.getFullYear(),
        hr = 12, mn = 0, sc = 0,
        ggg, s, a, j1, jd;

    hr = hr + (mn / 60) + (sc/3600);

    ggg = 1;
    if (yy <= 1585) {
      ggg = 0;
    }

    jd = -1 * Math.floor(7 * (Math.floor((mm + 9) / 12) + yy) / 4);

    s = 1;
    if ((mm - 9) < 0) {
      s =- 1;
    }

    a = Math.abs(mm - 9);
    j1 = Math.floor(yy + s * Math.floor(a / 7));
    j1 = -1 * Math.floor((Math.floor(j1 / 100) + 1) * 3 / 4);

    jd = jd + Math.floor(275 * mm / 9) + dd + (ggg * j1);
    jd = jd + 1721027 + 2 * ggg + 367 * yy - 0.5;
    jd = jd + (hr / 24);

    return jd;
    ;
    }, TMP_31.$$arity = 0);

    Opal.defn(self, '$julian?', TMP_32 = function() {
      var self = this;

      return self.date < new Date(1582, 10 - 1, 15, 12);
    }, TMP_32.$$arity = 0);

    Opal.defn(self, '$monday?', TMP_33 = function() {
      var self = this;

      return self.$wday()['$=='](1);
    }, TMP_33.$$arity = 0);

    Opal.defn(self, '$month', TMP_34 = function $$month() {
      var self = this;

      return self.date.getMonth() + 1;
    }, TMP_34.$$arity = 0);

    Opal.defn(self, '$next', TMP_35 = function $$next() {
      var self = this;

      return $rb_plus(self, 1);
    }, TMP_35.$$arity = 0);

    Opal.defn(self, '$next_day', TMP_36 = function $$next_day(n) {
      var self = this;

      if (n == null) {
        n = 1;
      }
      return $rb_plus(self, n);
    }, TMP_36.$$arity = -1);

    Opal.defn(self, '$next_month', TMP_37 = function $$next_month() {
      var self = this;

      
      var result = self.$clone(), date = result.date, cur = date.getDate();
      date.setDate(1);
      date.setMonth(date.getMonth() + 1);
      date.setDate(Math.min(cur, days_in_month(date.getFullYear(), date.getMonth())));
      return result;
    ;
    }, TMP_37.$$arity = 0);

    Opal.defn(self, '$prev_day', TMP_38 = function $$prev_day(n) {
      var self = this;

      if (n == null) {
        n = 1;
      }
      return $rb_minus(self, n);
    }, TMP_38.$$arity = -1);

    Opal.defn(self, '$prev_month', TMP_39 = function $$prev_month() {
      var self = this;

      
      var result = self.$clone(), date = result.date, cur = date.getDate();
      date.setDate(1);
      date.setMonth(date.getMonth() - 1);
      date.setDate(Math.min(cur, days_in_month(date.getFullYear(), date.getMonth())));
      return result;
    ;
    }, TMP_39.$$arity = 0);

    Opal.defn(self, '$saturday?', TMP_40 = function() {
      var self = this;

      return self.$wday()['$=='](6);
    }, TMP_40.$$arity = 0);

    Opal.defn(self, '$strftime', TMP_41 = function $$strftime(format) {
      var self = this;

      if (format == null) {
        format = "";
      }
      
      if (format == '') {
        return self.$to_s();
      }

      return self.date.$strftime(format);
    ;
    }, TMP_41.$$arity = -1);

    self.$alias_method("succ", "next");

    Opal.defn(self, '$sunday?', TMP_42 = function() {
      var self = this;

      return self.$wday()['$=='](0);
    }, TMP_42.$$arity = 0);

    Opal.defn(self, '$thursday?', TMP_43 = function() {
      var self = this;

      return self.$wday()['$=='](4);
    }, TMP_43.$$arity = 0);

    Opal.defn(self, '$to_s', TMP_44 = function $$to_s() {
      var self = this;

      
      var d = self.date, year = d.getFullYear(), month = d.getMonth() + 1, day = d.getDate();
      if (month < 10) { month = '0' + month; }
      if (day < 10) { day = '0' + day; }
      return year + '-' + month + '-' + day;
    ;
    }, TMP_44.$$arity = 0);

    Opal.defn(self, '$tuesday?', TMP_45 = function() {
      var self = this;

      return self.$wday()['$=='](2);
    }, TMP_45.$$arity = 0);

    Opal.defn(self, '$wday', TMP_46 = function $$wday() {
      var self = this;

      return self.date.getDay();
    }, TMP_46.$$arity = 0);

    Opal.defn(self, '$wednesday?', TMP_47 = function() {
      var self = this;

      return self.$wday()['$=='](3);
    }, TMP_47.$$arity = 0);

    Opal.defn(self, '$year', TMP_48 = function $$year() {
      var self = this;

      return self.date.getFullYear();
    }, TMP_48.$$arity = 0);

    Opal.defn(self, '$cwday', TMP_49 = function $$cwday() {
      var self = this;

      return self.date.getDay() || 7;;
    }, TMP_49.$$arity = 0);

    Opal.defn(self, '$cweek', TMP_50 = function $$cweek() {
      var self = this;

      
      var d = new Date(self.date);
      d.setHours(0,0,0);
      d.setDate(d.getDate()+4-(d.getDay()||7));
      return Math.ceil((((d-new Date(d.getFullYear(),0,1))/8.64e7)+1)/7);
    ;
    }, TMP_50.$$arity = 0);

    
    function days_in_month(year, month) {
      var leap = ((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0);
      return [31, (leap ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month]
    }
  
  })($scope.base, null)
};
/* Generated by Opal 0.10.3 */
Opal.modules["reactive_record/active_record/error"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$attr_reader', '$each', '$[]=', '$uniq', '$[]', '$messages', '$delete', '$empty?']);
  return (function($base) {
    var $ActiveModel, self = $ActiveModel = $module($base, 'ActiveModel');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Error(){};
      var self = $Error = $klass($base, $super, 'Error', $Error);

      var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_4, TMP_5;

      def.messages = nil;
      self.$attr_reader("messages");

      Opal.defn(self, '$initialize', TMP_2 = function $$initialize(msgs) {
        var $a, $b, TMP_1, self = this;

        if (msgs == null) {
          msgs = $hash2([], {});
        }
        self.messages = ((($a = msgs) !== false && $a !== nil && $a != null) ? $a : $hash2([], {}));
        return ($a = ($b = self.messages).$each, $a.$$p = (TMP_1 = function(attribute, messages){var self = TMP_1.$$s || this;
          if (self.messages == null) self.messages = nil;
if (attribute == null) attribute = nil;if (messages == null) messages = nil;
        return self.messages['$[]='](attribute, messages.$uniq())}, TMP_1.$$s = self, TMP_1.$$arity = 2, TMP_1), $a).call($b);
      }, TMP_2.$$arity = -1);

      Opal.defn(self, '$[]', TMP_3 = function(attribute) {
        var self = this;

        return self.$messages()['$[]'](attribute);
      }, TMP_3.$$arity = 1);

      Opal.defn(self, '$delete', TMP_4 = function(attribute) {
        var self = this;

        return self.$messages().$delete(attribute);
      }, TMP_4.$$arity = 1);

      return (Opal.defn(self, '$empty?', TMP_5 = function() {
        var self = this;

        return self.$messages()['$empty?']();
      }, TMP_5.$$arity = 0), nil) && 'empty?';
    })($scope.base, null)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["reactive_record/server_data_cache"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$!=', '$[]', '$replace', '$collect', '$find', '$klass', '$proxy_association', '$is_a?', '$id=', '$first', '$each', '$parse', '$==', '$!', '$load_from_json', '$const_get', '$set_count_state', '$=~', '$push_and_update_belongs_to', '$find_by_object_id', '$base_class', '$<', '$class', '$send', '$destroy', '$update_attribute', '$backing_record', '$convert', '$respond_to?', '$reflect_on_aggregation', '$deserialize', '$reflect_on_association']);
  return (function($base) {
    var $ReactiveRecord, self = $ReactiveRecord = $module($base, 'ReactiveRecord');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $ServerDataCache(){};
      var self = $ServerDataCache = $klass($base, $super, 'ServerDataCache', $ServerDataCache);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_4;

      Opal.defn(self, '$initialize', TMP_1 = function $$initialize(acting_user, preloaded_records) {
        var self = this;

        self.acting_user = acting_user;
        self.cache = [];
        self.requested_cache_items = [];
        return self.preloaded_records = preloaded_records;
      }, TMP_1.$$arity = 2);

      if ((($a = $scope.get('RUBY_ENGINE')['$!=']("opal")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {};

      return (Opal.defs(self, '$load_from_json', TMP_4 = function $$load_from_json(tree, target) {
        var $a, $b, TMP_2, $c, TMP_3, self = this, ignore_all = nil, sorted_collection = nil, id_value = nil;

        if (target == null) {
          target = nil;
        }
        ignore_all = nil;
        if ((($a = sorted_collection = tree['$[]']("*all")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          target.$replace(($a = ($b = sorted_collection).$collect, $a.$$p = (TMP_2 = function(id){var self = TMP_2.$$s || this;
if (id == null) id = nil;
          return target.$proxy_association().$klass().$find(id)}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $a).call($b))};
        if ((($a = ($c = id_value = tree['$[]']("id"), $c !== false && $c !== nil && $c != null ?id_value['$is_a?']($scope.get('Array')) : $c)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          (($a = [id_value.$first()]), $c = target, $c['$id='].apply($c, $a), $a[$a.length-1])};
        return ($a = ($c = tree).$each, $a.$$p = (TMP_3 = function(method, value){var self = TMP_3.$$s || this, $d, $e, $f, $g, $h, new_target = nil, aggregation = nil, association = nil;
if (method == null) method = nil;if (value == null) value = nil;
        method = (function() {
          try {return $scope.get('JSON').$parse(method) } catch ($err) { 
            if (Opal.rescue($err, [$scope.get('StandardError')])) {
            return method
            } else { throw $err; } }})();
          new_target = nil;
          if (method['$==']("*all")) {
            return nil;
          } else if ((($d = target['$!']()) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
            self.$load_from_json(value, $scope.get('Object').$const_get(method))
          } else if (method['$==']("*count")) {
            target.$set_count_state(value.$first())
          } else if ((($d = ((($e = method['$is_a?']($scope.get('Integer'))) !== false && $e !== nil && $e != null) ? $e : method['$=~'](/^[0-9]+$/))) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
            new_target = target.$push_and_update_belongs_to(method)
          } else if ((($d = method['$is_a?']($scope.get('Array'))) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
            if (method['$[]'](0)['$==']("new")) {
              new_target = (($scope.get('ReactiveRecord')).$$scope.get('Base')).$find_by_object_id(target.$base_class(), method['$[]'](1))
            } else if ((($d = ($rb_lt(target.$class(), (($scope.get('ActiveRecord')).$$scope.get('Base'))))['$!']()) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
              new_target = ($d = target).$send.apply($d, Opal.to_a(method));
              if ((($e = value['$is_a?']($scope.get('Array'))) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
                ($e = new_target.$destroy(), $e !== false && $e !== nil && $e != null ?new_target = nil : $e)};
              } else {
              target.$backing_record().$update_attribute([method], target.$backing_record().$convert(method, value.$first()))
            }
          } else if ((($e = ($f = ($g = target.$class()['$respond_to?']("reflect_on_aggregation"), $g !== false && $g !== nil && $g != null ?aggregation = target.$class().$reflect_on_aggregation(method) : $g), $f !== false && $f !== nil && $f != null ?($rb_lt(aggregation.$klass(), (($scope.get('ActiveRecord')).$$scope.get('Base'))))['$!']() : $f)) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
            target.$send("" + (method) + "=", aggregation.$deserialize(value.$first()))
          } else if ((($e = value['$is_a?']($scope.get('Array'))) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
            if (method['$==']("id")) {
              } else {
              target.$send("" + (method) + "=", value.$first())
            }
          } else if ((($e = ($f = ($g = ($h = value['$is_a?']($scope.get('Hash')), $h !== false && $h !== nil && $h != null ?value['$[]']("id") : $h), $g !== false && $g !== nil && $g != null ?value['$[]']("id").$first() : $g), $f !== false && $f !== nil && $f != null ?association = target.$class().$reflect_on_association(method) : $f)) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
            new_target = association.$klass().$find(value['$[]']("id").$first());
            target.$send("" + (method) + "=", new_target);
          } else if ((($e = ($rb_lt(target.$class(), (($scope.get('ActiveRecord')).$$scope.get('Base'))))['$!']()) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
            new_target = ($e = target).$send.apply($e, Opal.to_a(method));
            if ((($f = value['$is_a?']($scope.get('Array'))) !== nil && $f != null && (!$f.$$is_boolean || $f == true))) {
              ($f = new_target.$destroy(), $f !== false && $f !== nil && $f != null ?new_target = nil : $f)};
            } else {
            new_target = target.$send("" + (method) + "=", target.$send(method))
          };
          if (new_target !== false && new_target !== nil && new_target != null) {
            return self.$load_from_json(value, new_target)
            } else {
            return nil
          };}, TMP_3.$$s = self, TMP_3.$$arity = 2, TMP_3), $a).call($c);
      }, TMP_4.$$arity = -2), nil) && 'load_from_json';
    })($scope.base, null)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["reactive_record/active_record/reactive_record/while_loading"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$new', '$<<', '$call', '$last_fetch_at', '$resolve', '$pop', '$log', '$>', '$count', '$pending_fetches', '$loaded_at', '$quiet!', '$select', '$==', '$first', '$reject', '$each', '$check_loads_pending', '$!', '$include', '$before_first_mount', '$+', '$has_observers?', '$prerender_footer', '$tap', '$param', '$waiting_on_resources=', '$get_state', '$set_state', '$on_opal_server?', '$after', '$before_mount', '$get_next_while_loading_counter', '$preload_css', '$loaded_children', '$after_mount', '$loading', '$add_style_sheet', '$dom_node', '$after_update', '$dup', '$element_props', '$join', '$compact', '$[]', '$merge!', '$create_element', '$loading_children', '$element_type', '$block', '$build', '$is_a?', '$to_s', '$replace', '$waiting_on_resources', '$type', '$properties', '$while_loading', '$alias_method', '$original_component_did_mount', '$reactive_record_link_to_enclosing_while_loading_container', '$reactive_record_link_set_while_loading_container_class', '$original_component_did_update']);
  (function($base) {
    var $ReactiveRecord, self = $ReactiveRecord = $module($base, 'ReactiveRecord');

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_7;

    Opal.defs(self, '$load', TMP_1 = function $$load() {
      var $a, self = this, $iter = TMP_1.$$p, block = $iter || nil, promise = nil, result = nil, e = nil;
      if (self.load_stack == null) self.load_stack = nil;
      if (self.loads_pending == null) self.loads_pending = nil;
      if (self.blocks_to_load == null) self.blocks_to_load = nil;

      TMP_1.$$p = null;
      try {
        promise = $scope.get('Promise').$new();
        ((($a = self.load_stack) !== false && $a !== nil && $a != null) ? $a : self.load_stack = []);
        self.load_stack['$<<'](self.loads_pending);
        self.loads_pending = nil;
        result = block.$call();
        if ((($a = self.loads_pending) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          ((($a = self.blocks_to_load) !== false && $a !== nil && $a != null) ? $a : self.blocks_to_load = []);
          self.blocks_to_load['$<<']([$scope.get('Base').$last_fetch_at(), promise, block]);
          } else {
          promise.$resolve(result)
        };
        self.loads_pending = self.load_stack.$pop();
        return promise;
      } catch ($err) {
        if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
          try {
            debugger;
            return (($scope.get('React')).$$scope.get('IsomorphicHelpers')).$log("ReactiveRecord.load exception raised during initial load: " + (e), "error");
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };
    }, TMP_1.$$arity = 0);

    Opal.defs(self, '$loads_pending!', TMP_2 = function() {
      var self = this;

      return self.loads_pending = true;
    }, TMP_2.$$arity = 0);

    Opal.defs(self, '$check_loads_pending', TMP_3 = function $$check_loads_pending() {
      var $a, self = this;
      if (self.loads_pending == null) self.loads_pending = nil;

      if ((($a = self.loads_pending) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = $rb_gt($scope.get('Base').$pending_fetches().$count(), 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return true
          } else {
          (($scope.get('ReactiveRecord')).$$scope.get('WhileLoading')).$loaded_at($scope.get('Base').$last_fetch_at());
          (($scope.get('ReactiveRecord')).$$scope.get('WhileLoading'))['$quiet!']();
          return false;
        }
        } else {
        return nil
      };
    }, TMP_3.$$arity = 0);

    Opal.defs(self, '$run_blocks_to_load', TMP_7 = function $$run_blocks_to_load(fetch_id, failure) {
      var $a, $b, TMP_4, $c, TMP_5, $d, TMP_6, self = this, blocks_to_load_now = nil, e = nil;
      if (self.blocks_to_load == null) self.blocks_to_load = nil;
      if (self.load_stack == null) self.load_stack = nil;

      if (failure == null) {
        failure = nil;
      }
      try {
        if ((($a = self.blocks_to_load) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          blocks_to_load_now = ($a = ($b = self.blocks_to_load).$select, $a.$$p = (TMP_4 = function(data){var self = TMP_4.$$s || this;
if (data == null) data = nil;
          return data.$first()['$=='](fetch_id)}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4), $a).call($b);
          self.blocks_to_load = ($a = ($c = self.blocks_to_load).$reject, $a.$$p = (TMP_5 = function(data){var self = TMP_5.$$s || this;
if (data == null) data = nil;
          return data.$first()['$=='](fetch_id)}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5), $a).call($c);
          ((($a = self.load_stack) !== false && $a !== nil && $a != null) ? $a : self.load_stack = []);
          return ($a = ($d = blocks_to_load_now).$each, $a.$$p = (TMP_6 = function(data){var self = TMP_6.$$s || this, $e, $f, id = nil, promise = nil, block = nil, result = nil;
            if (self.load_stack == null) self.load_stack = nil;
            if (self.loads_pending == null) self.loads_pending = nil;
            if (self.blocks_to_load == null) self.blocks_to_load = nil;
if (data == null) data = nil;
          $f = data, $e = Opal.to_ary($f), id = ($e[0] == null ? nil : $e[0]), promise = ($e[1] == null ? nil : $e[1]), block = ($e[2] == null ? nil : $e[2]), $f;
            self.load_stack['$<<'](self.loads_pending);
            self.loads_pending = nil;
            result = block.$call(failure);
            if ((($e = ($f = self.$check_loads_pending(), $f !== false && $f !== nil && $f != null ?failure['$!']() : $f)) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
              self.blocks_to_load['$<<']([$scope.get('Base').$last_fetch_at(), promise, block])
              } else {
              promise.$resolve(result)
            };
            return self.loads_pending = self.load_stack.$pop();}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $a).call($d);
          } else {
          return nil
        }
      } catch ($err) {
        if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
          try {
            return (($scope.get('React')).$$scope.get('IsomorphicHelpers')).$log("ReactiveRecord.load exception raised during retry: " + (e), "error")
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };
    }, TMP_7.$$arity = -2);

    (function($base, $super) {
      function $WhileLoading(){};
      var self = $WhileLoading = $klass($base, $super, 'WhileLoading', $WhileLoading);

      var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_8, TMP_9, TMP_10, TMP_11, $c, TMP_12, $d, TMP_22, $e, TMP_23, $f, TMP_24, TMP_26;

      def.while_loading_counter = def.css_to_preload = def.uniq_id = nil;
      self.$include((($scope.get('React')).$$scope.get('IsomorphicHelpers')));

      ($a = ($b = self).$before_first_mount, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this;

      self.css_to_preload = "";
        return self.while_loading_counter = 0;}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $a).call($b);

      Opal.defn(self, '$get_next_while_loading_counter', TMP_9 = function $$get_next_while_loading_counter() {
        var self = this;

        return self.while_loading_counter = $rb_plus(self.while_loading_counter, 1);
      }, TMP_9.$$arity = 0);

      Opal.defn(self, '$preload_css', TMP_10 = function $$preload_css(css) {
        var self = this;

        return self.css_to_preload['$<<'](css)['$<<']("\n");
      }, TMP_10.$$arity = 1);

      Opal.defs(self, '$has_observers?', TMP_11 = function() {
        var self = this;

        return (($scope.get('React')).$$scope.get('State'))['$has_observers?'](self, "loaded_at");
      }, TMP_11.$$arity = 0);

      ($a = ($c = self).$prerender_footer, $a.$$p = (TMP_12 = function(){var self = TMP_12.$$s || this, $d, $e, TMP_13;
        if (self.css_to_preload == null) self.css_to_preload = nil;

      return ($d = ($e = ((("<style>\n") + (self.css_to_preload)) + "\n</style>")).$tap, $d.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this;

        return self.css_to_preload = ""}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13), $d).call($e)}, TMP_12.$$s = self, TMP_12.$$arity = 0, TMP_12), $a).call($c);

      if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
        self.$include((($scope.get('React')).$$scope.get('Component')));

        self.$param("loading");

        self.$param("loaded_children");

        self.$param("loading_children");

        self.$param("element_type");

        self.$param("element_props");

        self.$param("display", $hash2(["default"], {"default": ""}));

        (function(self) {
          var $scope = self.$$scope, def = self.$$proto, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_20, TMP_21;

          Opal.defn(self, '$loading?', TMP_14 = function() {
            var self = this;
            if (self.is_loading == null) self.is_loading = nil;

            return self.is_loading;
          }, TMP_14.$$arity = 0);
          Opal.defn(self, '$loading!', TMP_15 = function() {
            var $a, $b, self = this;

            (($a = [true]), $b = (($scope.get('React')).$$scope.get('RenderingContext')), $b['$waiting_on_resources='].apply($b, $a), $a[$a.length-1]);
            (($scope.get('React')).$$scope.get('State')).$get_state(self, "loaded_at");
            (($scope.get('React')).$$scope.get('State')).$set_state(self, "quiet", false);
            return self.is_loading = true;
          }, TMP_15.$$arity = 0);
          Opal.defn(self, '$loaded_at', TMP_16 = function $$loaded_at(loaded_at) {
            var self = this;

            (($scope.get('React')).$$scope.get('State')).$set_state(self, "loaded_at", loaded_at);
            return self.is_loading = false;
          }, TMP_16.$$arity = 1);
          Opal.defn(self, '$quiet?', TMP_17 = function() {
            var self = this;

            return (($scope.get('React')).$$scope.get('State')).$get_state(self, "quiet");
          }, TMP_17.$$arity = 0);
          Opal.defn(self, '$page_loaded?', TMP_18 = function() {
            var self = this;

            return (($scope.get('React')).$$scope.get('State')).$get_state(self, "page_loaded");
          }, TMP_18.$$arity = 0);
          Opal.defn(self, '$quiet!', TMP_20 = function() {
            var $a, $b, TMP_19, self = this;
            if (self.page_loaded == null) self.page_loaded = nil;

            (($scope.get('React')).$$scope.get('State')).$set_state(self, "quiet", true);
            if ((($a = ((($b = self['$on_opal_server?']()) !== false && $b !== nil && $b != null) ? $b : self.page_loaded)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              } else {
              ($a = ($b = self).$after, $a.$$p = (TMP_19 = function(){var self = TMP_19.$$s || this;

              return (($scope.get('React')).$$scope.get('State')).$set_state(self, "page_loaded", true)}, TMP_19.$$s = self, TMP_19.$$arity = 0, TMP_19), $a).call($b, 1)
            };
            return self.page_loaded = true;
          }, TMP_20.$$arity = 0);
          return (Opal.defn(self, '$add_style_sheet', TMP_21 = function $$add_style_sheet() {
            var $a, self = this;
            if (self.style_sheet == null) self.style_sheet = nil;

            return ((($a = self.style_sheet) !== false && $a !== nil && $a != null) ? $a : self.style_sheet = 
            $('<style type="text/css">'+
              '  .reactive_record_is_loading > .reactive_record_show_when_loaded { display: none; }'+
              '  .reactive_record_is_loaded > .reactive_record_show_while_loading { display: none; }'+
              '</style>').appendTo("head")
          );
          }, TMP_21.$$arity = 0), nil) && 'add_style_sheet';
        })(Opal.get_singleton_class(self));

        ($a = ($d = self).$before_mount, $a.$$p = (TMP_22 = function(){var self = TMP_22.$$s || this;
          if (self.uniq_id == null) self.uniq_id = nil;

        self.uniq_id = $scope.get('WhileLoading').$get_next_while_loading_counter();
          return $scope.get('WhileLoading').$preload_css($rb_plus($rb_plus(".reactive_record_while_loading_container_" + (self.uniq_id) + " > :nth-child(1n+" + ($rb_plus(self.$loaded_children().$count(), 1)) + ") {\n", "  display: none;\n"), "}\n"));}, TMP_22.$$s = self, TMP_22.$$arity = 0, TMP_22), $a).call($d);

        ($a = ($e = self).$after_mount, $a.$$p = (TMP_23 = function(){var self = TMP_23.$$s || this;

        self.waiting_on_resources = self.$loading();
          $scope.get('WhileLoading').$add_style_sheet();
          
          var node = self.$dom_node();
          $(node).children(':nth-child(-1n+'+self.$loaded_children().$count()+')').addClass('reactive_record_show_when_loaded');
          $(node).children(':nth-child(1n+'+$rb_plus(self.$loaded_children().$count(), 1)+')').addClass('reactive_record_show_while_loading');
        ;}, TMP_23.$$s = self, TMP_23.$$arity = 0, TMP_23), $a).call($e);

        ($a = ($f = self).$after_update, $a.$$p = (TMP_24 = function(){var self = TMP_24.$$s || this;

        return self.waiting_on_resources = self.$loading()}, TMP_24.$$s = self, TMP_24.$$arity = 0, TMP_24), $a).call($f);

        return (Opal.defn(self, '$render', TMP_26 = function $$render() {
          var $a, $b, TMP_25, self = this, props = nil, classes = nil;

          props = self.$element_props().$dup();
          classes = [props['$[]']("class"), props['$[]']("className"), "reactive_record_while_loading_container_" + (self.uniq_id)].$compact().$join(" ");
          props['$merge!']($hash2(["data-reactive_record_while_loading_container_id", "data-reactive_record_enclosing_while_loading_container_id", "class"], {"data-reactive_record_while_loading_container_id": self.uniq_id, "data-reactive_record_enclosing_while_loading_container_id": self.uniq_id, "class": classes}));
          return ($a = ($b = $scope.get('React')).$create_element, $a.$$p = (TMP_25 = function(){var self = TMP_25.$$s || this;

          return $rb_plus(self.$loaded_children(), self.$loading_children())}, TMP_25.$$s = self, TMP_25.$$arity = 0, TMP_25), $a).call($b, self.$element_type(), props);
        }, TMP_26.$$arity = 0), nil) && 'render';};
    })($scope.base, null);
  })($scope.base);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Element(){};
      var self = $Element = $klass($base, $super, 'Element', $Element);

      var def = self.$$proto, $scope = self.$$scope, TMP_27, TMP_29;

      Opal.defn(self, '$while_loading', TMP_27 = function $$while_loading(display) {
        var $a, $b, TMP_28, self = this, $iter = TMP_27.$$p, loading_display_block = $iter || nil, loaded_children = nil, loading_children = nil;

        if (display == null) {
          display = "";
        }
        TMP_27.$$p = null;
        loaded_children = [];
        if ((($a = self.$block()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          loaded_children = self.$block().$call().$dup()};
        loading_children = [display];
        if (loading_display_block !== false && loading_display_block !== nil && loading_display_block != null) {
          loading_children = ($a = ($b = $scope.get('RenderingContext')).$build, $a.$$p = (TMP_28 = function(buffer){var self = TMP_28.$$s || this, $c, result = nil;
if (buffer == null) buffer = nil;
          result = loading_display_block.$call();
            if ((($c = result['$is_a?']($scope.get('String'))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              buffer['$<<'](result.$to_s())};
            return buffer.$dup();}, TMP_28.$$s = self, TMP_28.$$arity = 1, TMP_28), $a).call($b)};
        return $scope.get('RenderingContext').$replace(self, $scope.get('React').$create_element((($scope.get('ReactiveRecord')).$$scope.get('WhileLoading')), $hash2(["loading", "loading_children", "loaded_children", "element_type", "element_props"], {"loading": self.$waiting_on_resources(), "loading_children": loading_children, "loaded_children": loaded_children, "element_type": self.$type(), "element_props": self.$properties()})));
      }, TMP_27.$$arity = -1);

      return (Opal.defn(self, '$hide_while_loading', TMP_29 = function $$hide_while_loading() {
        var self = this;

        return self.$while_loading();
      }, TMP_29.$$arity = 0), nil) && 'hide_while_loading';
    })($scope.base, null);

    if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
      (function($base) {
        var $Component, self = $Component = $module($base, 'Component');

        var def = self.$$proto, $scope = self.$$scope, TMP_30, TMP_31, TMP_32, TMP_33;

        self.$alias_method("original_component_did_mount", "component_did_mount");

        Opal.defn(self, '$component_did_mount', TMP_30 = function $$component_did_mount($a_rest) {
          var $b, self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          ($b = self).$original_component_did_mount.apply($b, Opal.to_a(args));
          self.$reactive_record_link_to_enclosing_while_loading_container();
          return self.$reactive_record_link_set_while_loading_container_class();
        }, TMP_30.$$arity = -1);

        self.$alias_method("original_component_did_update", "component_did_update");

        Opal.defn(self, '$component_did_update', TMP_31 = function $$component_did_update($a_rest) {
          var $b, self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          ($b = self).$original_component_did_update.apply($b, Opal.to_a(args));
          return self.$reactive_record_link_set_while_loading_container_class();
        }, TMP_31.$$arity = -1);

        Opal.defn(self, '$reactive_record_link_to_enclosing_while_loading_container', TMP_32 = function $$reactive_record_link_to_enclosing_while_loading_container() {
          var self = this;

          
        var node = self.$dom_node();
        if (!$(node).is('[data-reactive_record_enclosing_while_loading_container_id]')) {
          var while_loading_container = $(node).closest('[data-reactive_record_while_loading_container_id]')
          if (while_loading_container.length > 0) {
            var container_id = $(while_loading_container).attr('data-reactive_record_while_loading_container_id')
            $(node).attr('data-reactive_record_enclosing_while_loading_container_id', container_id)
          }
        }
      ;
        }, TMP_32.$$arity = 0);

        Opal.defn(self, '$reactive_record_link_set_while_loading_container_class', TMP_33 = function $$reactive_record_link_set_while_loading_container_class() {
          var self = this;

          

        var node = self.$dom_node();
        var while_loading_container_id = $(node).attr('data-reactive_record_enclosing_while_loading_container_id');
        if (while_loading_container_id) {
          var while_loading_container = $('[data-reactive_record_while_loading_container_id='+while_loading_container_id+']');
          var loading = (self.$waiting_on_resources() == true);
          if (loading) {
            $(node).addClass('reactive_record_is_loading');
            $(node).removeClass('reactive_record_is_loaded');
            $(while_loading_container).addClass('reactive_record_is_loading');
            $(while_loading_container).removeClass('reactive_record_is_loaded');

          } else if (!$(node).hasClass('reactive_record_is_loaded')) {

            if (!$(node).attr('data-reactive_record_while_loading_container_id')) {
              $(node).removeClass('reactive_record_is_loading');
              $(node).addClass('reactive_record_is_loaded');
            }
            if (!$(while_loading_container).hasClass('reactive_record_is_loaded')) {
              var loading_children = $(while_loading_container).
                find('[data-reactive_record_enclosing_while_loading_container_id='+while_loading_container_id+'].reactive_record_is_loading')
              if (loading_children.length == 0) {
                $(while_loading_container).removeClass('reactive_record_is_loading')
                $(while_loading_container).addClass('reactive_record_is_loaded')
              }
            }

          }

        }
      ;
        }, TMP_33.$$arity = 0);
      })($scope.base)};
  })($scope.base);
};
/* Generated by Opal 0.10.3 */
Opal.modules["reactive_record/active_record/reactive_record/isomorphic_base"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $range = Opal.range, $hash = Opal.hash;

  Opal.add_stubs(['$require', '$include', '$before_first_mount', '$!=', '$new', '$[]=', '$on_opal_client?', '$now', '$log', '$each', '$load_from_json', '$from_object', '$instance_variable_get', '$class', '$isomorphic_method', '$==', '$send_to_server', '$name', '$shift', '$when_on_server', '$[]', '$raise', '$nil?', '$+', '$model_name', '$model', '$object_id', '$data_loading?', '$<<', '$schedule_fetch', '$columns_hash', '$last', '$attr_reader', '$after', '$>', '$count', '$uniq', '$gather_records', '$to_n', '$fail', '$run_blocks_to_load', '$body', '$then', '$to_i', '$-', '$json', '$loaded_at', '$empty?', '$quiet!', '$post', '$to_json', '$inheritance_column', '$flatten', '$collect', '$lambda', '$<', '$loading?', '$id', '$to_s', '$primary_key', '$vector', '$new?', '$changed?', '$reflect_on_association', '$collection?', '$inverse_of', '$call', '$backing_record', '$collection', '$unsaved_children', '$reflect_on_aggregation', '$klass', '$serialize', '$synced_attributes', '$attributes', '$sync!', '$saving!', '$ar_instance', '$after_save', '$sync_unscoped_collection!', '$errors!', '$resolve', '$saved!', '$message', '$!', '$destroy_associations']);
  self.$require("json");
  return (function($base) {
    var $ReactiveRecord, self = $ReactiveRecord = $module($base, 'ReactiveRecord');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Base(){};
      var self = $Base = $klass($base, $super, 'Base', $Base);

      var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, TMP_5, $c, TMP_6, $d, TMP_8, TMP_10, TMP_14, TMP_15, TMP_20, TMP_21, TMP_29;

      def.destroyed = nil;
      self.$include((($scope.get('React')).$$scope.get('IsomorphicHelpers')));

      ($a = ($b = self).$before_first_mount, $a.$$p = (TMP_1 = function(context){var self = TMP_1.$$s || this, $c, $d, TMP_2, $e, TMP_3, $f, TMP_4;
if (context == null) context = nil;
      if ((($c = $scope.get('RUBY_ENGINE')['$!=']("opal")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          } else {
          self.outer_scopes = $scope.get('Set').$new();
          self.fetch_scheduled = nil;
          self.records = ($c = ($d = $scope.get('Hash')).$new, $c.$$p = (TMP_2 = function(hash, key){var self = TMP_2.$$s || this;
if (hash == null) hash = nil;if (key == null) key = nil;
          return hash['$[]='](key, [])}, TMP_2.$$s = self, TMP_2.$$arity = 2, TMP_2), $c).call($d);
          self.class_scopes = ($c = ($e = $scope.get('Hash')).$new, $c.$$p = (TMP_3 = function(hash, key){var self = TMP_3.$$s || this;
if (hash == null) hash = nil;if (key == null) key = nil;
          return hash['$[]='](key, $hash2([], {}))}, TMP_3.$$s = self, TMP_3.$$arity = 2, TMP_3), $c).call($e);
          if ((($c = self['$on_opal_client?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            self.pending_fetches = [];
            self.pending_records = [];
            self.last_fetch_at = $scope.get('Time').$now();
            if ((($c = typeof window.ReactiveRecordInitialData === 'undefined') !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return nil
              } else {
              self.$log(["Reactive record prerendered data being loaded: %o", window.ReactiveRecordInitialData]);
              return ($c = ($f = $scope.get('JSON').$from_object(window.ReactiveRecordInitialData)).$each, $c.$$p = (TMP_4 = function(hash){var self = TMP_4.$$s || this;
if (hash == null) hash = nil;
              return self.$load_from_json(hash)}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4), $c).call($f);
            };
            } else {
            return nil
          };
        }}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $a).call($b);

      Opal.defn(self, '$records', TMP_5 = function $$records() {
        var self = this;

        return self.$class().$instance_variable_get("@records");
      }, TMP_5.$$arity = 0);

      ($a = ($c = self).$isomorphic_method, $a.$$p = (TMP_6 = function(f, vector){var self = TMP_6.$$s || this, $d, $e, TMP_7;
if (f == null) f = nil;if (vector == null) vector = nil;
      if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
          f.$send_to_server([vector.$shift().$name()].concat(Opal.to_a(vector)))};
        return ($d = ($e = f).$when_on_server, $d.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this, $f;
          if (self.server_data_cache == null) self.server_data_cache = nil;

        return ($f = self.server_data_cache)['$[]'].apply($f, Opal.to_a(vector))}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $d).call($e);}, TMP_6.$$s = self, TMP_6.$$arity = 2, TMP_6), $a).call($c, "fetch_from_db");

      ($a = ($d = self).$isomorphic_method, $a.$$p = (TMP_8 = function(f, klass, attribute, value){var self = TMP_8.$$s || this, $e, $f, TMP_9;
if (f == null) f = nil;if (klass == null) klass = nil;if (attribute == null) attribute = nil;if (value == null) value = nil;
      if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
          f.$send_to_server(klass.$name(), attribute, value)};
        return ($e = ($f = f).$when_on_server, $e.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this;
          if (self.server_data_cache == null) self.server_data_cache = nil;

        return self.server_data_cache['$[]'](klass, ["find_by_" + (attribute), value], "id")}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $e).call($f);}, TMP_8.$$s = self, TMP_8.$$arity = 4, TMP_8), $a).call($d, "find_in_db");

      if ((($a = $scope.get('RUBY_ENGINE')['$!=']("opal")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {};

      Opal.defs(self, '$load_from_db', TMP_10 = function $$load_from_db(record, $a_rest) {
        var $b, self = this, vector;
        if (self.pending_fetches == null) self.pending_fetches = nil;
        if (self.pending_records == null) self.pending_records = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        vector = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          vector[$arg_idx - 1] = arguments[$arg_idx];
        }
        if ((($b = self['$on_opal_client?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          } else {
          return nil
        };
        if (vector['$[]'](1)['$=='](["find_by_id", nil])) {
          self.$raise("attempt to do a find_by_id of nil.  This will return all records, and is not allowed")};
        if ((($b = vector['$[]'](0)['$nil?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          vector = $rb_plus([record.$model().$model_name(), ["new", record.$object_id()]], vector['$[]']($range(1, -1, false)))};
        if ((($b = self['$data_loading?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          } else {
          self.pending_fetches['$<<'](vector);
          if (record !== false && record !== nil && record != null) {
            self.pending_records['$<<'](record)};
          self.$schedule_fetch();
        };
        return $scope.get('DummyValue').$new((($b = record !== false && record !== nil && record != null) ? record.$model().$columns_hash()['$[]'](vector.$last()) : record));
      }, TMP_10.$$arity = -2);

      (function(self) {
        var $scope = self.$$scope, def = self.$$proto;

        self.$attr_reader("pending_fetches");
        return self.$attr_reader("last_fetch_at");
      })(Opal.get_singleton_class(self));

      Opal.defs(self, '$schedule_fetch', TMP_14 = function $$schedule_fetch() {
        var $a, $b, $c, TMP_11, self = this;
        if (self.fetch_scheduled == null) self.fetch_scheduled = nil;

        return ((($a = self.fetch_scheduled) !== false && $a !== nil && $a != null) ? $a : self.fetch_scheduled = ($b = ($c = self).$after, $b.$$p = (TMP_11 = function(){var self = TMP_11.$$s || this, $d, $e, TMP_12, $f, $g, TMP_13, last_fetch_at = nil, pending_fetches = nil, models = nil, associations = nil, start_time = nil;
          if (self.pending_fetches == null) self.pending_fetches = nil;
          if (self.last_fetch_at == null) self.last_fetch_at = nil;
          if (self.pending_records == null) self.pending_records = nil;

        if ((($d = $rb_gt(self.pending_fetches.$count(), 0)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
            last_fetch_at = self.last_fetch_at;
            self.last_fetch_at = $scope.get('Time').$now();
            pending_fetches = self.pending_fetches.$uniq();
            $e = self.$gather_records(self.pending_records, false, nil), $d = Opal.to_ary($e), models = ($d[0] == null ? nil : $d[0]), associations = ($d[1] == null ? nil : $d[1]), $e;
            self.$log(["Server Fetching: %o", pending_fetches.$to_n()]);
            start_time = $scope.get('Time').$now();
            ($d = ($e = ($f = ($g = $scope.get('HTTP').$post(window.ReactiveRecordEnginePath, $hash2(["payload"], {"payload": $hash2(["json"], {"json": $hash2(["models", "associations", "pending_fetches"], {"models": models, "associations": associations, "pending_fetches": pending_fetches}).$to_json()})}))).$then, $f.$$p = (TMP_13 = function(response){var self = TMP_13.$$s || this, $h, fetch_time = nil, e = nil;
              if (self.pending_fetches == null) self.pending_fetches = nil;
if (response == null) response = nil;
            fetch_time = $scope.get('Time').$now();
              self.$log("       Fetched in:   " + (($rb_minus(fetch_time, start_time)).$to_i()) + "s");
              try {
                (($scope.get('ReactiveRecord')).$$scope.get('Base')).$load_from_json(response.$json())
              } catch ($err) {
                if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
                  try {
                    self.$log("Unexpected exception raised while loading json from server: " + (e), "error")
                  } finally { Opal.pop_exception() }
                } else { throw $err; }
              };
              self.$log("       Processed in: " + (($rb_minus($scope.get('Time').$now(), fetch_time)).$to_i()) + "s");
              self.$log(["       Returned: %o", response.$json().$to_n()]);
              $scope.get('ReactiveRecord').$run_blocks_to_load(last_fetch_at);
              (($scope.get('ReactiveRecord')).$$scope.get('WhileLoading')).$loaded_at(last_fetch_at);
              if ((($h = self.pending_fetches['$empty?']()) !== nil && $h != null && (!$h.$$is_boolean || $h == true))) {
                return (($scope.get('ReactiveRecord')).$$scope.get('WhileLoading'))['$quiet!']()
                } else {
                return nil
              };}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13), $f).call($g)).$fail, $d.$$p = (TMP_12 = function(response){var self = TMP_12.$$s || this;
if (response == null) response = nil;
            self.$log("Fetch failed", "error");
              return $scope.get('ReactiveRecord').$run_blocks_to_load(last_fetch_at, response.$body());}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12), $d).call($e);
            self.pending_fetches = [];
            self.pending_records = [];
            return self.fetch_scheduled = nil;
            } else {
            return nil
          }}, TMP_11.$$s = self, TMP_11.$$arity = 0, TMP_11), $b).call($c, 0));
      }, TMP_14.$$arity = 0);

      Opal.defs(self, '$get_type_hash', TMP_15 = function $$get_type_hash(record) {
        var self = this;

        return $hash(record.$class().$inheritance_column(), record['$[]'](record.$class().$inheritance_column()));
      }, TMP_15.$$arity = 1);

      if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
        Opal.defs(self, '$gather_records', TMP_20 = function $$gather_records(records_to_process, force, record_being_saved) {
          var $a, $b, $c, TMP_16, $d, TMP_17, $e, $f, $g, TMP_18, self = this, models = nil, associations = nil, backing_records = nil, add_new_association = nil, record_index = nil, record = nil, output_attributes = nil, vector = nil;

          models = [];
          associations = [];
          records_to_process = records_to_process.$uniq();
          backing_records = ($a = $scope.get('Hash'))['$[]'].apply($a, Opal.to_a(($b = ($c = records_to_process).$collect, $b.$$p = (TMP_16 = function(record){var self = TMP_16.$$s || this;
if (record == null) record = nil;
          return [record.$object_id(), record]}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16), $b).call($c).$flatten(1)));
          add_new_association = ($b = ($d = self).$lambda, $b.$$p = (TMP_17 = function(record, attribute, assoc_record){var self = TMP_17.$$s || this, $e;
if (record == null) record = nil;if (attribute == null) attribute = nil;if (assoc_record == null) assoc_record = nil;
          if ((($e = backing_records['$[]'](assoc_record.$object_id())) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
              } else {
              records_to_process['$<<'](assoc_record);
              backing_records['$[]='](assoc_record.$object_id(), assoc_record);
            };
            return associations['$<<']($hash2(["parent_id", "attribute", "child_id"], {"parent_id": record.$object_id(), "attribute": attribute, "child_id": assoc_record.$object_id()}));}, TMP_17.$$s = self, TMP_17.$$arity = 3, TMP_17), $b).call($d);
          record_index = 0;
          while ((($e = ($rb_lt(record_index, records_to_process.$count()))) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
          record = records_to_process['$[]'](record_index);
          if ((($e = ($f = record.$id()['$loading?'](), $f !== false && $f !== nil && $f != null ?record_being_saved : $f)) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
            self.$raise("Attempt to save a model while it or an associated model is still loading: model being saved: " + (record_being_saved.$model()) + ":" + (record_being_saved.$id()) + ((function() {if ((($e = record['$!='](record_being_saved)) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
              return $rb_plus(", associated model: ", record.$model().$to_s())
              } else {
              return nil
            }; return nil; })()))};
          output_attributes = $hash(record.$model().$primary_key(), (function() {if ((($e = record.$id()['$loading?']()) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
            return nil
            } else {
            return record.$id()
          }; return nil; })());
          vector = ((($e = record.$vector()) !== false && $e !== nil && $e != null) ? $e : [record.$model().$model_name(), ["new", record.$object_id()]]);
          models['$<<']($hash2(["id", "model", "attributes", "vector"], {"id": record.$object_id(), "model": record.$model().$model_name(), "attributes": output_attributes, "vector": vector}));
          if ((($e = ((($f = ((($g = record['$new?']()) !== false && $g !== nil && $g != null) ? $g : record['$changed?']())) !== false && $f !== nil && $f != null) ? $f : ((($g = record['$=='](record_being_saved)) ? force : record['$=='](record_being_saved))))) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
            ($e = ($f = record.$attributes()).$each, $e.$$p = (TMP_18 = function(attribute, value){var self = TMP_18.$$s || this, $h, $i, TMP_19, $j, $k, association = nil, aggregation = nil, new_value = nil;
if (attribute == null) attribute = nil;if (value == null) value = nil;
            if ((($h = association = record.$model().$reflect_on_association(attribute)) !== nil && $h != null && (!$h.$$is_boolean || $h == true))) {
                if ((($h = association['$collection?']()) !== nil && $h != null && (!$h.$$is_boolean || $h == true))) {
                  return ($h = ($i = [].concat(Opal.to_a(value.$collection())).concat(Opal.to_a(value.$unsaved_children()))).$each, $h.$$p = (TMP_19 = function(assoc){var self = TMP_19.$$s || this, $j, $k;
if (assoc == null) assoc = nil;
                  if ((($j = ((($k = assoc['$changed?'](association.$inverse_of())) !== false && $k !== nil && $k != null) ? $k : assoc['$new?']())) !== nil && $j != null && (!$j.$$is_boolean || $j == true))) {
                      return add_new_association.$call(record, attribute, assoc.$backing_record())
                      } else {
                      return nil
                    }}, TMP_19.$$s = self, TMP_19.$$arity = 1, TMP_19), $h).call($i)
                } else if ((($h = ((($j = ((($k = record['$new?']()) !== false && $k !== nil && $k != null) ? $k : record['$changed?'](attribute))) !== false && $j !== nil && $j != null) ? $j : ((($k = record['$=='](record_being_saved)) ? force : record['$=='](record_being_saved))))) !== nil && $h != null && (!$h.$$is_boolean || $h == true))) {
                  if ((($h = value['$nil?']()) !== nil && $h != null && (!$h.$$is_boolean || $h == true))) {
                    return output_attributes['$[]='](attribute, nil)
                    } else {
                    return add_new_association.$call(record, attribute, value.$backing_record())
                  }
                  } else {
                  return nil
                }
              } else if ((($h = ($j = aggregation = record.$model().$reflect_on_aggregation(attribute), $j !== false && $j !== nil && $j != null ?($rb_lt(aggregation.$klass(), (($scope.get('ActiveRecord')).$$scope.get('Base')))) : $j)) !== nil && $h != null && (!$h.$$is_boolean || $h == true))) {
                if ((($h = value['$nil?']()) !== nil && $h != null && (!$h.$$is_boolean || $h == true))) {
                  return nil
                  } else {
                  return add_new_association.$call(record, attribute, value.$backing_record())
                }
              } else if (aggregation !== false && aggregation !== nil && aggregation != null) {
                new_value = aggregation.$serialize(value);
                if ((($h = ((($j = record['$changed?'](attribute)) !== false && $j !== nil && $j != null) ? $j : new_value['$!='](aggregation.$serialize(record.$synced_attributes()['$[]'](attribute))))) !== nil && $h != null && (!$h.$$is_boolean || $h == true))) {
                  return output_attributes['$[]='](attribute, new_value)
                  } else {
                  return nil
                };
              } else if ((($h = ((($j = record['$new?']()) !== false && $j !== nil && $j != null) ? $j : record['$changed?'](attribute))) !== nil && $h != null && (!$h.$$is_boolean || $h == true))) {
                return output_attributes['$[]='](attribute, value)
                } else {
                return nil
              }}, TMP_18.$$s = self, TMP_18.$$arity = 2, TMP_18), $e).call($f)};
          record_index = $rb_plus(record_index, 1);};
          return [models, associations, backing_records];
        }, TMP_20.$$arity = 3);

        Opal.defn(self, '$save', TMP_21 = function $$save(validate, force) {
          var $a, $b, TMP_22, $c, TMP_23, self = this, $iter = TMP_21.$$p, block = $iter || nil, models = nil, associations = nil, backing_records = nil, promise = nil, e = nil;

          TMP_21.$$p = null;
          if ((($a = self['$data_loading?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self['$sync!']()
          } else if ((($a = ((($b = force) !== false && $b !== nil && $b != null) ? $b : self['$changed?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            try {
              $b = self.$class().$gather_records([self], force, self), $a = Opal.to_ary($b), models = ($a[0] == null ? nil : $a[0]), associations = ($a[1] == null ? nil : $a[1]), backing_records = ($a[2] == null ? nil : $a[2]), $b;
              ($a = ($b = backing_records).$each, $a.$$p = (TMP_22 = function(id, record){var self = TMP_22.$$s || this;
if (id == null) id = nil;if (record == null) record = nil;
              return record['$saving!']()}, TMP_22.$$s = self, TMP_22.$$arity = 2, TMP_22), $a).call($b);
              promise = $scope.get('Promise').$new();
              ($a = ($c = $scope.get('HTTP').$post($rb_plus(window.ReactiveRecordEnginePath, "/save"), $hash2(["payload"], {"payload": $hash2(["json"], {"json": $hash2(["models", "associations", "validate"], {"models": models, "associations": associations, "validate": validate}).$to_json()})}))).$then, $a.$$p = (TMP_23 = function(response){var self = TMP_23.$$s || this, $d, $e, TMP_24, $f, TMP_25, $g, TMP_26, $h, TMP_27, $i, TMP_28, e = nil;
if (response == null) response = nil;
              try {
                  response.$json()['$[]=']("models", ($d = ($e = response.$json()['$[]']("saved_models")).$collect, $d.$$p = (TMP_24 = function(item){var self = TMP_24.$$s || this;
if (item == null) item = nil;
                  return backing_records['$[]'](item['$[]'](0)).$ar_instance()}, TMP_24.$$s = self, TMP_24.$$arity = 1, TMP_24), $d).call($e));
                  if ((($d = response.$json()['$[]']("success")) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
                    ($d = ($f = response.$json()['$[]']("saved_models")).$each, $d.$$p = (TMP_25 = function(item){var self = TMP_25.$$s || this;
if (item == null) item = nil;
                    return (($scope.get('HyperMesh')).$$scope.get('LocalSync')).$after_save(backing_records['$[]'](item['$[]'](0)).$ar_instance(), item['$[]'](2))}, TMP_25.$$s = self, TMP_25.$$arity = 1, TMP_25), $d).call($f)
                    } else {
                    self.$log("Reactive Record Save Failed: " + (response.$json()['$[]']("message")), "error");
                    ($d = ($g = response.$json()['$[]']("saved_models")).$each, $d.$$p = (TMP_26 = function(item){var self = TMP_26.$$s || this, $h;
if (item == null) item = nil;
                    if ((($h = item['$[]'](3)) !== nil && $h != null && (!$h.$$is_boolean || $h == true))) {
                        return self.$log("  Model: " + (item['$[]'](1)) + "[" + (item['$[]'](0)) + "]  Attributes: " + (item['$[]'](2)) + "  Errors: " + (item['$[]'](3)), "error")
                        } else {
                        return nil
                      }}, TMP_26.$$s = self, TMP_26.$$arity = 1, TMP_26), $d).call($g);
                  };
                  ($d = ($h = response.$json()['$[]']("saved_models")).$each, $d.$$p = (TMP_27 = function(item){var self = TMP_27.$$s || this;
if (item == null) item = nil;
                  backing_records['$[]'](item['$[]'](0))['$sync_unscoped_collection!']();
                    return backing_records['$[]'](item['$[]'](0))['$errors!'](item['$[]'](3));}, TMP_27.$$s = self, TMP_27.$$arity = 1, TMP_27), $d).call($h);
                  if (block !== false && block !== nil && block != null) {
                    Opal.yieldX(block, [response.$json()['$[]']("success"), response.$json()['$[]']("message"), response.$json()['$[]']("models")])};
                  promise.$resolve(response.$json());
                  return ($d = ($i = backing_records).$each, $d.$$p = (TMP_28 = function(id, record){var self = TMP_28.$$s || this;
if (id == null) id = nil;if (record == null) record = nil;
                  return record['$saved!']()}, TMP_28.$$s = self, TMP_28.$$arity = 2, TMP_28), $d).call($i);
                } catch ($err) {
                  if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
                    try {
                      return self.$log("Exception raised while saving - " + (e), "error")
                    } finally { Opal.pop_exception() }
                  } else { throw $err; }
                }}, TMP_23.$$s = self, TMP_23.$$arity = 1, TMP_23), $a).call($c);
              return promise;
            } catch ($err) {
              if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
                try {
                  self.$log("Exception raised while saving - " + (e), "error");
                  if (block !== false && block !== nil && block != null) {
                    Opal.yieldX(block, [false, e.$message(), []])};
                  promise.$resolve($hash2(["success", "message", "models"], {"success": false, "message": e.$message(), "models": []}));
                  return promise;
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            }
            } else {
            promise = $scope.get('Promise').$new();
            if (block !== false && block !== nil && block != null) {
              Opal.yieldX(block, [true, nil, []])};
            promise.$resolve($hash2(["success"], {"success": true}));
            return promise;
          };
        }, TMP_21.$$arity = 2);};

      if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
        return (Opal.defn(self, '$destroy', TMP_29 = function $$destroy() {
          var $a, $b, $c, TMP_30, self = this, $iter = TMP_29.$$p, block = $iter || nil, promise = nil;

          TMP_29.$$p = null;
          if ((($a = self.destroyed) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return nil};
          promise = $scope.get('Promise').$new();
          if ((($a = ($b = self['$data_loading?']()['$!'](), $b !== false && $b !== nil && $b != null ?(((($c = self.$id()) !== false && $c !== nil && $c != null) ? $c : self.$vector())) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            ($a = ($b = $scope.get('HTTP').$post($rb_plus(window.ReactiveRecordEnginePath, "/destroy"), $hash2(["payload"], {"payload": $hash2(["json"], {"json": $hash2(["model", "id", "vector"], {"model": self.$ar_instance().$model_name(), "id": self.$id(), "vector": self.$vector()}).$to_json()})}))).$then, $a.$$p = (TMP_30 = function(response){var self = TMP_30.$$s || this;
if (response == null) response = nil;
            (($scope.get('HyperMesh')).$$scope.get('LocalSync')).$after_save(self.$ar_instance());
              if (block !== false && block !== nil && block != null) {
                Opal.yieldX(block, [response.$json()['$[]']("success"), response.$json()['$[]']("message")])};
              return promise.$resolve(response.$json());}, TMP_30.$$s = self, TMP_30.$$arity = 1, TMP_30), $a).call($b)
            } else {
            self.$destroy_associations();
            if (block !== false && block !== nil && block != null) {
              Opal.yieldX(block, [true, nil])};
            promise.$resolve($hash2(["success"], {"success": true}));
          };
          self.destroyed = true;
          return promise;
        }, TMP_29.$$arity = 0), nil) && 'destroy'};
    })($scope.base, null)
  })($scope.base);
};
/* Generated by Opal 0.10.3 */
Opal.modules["reactive_record/active_record/reactive_record/dummy_value"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$!', '$loading?', '$notify', '$[]', '$__send__', '$parse', '$+', '$gsub', '$dummy_time', '$dummy_date', '$Float', '$Integer', '$data_loading?', '$loads_pending!', '$loading!', '$=~', '$respond_to?', '$send', '$to_proc', '$coerce', '$downcase', '$name', '$class', '$==', '$object_id', '$zero?', '$to_s', '$to_f', '$to_i', '$to_numeric', '$to_number', '$to_date', '$to_time', '$acts_as_string', '$empty?']);
  (function($base, $super) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3;

    Opal.defn(self, '$loaded?', TMP_1 = function() {
      var self = this;

      return self['$loading?']()['$!']();
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$loading?', TMP_2 = function() {
      var self = this;

      return false;
    }, TMP_2.$$arity = 0);

    return (Opal.defn(self, '$present?', TMP_3 = function() {
      var self = this;

      return self['$!']()['$!']();
    }, TMP_3.$$arity = 0), nil) && 'present?';
  })($scope.base, null);
  return (function($base) {
    var $ReactiveRecord, self = $ReactiveRecord = $module($base, 'ReactiveRecord');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Base(){};
      var self = $Base = $klass($base, $super, 'Base', $Base);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $DummyValue(){};
        var self = $DummyValue = $klass($base, $super, 'DummyValue', $DummyValue);

        var def = self.$$proto, $scope = self.$$scope, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30, TMP_31, TMP_32, TMP_33, TMP_34;

        def.column_hash = def.object = nil;
        Opal.defn(self, '$initialize', TMP_4 = function $$initialize(column_hash) {
          var $a, $b, self = this, column_type = nil, default_value_method = nil;

          if (column_hash == null) {
            column_hash = nil;
          }
          try {
            ((($a = column_hash) !== false && $a !== nil && $a != null) ? $a : column_hash = $hash2([], {}));
            self.$notify();
            self.column_hash = column_hash;
            column_type = ((($a = (($b = self.column_hash['$[]']("sql_type_metadata"), $b !== false && $b !== nil && $b != null ?self.column_hash['$[]']("sql_type_metadata")['$[]']("type") : $b))) !== false && $a !== nil && $a != null) ? $a : "nil");
            default_value_method = "build_default_value_for_" + (column_type);
            return self.object = self.$__send__(default_value_method);
          } catch ($err) {
            if (Opal.rescue($err, [$scope.get('Exception')])) {
              try {
                return nil
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          };
        }, TMP_4.$$arity = -1);

        Opal.defn(self, '$build_default_value_for_nil', TMP_5 = function $$build_default_value_for_nil() {
          var self = this;

          return nil;
        }, TMP_5.$$arity = 0);

        Opal.defn(self, '$build_default_value_for_datetime', TMP_6 = function $$build_default_value_for_datetime() {
          var $a, self = this;

          if ((($a = self.column_hash['$[]']("default")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('Time').$parse($rb_plus(self.column_hash['$[]']("default").$gsub(" ", "T"), "+00:00"))
            } else {
            return ((((Opal.get('ReactiveRecord')).$$scope.get('Base'))).$$scope.get('DummyValue')).$dummy_time()
          };
        }, TMP_6.$$arity = 0);

        Opal.alias(self, 'build_default_value_for_time', 'build_default_value_for_datetime');

        Opal.alias(self, 'build_default_value_for_timestamp', 'build_default_value_for_datetime');

        Opal.defn(self, '$build_default_value_for_date', TMP_7 = function $$build_default_value_for_date() {
          var $a, self = this;

          if ((($a = self.column_hash['$[]']("default")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('Date').$parse(self.column_hash['$[]']("default"))
            } else {
            return ((((Opal.get('ReactiveRecord')).$$scope.get('Base'))).$$scope.get('DummyValue')).$dummy_date()
          };
        }, TMP_7.$$arity = 0);

        Opal.defn(self, '$build_default_value_for_boolean', TMP_8 = function $$build_default_value_for_boolean() {
          var $a, self = this;

          return ((($a = self.column_hash['$[]']("default")) !== false && $a !== nil && $a != null) ? $a : false);
        }, TMP_8.$$arity = 0);

        Opal.defn(self, '$build_default_value_for_float', TMP_9 = function $$build_default_value_for_float() {
          var $a, self = this;

          return ((($a = self.column_hash['$[]']("default")) !== false && $a !== nil && $a != null) ? $a : self.$Float(0.0));
        }, TMP_9.$$arity = 0);

        Opal.alias(self, 'build_default_value_for_decimal', 'build_default_value_for_float');

        Opal.defn(self, '$build_default_value_for_integer', TMP_10 = function $$build_default_value_for_integer() {
          var $a, self = this;

          return ((($a = self.column_hash['$[]']("default")) !== false && $a !== nil && $a != null) ? $a : self.$Integer(0));
        }, TMP_10.$$arity = 0);

        Opal.alias(self, 'build_default_value_for_bigint', 'build_default_value_for_integer');

        Opal.defn(self, '$build_default_value_for_string', TMP_11 = function $$build_default_value_for_string() {
          var $a, self = this;

          return ((($a = self.column_hash['$[]']("default")) !== false && $a !== nil && $a != null) ? $a : "");
        }, TMP_11.$$arity = 0);

        Opal.alias(self, 'build_default_value_for_text', 'build_default_value_for_string');

        Opal.defn(self, '$notify', TMP_12 = function $$notify() {
          var $a, self = this;

          if ((($a = (($scope.get('ReactiveRecord')).$$scope.get('Base'))['$data_loading?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return nil};
          $scope.get('ReactiveRecord')['$loads_pending!']();
          return (($scope.get('ReactiveRecord')).$$scope.get('WhileLoading'))['$loading!']();
        }, TMP_12.$$arity = 0);

        Opal.defn(self, '$loading?', TMP_13 = function() {
          var self = this;

          return true;
        }, TMP_13.$$arity = 0);

        Opal.defn(self, '$loaded?', TMP_14 = function() {
          var self = this;

          return false;
        }, TMP_14.$$arity = 0);

        Opal.defn(self, '$present?', TMP_15 = function() {
          var self = this;

          return false;
        }, TMP_15.$$arity = 0);

        Opal.defn(self, '$nil?', TMP_16 = function() {
          var self = this;

          return true;
        }, TMP_16.$$arity = 0);

        Opal.defn(self, '$!', TMP_17 = function() {
          var self = this;

          return true;
        }, TMP_17.$$arity = 0);

        Opal.defn(self, '$method_missing', TMP_18 = function $$method_missing(method, $a_rest) {
          var $b, $c, $d, $e, $f, self = this, args, $iter = TMP_18.$$p, block = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }
          TMP_18.$$p = null;
          $zuper = [];
          
          for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
            $zuper[$zuper_index] = arguments[$zuper_index];
          }
          if ((($b = method['$=~'](/^build_default_value_for_/)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            return nil
          } else if ((($b = ((($c = self.object) !== false && $c !== nil && $c != null) ? $c : self.object['$respond_to?'](method))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            self.$notify();
            return ($b = ($c = self.object).$send, $b.$$p = block.$to_proc(), $b).apply($c, [method].concat(Opal.to_a(args)));
          } else if ((($b = (0)['$respond_to?'](method)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            self.$notify();
            return ($b = ($d = (0)).$send, $b.$$p = block.$to_proc(), $b).apply($d, [method].concat(Opal.to_a(args)));
          } else if ((($b = ""['$respond_to?'](method)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            self.$notify();
            return ($b = ($e = "").$send, $b.$$p = block.$to_proc(), $b).apply($e, [method].concat(Opal.to_a(args)));
            } else {
            return ($b = ($f = self, Opal.find_super_dispatcher(self, 'method_missing', TMP_18, false)), $b.$$p = $iter, $b).apply($f, $zuper)
          };
        }, TMP_18.$$arity = -2);

        Opal.defn(self, '$coerce', TMP_19 = function $$coerce(s) {
          var $a, self = this;

          if ((($a = self.object) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.object.$coerce(s)};
          return [self.$__send__("to_" + (s.$class().$name().$downcase())), s];
        }, TMP_19.$$arity = 1);

        Opal.defn(self, '$==', TMP_20 = function(other) {
          var self = this;

          return other.$object_id()['$=='](self.$object_id());
        }, TMP_20.$$arity = 1);

        Opal.defn(self, '$object_id', TMP_21 = function $$object_id() {
          var self = this;

          return self.$$id;
        }, TMP_21.$$arity = 0);

        Opal.defn(self, '$is_a?', TMP_22 = function(klass) {
          var self = this;

          return klass['$=='](((((Opal.get('ReactiveRecord')).$$scope.get('Base'))).$$scope.get('DummyValue')));
        }, TMP_22.$$arity = 1);

        Opal.defn(self, '$zero?', TMP_23 = function() {
          var $a, self = this;

          if ((($a = self.object) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.object['$zero?']()};
          return false;
        }, TMP_23.$$arity = 0);

        Opal.defn(self, '$to_s', TMP_24 = function $$to_s() {
          var $a, self = this;

          self.$notify();
          if ((($a = self.object) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.object.$to_s()};
          return "";
        }, TMP_24.$$arity = 0);

        Opal.alias(self, 'inspect', 'to_s');

        Opal.defn(self, '$to_f', TMP_25 = function $$to_f() {
          var $a, self = this;

          self.$notify();
          if ((($a = self.object) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.object.$to_f()};
          return 0.0;
        }, TMP_25.$$arity = 0);

        Opal.defn(self, '$to_i', TMP_26 = function $$to_i() {
          var $a, self = this;

          self.$notify();
          if ((($a = self.object) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.object.$to_i()};
          return 0;
        }, TMP_26.$$arity = 0);

        Opal.defn(self, '$to_numeric', TMP_27 = function $$to_numeric() {
          var $a, self = this;

          self.$notify();
          if ((($a = self.object) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.object.$to_numeric()};
          return 0;
        }, TMP_27.$$arity = 0);

        Opal.defn(self, '$to_number', TMP_28 = function $$to_number() {
          var $a, self = this;

          self.$notify();
          if ((($a = self.object) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.object.$to_number()};
          return 0;
        }, TMP_28.$$arity = 0);

        Opal.defs(self, '$dummy_time', TMP_29 = function $$dummy_time() {
          var $a, self = this;
          if (self.dummy_time == null) self.dummy_time = nil;

          return ((($a = self.dummy_time) !== false && $a !== nil && $a != null) ? $a : self.dummy_time = $scope.get('Time').$parse("2001-01-01T00:00:00.000-00:00"));
        }, TMP_29.$$arity = 0);

        Opal.defs(self, '$dummy_date', TMP_30 = function $$dummy_date() {
          var $a, self = this;
          if (self.dummy_date == null) self.dummy_date = nil;

          return ((($a = self.dummy_date) !== false && $a !== nil && $a != null) ? $a : self.dummy_date = $scope.get('Date').$parse("1/1/2001"));
        }, TMP_30.$$arity = 0);

        Opal.defn(self, '$to_date', TMP_31 = function $$to_date() {
          var $a, self = this;

          self.$notify();
          if ((($a = self.object) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.object.$to_date()};
          return (((($scope.get('ReactiveRecord')).$$scope.get('Base'))).$$scope.get('DummyValue')).$dummy_date();
        }, TMP_31.$$arity = 0);

        Opal.defn(self, '$to_time', TMP_32 = function $$to_time() {
          var $a, self = this;

          self.$notify();
          if ((($a = self.object) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.object.$to_time()};
          return (((($scope.get('ReactiveRecord')).$$scope.get('Base'))).$$scope.get('DummyValue')).$dummy_time();
        }, TMP_32.$$arity = 0);

        Opal.defn(self, '$acts_as_string?', TMP_33 = function() {
          var $a, self = this;

          if ((($a = self.object) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.object.$acts_as_string()};
          return true;
        }, TMP_33.$$arity = 0);

        return (Opal.defn(self, '$try', TMP_34 = function($a_rest) {
          var $b, $c, self = this, args, $iter = TMP_34.$$p, b = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          TMP_34.$$p = null;
          try {
            if ((($b = ($c = args['$empty?'](), $c !== false && $c !== nil && $c != null ?(b !== nil) : $c)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              return Opal.yield1(b, self);
              } else {
              return ($b = ($c = self).$__send__, $b.$$p = b.$to_proc(), $b).apply($c, Opal.to_a(args))
            }
          } catch ($err) {
            if (Opal.rescue($err, [$scope.get('StandardError')])) {
              try {
                return nil
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          };
        }, TMP_34.$$arity = -1), nil) && 'try';
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, null)
  })($scope.base);
};
/* Generated by Opal 0.10.3 */
Opal.modules["reactive_record/active_record/reactive_record/column_types"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$columns_hash', '$model', '$[]', '$is_a?', '$at', '$parse', '$strftime', '$!', '$include?', '$Integer', '$Float', '$to_s', '$column_type', '$loading?', '$!=', '$respond_to?', '$send']);
  return (function($base) {
    var $ReactiveRecord, self = $ReactiveRecord = $module($base, 'ReactiveRecord');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Base(){};
      var self = $Base = $klass($base, $super, 'Base', $Base);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9;

      Opal.defn(self, '$columns_hash', TMP_1 = function $$columns_hash() {
        var self = this;

        return self.$model().$columns_hash();
      }, TMP_1.$$arity = 0);

      Opal.defn(self, '$column_type', TMP_2 = function $$column_type(attr) {
        var $a, self = this, column_hash = nil;

        column_hash = self.$columns_hash()['$[]'](attr);
        if (column_hash !== false && column_hash !== nil && column_hash != null) {
          } else {
          return nil
        };
        return ($a = column_hash['$[]']("sql_type_metadata"), $a !== false && $a !== nil && $a != null ?column_hash['$[]']("sql_type_metadata")['$[]']("type") : $a);
      }, TMP_2.$$arity = 1);

      Opal.defn(self, '$convert_datetime', TMP_3 = function $$convert_datetime(val) {
        var $a, self = this;

        if ((($a = val['$is_a?']($scope.get('Numeric'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return $scope.get('Time').$at(val)
        } else if ((($a = val['$is_a?']($scope.get('Time'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return val
          } else {
          return $scope.get('Time').$parse(val)
        };
      }, TMP_3.$$arity = 1);

      Opal.alias(self, 'convert_time', 'convert_datetime');

      Opal.alias(self, 'convert_timestamp', 'convert_datetime');

      Opal.defn(self, '$convert_date', TMP_4 = function $$convert_date(val) {
        var $a, self = this;

        if ((($a = val['$is_a?']($scope.get('Time'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return $scope.get('Date').$parse(val.$strftime("%d/%m/%Y"))
        } else if ((($a = val['$is_a?']($scope.get('Date'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return val
          } else {
          return $scope.get('Date').$parse(val)
        };
      }, TMP_4.$$arity = 1);

      Opal.defn(self, '$convert_boolean', TMP_5 = function $$convert_boolean(val) {
        var self = this;

        return ["false", false, nil, 0]['$include?'](val)['$!']();
      }, TMP_5.$$arity = 1);

      Opal.defn(self, '$convert_integer', TMP_6 = function $$convert_integer(val) {
        var self = this;

        return self.$Integer(parseInt(val));
      }, TMP_6.$$arity = 1);

      Opal.alias(self, 'convert_bigint', 'convert_integer');

      Opal.defn(self, '$convert_float', TMP_7 = function $$convert_float(val) {
        var self = this;

        return self.$Float(val);
      }, TMP_7.$$arity = 1);

      Opal.alias(self, 'convert_decimal', 'convert_float');

      Opal.defn(self, '$convert_text', TMP_8 = function $$convert_text(val) {
        var self = this;

        return val.$to_s();
      }, TMP_8.$$arity = 1);

      Opal.alias(self, 'convert_string', 'convert_text');

      return (Opal.defn(self, '$convert', TMP_9 = function $$convert(attr, val) {
        var $a, $b, $c, self = this, column_type = nil, conversion_method = nil;

        column_type = self.$column_type(attr);
        if ((($a = ((($b = ((($c = column_type['$!']()) !== false && $c !== nil && $c != null) ? $c : val['$loading?']())) !== false && $b !== nil && $b != null) ? $b : (($c = val['$!'](), $c !== false && $c !== nil && $c != null ?column_type['$!=']("boolean") : $c)))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return val};
        conversion_method = "convert_" + (column_type);
        if ((($a = self['$respond_to?'](conversion_method)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.$send(conversion_method, val)};
        return val;
      }, TMP_9.$$arity = 2), nil) && 'convert';
    })($scope.base, null)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["reactive_record/active_record/aggregations"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$instance_eval', '$base_class', '$detect', '$==', '$attribute', '$reflect_on_all_aggregations', '$attr_reader', '$<<', '$[]', '$camelize', '$respond_to?', '$collect', '$to_proc', '$log', '$const_get', '$nil?', '$send', '$call', '$klass']);
  return (function($base) {
    var $ActiveRecord, self = $ActiveRecord = $module($base, 'ActiveRecord');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Base(){};
      var self = $Base = $klass($base, $super, 'Base', $Base);

      var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_4;

      Opal.defs(self, '$reflect_on_all_aggregations', TMP_2 = function $$reflect_on_all_aggregations() {
        var $a, $b, TMP_1, self = this;

        return ($a = ($b = self.$base_class()).$instance_eval, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $c;
          if (self.aggregations == null) self.aggregations = nil;

        return ((($c = self.aggregations) !== false && $c !== nil && $c != null) ? $c : self.aggregations = [])}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1), $a).call($b);
      }, TMP_2.$$arity = 0);

      return (Opal.defs(self, '$reflect_on_aggregation', TMP_4 = function $$reflect_on_aggregation(attribute) {
        var $a, $b, TMP_3, self = this;

        return ($a = ($b = self.$reflect_on_all_aggregations()).$detect, $a.$$p = (TMP_3 = function(aggregation){var self = TMP_3.$$s || this;
if (aggregation == null) aggregation = nil;
        return aggregation.$attribute()['$=='](attribute)}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($b);
      }, TMP_4.$$arity = 1), nil) && 'reflect_on_aggregation';
    })($scope.base, null);

    (function($base) {
      var $Aggregations, self = $Aggregations = $module($base, 'Aggregations');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $AggregationReflection(){};
        var self = $AggregationReflection = $klass($base, $super, 'AggregationReflection', $AggregationReflection);

        var def = self.$$proto, $scope = self.$$scope, TMP_5, TMP_6, TMP_7, TMP_9, TMP_10;

        def.owner_class = def.klass_name = def.klass = def.mapped_attributes = def.constructor$ = nil;
        self.$attr_reader("klass_name");

        self.$attr_reader("attribute");

        self.$attr_reader("mapped_attributes");

        self.$attr_reader("constructor");

        Opal.defn(self, '$construct', TMP_5 = function $$construct(args) {
          var self = this;

          return nil;
        }, TMP_5.$$arity = 1);

        Opal.defn(self, '$initialize', TMP_6 = function $$initialize(owner_class, macro, name, options) {
          var $a, $b, self = this;

          if (options == null) {
            options = $hash2([], {});
          }
          owner_class.$reflect_on_all_aggregations()['$<<'](self);
          self.owner_class = owner_class;
          self.constructor$ = ((($a = options['$[]']("constructor")) !== false && $a !== nil && $a != null) ? $a : "new");
          self.klass_name = ((($a = options['$[]']("class_name")) !== false && $a !== nil && $a != null) ? $a : name.$camelize());
          self.attribute = name;
          if ((($a = options['$[]']("mapping")['$respond_to?']("collect")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.mapped_attributes = ($a = ($b = options['$[]']("mapping")).$collect, $a.$$p = "last".$to_proc(), $a).call($b)
            } else {
            (($scope.get('ReactiveRecord')).$$scope.get('Base')).$log("improper aggregate definition " + (self.owner_class) + ", :" + (name) + ", class_name: " + (self.klass_name) + " - missing mapping", "error");
            return self.mapped_attributes = [];
          };
        }, TMP_6.$$arity = -4);

        Opal.defn(self, '$klass', TMP_7 = function $$klass() {
          var $a, self = this;

          return ((($a = self.klass) !== false && $a !== nil && $a != null) ? $a : self.klass = $scope.get('Object').$const_get(self.klass_name));
        }, TMP_7.$$arity = 0);

        Opal.defn(self, '$serialize', TMP_9 = function $$serialize(object) {
          var $a, $b, TMP_8, self = this;

          if ((($a = object['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return object
            } else {
            return ($a = ($b = self.mapped_attributes).$collect, $a.$$p = (TMP_8 = function(attr){var self = TMP_8.$$s || this;
if (attr == null) attr = nil;
            return object.$send(attr)}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8), $a).call($b)
          };
        }, TMP_9.$$arity = 1);

        return (Opal.defn(self, '$deserialize', TMP_10 = function $$deserialize(array) {
          var $a, $b, self = this;

          if ((($a = array['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return array
          } else if ((($a = self.constructor$['$respond_to?']("call")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return ($a = self.constructor$).$call.apply($a, Opal.to_a(array))
            } else {
            return ($b = self.$klass()).$send.apply($b, [self.constructor$].concat(Opal.to_a(array)))
          };
        }, TMP_10.$$arity = 1), nil) && 'deserialize';
      })($scope.base, null)
    })($scope.base);
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["reactive_record/active_record/associations"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$instance_eval', '$dup', '$superclass', '$base_class', '$detect', '$==', '$attribute', '$owner_class', '$reflect_on_all_associations', '$reflect_on_association', '$attr_reader', '$<<', '$[]', '$collection?', '$gsub', '$camelize', '$<', '$name', '$underscore', '$raise', '$select', '$through_association', '$inverse', '$klass', '$flatten', '$collect', '$source', '$find_inverse', '$each', '$!=', '$association_foreign_key', '$const_get', '$include?']);
  return (function($base) {
    var $ActiveRecord, self = $ActiveRecord = $module($base, 'ActiveRecord');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Base(){};
      var self = $Base = $klass($base, $super, 'Base', $Base);

      var def = self.$$proto, $scope = self.$$scope, TMP_3, TMP_5;

      Opal.defs(self, '$reflect_on_all_associations', TMP_3 = function $$reflect_on_all_associations() {
        var $a, $b, TMP_1, self = this;

        return ($a = ($b = self.$base_class()).$instance_eval, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $c, $d, $e, TMP_2;
          if (self.associations == null) self.associations = nil;

        return ((($c = self.associations) !== false && $c !== nil && $c != null) ? $c : self.associations = ($d = ($e = self.$superclass()).$instance_eval, $d.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this, $f, $g;
            if (self.associations == null) self.associations = nil;

          return ((($f = (($g = self.associations, $g !== false && $g !== nil && $g != null ?self.associations.$dup() : $g))) !== false && $f !== nil && $f != null) ? $f : [])}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2), $d).call($e))}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1), $a).call($b);
      }, TMP_3.$$arity = 0);

      return (Opal.defs(self, '$reflect_on_association', TMP_5 = function $$reflect_on_association(attribute) {
        var $a, $b, $c, TMP_4, self = this, found = nil;

        if ((($a = found = ($b = ($c = self.$reflect_on_all_associations()).$detect, $b.$$p = (TMP_4 = function(association){var self = TMP_4.$$s || this, $d;
if (association == null) association = nil;
        return (($d = association.$attribute()['$=='](attribute)) ? association.$owner_class()['$=='](self) : association.$attribute()['$=='](attribute))}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4), $b).call($c)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return found
        } else if (self.$superclass()['$==']($scope.get('Base'))) {
          return nil
          } else {
          return self.$superclass().$reflect_on_association(attribute)
        };
      }, TMP_5.$$arity = 1), nil) && 'reflect_on_association';
    })($scope.base, null);

    (function($base) {
      var $Associations, self = $Associations = $module($base, 'Associations');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $AssociationReflection(){};
        var self = $AssociationReflection = $klass($base, $super, 'AssociationReflection', $AssociationReflection);

        var def = self.$$proto, $scope = self.$$scope, TMP_6, TMP_8, TMP_10, TMP_13, TMP_14, TMP_15, TMP_17, TMP_18, TMP_19;

        def.klass_name = def.owner_class = def.options = def.through_association = def.through_associations = def.source_associations = def.inverse = def.inverse_of = def.association_foreign_key = def.klass = def.macro = nil;
        self.$attr_reader("association_foreign_key");

        self.$attr_reader("attribute");

        self.$attr_reader("macro");

        self.$attr_reader("owner_class");

        self.$attr_reader("source");

        Opal.defn(self, '$initialize', TMP_6 = function $$initialize(owner_class, macro, name, options) {
          var $a, $b, $c, self = this;

          if (options == null) {
            options = $hash2([], {});
          }
          owner_class.$reflect_on_all_associations()['$<<'](self);
          self.owner_class = owner_class;
          self.macro = macro;
          self.options = options;
          self.klass_name = ((($a = ((($b = options['$[]']("class_name")) !== false && $b !== nil && $b != null) ? $b : (($c = self['$collection?'](), $c !== false && $c !== nil && $c != null ?name.$camelize().$gsub(/s$/, "") : $c)))) !== false && $a !== nil && $a != null) ? $a : name.$camelize());
          
          try {(function() {if ((($a = $rb_lt(self.klass_name, (($scope.get('ActiveRecord')).$$scope.get('Base')))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.klass = self.klass_name;
            return self.klass_name = self.klass_name.$name();
            } else {
            return nil
          }; return nil; })() } catch ($err) { 
            if (Opal.rescue($err, [$scope.get('StandardError')])) {
            nil
            } else { throw $err; } };
          self.association_foreign_key = ((($a = ((($b = options['$[]']("foreign_key")) !== false && $b !== nil && $b != null) ? $b : ((($c = macro['$==']("belongs_to")) ? "" + (name) + "_id" : macro['$==']("belongs_to"))))) !== false && $a !== nil && $a != null) ? $a : "" + (self.owner_class.$name().$underscore()) + "_id");
          if ((($a = options['$[]']("through")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.source = ((($a = options['$[]']("source")) !== false && $a !== nil && $a != null) ? $a : self.klass_name.$underscore())};
          return self.attribute = name;
        }, TMP_6.$$arity = -4);

        Opal.defn(self, '$through_association', TMP_8 = function $$through_association() {
          var $a, $b, $c, TMP_7, self = this;

          if ((($a = self.options['$[]']("through")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            return nil
          };
          ((($a = self.through_association) !== false && $a !== nil && $a != null) ? $a : self.through_association = ($b = ($c = self.owner_class.$reflect_on_all_associations()).$detect, $b.$$p = (TMP_7 = function(association){var self = TMP_7.$$s || this;
            if (self.options == null) self.options = nil;
if (association == null) association = nil;
          return association.$attribute()['$=='](self.options['$[]']("through"))}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $b).call($c));
          if ((($a = self.through_association) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.$raise("Through association " + (self.options['$[]']("through")) + " for " + ("" + (self.owner_class) + "." + (self.$attribute()) + " not found."))
          };
          return self.through_association;
        }, TMP_8.$$arity = 0);

        Opal.alias(self, 'through_association?', 'through_association');

        Opal.defn(self, '$through_associations', TMP_10 = function $$through_associations() {
          var $a, $b, $c, TMP_9, self = this;

          return ((($a = self.through_associations) !== false && $a !== nil && $a != null) ? $a : self.through_associations = ($b = ($c = self.$klass().$reflect_on_all_associations()).$select, $b.$$p = (TMP_9 = function(assoc){var self = TMP_9.$$s || this, $d;
if (assoc == null) assoc = nil;
          return ($d = assoc.$through_association(), $d !== false && $d !== nil && $d != null ?assoc.$inverse()['$=='](self) : $d)}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9), $b).call($c));
        }, TMP_10.$$arity = 0);

        Opal.defn(self, '$source_associations', TMP_13 = function $$source_associations() {
          var $a, $b, $c, TMP_11, self = this;

          return ((($a = self.source_associations) !== false && $a !== nil && $a != null) ? $a : self.source_associations = ($b = ($c = self.$owner_class().$reflect_on_all_associations()).$collect, $b.$$p = (TMP_11 = function(sibling){var self = TMP_11.$$s || this, $d, $e, TMP_12;
if (sibling == null) sibling = nil;
          return ($d = ($e = sibling.$klass().$reflect_on_all_associations()).$select, $d.$$p = (TMP_12 = function(assoc){var self = TMP_12.$$s || this;
if (assoc == null) assoc = nil;
            return assoc.$source()['$=='](self.$attribute())}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12), $d).call($e)}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11), $b).call($c).$flatten());
        }, TMP_13.$$arity = 0);

        Opal.defn(self, '$inverse', TMP_14 = function $$inverse() {
          var $a, $b, self = this;

          return ((($a = self.inverse) !== false && $a !== nil && $a != null) ? $a : self.inverse = (function() {if ((($b = self.$through_association()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            return self.$through_association().$inverse()
            } else {
            return self.$find_inverse()
          }; return nil; })());
        }, TMP_14.$$arity = 0);

        Opal.defn(self, '$inverse_of', TMP_15 = function $$inverse_of() {
          var $a, self = this;

          return ((($a = self.inverse_of) !== false && $a !== nil && $a != null) ? $a : self.inverse_of = self.$inverse().$attribute());
        }, TMP_15.$$arity = 0);

        Opal.defn(self, '$find_inverse', TMP_17 = function $$find_inverse() {try {

          var $a, $b, TMP_16, self = this;

          ($a = ($b = self.$klass().$reflect_on_all_associations()).$each, $a.$$p = (TMP_16 = function(association){var self = TMP_16.$$s || this, $c;
            if (self.association_foreign_key == null) self.association_foreign_key = nil;
            if (self.owner_class == null) self.owner_class = nil;
if (association == null) association = nil;
          if ((($c = association.$association_foreign_key()['$!='](self.association_foreign_key)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return nil;};
            if ((($c = association.$klass()['$!='](self.owner_class)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return nil;};
            if (association.$attribute()['$=='](self.$attribute())) {
              return nil;};
            if (self.$klass()['$=='](association.$owner_class())) {
              Opal.ret(association)
              } else {
              return nil
            };}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16), $a).call($b);
          return self.$raise("Association " + (self.owner_class) + "." + (self.$attribute()) + " " + ("(foreign_key: " + (self.association_foreign_key) + ") ") + ("has no inverse in " + (self.klass_name)));
          } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
        }, TMP_17.$$arity = 0);

        Opal.defn(self, '$klass', TMP_18 = function $$klass() {
          var $a, self = this;

          return ((($a = self.klass) !== false && $a !== nil && $a != null) ? $a : self.klass = $scope.get('Object').$const_get(self.klass_name));
        }, TMP_18.$$arity = 0);

        return (Opal.defn(self, '$collection?', TMP_19 = function() {
          var self = this;

          return ["has_many"]['$include?'](self.macro);
        }, TMP_19.$$arity = 0), nil) && 'collection?';
      })($scope.base, null)
    })($scope.base);
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["reactive_record/active_record/reactive_record/base"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$attr_accessor', '$data_loading?', '$class', '$load_data', '$load_from_json', '$[]', '$base_class', '$detect', '$==', '$attributes', '$!=', '$primary_key', '$find_in_db', '$id', '$vector=', '$new', '$sync_attribute', '$ar_instance', '$ar_instance=', '$infer_type_from_hash', '$object_id', '$vector', '$aggregate_owner=', '$aggregate_attribute=', '$last', '$[]=', '$<<', '$records', '$find', '$new_from_vector', '$!', '$instance_variable_set', '$merge!', '$now', '$has_key?', '$is_a?', '$notify', '$apply_method', '$get_state', '$dont_update_attribute?', '$update_aggregate', '$update_relationships', '$update_attribute', '$key?', '$count', '$reflect_on_aggregation', '$model', '$<', '$klass', '$deserialize', '$serialize', '$reflect_on_association', '$collection?', '$empty?', '$changed_attributes', '$backing_record', '$delete', '$include?', '$set_state', '$on_opal_client?', '$loaded?', '$>', '$on_opal_server?', '$aggregate_owner', '$aggregate_attribute', '$each', '$nil?', '$attribute', '$send', '$reflect_on_all_associations', '$convert', '$key', '$initialize_collections', '$destroyed', '$unscoped', '$dup_for_sync', '$sync!', '$parse', '$to_json', '$dup', '$inverse_of', '$through_association?', '$replace', '$changed?', '$log', '$name', '$new?', '$find_association', '$fetch_from_db', '$load_from_db', '$tap', '$columns_hash', '$inheritance_column', '$const_get', '$model_name', '$attr_reader', '$to_proc', '$every', '$stop', '$puts', '$message', '$raise', '$pre_synchromesh_load_from_db']);
  return (function($base) {
    var $ReactiveRecord, self = $ReactiveRecord = $module($base, 'ReactiveRecord');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Base(){};
      var self = $Base = $klass($base, $super, 'Base', $Base);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_5, TMP_6, TMP_9, TMP_11, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28, TMP_30, TMP_33, TMP_34, TMP_35, TMP_37, TMP_39, TMP_40, TMP_41, TMP_42, TMP_43, TMP_44, TMP_45, TMP_47, TMP_48, TMP_53, TMP_57;

      def.model = def.ar_instance = def.attributes = def.destroyed = def.synced_attributes = def.virgin = def.errors = def.destroy_sync = def.create_sync = def.synced_with_unscoped = def.changed_attributes = def.saving = nil;
      self.$attr_accessor("ar_instance");

      self.$attr_accessor("vector");

      self.$attr_accessor("model");

      self.$attr_accessor("changed_attributes");

      self.$attr_accessor("aggregate_owner");

      self.$attr_accessor("aggregate_attribute");

      self.$attr_accessor("destroyed");

      self.$attr_accessor("updated_during");

      self.$attr_accessor("synced_attributes");

      self.$attr_accessor("virgin");

      Opal.defs(self, '$data_loading?', TMP_1 = function() {
        var self = this;
        if (self.data_loading == null) self.data_loading = nil;

        return self.data_loading;
      }, TMP_1.$$arity = 0);

      Opal.defn(self, '$data_loading?', TMP_2 = function() {
        var self = this;

        return self.$class()['$data_loading?']();
      }, TMP_2.$$arity = 0);

      Opal.defs(self, '$load_data', TMP_3 = function $$load_data() {
        var $a, $b, self = this, $iter = TMP_3.$$p, block = $iter || nil, current_data_loading = nil;
        if (self.data_loading == null) self.data_loading = nil;

        TMP_3.$$p = null;
        try {
        $b = [self.data_loading, true], $a = Opal.to_ary($b), current_data_loading = ($a[0] == null ? nil : $a[0]), self.data_loading = ($a[1] == null ? nil : $a[1]), $b;
        return Opal.yieldX(block, []);;
        } finally {
          self.data_loading = current_data_loading
        };
      }, TMP_3.$$arity = 0);

      Opal.defs(self, '$load_from_json', TMP_5 = function $$load_from_json(json, target) {
        var $a, $b, TMP_4, self = this;

        if (target == null) {
          target = nil;
        }
        return ($a = ($b = self).$load_data, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

        return $scope.get('ServerDataCache').$load_from_json(json, target)}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($b);
      }, TMP_5.$$arity = -2);

      Opal.defs(self, '$class_scopes', TMP_6 = function $$class_scopes(model) {
        var self = this;
        if (self.class_scopes == null) self.class_scopes = nil;

        return self.class_scopes['$[]'](model.$base_class());
      }, TMP_6.$$arity = 1);

      Opal.defs(self, '$find', TMP_9 = function $$find(model, attribute, value) {
        var $a, $b, TMP_7, $c, TMP_8, $d, self = this, record = nil, id = nil;
        if (self.records == null) self.records = nil;

        model = model.$base_class();
        record = ($a = ($b = self.records['$[]'](model)).$detect, $a.$$p = (TMP_7 = function(record){var self = TMP_7.$$s || this;
if (record == null) record = nil;
        return record.$attributes()['$[]'](attribute)['$=='](value)}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $a).call($b);
        if (record !== false && record !== nil && record != null) {
          } else {
          if ((($a = ($c = attribute['$!='](model.$primary_key()), $c !== false && $c !== nil && $c != null ?id = self.$find_in_db(model, attribute, value) : $c)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            record = ($a = ($c = self.records['$[]'](model)).$detect, $a.$$p = (TMP_8 = function(record){var self = TMP_8.$$s || this;
if (record == null) record = nil;
            return record.$id()['$=='](id)}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8), $a).call($c)};
          if (record !== false && record !== nil && record != null) {
            } else {
            (($a = [[model, ["find_by_" + (attribute), value]]]), $d = ((record = self.$new(model))), $d['$vector='].apply($d, $a), $a[$a.length-1])
          };
          record.$sync_attribute(attribute, value);
          if (id !== false && id !== nil && id != null) {
            record.$sync_attribute(model.$primary_key(), id)};
        };
        return ($a = record, ((($d = $a.$ar_instance()) !== false && $d !== nil && $d != null) ? $d : $a['$ar_instance='](self.$infer_type_from_hash(model, record.$attributes()).$new(record))));
      }, TMP_9.$$arity = 3);

      Opal.defs(self, '$find_by_object_id', TMP_11 = function $$find_by_object_id(model, object_id) {
        var $a, $b, TMP_10, self = this;
        if (self.records == null) self.records = nil;

        return ($a = ($b = self.records['$[]'](model)).$detect, $a.$$p = (TMP_10 = function(record){var self = TMP_10.$$s || this;
if (record == null) record = nil;
        return record.$object_id()['$=='](object_id)}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10), $a).call($b).$ar_instance();
      }, TMP_11.$$arity = 2);

      Opal.defs(self, '$new_from_vector', TMP_13 = function $$new_from_vector(model, aggregate_owner, $a_rest) {
        var $b, $c, TMP_12, $d, self = this, vector, record = nil;
        if (self.records == null) self.records = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 2;
        if ($rest_len < 0) { $rest_len = 0; }
        vector = new Array($rest_len);
        for (var $arg_idx = 2; $arg_idx < $args_len; $arg_idx++) {
          vector[$arg_idx - 2] = arguments[$arg_idx];
        }
        model = model.$base_class();
        record = ($b = ($c = self.records['$[]'](model)).$detect, $b.$$p = (TMP_12 = function(record){var self = TMP_12.$$s || this;
if (record == null) record = nil;
        return record.$vector()['$=='](vector)}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12), $b).call($c);
        if (record !== false && record !== nil && record != null) {
          } else {
          record = self.$new(model);
          (($b = [vector]), $d = record, $d['$vector='].apply($d, $b), $b[$b.length-1]);
        };
        ($b = record, ((($d = $b.$ar_instance()) !== false && $d !== nil && $d != null) ? $d : $b['$ar_instance='](self.$infer_type_from_hash(model, record.$attributes()).$new(record))));
        if (aggregate_owner !== false && aggregate_owner !== nil && aggregate_owner != null) {
          (($b = [aggregate_owner]), $d = record, $d['$aggregate_owner='].apply($d, $b), $b[$b.length-1]);
          (($b = [vector.$last()]), $d = record, $d['$aggregate_attribute='].apply($d, $b), $b[$b.length-1]);
          aggregate_owner.$attributes()['$[]='](vector.$last(), record.$ar_instance());};
        return record.$ar_instance();
      }, TMP_13.$$arity = -3);

      Opal.defn(self, '$initialize', TMP_14 = function $$initialize(model, hash, ar_instance) {
        var self = this;

        if (hash == null) {
          hash = $hash2([], {});
        }
        if (ar_instance == null) {
          ar_instance = nil;
        }
        self.model = model;
        self.ar_instance = ar_instance;
        self.synced_attributes = $hash2([], {});
        self.attributes = $hash2([], {});
        self.changed_attributes = [];
        self.virgin = true;
        return self.$records()['$[]'](model)['$<<'](self);
      }, TMP_14.$$arity = -2);

      Opal.defn(self, '$find', TMP_15 = function $$find($a_rest) {
        var $b, self = this, args;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        return ($b = self.$class()).$find.apply($b, Opal.to_a(args));
      }, TMP_15.$$arity = -1);

      Opal.defn(self, '$new_from_vector', TMP_16 = function $$new_from_vector($a_rest) {
        var $b, self = this, args;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        return ($b = self.$class()).$new_from_vector.apply($b, Opal.to_a(args));
      }, TMP_16.$$arity = -1);

      Opal.defn(self, '$primary_key', TMP_17 = function $$primary_key() {
        var self = this;

        return self.model.$primary_key();
      }, TMP_17.$$arity = 0);

      Opal.defn(self, '$id', TMP_18 = function $$id() {
        var self = this;

        return self.$attributes()['$[]'](self.$primary_key());
      }, TMP_18.$$arity = 0);

      Opal.defn(self, '$id=', TMP_21 = function(value) {
        var $a, $b, $c, $d, TMP_19, TMP_20, self = this, existing_record = nil;

        if ((($a = ((($b = value !== false && value !== nil && value != null) ? existing_record = ($c = ($d = self.$records()['$[]'](self.model)).$detect, $c.$$p = (TMP_19 = function(record){var self = TMP_19.$$s || this;
if (record == null) record = nil;
        return record.$attributes()['$[]'](self.$primary_key())['$=='](value)}, TMP_19.$$s = self, TMP_19.$$arity = 1, TMP_19), $c).call($d) : value))['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$attributes()['$[]='](self.$primary_key(), value)
          } else {
          self.ar_instance.$instance_variable_set("@backing_record", existing_record);
          ($a = ($b = existing_record.$attributes())['$merge!'], $a.$$p = (TMP_20 = function(key, v1, v2){var self = TMP_20.$$s || this;
if (key == null) key = nil;if (v1 == null) v1 = nil;if (v2 == null) v2 = nil;
          return v1}, TMP_20.$$s = self, TMP_20.$$arity = 3, TMP_20), $a).call($b, self.$attributes());
        };
        return value;
      }, TMP_21.$$arity = 1);

      Opal.defn(self, '$attributes', TMP_22 = function $$attributes() {
        var self = this;

        self.last_access_at = $scope.get('Time').$now();
        return self.attributes;
      }, TMP_22.$$arity = 0);

      Opal.defn(self, '$reactive_get!', TMP_23 = function(attribute, reload) {
        var $a, self = this;

        if (reload == null) {
          reload = nil;
        }
        if ((($a = self['$data_loading?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          self.virgin = false
        };
        if ((($a = self.destroyed) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil
          } else {
          if ((($a = self.attributes['$has_key?'](attribute)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            if ((($a = self.attributes['$[]'](attribute)['$is_a?']($scope.get('DummyValue'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              self.$attributes()['$[]'](attribute).$notify()};
            if (reload !== false && reload !== nil && reload != null) {
              self.$apply_method(attribute)};
            } else {
            self.$apply_method(attribute)
          };
          if ((($a = self['$data_loading?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            (($scope.get('React')).$$scope.get('State')).$get_state(self, attribute)
          };
          return self.$attributes()['$[]'](attribute);
        };
      }, TMP_23.$$arity = -2);

      Opal.defn(self, '$reactive_set!', TMP_24 = function(attribute, value) {
        var $a, $b, self = this;

        if ((($a = self['$data_loading?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          self.virgin = false
        };
        if ((($a = ((($b = self.destroyed) !== false && $b !== nil && $b != null) ? $b : self['$dont_update_attribute?'](attribute, value))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return value};
        if ((($a = self.$update_aggregate(attribute, value)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.$attributes()['$[]'](attribute)};
        value = self.$update_relationships(attribute, value);
        self.$update_attribute(attribute, value);
        return value;
      }, TMP_24.$$arity = 2);

      Opal.defn(self, '$dont_update_attribute?', TMP_25 = function(attribute, value) {
        var $a, self = this;

        if ((($a = self.$attributes()['$[]'](attribute)['$is_a?']($scope.get('DummyValue'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return false};
        if ((($a = self.$attributes()['$key?'](attribute)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          return false
        };
        if ((($a = self.$attributes()['$[]'](attribute)['$!='](value)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return false};
        return true;
      }, TMP_25.$$arity = 2);

      Opal.defn(self, '$update_attribute', TMP_26 = function $$update_attribute(attribute, $a_rest) {
        var $b, $c, $d, $e, $f, self = this, args, value = nil, aggregation = nil, changed = nil, association = nil, empty_before = nil, had_key = nil, current_value = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        value = args['$[]'](0);
        if ((($b = ($c = args.$count()['$!='](0), $c !== false && $c !== nil && $c != null ?self['$data_loading?']() : $c)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          if ((($b = ($c = (aggregation = self.$model().$reflect_on_aggregation(attribute)), $c !== false && $c !== nil && $c != null ?($rb_lt(aggregation.$klass(), (($scope.get('ActiveRecord')).$$scope.get('Base'))))['$!']() : $c)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            self.synced_attributes['$[]='](attribute, aggregation.$deserialize(aggregation.$serialize(value)))
            } else {
            self.synced_attributes['$[]='](attribute, value)
          }};
        if ((($b = self.virgin) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          if ((($b = args.$count()['$!='](0)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            self.$attributes()['$[]='](attribute, value)};
          return nil;};
        changed = (function() {if (args.$count()['$=='](0)) {
          if ((($b = ($c = (association = self.model.$reflect_on_association(attribute)), $c !== false && $c !== nil && $c != null ?association['$collection?']() : $c)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            return self.$attributes()['$[]'](attribute)['$!='](self.synced_attributes['$[]'](attribute))
            } else {
            return self.$attributes()['$[]'](attribute).$backing_record().$changed_attributes()['$empty?']()['$!']()
          }
        } else if ((($b = ($c = (association = self.model.$reflect_on_association(attribute)), $c !== false && $c !== nil && $c != null ?association['$collection?']() : $c)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          return value['$!='](self.synced_attributes['$[]'](attribute))
          } else {
          return ((($b = self.synced_attributes['$has_key?'](attribute)['$!']()) !== false && $b !== nil && $b != null) ? $b : self.synced_attributes['$[]'](attribute)['$!='](value))
        }; return nil; })();
        empty_before = self.$changed_attributes()['$empty?']();
        if ((($b = changed['$!']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          self.$changed_attributes().$delete(attribute)
        } else if ((($b = self.$changed_attributes()['$include?'](attribute)['$!']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          self.$changed_attributes()['$<<'](attribute)};
        had_key = self.$attributes()['$has_key?'](attribute);
        current_value = self.$attributes()['$[]'](attribute);
        if ((($b = args.$count()['$!='](0)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          self.$attributes()['$[]='](attribute, value)};
        if ((($b = self['$data_loading?']()['$!']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          (($scope.get('React')).$$scope.get('State')).$set_state(self, attribute, value)
        } else if ((($b = ($c = ($d = ($e = ($f = self['$on_opal_client?'](), $f !== false && $f !== nil && $f != null ?had_key : $f), $e !== false && $e !== nil && $e != null ?current_value['$loaded?']() : $e), $d !== false && $d !== nil && $d != null ?current_value['$!='](value) : $d), $c !== false && $c !== nil && $c != null ?$rb_gt(args.$count(), 0) : $c)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          (($scope.get('React')).$$scope.get('State')).$set_state(self, attribute, value, true)};
        if ((($b = empty_before['$!='](self.$changed_attributes()['$empty?']())) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          if ((($b = ((($c = self['$on_opal_server?']()) !== false && $c !== nil && $c != null) ? $c : self['$data_loading?']())) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            } else {
            (($scope.get('React')).$$scope.get('State')).$set_state(self, "!CHANGED!", self.$changed_attributes()['$empty?']()['$!'](), true)
          };
          if ((($b = self.$aggregate_owner()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            return self.$aggregate_owner().$update_attribute(self.$aggregate_attribute())
            } else {
            return nil
          };
          } else {
          return nil
        };
      }, TMP_26.$$arity = -2);

      Opal.defn(self, '$changed?', TMP_27 = function($a_rest) {
        var self = this, args;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        if (args.$count()['$=='](0)) {
          (($scope.get('React')).$$scope.get('State')).$get_state(self, "!CHANGED!");
          return self.$changed_attributes()['$empty?']()['$!']();
          } else {
          (($scope.get('React')).$$scope.get('State')).$get_state(self, args['$[]'](0));
          return self.$changed_attributes()['$include?'](args['$[]'](0));
        };
      }, TMP_27.$$arity = -1);

      Opal.defn(self, '$errors', TMP_28 = function $$errors() {
        var $a, self = this;

        return ((($a = self.errors) !== false && $a !== nil && $a != null) ? $a : self.errors = (($scope.get('ActiveModel')).$$scope.get('Error')).$new());
      }, TMP_28.$$arity = 0);

      Opal.defn(self, '$initialize_collections', TMP_30 = function $$initialize_collections() {
        var $a, $b, $c, $d, TMP_29, self = this;

        if ((($a = ($b = ($c = (((($d = self.$vector()['$!']()) !== false && $d !== nil && $d != null) ? $d : self.$vector()['$empty?']())), $c !== false && $c !== nil && $c != null ?self.$id() : $c), $b !== false && $b !== nil && $b != null ?self.$id()['$!=']("") : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.vector = [self.model, ["find_by_" + (self.model.$primary_key()), self.$id()]]};
        return ($a = ($b = self.model.$reflect_on_all_associations()).$each, $a.$$p = (TMP_29 = function(assoc){var self = TMP_29.$$s || this, $e, $f;
if (assoc == null) assoc = nil;
        if ((($e = ($f = assoc['$collection?'](), $f !== false && $f !== nil && $f != null ?self.$attributes()['$[]'](assoc.$attribute())['$nil?']() : $f)) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
            return self.$ar_instance().$send("" + (assoc.$attribute()) + "=", [])
            } else {
            return nil
          }}, TMP_29.$$s = self, TMP_29.$$arity = 1, TMP_29), $a).call($b);
      }, TMP_30.$$arity = 0);

      Opal.defn(self, '$sync!', TMP_33 = function(hash) {
        var $a, $b, TMP_31, $c, TMP_32, $d, $e, $f, self = this;

        if (hash == null) {
          hash = $hash2([], {});
        }
        ($a = ($b = hash).$each, $a.$$p = (TMP_31 = function(attr, value){var self = TMP_31.$$s || this;
          if (self.attributes == null) self.attributes = nil;
if (attr == null) attr = nil;if (value == null) value = nil;
        return self.attributes['$[]='](attr, self.$convert(attr, value))}, TMP_31.$$s = self, TMP_31.$$arity = 2, TMP_31), $a).call($b);
        self.synced_attributes = $hash2([], {});
        ($a = ($c = self.synced_attributes).$each, $a.$$p = (TMP_32 = function(attribute, value){var self = TMP_32.$$s || this;
if (attribute == null) attribute = nil;if (value == null) value = nil;
        return self.$sync_attribute(self.$key(), value)}, TMP_32.$$s = self, TMP_32.$$arity = 2, TMP_32), $a).call($c);
        self.changed_attributes = [];
        self.saving = false;
        self.errors = nil;
        if ((($a = ($d = ($e = (((($f = self.$vector()['$!']()) !== false && $f !== nil && $f != null) ? $f : self.$vector()['$empty?']())), $e !== false && $e !== nil && $e != null ?self.$id() : $e), $d !== false && $d !== nil && $d != null ?self.$id()['$!=']("") : $d)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$initialize_collections()};
        return self;
      }, TMP_33.$$arity = -1);

      Opal.defn(self, '$sync_unscoped_collection!', TMP_34 = function() {
        var $a, self = this;

        if ((($a = self.$destroyed()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = self.destroy_sync) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return nil};
          self.destroy_sync = true;
          } else {
          if ((($a = self.create_sync) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return nil};
          self.create_sync = true;
        };
        self.$model().$unscoped()['$<<'](self.$ar_instance());
        return self.synced_with_unscoped = self.synced_with_unscoped['$!']();
      }, TMP_34.$$arity = 0);

      Opal.defn(self, '$sync_attribute', TMP_35 = function $$sync_attribute(attribute, value) {
        var $a, $b, self = this, aggregation = nil;

        self.synced_attributes['$[]='](attribute, self.$attributes()['$[]='](attribute, value));
        if ((($a = value['$is_a?']($scope.get('Collection'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.synced_attributes['$[]='](attribute, value.$dup_for_sync())
        } else if ((($a = ($b = aggregation = self.$model().$reflect_on_aggregation(attribute), $b !== false && $b !== nil && $b != null ?($rb_lt(aggregation.$klass(), (($scope.get('ActiveRecord')).$$scope.get('Base')))) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          value.$backing_record()['$sync!']()
        } else if (aggregation !== false && aggregation !== nil && aggregation != null) {
          self.synced_attributes['$[]='](attribute, aggregation.$deserialize(aggregation.$serialize(value)))
        } else if ((($a = self.$model().$reflect_on_association(attribute)['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.synced_attributes['$[]='](attribute, $scope.get('JSON').$parse(value.$to_json()))};
        self.changed_attributes.$delete(attribute);
        return value;
      }, TMP_35.$$arity = 2);

      Opal.defs(self, '$exists?', TMP_37 = function(model, id) {
        var $a, $b, TMP_36, self = this;
        if (self.records == null) self.records = nil;

        return ($a = ($b = self.records['$[]'](model)).$detect, $a.$$p = (TMP_36 = function(record){var self = TMP_36.$$s || this;
if (record == null) record = nil;
        return record.$attributes()['$[]'](model.$primary_key())['$=='](id)}, TMP_36.$$s = self, TMP_36.$$arity = 1, TMP_36), $a).call($b);
      }, TMP_37.$$arity = 2);

      Opal.defn(self, '$revert', TMP_39 = function $$revert() {
        var $a, $b, TMP_38, self = this;

        ($a = ($b = self.changed_attributes.$dup()).$each, $a.$$p = (TMP_38 = function(attribute){var self = TMP_38.$$s || this, $c;
          if (self.ar_instance == null) self.ar_instance = nil;
          if (self.synced_attributes == null) self.synced_attributes = nil;
          if (self.attributes == null) self.attributes = nil;
if (attribute == null) attribute = nil;
        self.ar_instance.$send("" + (attribute) + "=", self.synced_attributes['$[]'](attribute));
          if ((($c = self.synced_attributes['$key?'](attribute)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return nil
            } else {
            return self.attributes.$delete(attribute)
          };}, TMP_38.$$s = self, TMP_38.$$arity = 1, TMP_38), $a).call($b);
        self.changed_attributes = [];
        return self.errors = nil;
      }, TMP_39.$$arity = 0);

      Opal.defn(self, '$saving!', TMP_40 = function() {
        var $a, self = this;

        if ((($a = self['$data_loading?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          (($scope.get('React')).$$scope.get('State')).$set_state(self, self, "saving")
        };
        return self.saving = true;
      }, TMP_40.$$arity = 0);

      Opal.defn(self, '$errors!', TMP_41 = function(errors) {
        var $a, self = this;

        self.saving = false;
        return ($a = self.errors = errors, $a !== false && $a !== nil && $a != null ?(($scope.get('ActiveModel')).$$scope.get('Error')).$new(errors) : $a);
      }, TMP_41.$$arity = 1);

      Opal.defn(self, '$saved!', TMP_42 = function() {
        var $a, $b, self = this;

        self.saving = false;
        if ((($a = ((($b = self.errors['$!']()) !== false && $b !== nil && $b != null) ? $b : self.errors['$empty?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          (($scope.get('React')).$$scope.get('State')).$set_state(self, self, "saved")
        } else if ((($a = self['$data_loading?']()['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          (($scope.get('React')).$$scope.get('State')).$set_state(self, self, "error")};
        return self;
      }, TMP_42.$$arity = 0);

      Opal.defn(self, '$saving?', TMP_43 = function() {
        var self = this;

        (($scope.get('React')).$$scope.get('State')).$get_state(self, self);
        return self.saving;
      }, TMP_43.$$arity = 0);

      Opal.defn(self, '$new?', TMP_44 = function() {
        var $a, self = this;

        return ($a = self.$id()['$!'](), $a !== false && $a !== nil && $a != null ?self.$vector()['$!']() : $a);
      }, TMP_44.$$arity = 0);

      Opal.defn(self, '$find_association', TMP_45 = function $$find_association(association, id) {
        var $a, $b, $c, self = this, inverse_of = nil, instance = nil, instance_backing_record_attributes = nil, inverse_association = nil;

        inverse_of = association.$inverse_of();
        instance = (function() {if (id !== false && id !== nil && id != null) {
          return self.$find(association.$klass(), association.$klass().$primary_key(), id)
          } else {
          return ($a = self).$new_from_vector.apply($a, [association.$klass(), nil].concat(Opal.to_a(self.$vector())).concat(association.$attribute()))
        }; return nil; })();
        instance_backing_record_attributes = instance.$backing_record().$attributes();
        inverse_association = association.$klass().$reflect_on_association(inverse_of);
        if ((($b = ((($c = association['$through_association?']()) !== false && $c !== nil && $c != null) ? $c : instance_backing_record_attributes['$key?'](inverse_of))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        } else if ((($b = inverse_association['$collection?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          if ((($b = instance_backing_record_attributes['$[]'](inverse_of)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            } else {
            instance_backing_record_attributes['$[]='](inverse_of, (function() {if ((($b = (($c = id !== false && id !== nil && id != null) ? id['$!=']("") : id)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              return $scope.get('Collection').$new(self.model, instance, inverse_association, association.$klass(), ["find", id], inverse_of)
              } else {
              return ($b = $scope.get('Collection')).$new.apply($b, [self.model, instance, inverse_association].concat(Opal.to_a(self.$vector())).concat(association.$attribute(), inverse_of))
            }; return nil; })())
          };
          instance_backing_record_attributes['$[]'](inverse_of).$replace([self.ar_instance]);
          } else {
          instance_backing_record_attributes['$[]='](inverse_of, self.ar_instance)
        };
        return instance;
      }, TMP_45.$$arity = 2);

      Opal.defn(self, '$apply_method', TMP_47 = function $$apply_method(method) {
        var $a, $b, $c, $d, $e, $f, TMP_46, $g, $h, self = this, new_value = nil, association = nil, aggregation = nil;

        if ((($a = ($b = self['$on_opal_server?'](), $b !== false && $b !== nil && $b != null ?self['$changed?']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$log("Warning fetching virtual attributes (" + (self.$model().$name()) + "." + (method) + ") during prerendering on a changed or new model is not implemented.", "warning")};
        if ((($a = self['$new?']()['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          new_value = (function() {if ((($a = association = self.model.$reflect_on_association(method)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            if ((($a = association['$collection?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return ($a = $scope.get('Collection')).$new.apply($a, [association.$klass(), self.ar_instance, association].concat(Opal.to_a(self.$vector())).concat(method))
              } else {
              return self.$find_association(association, (($b = ($c = self.$id(), $c !== false && $c !== nil && $c != null ?self.$id()['$!=']("") : $c), $b !== false && $b !== nil && $b != null ?self.$class().$fetch_from_db([self.model, ["find", self.$id()], method, self.model.$primary_key()]) : $b)))
            }
          } else if ((($b = ($c = aggregation = self.model.$reflect_on_aggregation(method), $c !== false && $c !== nil && $c != null ?($rb_lt(aggregation.$klass(), (($scope.get('ActiveRecord')).$$scope.get('Base')))) : $c)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            return ($b = self).$new_from_vector.apply($b, [aggregation.$klass(), self].concat(Opal.to_a(self.$vector())).concat(method))
          } else if ((($c = ($d = self.$id(), $d !== false && $d !== nil && $d != null ?self.$id()['$!=']("") : $d)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return ((($c = self.$class().$fetch_from_db([self.model, ["find", self.$id()]].concat(Opal.to_a(method)))) !== false && $c !== nil && $c != null) ? $c : ($d = self.$class()).$load_from_db.apply($d, [self].concat(Opal.to_a(((function() {if ((($e = self.$vector()) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
              return self.$vector()
              } else {
              return [nil]
            }; return nil; })()))).concat(method)))
            } else {
            return ((($c = self.$class().$fetch_from_db([].concat(Opal.to_a(self.$vector())).concat(Opal.to_a(method)))) !== false && $c !== nil && $c != null) ? $c : ($e = self.$class()).$load_from_db.apply($e, [self].concat(Opal.to_a(((function() {if ((($f = self.$vector()) !== nil && $f != null && (!$f.$$is_boolean || $f == true))) {
              return self.$vector()
              } else {
              return [nil]
            }; return nil; })()))).concat(method)))
          }; return nil; })();
          if ((($c = ($f = new_value['$is_a?']($scope.get('DummyValue')), $f !== false && $f !== nil && $f != null ?self.attributes['$has_key?'](method) : $f)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            new_value = self.attributes['$[]'](method)};
          return self.$sync_attribute(method, new_value);
        } else if ((($c = ($f = association = self.model.$reflect_on_association(method), $f !== false && $f !== nil && $f != null ?association['$collection?']() : $f)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          return self.attributes['$[]='](method, $scope.get('Collection').$new(association.$klass(), self.ar_instance, association))
        } else if ((($c = ($f = aggregation = self.model.$reflect_on_aggregation(method), $f !== false && $f !== nil && $f != null ?($rb_lt(aggregation.$klass(), (($scope.get('ActiveRecord')).$$scope.get('Base')))) : $f)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          return self.attributes['$[]='](method, ($c = ($f = aggregation.$klass().$new()).$tap, $c.$$p = (TMP_46 = function(aggregate){var self = TMP_46.$$s || this, $g, $h, backing_record = nil;
if (aggregate == null) aggregate = nil;
          backing_record = aggregate.$backing_record();
            (($g = [self]), $h = backing_record, $h['$aggregate_owner='].apply($h, $g), $g[$g.length-1]);
            return (($g = [method]), $h = backing_record, $h['$aggregate_attribute='].apply($h, $g), $g[$g.length-1]);}, TMP_46.$$s = self, TMP_46.$$arity = 1, TMP_46), $c).call($f))
        } else if ((($c = ($g = aggregation['$!'](), $g !== false && $g !== nil && $g != null ?method['$!='](self.$model().$primary_key()) : $g)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          if ((($c = self.$model().$columns_hash()['$[]'](method)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            new_value = self.$convert(method, self.$model().$columns_hash()['$[]'](method)['$[]']("default"))
            } else {
            if ((($c = self.attributes['$key?'](method)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              } else {
              self.$log("Warning: reading from new " + (self.$model().$name()) + "." + (method) + " before assignment.  Will fetch value from server.  This may not be what you expected!!", "warning")
            };
            new_value = ($c = self.$class()).$load_from_db.apply($c, [self].concat(Opal.to_a(((function() {if ((($g = self.$vector()) !== nil && $g != null && (!$g.$$is_boolean || $g == true))) {
              return self.$vector()
              } else {
              return [nil]
            }; return nil; })()))).concat(method));
            if ((($g = ($h = new_value['$is_a?']($scope.get('DummyValue')), $h !== false && $h !== nil && $h != null ?self.attributes['$key?'](method) : $h)) !== nil && $g != null && (!$g.$$is_boolean || $g == true))) {
              new_value = self.attributes['$[]'](method)};
          };
          return self.$sync_attribute(method, new_value);
          } else {
          return nil
        };
      }, TMP_47.$$arity = 1);

      Opal.defs(self, '$infer_type_from_hash', TMP_48 = function $$infer_type_from_hash(klass, hash) {
        var self = this, type = nil, e = nil, message = nil;
        if (self.model_klass == null) self.model_klass = nil;

        klass = klass.$base_class();
        if (hash !== false && hash !== nil && hash != null) {
          } else {
          return klass
        };
        type = hash['$[]'](klass.$inheritance_column());
        if (type !== false && type !== nil && type != null) {
          try {
            return $scope.get('Object').$const_get(type)
          } catch ($err) {
            if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
              try {
                message = "Could not subclass " + (self.model_klass.$model_name()) + " as " + (type) + ".  Perhaps " + (type) + " class has not been required. Exception: " + (e);
                console.error(message);
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          }};
        return klass;
      }, TMP_48.$$arity = 2);

      (function(self) {
        var $scope = self.$$scope, def = self.$$proto, TMP_49, TMP_50, TMP_51;

        self.$attr_reader("outer_scopes");
        Opal.defn(self, '$default_scope', TMP_49 = function $$default_scope() {
          var self = this;
          if (self.class_scopes == null) self.class_scopes = nil;

          return self.class_scopes['$[]']("default_scope");
        }, TMP_49.$$arity = 0);
        Opal.defn(self, '$unscoped', TMP_50 = function $$unscoped() {
          var self = this;
          if (self.class_scopes == null) self.class_scopes = nil;

          return self.class_scopes['$[]']("unscoped");
        }, TMP_50.$$arity = 0);
        return (Opal.defn(self, '$add_to_outer_scopes', TMP_51 = function $$add_to_outer_scopes(item) {
          var self = this;
          if (self.outer_scopes == null) self.outer_scopes = nil;

          return self.outer_scopes['$<<'](item);
        }, TMP_51.$$arity = 1), nil) && 'add_to_outer_scopes';
      })(Opal.get_singleton_class(self));

      Opal.defs(self, '$when_not_saving', TMP_53 = function $$when_not_saving(model) {
        var $a, $b, $c, TMP_52, self = this, $iter = TMP_53.$$p, $yield = $iter || nil, poller = nil;
        if (self.records == null) self.records = nil;

        TMP_53.$$p = null;
        if ((($a = ($b = ($c = self.records['$[]'](model)).$detect, $b.$$p = "saving?".$to_proc(), $b).call($c)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return poller = ($a = ($b = self).$every, $a.$$p = (TMP_52 = function(){var self = TMP_52.$$s || this, $d, $e, $f;
            if (self.records == null) self.records = nil;

          if ((($d = ($e = ($f = self.records['$[]'](model)).$detect, $e.$$p = "saving?".$to_proc(), $e).call($f)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
              return nil
              } else {
              poller.$stop();
              return Opal.yield1($yield, model);;
            }}, TMP_52.$$s = self, TMP_52.$$arity = 0, TMP_52), $a).call($b, 0.1)
          } else {
          return Opal.yield1($yield, model);
        };
      }, TMP_53.$$arity = 1);

      (function(self) {
        var $scope = self.$$scope, def = self.$$proto, TMP_54, TMP_55;

        (function($base, $super) {
          function $DbRequestMade(){};
          var self = $DbRequestMade = $klass($base, $super, 'DbRequestMade', $DbRequestMade);

          var def = self.$$proto, $scope = self.$$scope;

          return nil;
        })($scope.base, $scope.get('RuntimeError'));
        Opal.defn(self, '$catch_db_requests', TMP_54 = function $$catch_db_requests(return_val) {
          var self = this, $iter = TMP_54.$$p, $yield = $iter || nil, e = nil;

          if (return_val == null) {
            return_val = nil;
          }
          TMP_54.$$p = null;
          try {
          try {
            self.catch_db_requests = true;
            return Opal.yieldX($yield, []);;
          } catch ($err) {
            if (Opal.rescue($err, [$scope.get('DbRequestMade')])) {e = $err;
              try {
                self.$puts("Warning request for server side data during scope evaluation: " + (e.$message()));
                return return_val;
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          }
          } finally {
            self.catch_db_requests = false
          };
        }, TMP_54.$$arity = -1);
        Opal.alias(self, 'pre_synchromesh_load_from_db', 'load_from_db');
        return (Opal.defn(self, '$load_from_db', TMP_55 = function $$load_from_db($a_rest) {
          var $b, self = this, args;
          if (self.catch_db_requests == null) self.catch_db_requests = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ((($b = self.catch_db_requests) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            self.$raise($scope.get('DbRequestMade'), args)};
          return ($b = self).$pre_synchromesh_load_from_db.apply($b, Opal.to_a(args));
        }, TMP_55.$$arity = -1), nil) && 'load_from_db';
      })(Opal.get_singleton_class(self));

      return (Opal.defn(self, '$destroy_associations', TMP_57 = function $$destroy_associations() {
        var $a, $b, TMP_56, self = this;

        self.destroyed = false;
        ($a = ($b = self.$model().$reflect_on_all_associations()).$each, $a.$$p = (TMP_56 = function(association){var self = TMP_56.$$s || this, $c;
          if (self.ar_instance == null) self.ar_instance = nil;
if (association == null) association = nil;
        if ((($c = association['$collection?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            if ((($c = self.$attributes()['$[]'](association.$attribute())) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return self.$attributes()['$[]'](association.$attribute()).$replace([])
              } else {
              return nil
            }
            } else {
            return self.ar_instance.$send("" + (association.$attribute()) + "=", nil)
          }}, TMP_56.$$s = self, TMP_56.$$arity = 1, TMP_56), $a).call($b);
        return self.destroyed = true;
      }, TMP_57.$$arity = 0), nil) && 'destroy_associations';
    })($scope.base, null)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["reactive_record/active_record/reactive_record/reactive_set_relationship_helpers"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$reflect_on_aggregation', '$<', '$klass', '$attributes', '$backing_record', '$update_mapped_attributes', '$[]', '$attribute', '$new?', '$[]=', '$new', '$raise', '$virgin=', '$each', '$update_attribute', '$mapped_attributes', '$reflect_on_association', '$collection?', '$overwrite_has_many_collection', '$update_belongs_to_association', '$tap', '$replace', '$inverse', '$update_has_many_through_associations', '$update_inverse_collections', '$update_inverse_attribute', '$nil?', '$data_loading?', '$set_state', '$delete', '$push_onto_collection', '$<<', '$update_through_association', '$through_associations', '$update_source_association', '$source_associations', '$source']);
  return (function($base) {
    var $ReactiveRecord, self = $ReactiveRecord = $module($base, 'ReactiveRecord');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Base(){};
      var self = $Base = $klass($base, $super, 'Base', $Base);

      var def = self.$$proto, $scope = self.$$scope, TMP_3, TMP_5, TMP_6, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_15, TMP_16, TMP_17;

      def.model = def.ar_instance = nil;
      Opal.defn(self, '$update_aggregate', TMP_3 = function $$update_aggregate(attribute, value) {
        var $a, $b, TMP_1, $c, TMP_2, self = this, aggregation = nil, value_attributes = nil;

        aggregation = self.model.$reflect_on_aggregation(attribute);
        if ((($a = (($b = aggregation !== false && aggregation !== nil && aggregation != null) ? ($rb_lt(aggregation.$klass(), (($scope.get('ActiveRecord')).$$scope.get('Base')))) : aggregation)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          return false
        };
        if (value !== false && value !== nil && value != null) {
          value_attributes = value.$backing_record().$attributes();
          ($a = ($b = self).$update_mapped_attributes, $a.$$p = (TMP_1 = function(attr){var self = TMP_1.$$s || this;
if (attr == null) attr = nil;
          return value_attributes['$[]'](attr)}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $a).call($b, aggregation);
          } else {
          ($a = ($c = self).$update_mapped_attributes, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

          return nil}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2), $a).call($c, aggregation)
        };
        return true;
      }, TMP_3.$$arity = 2);

      Opal.defn(self, '$update_mapped_attributes', TMP_5 = function $$update_mapped_attributes(aggregation) {
        var $a, $b, $c, TMP_4, self = this, $iter = TMP_5.$$p, $yield = $iter || nil, attr = nil, aggregate_record = nil, aggregate_backing_record = nil;

        TMP_5.$$p = null;
        attr = aggregation.$attribute();
        if ((($a = self['$new?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          ($a = attr, $b = self.$attributes(), ((($c = $b['$[]']($a)) !== false && $c !== nil && $c != null) ? $c : $b['$[]=']($a, aggregation.$klass().$new())))};
        aggregate_record = self.$attributes()['$[]'](attr);
        if (aggregate_record !== false && aggregate_record !== nil && aggregate_record != null) {
          } else {
          self.$raise("uninitialized aggregate attribute - should never happen")
        };
        aggregate_backing_record = aggregate_record.$backing_record();
        (($a = [false]), $b = aggregate_backing_record, $b['$virgin='].apply($b, $a), $a[$a.length-1]);
        return ($a = ($b = aggregation.$mapped_attributes()).$each, $a.$$p = (TMP_4 = function(mapped_attribute){var self = TMP_4.$$s || this;
if (mapped_attribute == null) mapped_attribute = nil;
        return aggregate_backing_record.$update_attribute(mapped_attribute, Opal.yield1($yield, mapped_attribute))}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4), $a).call($b);
      }, TMP_5.$$arity = 1);

      Opal.defn(self, '$update_relationships', TMP_6 = function $$update_relationships(attr, value) {
        var $a, self = this, association = nil;

        association = self.model.$reflect_on_association(attr);
        if (association !== false && association !== nil && association != null) {
          } else {
          return value
        };
        if ((($a = association['$collection?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.$overwrite_has_many_collection(association, value)
          } else {
          self.$update_belongs_to_association(association, value);
          return value;
        };
      }, TMP_6.$$arity = 2);

      Opal.defn(self, '$overwrite_has_many_collection', TMP_8 = function $$overwrite_has_many_collection(association, value) {
        var $a, $b, TMP_7, self = this;

        return ($a = ($b = $scope.get('Collection').$new(association.$klass(), self.ar_instance, association)).$tap, $a.$$p = (TMP_7 = function(collection){var self = TMP_7.$$s || this, $c;
if (collection == null) collection = nil;
        return collection.$replace(((($c = value) !== false && $c !== nil && $c != null) ? $c : []))}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $a).call($b);
      }, TMP_8.$$arity = 2);

      Opal.defn(self, '$update_belongs_to_association', TMP_9 = function $$update_belongs_to_association(association, value) {
        var $a, self = this;

        if ((($a = association.$inverse()['$collection?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$update_has_many_through_associations(association, value);
          return self.$update_inverse_collections(association, value);
          } else {
          return self.$update_inverse_attribute(association, value)
        };
      }, TMP_9.$$arity = 2);

      Opal.defn(self, '$update_inverse_attribute', TMP_10 = function $$update_inverse_attribute(association, value) {
        var $a, self = this, current_value = nil, inverse_attr = nil;

        current_value = self.$attributes()['$[]'](association.$attribute());
        inverse_attr = association.$inverse().$attribute();
        if ((($a = current_value['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          current_value.$attributes()['$[]='](inverse_attr, nil)
        };
        if ((($a = value['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil};
        value.$attributes()['$[]='](inverse_attr, self.ar_instance);
        if ((($a = self['$data_loading?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil};
        return (($scope.get('React')).$$scope.get('State')).$set_state(value.$backing_record(), inverse_attr, self.ar_instance);
      }, TMP_10.$$arity = 2);

      Opal.defn(self, '$update_inverse_collections', TMP_11 = function $$update_inverse_collections(association, value) {
        var $a, self = this, current_value = nil, inverse_attr = nil;

        current_value = self.$attributes()['$[]'](association.$attribute());
        inverse_attr = association.$inverse().$attribute();
        if ((($a = value['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = current_value['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return current_value.$attributes()['$[]'](inverse_attr).$delete(self.ar_instance)
          }
          } else {
          return value.$backing_record().$push_onto_collection(association.$inverse(), self.ar_instance)
        };
      }, TMP_11.$$arity = 2);

      Opal.defn(self, '$push_onto_collection', TMP_12 = function $$push_onto_collection(association, ar_instance) {
        var $a, $b, $c, self = this;

        ($a = association.$attribute(), $b = self.$attributes(), ((($c = $b['$[]']($a)) !== false && $c !== nil && $c != null) ? $c : $b['$[]=']($a, $scope.get('Collection').$new(self.model, self.ar_instance, association))));
        return self.$attributes()['$[]'](association.$attribute())['$<<'](ar_instance);
      }, TMP_12.$$arity = 2);

      Opal.defn(self, '$update_has_many_through_associations', TMP_15 = function $$update_has_many_through_associations(association, value) {
        var $a, $b, TMP_13, $c, TMP_14, self = this;

        ($a = ($b = association.$through_associations()).$each, $a.$$p = (TMP_13 = function(ta){var self = TMP_13.$$s || this;
if (ta == null) ta = nil;
        return self.$update_through_association(ta, value)}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13), $a).call($b);
        return ($a = ($c = association.$source_associations()).$each, $a.$$p = (TMP_14 = function(sa){var self = TMP_14.$$s || this;
if (sa == null) sa = nil;
        return self.$update_source_association(sa, value)}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14), $a).call($c);
      }, TMP_15.$$arity = 2);

      Opal.defn(self, '$update_through_association', TMP_16 = function $$update_through_association(ta, new_belongs_to_value) {
        var $a, $b, $c, self = this, source_value = nil, current_belongs_to_value = nil;

        source_value = self.$attributes()['$[]'](ta.$source());
        current_belongs_to_value = self.$attributes()['$[]'](ta.$inverse().$attribute());
        if (source_value !== false && source_value !== nil && source_value != null) {
          } else {
          return nil
        };
        if ((($a = ((($b = current_belongs_to_value['$nil?']()) !== false && $b !== nil && $b != null) ? $b : current_belongs_to_value.$attributes()['$[]'](ta.$attribute())['$nil?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          current_belongs_to_value.$attributes()['$[]'](ta.$attribute()).$delete(source_value)
        };
        if (new_belongs_to_value !== false && new_belongs_to_value !== nil && new_belongs_to_value != null) {
          } else {
          return nil
        };
        ($a = ta.$attribute(), $b = new_belongs_to_value.$attributes(), ((($c = $b['$[]']($a)) !== false && $c !== nil && $c != null) ? $c : $b['$[]=']($a, $scope.get('Collection').$new(ta.$klass(), new_belongs_to_value, ta))));
        return new_belongs_to_value.$attributes()['$[]'](ta.$attribute())['$<<'](source_value);
      }, TMP_16.$$arity = 2);

      return (Opal.defn(self, '$update_source_association', TMP_17 = function $$update_source_association(sa, new_source_value) {
        var $a, $b, $c, self = this, belongs_to_value = nil, current_source_value = nil;

        belongs_to_value = self.$attributes()['$[]'](sa.$inverse().$attribute());
        current_source_value = self.$attributes()['$[]'](sa.$source());
        if (belongs_to_value !== false && belongs_to_value !== nil && belongs_to_value != null) {
          } else {
          return nil
        };
        if ((($a = ((($b = belongs_to_value.$attributes()['$[]'](sa.$attribute())['$nil?']()) !== false && $b !== nil && $b != null) ? $b : current_source_value['$nil?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          belongs_to_value.$attributes()['$[]'](sa.$attribute()).$delete(current_source_value)
        };
        if (new_source_value !== false && new_source_value !== nil && new_source_value != null) {
          } else {
          return nil
        };
        ($a = sa.$attribute(), $b = belongs_to_value.$attributes(), ((($c = $b['$[]']($a)) !== false && $c !== nil && $c != null) ? $c : $b['$[]=']($a, $scope.get('Collection').$new(sa.$klass(), belongs_to_value, sa))));
        return belongs_to_value.$attributes()['$[]'](sa.$attribute())['$<<'](new_source_value);
      }, TMP_17.$$arity = 2), nil) && 'update_source_association';
    })($scope.base, null)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["reactive_record/active_record/reactive_record/collection"] = function(Opal) {
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $hash = Opal.hash, $range = Opal.range;

  Opal.add_stubs(['$new', '$!', '$id', '$<=', '$length', '$>', '$+', '$vector', '$backing_record', '$attribute', '$instance_eval', '$dup', '$observed', '$notify', '$fetch_from_db', '$each', '$<<', '$find_by', '$primary_key', '$load_from_db', '$[]', '$all', '$new_from_vector', '$through_association?', '$[]=', '$attributes', '$inverse_of', '$is_a?', '$select', '$!=', '$dummy_record', '$collection', '$==', '$to_a', '$unsaved_children', '$empty?', '$attr_reader', '$attr_writer', '$object_id', '$bulk_update', '$record_with_current_values', '$apply_to_all_collections', '$new?', '$record_with_new_values', '$destroyed?', '$sync_unscoped_collection!', '$gather_related_records', '$send', '$outer_scopes', '$merge_related_records', '$live_scopes', '$filter?', '$joins_with?', '$merge', '$related_records_for', '$through_association', '$klass', '$class', '$source', '$last', '$filter_records', '$set_pre_sync_related_records', '$sync_scopes', '$notify_of_change', '$build_child_scope', '$find', '$child_scopes', '$nil?', '$scope_description=', '$parent=', '$extend', '$link_child', '$sync_collection_with_parent', '$add_to_outer_scopes', '$collector?', '$link_to_parent', '$zero?', '$count', '$has_observers?', '$data_loading?', '$reload_from_db', '$get_state', '$set_state', '$alias_method', '$collect', '$to_proc', '$proxy_association', '$push', '$set_belongs_to', '$virgin=', '$update_attribute', '$delete', '$force_push', '$update_child', '$replace', '$sort', '$include?', '$id=', '$reject', '$detect', '$=~', '$define_method', '$apply_scope', '$clear', '$load_data', '$internal_replace', '$each_with_index', '$dummy_collection', '$delete_internal', '$-', '$loading?', '$respond_to?', '$protected']);
  return (function($base) {
    var $ReactiveRecord, self = $ReactiveRecord = $module($base, 'ReactiveRecord');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Collection(){};
      var self = $Collection = $klass($base, $super, 'Collection', $Collection);

      var def = self.$$proto, $scope = self.$$scope, TMP_3, TMP_4, TMP_6, TMP_8, TMP_10, TMP_13, TMP_14, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27, TMP_29, TMP_31, TMP_32, TMP_33, TMP_34, TMP_35, TMP_36, TMP_37, TMP_38, TMP_39, TMP_40, TMP_41, TMP_42, TMP_43, TMP_44, TMP_45, TMP_46, TMP_47, TMP_48, TMP_49, TMP_52, $a, $b, TMP_53, TMP_56, TMP_61, TMP_63, TMP_64, TMP_65, TMP_66, TMP_67, TMP_68, TMP_69, TMP_70, TMP_71;

      def.uc_already_being_called = def.owner = def.association = def.unsaved_children = def.dummy_collection = def.collection = def.vector = def.target_klass = def.scope_description = def.live_scopes = def.child_scopes = def.linked = def.parent = def.observing = def.out_of_date = def.count = def.dummy_record = nil;
      (function($base, $super) {
        function $DummySet(){};
        var self = $DummySet = $klass($base, $super, 'DummySet', $DummySet);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

        def.master = nil;
        Opal.defn(self, '$new', TMP_1 = function() {
          var $a, $b, $c, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

          TMP_1.$$p = null;
          $zuper = [];
          
          for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
            $zuper[$zuper_index] = arguments[$zuper_index];
          }
          return ((($a = self.master) !== false && $a !== nil && $a != null) ? $a : self.master = ($b = ($c = self, Opal.find_super_dispatcher(self, 'new', TMP_1, false)), $b.$$p = $iter, $b).apply($c, $zuper));
        }, TMP_1.$$arity = 0);

        return (Opal.defn(self, '$method_missing', TMP_2 = function $$method_missing($a_rest) {
          var self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          return nil;
        }, TMP_2.$$arity = -1), nil) && 'method_missing';
      })($scope.base, null);

      Opal.defn(self, '$unsaved_children', TMP_3 = function $$unsaved_children() {
        var $a, $b, self = this, old_uc_already_being_called = nil;

        try {
        old_uc_already_being_called = self.uc_already_being_called;
        if ((($a = ($b = self.owner, $b !== false && $b !== nil && $b != null ?self.association : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          ((($a = self.unsaved_children) !== false && $a !== nil && $a != null) ? $a : self.unsaved_children = $scope.get('Set').$new());
          if ((($a = self.uc_already_being_called) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.uc_already_being_called = true
          };
          } else {
          ((($a = self.unsaved_children) !== false && $a !== nil && $a != null) ? $a : self.unsaved_children = $scope.get('DummySet').$new())
        };
        return self.unsaved_children;
        } finally {
          self.uc_already_being_called = old_uc_already_being_called
        };
      }, TMP_3.$$arity = 0);

      Opal.defn(self, '$initialize', TMP_4 = function $$initialize(target_klass, owner, association, $a_rest) {
        var $b, $c, $d, self = this, vector;

        if (owner == null) {
          owner = nil;
        }
        if (association == null) {
          association = nil;
        }
        var $args_len = arguments.length, $rest_len = $args_len - 3;
        if ($rest_len < 0) { $rest_len = 0; }
        vector = new Array($rest_len);
        for (var $arg_idx = 3; $arg_idx < $args_len; $arg_idx++) {
          vector[$arg_idx - 3] = arguments[$arg_idx];
        }
        self.owner = owner;
        self.association = association;
        self.target_klass = target_klass;
        if ((($b = ($c = (($d = owner !== false && owner !== nil && owner != null) ? owner.$id()['$!']() : owner), $c !== false && $c !== nil && $c != null ?$rb_le(vector.$length(), 1) : $c)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          self.collection = []
        } else if ((($b = $rb_gt(vector.$length(), 0)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          self.vector = vector
        } else if (owner !== false && owner !== nil && owner != null) {
          self.vector = $rb_plus(owner.$backing_record().$vector(), [association.$attribute()])
          } else {
          self.vector = [target_klass]
        };
        return self.scopes = $hash2([], {});
      }, TMP_4.$$arity = -2);

      Opal.defn(self, '$dup_for_sync', TMP_6 = function $$dup_for_sync() {
        var $a, $b, TMP_5, self = this;

        return ($a = ($b = self.$dup()).$instance_eval, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this, $c;
          if (self.collection == null) self.collection = nil;
          if (self.scopes == null) self.scopes = nil;

        if ((($c = self.collection) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            self.collection = self.collection.$dup()};
          self.scopes = self.scopes.$dup();
          return self;}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($b);
      }, TMP_6.$$arity = 0);

      Opal.defn(self, '$all', TMP_8 = function $$all() {
        var $a, $b, TMP_7, self = this, ids = nil;

        self.$observed();
        if ((($a = self.dummy_collection) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.dummy_collection.$notify()};
        if ((($a = self.collection) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          self.collection = [];
          if ((($a = ids = (($scope.get('ReactiveRecord')).$$scope.get('Base')).$fetch_from_db([].concat(Opal.to_a(self.vector)).concat(["*all"]))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            ($a = ($b = ids).$each, $a.$$p = (TMP_7 = function(id){var self = TMP_7.$$s || this;
              if (self.collection == null) self.collection = nil;
              if (self.target_klass == null) self.target_klass = nil;
if (id == null) id = nil;
            return self.collection['$<<'](self.target_klass.$find_by($hash(self.target_klass.$primary_key(), id)))}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $a).call($b)
            } else {
            self.dummy_collection = ($a = (($scope.get('ReactiveRecord')).$$scope.get('Base'))).$load_from_db.apply($a, [nil].concat(Opal.to_a(self.vector)).concat("*all"));
            self.dummy_record = self['$[]'](0);
          };
        };
        return self.collection;
      }, TMP_8.$$arity = 0);

      Opal.defn(self, '$[]', TMP_10 = function(index) {
        var $a, $b, $c, TMP_9, self = this;

        self.$observed();
        if ((($a = ($b = $rb_le((((($c = self.collection) !== false && $c !== nil && $c != null) ? $c : self.$all())).$length(), index), $b !== false && $b !== nil && $b != null ?self.dummy_collection : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          ($a = ($b = ($range(self.collection.$length(), index, false))).$each, $a.$$p = (TMP_9 = function(i){var self = TMP_9.$$s || this, $d, $e, $f, new_dummy_record = nil;
            if (self.target_klass == null) self.target_klass = nil;
            if (self.vector == null) self.vector = nil;
            if (self.association == null) self.association = nil;
            if (self.owner == null) self.owner = nil;
            if (self.collection == null) self.collection = nil;
if (i == null) i = nil;
          new_dummy_record = ($d = (($scope.get('ReactiveRecord')).$$scope.get('Base'))).$new_from_vector.apply($d, [self.target_klass, nil].concat(Opal.to_a(self.vector)).concat("*" + (i)));
            if ((($e = ($f = self.association, $f !== false && $f !== nil && $f != null ?self.association['$through_association?']()['$!']() : $f)) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
              new_dummy_record.$backing_record().$attributes()['$[]='](self.association.$inverse_of(), self.owner)};
            return self.collection['$<<'](new_dummy_record);}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9), $a).call($b)};
        return self.collection['$[]'](index);
      }, TMP_10.$$arity = 1);

      Opal.defn(self, '$==', TMP_13 = function(other_collection) {
        var $a, $b, TMP_11, $c, TMP_12, $d, self = this, my_children = nil, other_children = nil;

        self.$observed();
        if ((($a = other_collection['$is_a?']($scope.get('Collection'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          return self.collection['$!']()
        };
        other_collection.$observed();
        my_children = ($a = ($b = (((($c = self.collection) !== false && $c !== nil && $c != null) ? $c : []))).$select, $a.$$p = (TMP_11 = function(target){var self = TMP_11.$$s || this;
          if (self.dummy_record == null) self.dummy_record = nil;
if (target == null) target = nil;
        return target['$!='](self.dummy_record)}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11), $a).call($b);
        if (other_collection !== false && other_collection !== nil && other_collection != null) {
          other_children = ($a = ($c = (((($d = other_collection.$collection()) !== false && $d !== nil && $d != null) ? $d : []))).$select, $a.$$p = (TMP_12 = function(target){var self = TMP_12.$$s || this;
if (target == null) target = nil;
          return target['$!='](other_collection.$dummy_record())}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12), $a).call($c);
          if (my_children['$=='](other_children)) {
            } else {
            return false
          };
          return self.$unsaved_children().$to_a()['$=='](other_collection.$unsaved_children().$to_a());
          } else {
          return ($a = my_children['$empty?'](), $a !== false && $a !== nil && $a != null ?self.$unsaved_children()['$empty?']() : $a)
        };
      }, TMP_13.$$arity = 1);

      self.$attr_reader("vector");

      self.$attr_writer("scope_description");

      self.$attr_writer("parent");

      self.$attr_reader("pre_sync_related_records");

      Opal.defn(self, '$to_s', TMP_14 = function $$to_s() {
        var self = this;

        return "<Coll-" + (self.$object_id()) + " - " + (self.$vector()) + ">";
      }, TMP_14.$$arity = 0);

      (function(self) {
        var $scope = self.$$scope, def = self.$$proto, TMP_16, TMP_18;

        Opal.defn(self, '$sync_scopes', TMP_16 = function $$sync_scopes(broadcast) {
          var $a, $b, TMP_15, self = this;

          return ($a = ($b = (($scope.get('React')).$$scope.get('State'))).$bulk_update, $a.$$p = (TMP_15 = function(){var self = TMP_15.$$s || this, $c, $d, record = nil;

          record = broadcast.$record_with_current_values();
            if (record !== false && record !== nil && record != null) {
              self.$apply_to_all_collections("set_pre_sync_related_records", record, broadcast['$new?']())};
            record = broadcast.$record_with_new_values();
            self.$apply_to_all_collections("sync_scopes", record, record['$destroyed?']());
            if ((($c = ((($d = record['$destroyed?']()) !== false && $d !== nil && $d != null) ? $d : broadcast['$new?']())) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return record.$backing_record()['$sync_unscoped_collection!']()
              } else {
              return nil
            };}, TMP_15.$$s = self, TMP_15.$$arity = 0, TMP_15), $a).call($b);
        }, TMP_16.$$arity = 1);
        return (Opal.defn(self, '$apply_to_all_collections', TMP_18 = function $$apply_to_all_collections(method, record, dont_gather) {
          var $a, $b, TMP_17, self = this, related_records = nil;

          if (dont_gather !== false && dont_gather !== nil && dont_gather != null) {
            related_records = $scope.get('Set').$new()};
          return ($a = ($b = $scope.get('Base').$outer_scopes()).$each, $a.$$p = (TMP_17 = function(collection){var self = TMP_17.$$s || this;
if (collection == null) collection = nil;
          if (dont_gather !== false && dont_gather !== nil && dont_gather != null) {
              } else {
              related_records = collection.$gather_related_records(record)
            };
            return collection.$send(method, related_records, record);}, TMP_17.$$s = self, TMP_17.$$arity = 1, TMP_17), $a).call($b);
        }, TMP_18.$$arity = 3), nil) && 'apply_to_all_collections';
      })(Opal.get_singleton_class(self));

      Opal.defn(self, '$gather_related_records', TMP_20 = function $$gather_related_records(record, related_records) {
        var $a, $b, TMP_19, self = this;

        if (related_records == null) {
          related_records = $scope.get('Set').$new();
        }
        self.$merge_related_records(record, related_records);
        ($a = ($b = self.$live_scopes()).$each, $a.$$p = (TMP_19 = function(collection){var self = TMP_19.$$s || this;
if (collection == null) collection = nil;
        return collection.$gather_related_records(record, related_records)}, TMP_19.$$s = self, TMP_19.$$arity = 1, TMP_19), $a).call($b);
        return related_records;
      }, TMP_20.$$arity = -2);

      Opal.defn(self, '$merge_related_records', TMP_21 = function $$merge_related_records(record, related_records) {
        var $a, $b, self = this;

        if ((($a = ($b = self['$filter?'](), $b !== false && $b !== nil && $b != null ?self['$joins_with?'](record) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          related_records.$merge(self.$related_records_for(record))};
        return related_records;
      }, TMP_21.$$arity = 2);

      Opal.defn(self, '$filter?', TMP_22 = function() {
        var self = this;

        return true;
      }, TMP_22.$$arity = 0);

      Opal.defn(self, '$joins_with?', TMP_23 = function(record) {
        var $a, $b, self = this;

        if ((($a = ($b = self.association, $b !== false && $b !== nil && $b != null ?self.association.$through_association() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.association.$through_association().$klass()['$=='](record.$class())
          } else {
          return self.target_klass['$=='](record.$class())
        };
      }, TMP_23.$$arity = 1);

      Opal.defn(self, '$related_records_for', TMP_24 = function $$related_records_for(record) {
        var $a, self = this, attrs = nil, source = nil;

        if ((($a = self.association) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          return []
        };
        attrs = record.$backing_record().$attributes();
        if (attrs['$[]'](self.association.$inverse_of())['$=='](self.owner)) {
          } else {
          return []
        };
        if ((($a = self.association.$through_association()['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return [record]
        } else if ((($a = (source = attrs['$[]'](self.association.$source()))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return [source]
          } else {
          return []
        };
      }, TMP_24.$$arity = 1);

      Opal.defn(self, '$collector?', TMP_25 = function() {
        var self = this;

        return false;
      }, TMP_25.$$arity = 0);

      Opal.defn(self, '$filter_records', TMP_26 = function $$filter_records(related_records) {
        var $a, self = this, scope_args = nil;

        scope_args = (function() {if ((($a = self.vector.$last()['$is_a?']($scope.get('Array'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.vector.$last()['$[]']($range(1, -1, false))
          } else {
          return []
        }; return nil; })();
        return self.scope_description.$filter_records(related_records, scope_args);
      }, TMP_26.$$arity = 1);

      Opal.defn(self, '$live_scopes', TMP_27 = function $$live_scopes() {
        var $a, self = this;

        return ((($a = self.live_scopes) !== false && $a !== nil && $a != null) ? $a : self.live_scopes = $scope.get('Set').$new());
      }, TMP_27.$$arity = 0);

      Opal.defn(self, '$set_pre_sync_related_records', TMP_29 = function $$set_pre_sync_related_records(related_records, _record) {
        var $a, $b, TMP_28, self = this;

        if (_record == null) {
          _record = nil;
        }
        self.pre_sync_related_records = related_records;
        return ($a = ($b = self.$live_scopes()).$each, $a.$$p = (TMP_28 = function(scope){var self = TMP_28.$$s || this;
          if (self.pre_sync_related_records == null) self.pre_sync_related_records = nil;
if (scope == null) scope = nil;
        return scope.$set_pre_sync_related_records(self.pre_sync_related_records)}, TMP_28.$$s = self, TMP_28.$$arity = 1, TMP_28), $a).call($b);
      }, TMP_29.$$arity = -2);

      Opal.defn(self, '$sync_scopes', TMP_31 = function $$sync_scopes(related_records, record, filtering) {
        var $a, $b, TMP_30, self = this;

        if (filtering == null) {
          filtering = true;
        }
        try {
        ($a = ($b = self.$live_scopes()).$each, $a.$$p = (TMP_30 = function(scope){var self = TMP_30.$$s || this;
if (scope == null) scope = nil;
        return scope.$sync_scopes(related_records, record, filtering)}, TMP_30.$$s = self, TMP_30.$$arity = 1, TMP_30), $a).call($b);
        if ((($a = related_records['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil
          } else {
          return self.$notify_of_change()
        };
        } finally {
          self.pre_sync_related_records = nil
        };
      }, TMP_31.$$arity = -3);

      Opal.defn(self, '$apply_scope', TMP_32 = function $$apply_scope(name, $a_rest) {
        var $b, self = this, vector;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        vector = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          vector[$arg_idx - 1] = arguments[$arg_idx];
        }
        return ($b = self).$build_child_scope.apply($b, [$scope.get('ScopeDescription').$find(self.target_klass, name)].concat(Opal.to_a(name)).concat(Opal.to_a(vector)));
      }, TMP_32.$$arity = -2);

      Opal.defn(self, '$child_scopes', TMP_33 = function $$child_scopes() {
        var $a, self = this;

        return ((($a = self.child_scopes) !== false && $a !== nil && $a != null) ? $a : self.child_scopes = $hash2([], {}));
      }, TMP_33.$$arity = 0);

      Opal.defn(self, '$build_child_scope', TMP_34 = function $$build_child_scope(scope_description, $a_rest) {
        var $b, $c, $d, $e, $f, $g, self = this, scope_vector, new_vector = nil, child_scope = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        scope_vector = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          scope_vector[$arg_idx - 1] = arguments[$arg_idx];
        }
        return ($b = scope_vector, $c = self.$child_scopes(), ((($d = $c['$[]']($b)) !== false && $d !== nil && $d != null) ? $d : $c['$[]=']($b, (function() {new_vector = self.vector;
        if ((($e = ((($f = new_vector['$nil?']()) !== false && $f !== nil && $f != null) ? $f : scope_vector['$empty?']())) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
          } else {
          new_vector = $rb_plus(new_vector, [scope_vector])
        };
        child_scope = ($e = $scope.get('Collection')).$new.apply($e, [self.target_klass, nil, nil].concat(Opal.to_a(new_vector)));
        (($f = [scope_description]), $g = child_scope, $g['$scope_description='].apply($g, $f), $f[$f.length-1]);
        (($f = [self]), $g = child_scope, $g['$parent='].apply($g, $f), $f[$f.length-1]);
        child_scope.$extend($scope.get('ScopedCollection'));
        return child_scope;})())));
      }, TMP_34.$$arity = -2);

      Opal.defn(self, '$link_to_parent', TMP_35 = function $$link_to_parent() {
        var $a, self = this;

        if ((($a = self.linked) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil};
        self.linked = true;
        if ((($a = self.parent) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.parent.$link_child(self);
          if ((($a = self.$collection()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.$sync_collection_with_parent()
          };
          } else {
          (($scope.get('ReactiveRecord')).$$scope.get('Base')).$add_to_outer_scopes(self)
        };
        if ((($a = self['$collector?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.$all()
          } else {
          return nil
        };
      }, TMP_35.$$arity = 0);

      Opal.defn(self, '$link_child', TMP_36 = function $$link_child(child) {
        var self = this;

        self.$live_scopes()['$<<'](child);
        return self.$link_to_parent();
      }, TMP_36.$$arity = 1);

      Opal.defn(self, '$sync_collection_with_parent', TMP_37 = function $$sync_collection_with_parent() {
        var $a, self = this;

        if ((($a = self.parent.$collection()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = self.parent.$collection()['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.collection = []
          } else if ((($a = self['$filter?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.collection = self.$filter_records(self.parent.$collection())
            } else {
            return nil
          }
        } else if ((($a = self.parent.$count()['$zero?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.count = 0
          } else {
          return nil
        };
      }, TMP_37.$$arity = 0);

      Opal.defn(self, '$reload_from_db', TMP_38 = function $$reload_from_db(force) {
        var $a, $b, self = this;

        if (force == null) {
          force = nil;
        }
        if ((($a = ((($b = force) !== false && $b !== nil && $b != null) ? $b : (($scope.get('React')).$$scope.get('State'))['$has_observers?'](self, "collection"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.out_of_date = false;
          if ((($a = self.collection) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            ($a = (($scope.get('ReactiveRecord')).$$scope.get('Base'))).$load_from_db.apply($a, [nil].concat(Opal.to_a(self.vector)).concat("*all"))};
          ($b = (($scope.get('ReactiveRecord')).$$scope.get('Base'))).$load_from_db.apply($b, [nil].concat(Opal.to_a(self.vector)).concat("*count"));
          } else {
          self.out_of_date = true
        };
        return self;
      }, TMP_38.$$arity = -1);

      Opal.defn(self, '$observed', TMP_39 = function $$observed() {
        var $a, $b, self = this;

        if ((($a = ((($b = self.observing) !== false && $b !== nil && $b != null) ? $b : (($scope.get('ReactiveRecord')).$$scope.get('Base'))['$data_loading?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil};
        try {
        self.observing = true;
        self.$link_to_parent();
        if ((($a = self.out_of_date) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$reload_from_db(true)};
        return (($scope.get('React')).$$scope.get('State')).$get_state(self, "collection");
        } finally {
          self.observing = false
        };
      }, TMP_39.$$arity = 0);

      Opal.defn(self, '$set_count_state', TMP_40 = function $$set_count_state(val) {
        var $a, self = this;

        if ((($a = (($scope.get('ReactiveRecord')).$$scope.get('WhileLoading'))['$has_observers?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          (($scope.get('React')).$$scope.get('State')).$set_state(self, "collection", self.$collection(), true)
        };
        return self.count = val;
      }, TMP_40.$$arity = 1);

      Opal.defn(self, '$count', TMP_41 = function $$count() {
        var $a, $b, self = this;

        self.$observed();
        if ((($a = self.collection) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.collection.$count()
        } else if ((($a = ((($b = self.count) !== false && $b !== nil && $b != null) ? $b : self.count = (($scope.get('ReactiveRecord')).$$scope.get('Base')).$fetch_from_db([].concat(Opal.to_a(self.vector)).concat(["*count"])))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.count
          } else {
          ($a = (($scope.get('ReactiveRecord')).$$scope.get('Base'))).$load_from_db.apply($a, [nil].concat(Opal.to_a(self.vector)).concat("*count"));
          return self.count = 1;
        };
      }, TMP_41.$$arity = 0);

      self.$alias_method("length", "count");

      Opal.defn(self, '$collect', TMP_42 = function $$collect($a_rest) {
        var $b, $c, self = this, args, $iter = TMP_42.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        TMP_42.$$p = null;
        return ($b = ($c = self.$all()).$collect, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args));
      }, TMP_42.$$arity = -1);

      Opal.defn(self, '$proxy_association', TMP_43 = function $$proxy_association() {
        var $a, self = this;

        return ((($a = self.association) !== false && $a !== nil && $a != null) ? $a : self);
      }, TMP_43.$$arity = 0);

      Opal.defn(self, '$klass', TMP_44 = function $$klass() {
        var self = this;

        return self.target_klass;
      }, TMP_44.$$arity = 0);

      Opal.defn(self, '$push_and_update_belongs_to', TMP_45 = function $$push_and_update_belongs_to(id) {
        var self = this, child = nil;

        child = self.$proxy_association().$klass().$find(id);
        self.$push(child);
        return self.$set_belongs_to(child);
      }, TMP_45.$$arity = 1);

      Opal.defn(self, '$set_belongs_to', TMP_46 = function $$set_belongs_to(child) {
        var $a, self = this;

        if ((($a = self.owner) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = self.association) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            child.$send("" + (self.association.$inverse_of()) + "=", self.owner)}
        } else if ((($a = self.parent) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.parent.$set_belongs_to(child)};
        return child;
      }, TMP_46.$$arity = 1);

      self.$attr_reader("client_collection");

      Opal.defn(self, '$update_child', TMP_47 = function $$update_child(item) {
        var $a, $b, $c, $d, $e, self = this, backing_record = nil, inverse_of = nil, current_association = nil;

        backing_record = item.$backing_record();
        if ((($a = ($b = ($c = ($d = (($e = backing_record !== false && backing_record !== nil && backing_record != null) ? self.owner : backing_record), $d !== false && $d !== nil && $d != null ?self.association : $d), $c !== false && $c !== nil && $c != null ?self.association['$through_association?']()['$!']() : $c), $b !== false && $b !== nil && $b != null ?item.$attributes()['$[]'](self.association.$inverse_of())['$!='](self.owner) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          inverse_of = self.association.$inverse_of();
          current_association = item.$attributes()['$[]'](inverse_of);
          if ((($a = backing_record['$data_loading?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            (($a = [false]), $b = backing_record, $b['$virgin='].apply($b, $a), $a[$a.length-1])
          };
          backing_record.$update_attribute(inverse_of, self.owner);
          if ((($a = (($b = current_association !== false && current_association !== nil && current_association != null) ? current_association.$attributes()['$[]'](self.association.$attribute()) : current_association)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            current_association.$attributes()['$[]'](self.association.$attribute()).$delete(item)};
          return self.owner.$backing_record().$update_attribute(self.association.$attribute());
          } else {
          return nil
        };
      }, TMP_47.$$arity = 1);

      Opal.defn(self, '$push', TMP_48 = function $$push(item) {
        var $a, $b, self = this;

        if ((($a = self.$collection()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$force_push(item)
          } else {
          self.$unsaved_children()['$<<'](item);
          self.$update_child(item);
          if ((($a = ($b = self.owner, $b !== false && $b !== nil && $b != null ?self.association : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.owner.$backing_record().$update_attribute(self.association.$attribute())};
          if ((($a = self.count['$nil?']()['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.count = $rb_plus(self.count, (function() {if ((($a = item['$destroyed?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return -1
              } else {
              return 1
            }; return nil; })());
            self.$notify_of_change(self);};
        };
        return self;
      }, TMP_48.$$arity = 1);

      Opal.alias(self, '<<', 'push');

      Opal.defn(self, '$sort!', TMP_49 = function($a_rest) {
        var $b, $c, self = this, args, $iter = TMP_49.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        TMP_49.$$p = null;
        return self.$replace(($b = ($c = self).$sort, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args)));
      }, TMP_49.$$arity = -1);

      Opal.defn(self, '$force_push', TMP_52 = function $$force_push(item) {
        var $a, $b, TMP_50, $c, TMP_51, self = this;

        if ((($a = item['$destroyed?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.$delete(item)};
        if ((($a = self.$all()['$include?'](item)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          self.$all()['$<<'](item)
        };
        self.$update_child(item);
        if ((($a = ($b = item.$id(), $b !== false && $b !== nil && $b != null ?self.dummy_record : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          (($a = [item.$id()]), $b = self.dummy_record, $b['$id='].apply($b, $a), $a[$a.length-1]);
          ($a = ($b = self.collection).$reject, $a.$$p = (TMP_50 = function(i){var self = TMP_50.$$s || this;
            if (self.dummy_record == null) self.dummy_record = nil;
if (i == null) i = nil;
          return i.$object_id()['$=='](self.dummy_record.$object_id())}, TMP_50.$$s = self, TMP_50.$$arity = 1, TMP_50), $a).call($b);
          self.dummy_record = ($a = ($c = self.collection).$detect, $a.$$p = (TMP_51 = function(r){var self = TMP_51.$$s || this;
if (r == null) r = nil;
          return r.$backing_record().$vector().$last()['$=~'](/^\*[0-9]+$/)}, TMP_51.$$s = self, TMP_51.$$arity = 1, TMP_51), $a).call($c);
          self.dummy_collection = nil;};
        return self.$notify_of_change(self);
      }, TMP_52.$$arity = 1);

      ($a = ($b = ["first", "last"]).$each, $a.$$p = (TMP_53 = function(method){var self = TMP_53.$$s || this, $c, $d, TMP_54;
if (method == null) method = nil;
      return ($c = ($d = self).$define_method, $c.$$p = (TMP_54 = function($e_rest){var self = TMP_54.$$s || this, args, $f;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
        if (args.$count()['$=='](0)) {
            return self.$all().$send(method)
            } else {
            return ($f = self).$apply_scope.apply($f, [method].concat(Opal.to_a(args)))
          }}, TMP_54.$$s = self, TMP_54.$$arity = -1, TMP_54), $c).call($d, method)}, TMP_53.$$s = self, TMP_53.$$arity = 1, TMP_53), $a).call($b);

      Opal.defn(self, '$replace', TMP_56 = function $$replace(new_array) {
        var $a, $b, TMP_55, self = this;

        self.$unsaved_children().$clear();
        new_array = new_array.$to_a();
        if (new_array['$=='](self.collection)) {
          return self};
        ($a = ($b = $scope.get('Base')).$load_data, $a.$$p = (TMP_55 = function(){var self = TMP_55.$$s || this;

        return self.$internal_replace(new_array)}, TMP_55.$$s = self, TMP_55.$$arity = 0, TMP_55), $a).call($b);
        return self.$notify_of_change(new_array);
      }, TMP_56.$$arity = 1);

      Opal.defn(self, '$internal_replace', TMP_61 = function $$internal_replace(new_array) {
        var $a, $b, TMP_57, $c, TMP_58, $d, TMP_59, $e, TMP_60, self = this, array = nil;

        if ((($a = self.dummy_collection) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.dummy_collection.$notify();
          array = (function() {if ((($a = new_array['$is_a?']($scope.get('Collection'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return new_array.$collection()
            } else {
            return new_array
          }; return nil; })();
          ($a = ($b = self.collection).$each_with_index, $a.$$p = (TMP_57 = function(r, i){var self = TMP_57.$$s || this, $c, $d, $e, $f;
if (r == null) r = nil;if (i == null) i = nil;
          if ((($c = ($d = ($e = ($f = array['$[]'](i), $f !== false && $f !== nil && $f != null ?array['$[]'](i).$id() : $f), $e !== false && $e !== nil && $e != null ?r['$new?']()['$!']() : $e), $d !== false && $d !== nil && $d != null ?r.$backing_record().$vector().$last()['$=~'](/^\*[0-9]+$/) : $d)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return (($c = [new_array['$[]'](i).$id()]), $d = r, $d['$id='].apply($d, $c), $c[$c.length-1])
              } else {
              return nil
            }}, TMP_57.$$s = self, TMP_57.$$arity = 2, TMP_57), $a).call($b);};
        if ((($a = self.collection) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          ($a = ($c = self.collection.$dup()).$each, $a.$$p = (TMP_58 = function(item){var self = TMP_58.$$s || this;
if (item == null) item = nil;
          return self.$delete(item)}, TMP_58.$$s = self, TMP_58.$$arity = 1, TMP_58), $a).call($c)};
        self.collection = [];
        if ((($a = new_array['$is_a?']($scope.get('Collection'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.dummy_collection = new_array.$dummy_collection();
          self.dummy_record = new_array.$dummy_record();
          if ((($a = new_array.$collection()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            ($a = ($d = new_array.$collection()).$each, $a.$$p = (TMP_59 = function(item){var self = TMP_59.$$s || this;
if (item == null) item = nil;
            return self['$<<'](item)}, TMP_59.$$s = self, TMP_59.$$arity = 1, TMP_59), $a).call($d)};
          } else {
          self.dummy_collection = self.dummy_record = nil;
          ($a = ($e = new_array).$each, $a.$$p = (TMP_60 = function(item){var self = TMP_60.$$s || this;
if (item == null) item = nil;
          return self['$<<'](item)}, TMP_60.$$s = self, TMP_60.$$arity = 1, TMP_60), $a).call($e);
        };
        return self.$notify_of_change(new_array);
      }, TMP_61.$$arity = 1);

      Opal.defn(self, '$delete', TMP_63 = function(item) {
        var $a, $b, $c, TMP_62, self = this, inverse_of = nil, backing_record = nil;

        self.$unsaved_children().$delete(item);
        return self.$notify_of_change((function() {if ((($a = ($b = ($c = self.owner, $c !== false && $c !== nil && $c != null ?self.association : $c), $b !== false && $b !== nil && $b != null ?self.association['$through_association?']()['$!']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          inverse_of = self.association.$inverse_of();
          if ((($a = ($b = (backing_record = item.$backing_record()), $b !== false && $b !== nil && $b != null ?backing_record.$attributes()['$[]'](inverse_of)['$=='](self.owner) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            backing_record.$update_attribute(inverse_of, nil)};
          return ($a = ($b = self).$delete_internal, $a.$$p = (TMP_62 = function(){var self = TMP_62.$$s || this;
            if (self.owner == null) self.owner = nil;
            if (self.association == null) self.association = nil;

          return self.owner.$backing_record().$update_attribute(self.association.$attribute())}, TMP_62.$$s = self, TMP_62.$$arity = 0, TMP_62), $a).call($b, item);
          } else {
          return self.$delete_internal(item)
        }; return nil; })());
      }, TMP_63.$$arity = 1);

      Opal.defn(self, '$delete_internal', TMP_64 = function $$delete_internal(item) {
        var $a, self = this, $iter = TMP_64.$$p, $yield = $iter || nil;

        TMP_64.$$p = null;
        if ((($a = self.$collection()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$all().$delete(item)
        } else if ((($a = self.count['$nil?']()['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.count = $rb_minus(self.count, 1)};
        if (($yield !== nil)) {
          Opal.yield1($yield, item)};
        return item;
      }, TMP_64.$$arity = 1);

      Opal.defn(self, '$loading?', TMP_65 = function() {
        var self = this;

        self.$all();
        return self.dummy_collection['$loading?']();
      }, TMP_65.$$arity = 0);

      Opal.defn(self, '$empty?', TMP_66 = function() {
        var self = this;

        return self.$all()['$empty?']();
      }, TMP_66.$$arity = 0);

      Opal.defn(self, '$method_missing', TMP_67 = function $$method_missing(method, $a_rest) {
        var $b, $c, $d, $e, self = this, args, $iter = TMP_67.$$p, block = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        TMP_67.$$p = null;
        $zuper = [];
        
        for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
          $zuper[$zuper_index] = arguments[$zuper_index];
        }
        if ((($b = []['$respond_to?'](method)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          return ($b = ($c = self.$all()).$send, $b.$$p = block.$to_proc(), $b).apply($c, [method].concat(Opal.to_a(args)))
        } else if ((($b = ((($d = self.target_klass['$respond_to?'](method)) !== false && $d !== nil && $d != null) ? $d : ((($e = args.$count()['$=='](1)) ? method['$=~'](/^find_by_/) : args.$count()['$=='](1))))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          return ($b = self).$apply_scope.apply($b, [method].concat(Opal.to_a(args)))
          } else {
          return ($d = ($e = self, Opal.find_super_dispatcher(self, 'method_missing', TMP_67, false)), $d.$$p = $iter, $d).apply($e, $zuper)
        };
      }, TMP_67.$$arity = -2);

      self.$protected();

      Opal.defn(self, '$dummy_record', TMP_68 = function $$dummy_record() {
        var self = this;

        return self.dummy_record;
      }, TMP_68.$$arity = 0);

      Opal.defn(self, '$collection', TMP_69 = function $$collection() {
        var self = this;

        return self.collection;
      }, TMP_69.$$arity = 0);

      Opal.defn(self, '$dummy_collection', TMP_70 = function $$dummy_collection() {
        var self = this;

        return self.dummy_collection;
      }, TMP_70.$$arity = 0);

      return (Opal.defn(self, '$notify_of_change', TMP_71 = function $$notify_of_change(value) {
        var $a, self = this;

        if (value == null) {
          value = nil;
        }
        if ((($a = (($scope.get('ReactiveRecord')).$$scope.get('Base'))['$data_loading?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          (($scope.get('React')).$$scope.get('State')).$set_state(self, "collection", self.$collection())
        };
        return value;
      }, TMP_71.$$arity = -1), nil) && 'notify_of_change';
    })($scope.base, null)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["reactive_record/active_record/reactive_record/scoped_collection"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$each', '$define_method', '$send', '$filter?', '$catch_db_requests', '$filter_records', '$set_pre_sync_related_records', '$live_scopes', '$update_collection', '$!', '$joins_with?', '$reload_from_db', '$sync_scopes', '$collector?', '$update_collector_scope', '$update_filter_scope', '$new', '$<<', '$-', '$delete', '$replace', '$collection', '$nil?', '$!=', '$push', '$+', '$count', '$notify_of_change']);
  return (function($base) {
    var $ReactiveRecord, self = $ReactiveRecord = $module($base, 'ReactiveRecord');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $ScopedCollection, self = $ScopedCollection = $module($base, 'ScopedCollection');

      var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, TMP_5, TMP_8, TMP_9, TMP_12, TMP_15;

      ($a = ($b = ["filter?", "collector?", "joins_with?", "related_records_for"]).$each, $a.$$p = (TMP_1 = function(method){var self = TMP_1.$$s || this, $c, $d, TMP_2;
if (method == null) method = nil;
      return ($c = ($d = self).$define_method, $c.$$p = (TMP_2 = function($e_rest){var self = TMP_2.$$s || this, args, $f;
          if (self.scope_description == null) self.scope_description = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
        return ($f = self.scope_description).$send.apply($f, [method].concat(Opal.to_a(args)))}, TMP_2.$$s = self, TMP_2.$$arity = -1, TMP_2), $c).call($d, method)}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $a).call($b);

      Opal.defn(self, '$set_pre_sync_related_records', TMP_5 = function $$set_pre_sync_related_records(related_records, _record) {
        var $a, $b, TMP_3, self = this;

        if (_record == null) {
          _record = nil;
        }
        self.pre_sync_related_records = nil;
        if ((($a = self['$filter?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return ($a = ($b = (($scope.get('ReactiveRecord')).$$scope.get('Base'))).$catch_db_requests, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this, $c, $d, TMP_4;

          self.pre_sync_related_records = self.$filter_records(related_records);
            return ($c = ($d = self.$live_scopes()).$each, $c.$$p = (TMP_4 = function(scope){var self = TMP_4.$$s || this;
              if (self.pre_sync_related_records == null) self.pre_sync_related_records = nil;
if (scope == null) scope = nil;
            return scope.$set_pre_sync_related_records(self.pre_sync_related_records)}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4), $c).call($d);}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $a).call($b)
          } else {
          return nil
        };
      }, TMP_5.$$arity = -2);

      Opal.defn(self, '$sync_scopes', TMP_8 = function $$sync_scopes(related_records, record, filtering) {
        var $a, $b, $c, TMP_6, TMP_7, self = this;
        if (self.pre_sync_related_records == null) self.pre_sync_related_records = nil;

        if (filtering == null) {
          filtering = true;
        }
        try {
        filtering = ($a = ($b = self.pre_sync_related_records, $b !== false && $b !== nil && $b != null ?filtering : $b), $a !== false && $a !== nil && $a != null ?($b = ($c = (($scope.get('ReactiveRecord')).$$scope.get('Base'))).$catch_db_requests, $b.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

        return related_records = self.$update_collection(related_records)}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $b).call($c) : $a);
        if ((($a = ($b = filtering['$!'](), $b !== false && $b !== nil && $b != null ?self['$joins_with?'](record) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$reload_from_db()};
        return ($a = ($b = self.$live_scopes()).$each, $a.$$p = (TMP_7 = function(scope){var self = TMP_7.$$s || this;
if (scope == null) scope = nil;
        return scope.$sync_scopes(related_records, record, filtering)}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $a).call($b);
        } finally {
          self.pre_sync_related_records = nil
        };
      }, TMP_8.$$arity = -3);

      Opal.defn(self, '$update_collection', TMP_9 = function $$update_collection(related_records) {
        var $a, self = this;
        if (self.pre_sync_related_records == null) self.pre_sync_related_records = nil;

        if ((($a = self['$collector?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.$update_collector_scope(related_records)
          } else {
          related_records = self.$filter_records(related_records);
          return self.$update_filter_scope(self.pre_sync_related_records, related_records);
        };
      }, TMP_9.$$arity = 1);

      Opal.defn(self, '$update_collector_scope', TMP_12 = function $$update_collector_scope(related_records) {
        var $a, $b, TMP_10, $c, TMP_11, self = this, current = nil;
        if (self.collection == null) self.collection = nil;
        if (self.pre_sync_related_records == null) self.pre_sync_related_records = nil;

        current = $scope.get('Set').$new([].concat(Opal.to_a(self.collection)));
        ($a = ($b = ($rb_minus(related_records, self.pre_sync_related_records))).$each, $a.$$p = (TMP_10 = function(r){var self = TMP_10.$$s || this;
if (r == null) r = nil;
        return current['$<<'](r)}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10), $a).call($b);
        ($a = ($c = ($rb_minus(self.pre_sync_related_records, related_records))).$each, $a.$$p = (TMP_11 = function(r){var self = TMP_11.$$s || this;
if (r == null) r = nil;
        return current.$delete(r)}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11), $a).call($c);
        self.$replace(self.$filter_records(current));
        return $scope.get('Set').$new([].concat(Opal.to_a(self.collection)));
      }, TMP_12.$$arity = 1);

      Opal.defn(self, '$update_filter_scope', TMP_15 = function $$update_filter_scope(before, after) {
        var $a, $b, $c, TMP_13, TMP_14, self = this;
        if (self.count == null) self.count = nil;

        if ((($a = ($b = (((($c = self.$collection()) !== false && $c !== nil && $c != null) ? $c : self.count['$nil?']()['$!']())), $b !== false && $b !== nil && $b != null ?before['$!='](after) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = self.$collection()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            ($a = ($b = ($rb_minus(after, before))).$each, $a.$$p = (TMP_13 = function(r){var self = TMP_13.$$s || this;
if (r == null) r = nil;
            return self.$push(r)}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13), $a).call($b);
            ($a = ($c = ($rb_minus(before, after))).$each, $a.$$p = (TMP_14 = function(r){var self = TMP_14.$$s || this;
if (r == null) r = nil;
            return self.$delete(r)}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14), $a).call($c);
            } else {
            self.count = $rb_plus(self.count, ($rb_minus(after, before)).$count());
            self.count = $rb_minus(self.count, ($rb_minus(before, after)).$count());
            self.$notify_of_change(self);
          }};
        return after;
      }, TMP_15.$$arity = 2);
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["reactive_record/active_record/reactive_record/unscoped_collection"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$each', '$set_pre_sync_related_records', '$live_scopes', '$sync_scopes']);
  return (function($base) {
    var $ReactiveRecord, self = $ReactiveRecord = $module($base, 'ReactiveRecord');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $UnscopedCollection, self = $UnscopedCollection = $module($base, 'UnscopedCollection');

      var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_4;

      Opal.defn(self, '$set_pre_sync_related_records', TMP_2 = function $$set_pre_sync_related_records(related_records, _record) {
        var $a, $b, TMP_1, self = this;

        if (_record == null) {
          _record = nil;
        }
        self.pre_sync_related_records = related_records;
        return ($a = ($b = self.$live_scopes()).$each, $a.$$p = (TMP_1 = function(scope){var self = TMP_1.$$s || this;
          if (self.pre_sync_related_records == null) self.pre_sync_related_records = nil;
if (scope == null) scope = nil;
        return scope.$set_pre_sync_related_records(self.pre_sync_related_records)}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $a).call($b);
      }, TMP_2.$$arity = -2);

      Opal.defn(self, '$sync_scopes', TMP_4 = function $$sync_scopes(related_records, record, filtering) {
        var $a, $b, TMP_3, self = this;

        if (filtering == null) {
          filtering = true;
        }
        try {
        return ($a = ($b = self.$live_scopes()).$each, $a.$$p = (TMP_3 = function(scope){var self = TMP_3.$$s || this;
if (scope == null) scope = nil;
        return scope.$sync_scopes(related_records, record, filtering)}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($b)
        } finally {
          self.pre_sync_related_records = nil
        };
      }, TMP_4.$$arity = -3);
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["reactive_record/active_record/class_methods"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2, $hash = Opal.hash;

  Opal.add_stubs(['$<', '$raise', '$name', '$==', '$superclass', '$abstract_class?', '$base_class', '$instance_eval', '$find', '$primary_key', '$first', '$last', '$count', '$=~', '$!', '$find_by', '$gsub', '$[]', '$send', '$class_scopes', '$[]=', '$new', '$singleton_class', '$each', '$define_method', '$>', '$is_a?', '$public_columns_hash', '$to_s', '$Native', '$from_object', '$to_n', '$infer_type_from_hash', '$reflect_on_all_associations', '$collect', '$detect', '$association_foreign_key', '$attribute', '$load_from_json']);
  return (function($base) {
    var $ActiveRecord, self = $ActiveRecord = $module($base, 'ActiveRecord');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $ClassMethods, self = $ClassMethods = $module($base, 'ClassMethods');

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_4, TMP_6, TMP_8, TMP_10, TMP_11, TMP_13, TMP_15, TMP_16, TMP_17, TMP_18, TMP_21, TMP_22, TMP_23, $a, $b, TMP_24, TMP_26, TMP_27, TMP_28, $c, TMP_29, TMP_33;

      Opal.defn(self, '$base_class', TMP_1 = function $$base_class() {
        var $a, $b, self = this;

        if ($rb_lt(self, $scope.get('Base'))) {
          } else {
          self.$raise($scope.get('ActiveRecordError'), "" + (self.$name()) + " doesn't belong in a hierarchy descending from ActiveRecord")
        };
        if ((($a = ((($b = self.$superclass()['$==']($scope.get('Base'))) !== false && $b !== nil && $b != null) ? $b : self.$superclass()['$abstract_class?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self
          } else {
          return self.$superclass().$base_class()
        };
      }, TMP_1.$$arity = 0);

      Opal.defn(self, '$abstract_class?', TMP_2 = function() {
        var $a, $b, self = this;
        if (self.abstract_class == null) self.abstract_class = nil;

        return ($a = (($b = self['abstract_class'], $b != null && $b !== nil) ? 'instance-variable' : nil), $a !== false && $a !== nil && $a != null ?self.abstract_class['$=='](true) : $a);
      }, TMP_2.$$arity = 0);

      Opal.defn(self, '$primary_key', TMP_4 = function $$primary_key() {
        var $a, $b, TMP_3, self = this;

        return ($a = ($b = self.$base_class()).$instance_eval, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this, $c;
          if (self.primary_key_value == null) self.primary_key_value = nil;

        return ((($c = self.primary_key_value) !== false && $c !== nil && $c != null) ? $c : "id")}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $a).call($b);
      }, TMP_4.$$arity = 0);

      Opal.defn(self, '$primary_key=', TMP_6 = function(val) {
        var $a, $b, TMP_5, self = this;

        return ($a = ($b = self.$base_class()).$instance_eval, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

        return self.primary_key_value = val}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($b);
      }, TMP_6.$$arity = 1);

      Opal.defn(self, '$inheritance_column', TMP_8 = function $$inheritance_column() {
        var $a, $b, TMP_7, self = this;

        return ($a = ($b = self.$base_class()).$instance_eval, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this, $c;
          if (self.inheritance_column_value == null) self.inheritance_column_value = nil;

        return ((($c = self.inheritance_column_value) !== false && $c !== nil && $c != null) ? $c : "type")}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $a).call($b);
      }, TMP_8.$$arity = 0);

      Opal.defn(self, '$inheritance_column=', TMP_10 = function(name) {
        var $a, $b, TMP_9, self = this;

        return ($a = ($b = self.$base_class()).$instance_eval, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this;

        return self.inheritance_column_value = name}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $a).call($b);
      }, TMP_10.$$arity = 1);

      Opal.defn(self, '$model_name', TMP_11 = function $$model_name() {
        var self = this;

        return self.$name();
      }, TMP_11.$$arity = 0);

      Opal.defn(self, '$find', TMP_13 = function $$find(id) {
        var $a, $b, TMP_12, self = this;

        return ($a = ($b = self.$base_class()).$instance_eval, $a.$$p = (TMP_12 = function(){var self = TMP_12.$$s || this;

        return (($scope.get('ReactiveRecord')).$$scope.get('Base')).$find(self, self.$primary_key(), id)}, TMP_12.$$s = self, TMP_12.$$arity = 0, TMP_12), $a).call($b);
      }, TMP_13.$$arity = 1);

      Opal.defn(self, '$find_by', TMP_15 = function $$find_by(opts) {
        var $a, $b, TMP_14, self = this;

        if (opts == null) {
          opts = $hash2([], {});
        }
        return ($a = ($b = self.$base_class()).$instance_eval, $a.$$p = (TMP_14 = function(){var self = TMP_14.$$s || this;

        return (($scope.get('ReactiveRecord')).$$scope.get('Base')).$find(self, opts.$first().$first(), opts.$first().$last())}, TMP_14.$$s = self, TMP_14.$$arity = 0, TMP_14), $a).call($b);
      }, TMP_15.$$arity = -1);

      Opal.defn(self, '$enum', TMP_16 = function($a_rest) {
        var self = this, args;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        return nil;
      }, TMP_16.$$arity = -1);

      Opal.defn(self, '$method_missing', TMP_17 = function $$method_missing(name, $a_rest) {
        var $b, $c, $d, self = this, args, $iter = TMP_17.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        TMP_17.$$p = null;
        if ((($b = ($c = (($d = args.$count()['$=='](1)) ? name['$=~'](/^find_by_/) : args.$count()['$=='](1)), $c !== false && $c !== nil && $c != null ?block['$!']() : $c)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          return self.$find_by($hash(name.$gsub(/^find_by_/, ""), args['$[]'](0)))
          } else {
          return self.$raise("" + (self.$name()) + "." + (name) + "(" + (args) + ") (called class method missing)")
        };
      }, TMP_17.$$arity = -2);

      Opal.defn(self, '$abstract_class=', TMP_18 = function(val) {
        var self = this;

        return self.abstract_class = val;
      }, TMP_18.$$arity = 1);

      Opal.defn(self, '$scope', TMP_21 = function $$scope(name, body) {
        var $a, $b, TMP_19, $c, TMP_20, self = this;

        ($a = ($b = self.$singleton_class()).$send, $a.$$p = (TMP_19 = function($c_rest){var self = TMP_19.$$s || this, args, $d, $e, $f;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
        args = (function() {if ((($d = (args.$count()['$=='](0))) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
            return name
            } else {
            return [name].concat(Opal.to_a(args))
          }; return nil; })();
          return ($d = args, $e = (($scope.get('ReactiveRecord')).$$scope.get('Base')).$class_scopes(self), ((($f = $e['$[]']($d)) !== false && $f !== nil && $f != null) ? $f : $e['$[]=']($d, (($scope.get('ReactiveRecord')).$$scope.get('Collection')).$new(self, nil, nil, self, args))));}, TMP_19.$$s = self, TMP_19.$$arity = -1, TMP_19), $a).call($b, "define_method", name);
        return ($a = ($c = self.$singleton_class()).$send, $a.$$p = (TMP_20 = function(collection){var self = TMP_20.$$s || this;
if (collection == null) collection = nil;
        return (($scope.get('ReactiveRecord')).$$scope.get('Base')).$class_scopes(self)['$[]='](name, collection)}, TMP_20.$$s = self, TMP_20.$$arity = 1, TMP_20), $a).call($c, "define_method", "" + (name) + "=");
      }, TMP_21.$$arity = 2);

      Opal.defn(self, '$all', TMP_22 = function $$all() {
        var $a, $b, $c, self = this;

        return ($a = "all", $b = (($scope.get('ReactiveRecord')).$$scope.get('Base')).$class_scopes(self), ((($c = $b['$[]']($a)) !== false && $c !== nil && $c != null) ? $c : $b['$[]=']($a, (($scope.get('ReactiveRecord')).$$scope.get('Collection')).$new(self, nil, nil, self, "all"))));
      }, TMP_22.$$arity = 0);

      Opal.defn(self, '$all=', TMP_23 = function(collection) {
        var self = this;

        return (($scope.get('ReactiveRecord')).$$scope.get('Base')).$class_scopes(self)['$[]=']("all", collection);
      }, TMP_23.$$arity = 1);

      ($a = ($b = ["belongs_to", "has_many", "has_one"]).$each, $a.$$p = (TMP_24 = function(macro){var self = TMP_24.$$s || this, $c, $d, TMP_25;
if (macro == null) macro = nil;
      return ($c = ($d = self).$define_method, $c.$$p = (TMP_25 = function($e_rest){var self = TMP_25.$$s || this, args, $f, $g, name = nil, opts = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
        name = args.$first();
          opts = (function() {if ((($f = (($g = $rb_gt(args.$count(), 1), $g !== false && $g !== nil && $g != null ?args.$last()['$is_a?']($scope.get('Hash')) : $g))) !== nil && $f != null && (!$f.$$is_boolean || $f == true))) {
            return args.$last()
            } else {
            return $hash2([], {})
          }; return nil; })();
          return (($scope.get('Associations')).$$scope.get('AssociationReflection')).$new(self, macro, name, opts);}, TMP_25.$$s = self, TMP_25.$$arity = -1, TMP_25), $c).call($d, macro)}, TMP_24.$$s = self, TMP_24.$$arity = 1, TMP_24), $a).call($b);

      Opal.defn(self, '$composed_of', TMP_26 = function $$composed_of(name, opts) {
        var self = this;

        if (opts == null) {
          opts = $hash2([], {});
        }
        return (($scope.get('Aggregations')).$$scope.get('AggregationReflection')).$new(self.$base_class(), "composed_of", name, opts);
      }, TMP_26.$$arity = -2);

      Opal.defn(self, '$column_names', TMP_27 = function $$column_names() {
        var self = this;

        return [];
      }, TMP_27.$$arity = 0);

      Opal.defn(self, '$columns_hash', TMP_28 = function $$columns_hash() {
        var $a, self = this;

        return ((($a = (($scope.get('HyperMesh')).$$scope.get('ClientDrivers')).$public_columns_hash()['$[]'](self.$name())) !== false && $a !== nil && $a != null) ? $a : $hash2([], {}));
      }, TMP_28.$$arity = 0);

      ($a = ($c = ["table_name=", "before_validation", "with_options", "validates_presence_of", "validates_format_of", "accepts_nested_attributes_for", "before_create", "after_create", "before_save", "after_save", "before_destroy", "where", "validate", "attr_protected", "validates_numericality_of", "default_scope", "has_attached_file", "attr_accessible", "serialize"]).$each, $a.$$p = (TMP_29 = function(method){var self = TMP_29.$$s || this, $d, $e, TMP_30;
if (method == null) method = nil;
      return ($d = ($e = self).$define_method, $d.$$p = (TMP_30 = function($f_rest){var self = TMP_30.$$s || this, block, args;

          block = TMP_30.$$p || nil, TMP_30.$$p = null;
          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
        return nil}, TMP_30.$$s = self, TMP_30.$$arity = -1, TMP_30), $d).call($e, method.$to_s())}, TMP_29.$$s = self, TMP_29.$$arity = 1, TMP_29), $a).call($c);

      Opal.defn(self, '$_react_param_conversion', TMP_33 = function $$_react_param_conversion(param, opt) {
        var $a, $b, TMP_31, self = this, result = nil, klass = nil, target = nil, associations = nil;

        if (opt == null) {
          opt = nil;
        }
        param = self.$Native(param);
        if ((($a = param['$is_a?']((($scope.get('Native')).$$scope.get('Object')))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          param = $scope.get('JSON').$from_object(param.$to_n())};
        result = (function() {if ((($a = param['$is_a?'](self)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return param
        } else if ((($a = param['$is_a?']($scope.get('Hash'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if (opt['$==']("validate_only")) {
            klass = (($scope.get('ReactiveRecord')).$$scope.get('Base')).$infer_type_from_hash(self, param);
            return ((($a = klass['$=='](self)) !== false && $a !== nil && $a != null) ? $a : $rb_lt(klass, self));
            } else {
            if ((($a = param['$[]'](self.$primary_key())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              target = self.$find(param['$[]'](self.$primary_key()))
              } else {
              target = self.$new()
            };
            associations = self.$reflect_on_all_associations();
            param = ($a = ($b = param).$collect, $a.$$p = (TMP_31 = function(key, value){var self = TMP_31.$$s || this, $c, $d, TMP_32, assoc = nil;
if (key == null) key = nil;if (value == null) value = nil;
            assoc = ($c = ($d = self.$reflect_on_all_associations()).$detect, $c.$$p = (TMP_32 = function(assoc){var self = TMP_32.$$s || this;
if (assoc == null) assoc = nil;
              return assoc.$association_foreign_key()['$=='](key)}, TMP_32.$$s = self, TMP_32.$$arity = 1, TMP_32), $c).call($d);
              if (assoc !== false && assoc !== nil && assoc != null) {
                if (value !== false && value !== nil && value != null) {
                  return [assoc.$attribute(), $hash2(["id", "type"], {"id": [value], "type": [nil]})]
                  } else {
                  return [assoc.$attribute(), [nil]]
                }
                } else {
                return [key, [value]]
              };}, TMP_31.$$s = self, TMP_31.$$arity = 2, TMP_31), $a).call($b);
            (($scope.get('ReactiveRecord')).$$scope.get('ServerDataCache')).$load_from_json($scope.get('Hash')['$[]'](param), target);
            return target;
          }
          } else {
          return nil
        }; return nil; })();
        return result;
      }, TMP_33.$$arity = -2);
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["reactive_record/active_record/instance_methods"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$attr_reader', '$attributes', '$is_a?', '$new', '$class', '$instance_eval', '$load_data', '$each', '$==', '$primary_key', '$reactive_set!', '$convert', '$<<', '$changed_attributes', '$reactive_get!', '$id=', '$model_name', '$revert', '$changed?', '$=~', '$gsub', '$count', '$!', '$backing_record', '$[]', '$zero?', '$+', '$id', '$load', '$collect', '$nil?', '$first', '$save', '$to_proc', '$has_key?', '$saving?', '$destroy', '$destroyed', '$new?', '$get_state', '$errors']);
  return (function($base) {
    var $ActiveRecord, self = $ActiveRecord = $module($base, 'ActiveRecord');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $InstanceMethods, self = $InstanceMethods = $module($base, 'InstanceMethods');

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_14, TMP_15, TMP_16, TMP_17, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25;

      self.$attr_reader("backing_record");

      Opal.defn(self, '$attributes', TMP_1 = function $$attributes() {
        var self = this;
        if (self.backing_record == null) self.backing_record = nil;

        return self.backing_record.$attributes();
      }, TMP_1.$$arity = 0);

      Opal.defn(self, '$initialize', TMP_5 = function $$initialize(hash) {
        var $a, $b, TMP_2, self = this;
        if (self.backing_record == null) self.backing_record = nil;

        if (hash == null) {
          hash = $hash2([], {});
        }
        if ((($a = hash['$is_a?']((($scope.get('ReactiveRecord')).$$scope.get('Base')))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.backing_record = hash
          } else {
          self.backing_record = (($scope.get('ReactiveRecord')).$$scope.get('Base')).$new(self.$class(), $hash2([], {}), self);
          return ($a = ($b = self.backing_record).$instance_eval, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this, $c, $d, TMP_3;

          return ($c = ($d = self.$class()).$load_data, $c.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this, $e, $f, TMP_4;

            return ($e = ($f = hash).$each, $e.$$p = (TMP_4 = function(attribute, value){var self = TMP_4.$$s || this;
if (attribute == null) attribute = nil;if (value == null) value = nil;
              if (attribute['$=='](self.$primary_key())) {
                  return nil
                  } else {
                  self['$reactive_set!'](attribute, self.$convert(attribute, value));
                  return self.$changed_attributes()['$<<'](attribute);
                }}, TMP_4.$$s = self, TMP_4.$$arity = 2, TMP_4), $e).call($f)}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $c).call($d)}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2), $a).call($b);
        };
      }, TMP_5.$$arity = -1);

      Opal.defn(self, '$primary_key', TMP_6 = function $$primary_key() {
        var self = this;

        return self.$class().$primary_key();
      }, TMP_6.$$arity = 0);

      Opal.defn(self, '$id', TMP_7 = function $$id() {
        var self = this;
        if (self.backing_record == null) self.backing_record = nil;

        return self.backing_record['$reactive_get!'](self.$primary_key());
      }, TMP_7.$$arity = 0);

      Opal.defn(self, '$id=', TMP_8 = function(value) {
        var $a, $b, self = this;
        if (self.backing_record == null) self.backing_record = nil;

        return (($a = [value]), $b = self.backing_record, $b['$id='].apply($b, $a), $a[$a.length-1]);
      }, TMP_8.$$arity = 1);

      Opal.defn(self, '$model_name', TMP_9 = function $$model_name() {
        var self = this;

        return self.$class().$model_name();
      }, TMP_9.$$arity = 0);

      Opal.defn(self, '$revert', TMP_10 = function $$revert() {
        var self = this;
        if (self.backing_record == null) self.backing_record = nil;

        return self.backing_record.$revert();
      }, TMP_10.$$arity = 0);

      Opal.defn(self, '$changed?', TMP_11 = function() {
        var self = this;
        if (self.backing_record == null) self.backing_record = nil;

        return self.backing_record['$changed?']();
      }, TMP_11.$$arity = 0);

      Opal.defn(self, '$dup', TMP_12 = function $$dup() {
        var self = this;

        return self.$class().$new(self.$attributes());
      }, TMP_12.$$arity = 0);

      Opal.defn(self, '$==', TMP_14 = function(ar_instance) {
        var $a, $b, TMP_13, self = this;
        if (self.backing_record == null) self.backing_record = nil;

        return self.backing_record['$=='](($a = ($b = ar_instance).$instance_eval, $a.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this;
          if (self.backing_record == null) self.backing_record = nil;

        return self.backing_record}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13), $a).call($b));
      }, TMP_14.$$arity = 1);

      Opal.defn(self, '$method_missing', TMP_15 = function $$method_missing(name, $a_rest) {
        var $b, $c, $d, self = this, args, $iter = TMP_15.$$p, block = $iter || nil, force_update = nil, attribute_name = nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;
        if (self.backing_record == null) self.backing_record = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        TMP_15.$$p = null;
        $zuper = [];
        
        for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
          $zuper[$zuper_index] = arguments[$zuper_index];
        }
        if ((($b = name['$=~'](/\!$/)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          name = name.$gsub(/\!$/, "");
          force_update = true;};
        if ((($b = name['$=~'](/_changed\?$/)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          return self.backing_record['$changed?'](name.$gsub(/_changed\?$/, ""))
        } else if ((($b = ($c = (($d = args.$count()['$=='](1)) ? name['$=~'](/=$/) : args.$count()['$=='](1)), $c !== false && $c !== nil && $c != null ?block['$!']() : $c)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          attribute_name = name.$gsub(/=$/, "");
          return self.backing_record['$reactive_set!'](attribute_name, self.$backing_record().$convert(attribute_name, args['$[]'](0)));
        } else if ((($b = ($c = args.$count()['$zero?'](), $c !== false && $c !== nil && $c != null ?block['$!']() : $c)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          return self.backing_record['$reactive_get!'](name, force_update)
        } else if ((($b = block['$!']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          return self.backing_record['$reactive_get!']([$rb_plus([name], args)], force_update)
          } else {
          return ($b = ($c = self, Opal.find_super_dispatcher(self, 'method_missing', TMP_15, false)), $b.$$p = $iter, $b).apply($c, $zuper)
        };
      }, TMP_15.$$arity = -2);

      Opal.defn(self, '$itself', TMP_16 = function $$itself() {
        var self = this;

        self.$id();
        return self;
      }, TMP_16.$$arity = 0);

      Opal.defn(self, '$load', TMP_17 = function $$load($a_rest) {
        var $b, $c, TMP_18, self = this, attributes, $iter = TMP_17.$$p, block = $iter || nil, first_time = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        attributes = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          attributes[$arg_idx - 0] = arguments[$arg_idx];
        }
        TMP_17.$$p = null;
        first_time = true;
        return ($b = ($c = $scope.get('ReactiveRecord')).$load, $b.$$p = (TMP_18 = function(){var self = TMP_18.$$s || this, $a, $d, TMP_19, $e, results = nil;

        results = ($a = ($d = attributes).$collect, $a.$$p = (TMP_19 = function(attr){var self = TMP_19.$$s || this;
            if (self.backing_record == null) self.backing_record = nil;
if (attr == null) attr = nil;
          return self.backing_record['$reactive_get!'](attr, first_time)}, TMP_19.$$s = self, TMP_19.$$arity = 1, TMP_19), $a).call($d);
          if (block !== false && block !== nil && block != null) {
            results = Opal.yieldX(block, Opal.to_a(results))};
          first_time = false;
          if ((($a = ($e = block['$nil?'](), $e !== false && $e !== nil && $e != null ?results.$count()['$=='](1) : $e)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return results.$first()
            } else {
            return results
          };}, TMP_18.$$s = self, TMP_18.$$arity = 0, TMP_18), $b).call($c);
      }, TMP_17.$$arity = -1);

      Opal.defn(self, '$save', TMP_20 = function $$save(opts) {
        var $a, $b, $c, self = this, $iter = TMP_20.$$p, block = $iter || nil;
        if (self.backing_record == null) self.backing_record = nil;

        if (opts == null) {
          opts = $hash2([], {});
        }
        TMP_20.$$p = null;
        return ($a = ($b = self.backing_record).$save, $a.$$p = block.$to_proc(), $a).call($b, (function() {if ((($c = opts['$has_key?']("validate")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          return opts['$[]']("validate")
          } else {
          return true
        }; return nil; })(), opts['$[]']("force"));
      }, TMP_20.$$arity = -1);

      Opal.defn(self, '$saving?', TMP_21 = function() {
        var self = this;
        if (self.backing_record == null) self.backing_record = nil;

        return self.backing_record['$saving?']();
      }, TMP_21.$$arity = 0);

      Opal.defn(self, '$destroy', TMP_22 = function $$destroy() {
        var $a, $b, self = this, $iter = TMP_22.$$p, block = $iter || nil;
        if (self.backing_record == null) self.backing_record = nil;

        TMP_22.$$p = null;
        return ($a = ($b = self.backing_record).$destroy, $a.$$p = block.$to_proc(), $a).call($b);
      }, TMP_22.$$arity = 0);

      Opal.defn(self, '$destroyed?', TMP_23 = function() {
        var self = this;
        if (self.backing_record == null) self.backing_record = nil;

        return self.backing_record.$destroyed();
      }, TMP_23.$$arity = 0);

      Opal.defn(self, '$new?', TMP_24 = function() {
        var self = this;
        if (self.backing_record == null) self.backing_record = nil;

        return self.backing_record['$new?']();
      }, TMP_24.$$arity = 0);

      Opal.defn(self, '$errors', TMP_25 = function $$errors() {
        var self = this;
        if (self.backing_record == null) self.backing_record = nil;

        (($scope.get('React')).$$scope.get('State')).$get_state(self.backing_record, self.backing_record);
        return self.backing_record.$errors();
      }, TMP_25.$$arity = 0);
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["reactive_record/active_record/base"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$extend', '$include']);
  return (function($base) {
    var $ActiveRecord, self = $ActiveRecord = $module($base, 'ActiveRecord');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Base(){};
      var self = $Base = $klass($base, $super, 'Base', $Base);

      var def = self.$$proto, $scope = self.$$scope;

      self.$extend($scope.get('ClassMethods'));

      return self.$include($scope.get('InstanceMethods'));
    })($scope.base, null)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["reactive_record/interval"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$attr_reader', '$convert', '$nil?', '$stopped?', '$aborted?', '$raise', '$call', '$tap', '$to_proc', '$new', '$every', '$every!', '$to_n', '$after', '$after!']);
  (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Interval(){};
      var self = $Interval = $klass($base, $super, 'Interval', $Interval);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7;

      def.id = def.aborted = def.window = def.block = def.every = nil;
      self.$attr_reader("every");

      Opal.defn(self, '$initialize', TMP_1 = function $$initialize(window, time) {
        var self = this, $iter = TMP_1.$$p, block = $iter || nil;

        TMP_1.$$p = null;
        self.window = $scope.get('Native').$convert(window);
        self.every = time;
        self.block = block;
        return self.aborted = false;
      }, TMP_1.$$arity = 2);

      Opal.defn(self, '$stopped?', TMP_2 = function() {
        var self = this;

        return self.id['$nil?']();
      }, TMP_2.$$arity = 0);

      Opal.defn(self, '$aborted?', TMP_3 = function() {
        var self = this;

        return self.aborted;
      }, TMP_3.$$arity = 0);

      Opal.defn(self, '$abort', TMP_4 = function $$abort() {
        var self = this;

        self.window.clearInterval(self.id);
        self.aborted = true;
        return self.id = nil;
      }, TMP_4.$$arity = 0);

      Opal.defn(self, '$stop', TMP_5 = function $$stop() {
        var $a, self = this;

        if ((($a = self['$stopped?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil};
        self.window.clearInterval(self.id);
        self.stopped = true;
        return self.id = nil;
      }, TMP_5.$$arity = 0);

      Opal.defn(self, '$start', TMP_6 = function $$start() {
        var $a, self = this;

        if ((($a = self['$aborted?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$raise("the interval has been aborted")};
        if ((($a = self['$stopped?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          return nil
        };
        return self.id = self.window.setInterval(self.block, self.every * 1000);
      }, TMP_6.$$arity = 0);

      return (Opal.defn(self, '$call', TMP_7 = function $$call() {
        var self = this;

        return self.block.$call();
      }, TMP_7.$$arity = 0), nil) && 'call';
    })($scope.base, null);

    (function($base, $super) {
      function $Window(){};
      var self = $Window = $klass($base, $super, 'Window', $Window);

      var def = self.$$proto, $scope = self.$$scope, TMP_8, TMP_9;

      def["native"] = nil;
      Opal.defn(self, '$every', TMP_8 = function $$every(time) {
        var $a, $b, $c, $d, self = this, $iter = TMP_8.$$p, block = $iter || nil;

        TMP_8.$$p = null;
        return ($a = ($b = ($c = ($d = $scope.get('Interval')).$new, $c.$$p = block.$to_proc(), $c).call($d, self["native"], time)).$tap, $a.$$p = "start".$to_proc(), $a).call($b);
      }, TMP_8.$$arity = 1);

      return (Opal.defn(self, '$every!', TMP_9 = function(time) {
        var $a, $b, self = this, $iter = TMP_9.$$p, block = $iter || nil;

        TMP_9.$$p = null;
        return ($a = ($b = $scope.get('Interval')).$new, $a.$$p = block.$to_proc(), $a).call($b, self["native"], time);
      }, TMP_9.$$arity = 1), nil) && 'every!';
    })($scope.base, null);
  })($scope.base);
  (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_10, TMP_11;

    Opal.defn(self, '$every', TMP_10 = function $$every(time) {
      var $a, $b, self = this, $iter = TMP_10.$$p, block = $iter || nil;
      if ($gvars.window == null) $gvars.window = nil;

      TMP_10.$$p = null;
      return ($a = ($b = $gvars.window).$every, $a.$$p = block.$to_proc(), $a).call($b, time);
    }, TMP_10.$$arity = 1);

    Opal.defn(self, '$every!', TMP_11 = function(time) {
      var $a, $b, self = this, $iter = TMP_11.$$p, block = $iter || nil;
      if ($gvars.window == null) $gvars.window = nil;

      TMP_11.$$p = null;
      return ($a = ($b = $gvars.window)['$every!'], $a.$$p = block.$to_proc(), $a).call($b, time);
    }, TMP_11.$$arity = 1);
  })($scope.base);
  (function($base, $super) {
    function $Proc(){};
    var self = $Proc = $klass($base, $super, 'Proc', $Proc);

    var def = self.$$proto, $scope = self.$$scope, TMP_12, TMP_13;

    Opal.defn(self, '$every', TMP_12 = function $$every(time) {
      var $a, $b, self = this;
      if ($gvars.window == null) $gvars.window = nil;

      return ($a = ($b = $gvars.window).$every, $a.$$p = self.$to_proc(), $a).call($b, time);
    }, TMP_12.$$arity = 1);

    return (Opal.defn(self, '$every!', TMP_13 = function(time) {
      var $a, $b, self = this;
      if ($gvars.window == null) $gvars.window = nil;

      return ($a = ($b = $gvars.window)['$every!'], $a.$$p = self.$to_proc(), $a).call($b, time);
    }, TMP_13.$$arity = 1), nil) && 'every!';
  })($scope.base, null);
  (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Delay(){};
      var self = $Delay = $klass($base, $super, 'Delay', $Delay);

      var def = self.$$proto, $scope = self.$$scope, TMP_14, TMP_15, TMP_16;

      def.window = def.id = def.block = def.after = nil;
      self.$attr_reader("after");

      Opal.defn(self, '$initialize', TMP_14 = function $$initialize(window, time) {
        var self = this, $iter = TMP_14.$$p, block = $iter || nil;

        TMP_14.$$p = null;
        self.window = $scope.get('Native').$convert(window);
        self.after = time;
        return self.block = block;
      }, TMP_14.$$arity = 2);

      Opal.defn(self, '$abort', TMP_15 = function $$abort() {
        var self = this;

        return self.window.clearTimeout(self.id);
      }, TMP_15.$$arity = 0);

      return (Opal.defn(self, '$start', TMP_16 = function $$start() {
        var self = this;

        return self.id = self.window.setTimeout(self.block.$to_n(), self.after * 1000);
      }, TMP_16.$$arity = 0), nil) && 'start';
    })($scope.base, null);

    (function($base, $super) {
      function $Window(){};
      var self = $Window = $klass($base, $super, 'Window', $Window);

      var def = self.$$proto, $scope = self.$$scope, TMP_17, TMP_18;

      def["native"] = nil;
      Opal.defn(self, '$after', TMP_17 = function $$after(time) {
        var $a, $b, $c, $d, self = this, $iter = TMP_17.$$p, block = $iter || nil;

        TMP_17.$$p = null;
        return ($a = ($b = ($c = ($d = $scope.get('Delay')).$new, $c.$$p = block.$to_proc(), $c).call($d, self["native"], time)).$tap, $a.$$p = "start".$to_proc(), $a).call($b);
      }, TMP_17.$$arity = 1);

      return (Opal.defn(self, '$after!', TMP_18 = function(time) {
        var $a, $b, self = this, $iter = TMP_18.$$p, block = $iter || nil;

        TMP_18.$$p = null;
        return ($a = ($b = $scope.get('Delay')).$new, $a.$$p = block.$to_proc(), $a).call($b, self["native"], time);
      }, TMP_18.$$arity = 1), nil) && 'after!';
    })($scope.base, null);
  })($scope.base);
  (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_19, TMP_20;

    Opal.defn(self, '$after', TMP_19 = function $$after(time) {
      var self = this, $iter = TMP_19.$$p, block = $iter || nil;

      TMP_19.$$p = null;
      return setTimeout(block.$to_n(), time * 1000);
    }, TMP_19.$$arity = 1);

    Opal.defn(self, '$after!', TMP_20 = function(time) {
      var self = this, $iter = TMP_20.$$p, block = $iter || nil;

      TMP_20.$$p = null;
      return setTimeout(block.$to_n(), time * 1000);
    }, TMP_20.$$arity = 1);
  })($scope.base);
  return (function($base, $super) {
    function $Proc(){};
    var self = $Proc = $klass($base, $super, 'Proc', $Proc);

    var def = self.$$proto, $scope = self.$$scope, TMP_21, TMP_22;

    Opal.defn(self, '$after', TMP_21 = function $$after(time) {
      var $a, $b, self = this;
      if ($gvars.window == null) $gvars.window = nil;

      return ($a = ($b = $gvars.window).$after, $a.$$p = self.$to_proc(), $a).call($b, time);
    }, TMP_21.$$arity = 1);

    return (Opal.defn(self, '$after!', TMP_22 = function(time) {
      var $a, $b, self = this;
      if ($gvars.window == null) $gvars.window = nil;

      return ($a = ($b = $gvars.window)['$after!'], $a.$$p = self.$to_proc(), $a).call($b, time);
    }, TMP_22.$$arity = 1), nil) && 'after!';
  })($scope.base, null);
};
/* Generated by Opal 0.10.3 */
Opal.modules["reactive_record/scope_description"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $hash = Opal.hash;

  Opal.add_stubs(['$send', '$singleton_class', '$filter_proc', '$build_joins', '$[]', '$respond_to?', '$detect', '$any?', '$==', '$class', '$<', '$catch_db_requests', '$compact', '$flatten', '$collect', '$crawl', '$base_class', '$collector?', '$new', '$instance_exec', '$to_proc', '$to_a', '$select', '$raise', '$message', '$key?', '$!', '$nil?', '$is_a?', '$map_joins_path', '$merge', '$[]=', '$each', '$inject', '$reflect_on_association', '$build_error', '$inverse_of', '$<<', '$klass', '$split', '$name', '$all']);
  return (function($base) {
    var $ReactiveRecord, self = $ReactiveRecord = $module($base, 'ReactiveRecord');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $ScopeDescription(){};
      var self = $ScopeDescription = $klass($base, $super, 'ScopeDescription', $ScopeDescription);

      var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_4, TMP_5, TMP_7, TMP_10, TMP_12, TMP_13, TMP_14, TMP_18, TMP_19, TMP_21;

      def.filter_proc = def.is_collector = def.joins = def.model = def.name = nil;
      Opal.defn(self, '$initialize', TMP_2 = function $$initialize(model, name, opts) {
        var $a, $b, TMP_1, self = this, sself = nil;

        sself = self;
        ($a = ($b = model.$singleton_class()).$send, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this;

        return sself}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1), $a).call($b, "define_method", "_" + (name) + "_synchromesh_scope_description_");
        self.filter_proc = self.$filter_proc(opts);
        self.name = name;
        self.model = model;
        return self.$build_joins(opts['$[]']("joins"));
      }, TMP_2.$$arity = 3);

      Opal.defs(self, '$find', TMP_3 = function $$find(target_model, name) {
        var self = this;

        return target_model.$send("_" + (name) + "_synchromesh_scope_description_");
      }, TMP_3.$$arity = 2);

      Opal.defn(self, '$filter?', TMP_4 = function() {
        var self = this;

        return self.filter_proc['$respond_to?']("call");
      }, TMP_4.$$arity = 0);

      Opal.defn(self, '$collector?', TMP_5 = function() {
        var self = this;

        return self.is_collector;
      }, TMP_5.$$arity = 0);

      Opal.defn(self, '$joins_with?', TMP_7 = function(record) {
        var $a, $b, TMP_6, self = this;

        return ($a = ($b = self.joins).$detect, $a.$$p = (TMP_6 = function(klass, vector){var self = TMP_6.$$s || this, $c, $d, $e;
if (klass == null) klass = nil;if (vector == null) vector = nil;
        return ($c = vector['$any?'](), $c !== false && $c !== nil && $c != null ?(((($d = ((($e = klass['$==']("all")) !== false && $e !== nil && $e != null) ? $e : record.$class()['$=='](klass))) !== false && $d !== nil && $d != null) ? $d : $rb_lt(record.$class(), klass))) : $c)}, TMP_6.$$s = self, TMP_6.$$arity = 2, TMP_6), $a).call($b);
      }, TMP_7.$$arity = 1);

      Opal.defn(self, '$related_records_for', TMP_10 = function $$related_records_for(record) {
        var $a, $b, TMP_8, self = this;

        return ($a = ($b = (($scope.get('ReactiveRecord')).$$scope.get('Base'))).$catch_db_requests, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this, $c, $d, TMP_9, $e;
          if (self.joins == null) self.joins = nil;

        return ($c = ($d = (((($e = self.joins['$[]'](record.$class().$base_class())) !== false && $e !== nil && $e != null) ? $e : self.joins['$[]']("all")))).$collect, $c.$$p = (TMP_9 = function(vector){var self = TMP_9.$$s || this, $e;
if (vector == null) vector = nil;
          return ($e = self).$crawl.apply($e, [record].concat(Opal.to_a(vector)))}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9), $c).call($d).$flatten().$compact()}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $a).call($b, []);
      }, TMP_10.$$arity = 1);

      Opal.defn(self, '$filter_records', TMP_12 = function $$filter_records(related_records, args) {
        var $a, $b, $c, TMP_11, self = this, e = nil;

        try {
          if ((($a = self['$collector?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('Set').$new(($a = ($b = related_records.$to_a()).$instance_exec, $a.$$p = self.filter_proc.$to_proc(), $a).apply($b, Opal.to_a(args)))
            } else {
            return $scope.get('Set').$new(($a = ($c = related_records).$select, $a.$$p = (TMP_11 = function(r){var self = TMP_11.$$s || this, $d, $e;
              if (self.filter_proc == null) self.filter_proc = nil;
if (r == null) r = nil;
            return ($d = ($e = r).$instance_exec, $d.$$p = self.filter_proc.$to_proc(), $d).apply($e, Opal.to_a(args))}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11), $a).call($c))
          }
        } catch ($err) {
          if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
            try {
              return self.$raise("Client side scope " + (self.model) + "." + (self.name) + " raised error: " + (e.$message()))
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        };
      }, TMP_12.$$arity = 2);

      Opal.defn(self, '$filter_proc', TMP_13 = function $$filter_proc(opts) {
        var $a, $b, self = this, client_opt = nil;

        if ((($a = ((($b = opts['$key?']("client")) !== false && $b !== nil && $b != null) ? $b : opts['$key?']("select"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          return true
        };
        client_opt = ((($a = opts['$[]']("client")) !== false && $a !== nil && $a != null) ? $a : opts['$[]']("select"));
        self.is_collector = opts['$key?']("select");
        if ((($a = ((($b = client_opt['$!']()) !== false && $b !== nil && $b != null) ? $b : client_opt['$respond_to?']("call"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return client_opt};
        return self.$raise("Scope option :client or :select must be a proc, false, or nil");
      }, TMP_13.$$arity = 1);

      Opal.defn(self, '$build_joins', TMP_14 = function $$build_joins(joins_list) {
        var $a, $b, self = this;

        if ((($a = ((($b = self.filter_proc['$!']()) !== false && $b !== nil && $b != null) ? $b : joins_list['$==']([]))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.joins = $hash2(["all"], {"all": []})
        } else if ((($a = joins_list['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.joins = $hash(self.model, [[]], "all", [])
        } else if (joins_list['$==']("all")) {
          return self.joins = $hash2(["all"], {"all": [[]]})
          } else {
          if ((($a = joins_list['$is_a?']($scope.get('Array'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            joins_list = [joins_list]
          };
          return self.$map_joins_path(joins_list);
        };
      }, TMP_14.$$arity = 1);

      Opal.defn(self, '$map_joins_path', TMP_18 = function $$map_joins_path(paths) {
        var $a, $b, TMP_15, $c, TMP_16, self = this;

        self.joins = ($a = ($b = $scope.get('Hash')).$new, $a.$$p = (TMP_15 = function(h, k){var self = TMP_15.$$s || this;
if (h == null) h = nil;if (k == null) k = nil;
        return h['$[]='](k, $scope.get('Array').$new())}, TMP_15.$$s = self, TMP_15.$$arity = 2, TMP_15), $a).call($b).$merge($hash(self.model, [[]]));
        return ($a = ($c = paths).$each, $a.$$p = (TMP_16 = function(path){var self = TMP_16.$$s || this, $d, $e, TMP_17, vector = nil;
          if (self.model == null) self.model = nil;
if (path == null) path = nil;
        vector = [];
          return ($d = ($e = path.$split(".")).$inject, $d.$$p = (TMP_17 = function(model, attribute){var self = TMP_17.$$s || this, association = nil;
            if (self.joins == null) self.joins = nil;
if (model == null) model = nil;if (attribute == null) attribute = nil;
          association = model.$reflect_on_association(attribute);
            if (association !== false && association !== nil && association != null) {
              } else {
              self.$raise(self.$build_error(path, model, attribute))
            };
            vector = [association.$inverse_of()].concat(Opal.to_a(vector));
            self.joins['$[]'](association.$klass())['$<<'](vector);
            return association.$klass();}, TMP_17.$$s = self, TMP_17.$$arity = 2, TMP_17), $d).call($e, self.model);}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16), $a).call($c);
      }, TMP_18.$$arity = 1);

      Opal.defn(self, '$build_error', TMP_19 = function $$build_error(path, model, attribute) {
        var self = this;

        return "Could not find joins association '" + (model.$name()) + "." + (attribute) + "' " + ("for '" + (path) + "' while processing scope " + (self.model.$name()) + "." + (self.name) + ".");
      }, TMP_19.$$arity = 3);

      return (Opal.defn(self, '$crawl', TMP_21 = function $$crawl(item, method, $a_rest) {
        var $b, $c, TMP_20, self = this, vector;

        if (method == null) {
          method = nil;
        }
        var $args_len = arguments.length, $rest_len = $args_len - 2;
        if ($rest_len < 0) { $rest_len = 0; }
        vector = new Array($rest_len);
        for (var $arg_idx = 2; $arg_idx < $args_len; $arg_idx++) {
          vector[$arg_idx - 2] = arguments[$arg_idx];
        }
        if ((($b = ($c = method['$!'](), $c !== false && $c !== nil && $c != null ?item['$is_a?']($scope.get('Collection')) : $c)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          return item.$all()
        } else if ((($b = method['$!']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          return item
        } else if ((($b = item['$respond_to?']("collect")) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          return ($b = ($c = item).$collect, $b.$$p = (TMP_20 = function(record){var self = TMP_20.$$s || this, $a;
if (record == null) record = nil;
          return ($a = self).$crawl.apply($a, [record.$send(method)].concat(Opal.to_a(vector)))}, TMP_20.$$s = self, TMP_20.$$arity = 1, TMP_20), $b).call($c)
          } else {
          return ($b = self).$crawl.apply($b, [item.$send(method)].concat(Opal.to_a(vector)))
        };
      }, TMP_21.$$arity = -2), nil) && 'crawl';
    })($scope.base, null)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["active_record_base"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$==', '$count', '$is_a?', '$[]', '$merge', '$respond_to?', '$raise', '$!=', '$send', '$to_proc', '$all', '$=~', '$gsub', '$pre_synchromesh_method_missing', '$save', '$new', '$_synchromesh_scope_args_check', '$build_child_scope', '$singleton_class', '$<<', '$default_scope', '$[]=', '$extend', '$inject', '$unscoped', '$scope', '$lambda', '$each', '$<=>', '$to_i', '$id', '$do_not_synchronize']);
  return (function($base) {
    var $ActiveRecord, self = $ActiveRecord = $module($base, 'ActiveRecord');

    var def = self.$$proto, $scope = self.$$scope, $a;

    (function($base, $super) {
      function $Base(){};
      var self = $Base = $klass($base, $super, 'Base', $Base);

      var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_14, $c, TMP_15, TMP_16, TMP_17, TMP_19;

      (function(self) {
        var $scope = self.$$scope, def = self.$$proto, TMP_1, TMP_2, TMP_3, $a, TMP_4, TMP_5, TMP_8, TMP_9, TMP_11, TMP_12, TMP_13;

        Opal.defn(self, '$_synchromesh_scope_args_check', TMP_1 = function $$_synchromesh_scope_args_check(args) {
          var $a, $b, self = this, opts = nil;

          opts = (function() {if ((($a = (($b = args.$count()['$=='](2)) ? args['$[]'](1)['$is_a?']($scope.get('Hash')) : args.$count()['$=='](2))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return args['$[]'](1).$merge($hash2(["server"], {"server": args['$[]'](0)}))
          } else if ((($a = args['$[]'](0)['$is_a?']($scope.get('Hash'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return args['$[]'](0)
            } else {
            return $hash2(["server"], {"server": args['$[]'](0)})
          }; return nil; })();
          if ((($a = ($b = opts['$is_a?']($scope.get('Hash')), $b !== false && $b !== nil && $b != null ?opts['$[]']("server")['$respond_to?']("call") : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return opts};
          return self.$raise("must provide either a proc as the first arg or by the " + "`:server` option to scope and default_scope methods");
        }, TMP_1.$$arity = 1);
        Opal.alias(self, 'pre_synchromesh_scope', 'scope');
        Opal.alias(self, 'pre_synchromesh_default_scope', 'default_scope');
        Opal.defn(self, '$do_not_synchronize', TMP_2 = function $$do_not_synchronize() {
          var self = this;

          return self.do_not_synchronize = true;
        }, TMP_2.$$arity = 0);
        Opal.defn(self, '$do_not_synchronize?', TMP_3 = function() {
          var self = this;
          if (self.do_not_synchronize == null) self.do_not_synchronize = nil;

          return self.do_not_synchronize;
        }, TMP_3.$$arity = 0);
        if ((($a = $scope.get('RUBY_ENGINE')['$!=']("opal")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          Opal.alias(self, 'pre_synchromesh_method_missing', 'method_missing');
          Opal.defn(self, '$method_missing', TMP_4 = function $$method_missing(name, $a_rest) {try {

            var $b, $c, $d, $e, self = this, args, $iter = TMP_4.$$p, block = $iter || nil;

            var $args_len = arguments.length, $rest_len = $args_len - 1;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 1] = arguments[$arg_idx];
            }
            TMP_4.$$p = null;
            if ((($b = []['$respond_to?'](name)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              return ($b = ($c = self.$all()).$send, $b.$$p = block.$to_proc(), $b).apply($c, [name].concat(Opal.to_a(args)))};
            if ((($b = name['$=~'](/\!$/)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              
              try {Opal.ret(($b = ($d = self).$send, $b.$$p = block.$to_proc(), $b).apply($d, [name.$gsub(/\!$/, "")].concat(Opal.to_a(args))).$send("reload_from_db")) } catch ($err) { 
                if (Opal.rescue($err, [$scope.get('StandardError')])) {
                nil
                } else { throw $err; } }};
            return ($b = ($e = self).$pre_synchromesh_method_missing, $b.$$p = block.$to_proc(), $b).apply($e, [name].concat(Opal.to_a(args)));
            } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
          }, TMP_4.$$arity = -2);
          Opal.defn(self, '$create', TMP_5 = function $$create($a_rest) {
            var $b, $c, $d, self = this, args, $iter = TMP_5.$$p, block = $iter || nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            TMP_5.$$p = null;
            return ($b = ($c = ($d = self).$new.apply($d, Opal.to_a(args))).$save, $b.$$p = block.$to_proc(), $b).call($c);
          }, TMP_5.$$arity = -1);
          Opal.defn(self, '$scope', TMP_8 = function $$scope(name, $a_rest) {
            var $b, $c, TMP_6, $d, TMP_7, self = this, args, opts = nil, scope_description = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 1;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 1] = arguments[$arg_idx];
            }
            opts = self.$_synchromesh_scope_args_check(args);
            scope_description = (($scope.get('ReactiveRecord')).$$scope.get('ScopeDescription')).$new(self, name, opts);
            ($b = ($c = self.$singleton_class()).$send, $b.$$p = (TMP_6 = function($a_rest){var self = TMP_6.$$s || this, vargs, $d;

              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              vargs = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                vargs[$arg_idx - 0] = arguments[$arg_idx];
              }
            return ($d = self.$all()).$build_child_scope.apply($d, [scope_description].concat(Opal.to_a(name)).concat(Opal.to_a(vargs)))}, TMP_6.$$s = self, TMP_6.$$arity = -1, TMP_6), $b).call($c, "define_method", name);
            return ($b = ($d = self.$singleton_class()).$send, $b.$$p = (TMP_7 = function(_collection){var self = TMP_7.$$s || this;
if (_collection == null) _collection = nil;
            return self.$raise("NO LONGER IMPLEMENTED - DOESNT PLAY WELL WITH SYNCHROMESH")}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $b).call($d, "define_method", "" + (name) + "=");
          }, TMP_8.$$arity = -2);
          Opal.defn(self, '$default_scope', TMP_9 = function $$default_scope($a_rest) {
            var $b, self = this, args, $iter = TMP_9.$$p, block = $iter || nil, opts = nil;
            if (self._default_scopes == null) self._default_scopes = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            TMP_9.$$p = null;
            opts = self.$_synchromesh_scope_args_check([].concat(Opal.to_a(block)).concat(Opal.to_a(args)));
            ((($b = self._default_scopes) !== false && $b !== nil && $b != null) ? $b : self._default_scopes = []);
            return self._default_scopes['$<<'](opts);
          }, TMP_9.$$arity = -1);
          Opal.defn(self, '$all', TMP_11 = function $$all() {
            var $a, $b, $c, $d, $e, $f, TMP_10, self = this, root = nil;
            if (self._default_scopes == null) self._default_scopes = nil;

            return ($a = self, $b = (($scope.get('ReactiveRecord')).$$scope.get('Base')).$default_scope(), ((($c = $b['$[]']($a)) !== false && $c !== nil && $c != null) ? $c : $b['$[]=']($a, ((($d = (function() {if ((($e = self._default_scopes) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
              root = (($scope.get('ReactiveRecord')).$$scope.get('Collection')).$new(self, nil, nil, self, "all").$extend((($scope.get('ReactiveRecord')).$$scope.get('UnscopedCollection')));
              return ($e = ($f = self._default_scopes).$inject, $e.$$p = (TMP_10 = function(scope, opts){var self = TMP_10.$$s || this;
if (scope == null) scope = nil;if (opts == null) opts = nil;
              return scope.$build_child_scope((($scope.get('ReactiveRecord')).$$scope.get('ScopeDescription')).$new(self, "all", opts))}, TMP_10.$$s = self, TMP_10.$$arity = 2, TMP_10), $e).call($f, root);
              } else {
              return nil
            }; return nil; })()) !== false && $d !== nil && $d != null) ? $d : self.$unscoped()))));
          }, TMP_11.$$arity = 0);
          Opal.defn(self, '$all=', TMP_12 = function(_collection) {
            var self = this;

            return self.$raise("NO LONGER IMPLEMENTED DOESNT PLAY WELL WITH SYNCHROMESH");
          }, TMP_12.$$arity = 1);
          return (Opal.defn(self, '$unscoped', TMP_13 = function $$unscoped() {
            var $a, $b, $c, self = this;

            return ($a = self, $b = (($scope.get('ReactiveRecord')).$$scope.get('Base')).$unscoped(), ((($c = $b['$[]']($a)) !== false && $c !== nil && $c != null) ? $c : $b['$[]=']($a, (($scope.get('ReactiveRecord')).$$scope.get('Collection')).$new(self, nil, nil, self, "unscoped").$extend((($scope.get('ReactiveRecord')).$$scope.get('UnscopedCollection'))))));
          }, TMP_13.$$arity = 0), nil) && 'unscoped';
        };
      })(Opal.get_singleton_class(self));

      if ((($a = $scope.get('RUBY_ENGINE')['$!=']("opal")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$scope("limit", ($a = ($b = self).$lambda, $a.$$p = (TMP_14 = function(){var self = TMP_14.$$s || this;

        return nil}, TMP_14.$$s = self, TMP_14.$$arity = 0, TMP_14), $a).call($b));

        self.$scope("offset", ($a = ($c = self).$lambda, $a.$$p = (TMP_15 = function(){var self = TMP_15.$$s || this;

        return nil}, TMP_15.$$s = self, TMP_15.$$arity = 0, TMP_15), $a).call($c));

        Opal.defn(self, '$update_attribute', TMP_16 = function $$update_attribute(attr, value) {
          var $a, $b, self = this, $iter = TMP_16.$$p, block = $iter || nil;

          TMP_16.$$p = null;
          self.$send("" + (attr) + "=", value);
          return ($a = ($b = self).$save, $a.$$p = block.$to_proc(), $a).call($b, $hash2(["validate"], {"validate": false}));
        }, TMP_16.$$arity = 2);

        Opal.defn(self, '$update', TMP_17 = function $$update(attrs) {
          var $a, $b, TMP_18, $c, self = this, $iter = TMP_17.$$p, block = $iter || nil;

          if (attrs == null) {
            attrs = $hash2([], {});
          }
          TMP_17.$$p = null;
          ($a = ($b = attrs).$each, $a.$$p = (TMP_18 = function(attr, value){var self = TMP_18.$$s || this;
if (attr == null) attr = nil;if (value == null) value = nil;
          return self.$send("" + (attr) + "=", value)}, TMP_18.$$s = self, TMP_18.$$arity = 2, TMP_18), $a).call($b);
          return ($a = ($c = self).$save, $a.$$p = block.$to_proc(), $a).call($c);
        }, TMP_17.$$arity = -1);

        return (Opal.defn(self, '$<=>', TMP_19 = function(other) {
          var self = this;

          return self.$id().$to_i()['$<=>'](other.$id().$to_i());
        }, TMP_19.$$arity = 1), nil) && '<=>';
      };
    })($scope.base, null);

    if ((($a = ($scope.InternalMetadata != null)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      $scope.get('InternalMetadata').$do_not_synchronize()};
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["hypermesh/version"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base) {
    var $Hypermesh, self = $Hypermesh = $module($base, 'Hypermesh');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.cdecl($scope, 'VERSION', "0.5.0")
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["opal/parse_patch"] = function(Opal) {
  var $a, $b, TMP_1, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, e = nil;

  Opal.add_stubs(['$parse', '$is_a?', '$class_eval', '$old_parse', '$to_proc', '$raise', '$new', '$message']);
  try {
    return $scope.get('JSON').$parse("test")
  } catch ($err) {
    if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
      try {
        if ((($a = e['$is_a?']($scope.get('StandardError'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil
          } else {
          return ($a = ($b = $scope.get('JSON')).$class_eval, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, TMP_2;

          (function(self) {
              var $scope = self.$$scope, def = self.$$proto;

              return Opal.alias(self, 'old_parse', 'parse')
            })(Opal.get_singleton_class(self));
            return (Opal.defs(self, '$parse', TMP_2 = function $$parse($a_rest) {
              var $b, $c, self = this, args, $iter = TMP_2.$$p, block = $iter || nil, e = nil;

              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              args = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                args[$arg_idx - 0] = arguments[$arg_idx];
              }
              TMP_2.$$p = null;
              try {
                return ($b = ($c = self).$old_parse, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args))
              } catch ($err) {
                if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
                  try {
                    return self.$raise($scope.get('StandardError').$new(e.$message()))
                  } finally { Opal.pop_exception() }
                } else { throw $err; }
              };
            }, TMP_2.$$arity = -1), nil) && 'parse';}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1), $a).call($b)
        }
      } finally { Opal.pop_exception() }
    } else { throw $err; }
  }
};
/* Generated by Opal 0.10.3 */
Opal.modules["opal/set_patches"] = function(Opal) {
  var $a, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$method_defined?', '$new', '$class', '$each', '$include?', '$add']);
  if ((($a = $scope.get('Set')['$method_defined?']("intersection")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
    return nil
    } else {
    return (function($base, $super) {
      function $Set(){};
      var self = $Set = $klass($base, $super, 'Set', $Set);

      var def = self.$$proto, $scope = self.$$scope, TMP_2;

      Opal.defn(self, '$&', TMP_2 = function(enum$) {
        var $a, $b, TMP_1, self = this, n = nil;

        n = self.$class().$new();
        ($a = ($b = enum$).$each, $a.$$p = (TMP_1 = function(o){var self = TMP_1.$$s || this, $c;
if (o == null) o = nil;
        if ((($c = self['$include?'](o)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return n.$add(o)
            } else {
            return nil
          }}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $a).call($b);
        return n;
      }, TMP_2.$$arity = 1);

      return Opal.alias(self, 'intersection', '&');
    })($scope.base, null)
  }
};
/* Generated by Opal 0.10.3 */
Opal.modules["opal/equality_patches"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$is_a?', '$broken_equals']);
  (function($base, $super) {
    function $Date(){};
    var self = $Date = $klass($base, $super, 'Date', $Date);

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    Opal.alias(self, 'broken_equals', '==');

    return (Opal.defn(self, '$==', TMP_1 = function(other) {
      var $a, self = this;

      if ((($a = other['$is_a?']($scope.get('Date'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return false
      };
      return self.$broken_equals(other);
    }, TMP_1.$$arity = 1), nil) && '==';
  })($scope.base, null);
  return (function($base, $super) {
    function $Time(){};
    var self = $Time = $klass($base, $super, 'Time', $Time);

    var def = self.$$proto, $scope = self.$$scope, TMP_2;

    Opal.alias(self, 'broken_equals', '==');

    return (Opal.defn(self, '$==', TMP_2 = function(other) {
      var $a, self = this;

      if ((($a = other['$is_a?']($scope.get('Time'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return false
      };
      return self.$broken_equals(other);
    }, TMP_2.$$arity = 1), nil) && '==';
  })($scope.base, null);
};
/* Generated by Opal 0.10.3 */
Opal.modules["enumerable/pluck"] = function(Opal) {
  var $a, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$method_defined?', '$map', '$[]']);
  if ((($a = $scope.get('Enumerable')['$method_defined?']("pluck")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
    return nil
    } else {
    return (function($base) {
      var $Enumerable, self = $Enumerable = $module($base, 'Enumerable');

      var def = self.$$proto, $scope = self.$$scope, TMP_2;

      Opal.defn(self, '$pluck', TMP_2 = function $$pluck(key) {
        var $a, $b, TMP_1, self = this;

        return ($a = ($b = self).$map, $a.$$p = (TMP_1 = function(element){var self = TMP_1.$$s || this;
if (element == null) element = nil;
        return element['$[]'](key)}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $a).call($b);
      }, TMP_2.$$arity = 1)
    })($scope.base)
  }
};
/* Generated by Opal 0.10.3 */
Opal.modules["synchromesh/client_drivers"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$==', '$each', '$is_a?', '$connect_to', '$name', '$id', '$class', '$raise', '$[]', '$opts', '$+', '$to_s', '$<<', '$open_channels', '$add_connection', '$lambda', '$get_queued_data', '$then', '$action_cable_consumer', '$json', '$parse', '$send', '$post', '$polling_path', '$get', '$receive', '$to_proc', '$in_transit', '$load_data', '$backing_record', '$find', '$klass', '$record', '$destroyed?', '$ar_instance', '$merge_current_values', '$tap', '$destroy_associations', '$new?', '$initialize_collections', '$_react_param_conversion', '$const_get', '$attr_reader', '$new', '$[]=', '$destroyed=', '$merge!', '$attributes', '$reflect_on_association', '$intersection', '$include?', '$exists?', '$complete!', '$delete', '$merge', '$flatten', '$compact', '$collect', '$first', '$key?', '$!=', '$convert', '$last', '$puts', '$local', '$sync!', '$sync_scopes', '$include', '$when_not_saving', '$isomorphic_method', '$when_on_client', '$send_to_server', '$when_on_server', '$public_columns_hash', '$get_public_columns_hash', '$before_first_mount', '$on_opal_client?', '$sync_create', '$sync_change', '$sync_destroy', '$connect', '$every']);
  return (function($base) {
    var $HyperMesh, self = $HyperMesh = $module($base, 'HyperMesh');

    var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3;

    if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
      Opal.defs(self, '$connect', TMP_2 = function $$connect($a_rest) {
        var $b, $c, TMP_1, self = this, channels;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        channels = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          channels[$arg_idx - 0] = arguments[$arg_idx];
        }
        return ($b = ($c = channels).$each, $b.$$p = (TMP_1 = function(channel){var self = TMP_1.$$s || this, $a, $d;
if (channel == null) channel = nil;
        if ((($a = channel['$is_a?']($scope.get('Class'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('IncomingBroadcast').$connect_to(channel.$name())
          } else if ((($a = ((($d = channel['$is_a?']($scope.get('String'))) !== false && $d !== nil && $d != null) ? $d : channel['$is_a?']($scope.get('Array')))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return ($a = $scope.get('IncomingBroadcast')).$connect_to.apply($a, Opal.to_a(channel))
          } else if ((($d = channel.$id()) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
            return $scope.get('IncomingBroadcast').$connect_to(channel.$class().$name(), channel.$id())
            } else {
            return self.$raise("cannot connect to model before it has been saved")
          }}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $b).call($c);
      }, TMP_2.$$arity = -1);

      Opal.defs(self, '$action_cable_consumer', TMP_3 = function $$action_cable_consumer() {
        var self = this;

        return $scope.get('ClientDrivers').$opts()['$[]']("action_cable_consumer");
      }, TMP_3.$$arity = 0);

      (function($base, $super) {
        function $IncomingBroadcast(){};
        var self = $IncomingBroadcast = $klass($base, $super, 'IncomingBroadcast', $IncomingBroadcast);

        var def = self.$$proto, $scope = self.$$scope, TMP_4, TMP_7, TMP_8, TMP_10, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_19, TMP_20, TMP_22, TMP_23, TMP_24, TMP_26;

        def.is_new = def.destroyed = def.klass = def.record = def.channels = def.received = def.previous_changes = def.id = nil;
        Opal.defs(self, '$add_connection', TMP_4 = function $$add_connection(channel_name, id) {
          var self = this, channel_string = nil;

          if (id == null) {
            id = nil;
          }
          channel_string = "" + (channel_name) + ((function() {if (id !== false && id !== nil && id != null) {
            return $rb_plus("-", id.$to_s())
            } else {
            return nil
          }; return nil; })());
          self.$open_channels()['$<<'](channel_string);
          return channel_string;
        }, TMP_4.$$arity = -2);

        Opal.defs(self, '$connect_to', TMP_7 = function $$connect_to(channel_name, id) {
          var $a, $b, TMP_5, $c, TMP_6, self = this, channel_string = nil, channel = nil;

          if (id == null) {
            id = nil;
          }
          channel_string = self.$add_connection(channel_name, id);
          if ($scope.get('ClientDrivers').$opts()['$[]']("transport")['$==']("pusher")) {
            channel = "" + ($scope.get('ClientDrivers').$opts()['$[]']("channel")) + "-" + (channel_string);
            
            var channel = $scope.get('ClientDrivers').$opts()['$[]']("pusher_api").subscribe(channel);
            channel.bind('create', $scope.get('ClientDrivers').$opts()['$[]']("create"));
            channel.bind('change', $scope.get('ClientDrivers').$opts()['$[]']("change"));
            channel.bind('destroy', $scope.get('ClientDrivers').$opts()['$[]']("destroy"));
            channel.bind('pusher:subscription_succeeded', ($a = ($b = self).$lambda, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

            return $scope.get('ClientDrivers').$get_queued_data("connect-to-transport", channel_string)}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($b))
          ;
          } else if ($scope.get('ClientDrivers').$opts()['$[]']("transport")['$==']("action_cable")) {
            channel = "" + ($scope.get('ClientDrivers').$opts()['$[]']("channel")) + "-" + (channel_string);
            return ($a = ($c = $scope.get('HTTP').$post($scope.get('ClientDrivers').$polling_path("action-cable-auth", channel))).$then, $a.$$p = (TMP_6 = function(response){var self = TMP_6.$$s || this;
if (response == null) response = nil;
            
              $scope.get('HyperMesh').$action_cable_consumer().subscriptions.create(
                {
                  channel: "HyperMesh::ActionCableChannel",
                  client_id: $scope.get('ClientDrivers').$opts()['$[]']("id"),
                  synchromesh_channel: channel_string,
                  authorization: response.$json()['$[]']("authorization"),
                  salt: response.$json()['$[]']("salt")
                },
                {
                  connected: function() {
                    $scope.get('ClientDrivers').$get_queued_data("connect-to-transport", channel_string)
                  },
                  received: function(data) {
                    var data = $scope.get('JSON').$parse(JSON.stringify(data))
                    $scope.get('ClientDrivers').$send("sync_" + ((data)['$[]']("message")), (data)['$[]']("data"))
                    return true
                  }
                }
              )
            ;}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $a).call($c);
            } else {
            return $scope.get('HTTP').$get($scope.get('ClientDrivers').$polling_path("subscribe", channel_string))
          };
        }, TMP_7.$$arity = -2);

        Opal.defs(self, '$receive', TMP_8 = function $$receive(data, operation) {
          var $a, $b, self = this, $iter = TMP_8.$$p, block = $iter || nil;

          TMP_8.$$p = null;
          return ($a = ($b = self.$in_transit()['$[]'](data['$[]']("broadcast_id"))).$receive, $a.$$p = block.$to_proc(), $a).call($b, data, operation);
        }, TMP_8.$$arity = 2);

        Opal.defn(self, '$record_with_current_values', TMP_10 = function $$record_with_current_values() {
          var $a, $b, TMP_9, self = this;

          return ($a = ($b = (($scope.get('ReactiveRecord')).$$scope.get('Base'))).$load_data, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this, $c, backing_record = nil;
            if (self.backing_record == null) self.backing_record = nil;

          backing_record = ((($c = self.backing_record) !== false && $c !== nil && $c != null) ? $c : self.$klass().$find(self.$record()['$[]']("id")).$backing_record());
            if ((($c = self['$destroyed?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return backing_record.$ar_instance()
              } else {
              return self.$merge_current_values(backing_record)
            };}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $a).call($b);
        }, TMP_10.$$arity = 0);

        Opal.defn(self, '$record_with_new_values', TMP_12 = function $$record_with_new_values() {
          var $a, $b, TMP_11, self = this;

          return ($a = ($b = self.$klass().$_react_param_conversion(self.$record())).$tap, $a.$$p = (TMP_11 = function(ar_instance){var self = TMP_11.$$s || this, $c;
if (ar_instance == null) ar_instance = nil;
          if ((($c = self['$destroyed?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return ar_instance.$backing_record().$destroy_associations()
            } else if ((($c = self['$new?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return ar_instance.$backing_record().$initialize_collections()
              } else {
              return nil
            }}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11), $a).call($b);
        }, TMP_12.$$arity = 0);

        Opal.defn(self, '$new?', TMP_13 = function() {
          var self = this;

          return self.is_new;
        }, TMP_13.$$arity = 0);

        Opal.defn(self, '$destroyed?', TMP_14 = function() {
          var self = this;

          return self.destroyed;
        }, TMP_14.$$arity = 0);

        Opal.defn(self, '$klass', TMP_15 = function $$klass() {
          var self = this;

          return $scope.get('Object').$const_get(self.klass);
        }, TMP_15.$$arity = 0);

        Opal.defn(self, '$to_s', TMP_16 = function $$to_s() {
          var self = this;

          return "klass: " + (self.$klass()) + " record: " + (self.$record()) + " new?: " + (self['$new?']()) + " destroyed?: " + (self['$destroyed?']());
        }, TMP_16.$$arity = 0);

        self.$attr_reader("record");

        Opal.defs(self, '$open_channels', TMP_17 = function $$open_channels() {
          var $a, self = this;
          if (self.open_channels == null) self.open_channels = nil;

          return ((($a = self.open_channels) !== false && $a !== nil && $a != null) ? $a : self.open_channels = $scope.get('Set').$new());
        }, TMP_17.$$arity = 0);

        Opal.defs(self, '$in_transit', TMP_19 = function $$in_transit() {
          var $a, $b, $c, TMP_18, self = this;
          if (self.in_transit == null) self.in_transit = nil;

          return ((($a = self.in_transit) !== false && $a !== nil && $a != null) ? $a : self.in_transit = ($b = ($c = $scope.get('Hash')).$new, $b.$$p = (TMP_18 = function(h, k){var self = TMP_18.$$s || this;
if (h == null) h = nil;if (k == null) k = nil;
          return h['$[]='](k, self.$new(k))}, TMP_18.$$s = self, TMP_18.$$arity = 2, TMP_18), $b).call($c));
        }, TMP_19.$$arity = 0);

        Opal.defn(self, '$initialize', TMP_20 = function $$initialize(id) {
          var self = this;

          self.id = id;
          self.received = $scope.get('Set').$new();
          self.record = $hash2([], {});
          return self.previous_changes = $hash2([], {});
        }, TMP_20.$$arity = 1);

        Opal.defn(self, '$local', TMP_22 = function $$local(operation, record, data) {
          var $a, $b, TMP_21, self = this, attributes = nil;

          self.destroyed = operation['$==']("destroy");
          self.is_new = operation['$==']("create");
          self.klass = record.$class().$name();
          self.record = data;
          (($a = [false]), $b = record.$backing_record(), $b['$destroyed='].apply($b, $a), $a[$a.length-1]);
          if ((($a = record.$id()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.record['$merge!']($hash2(["id"], {"id": record.$id()}))};
          (($a = [self.destroyed]), $b = record.$backing_record(), $b['$destroyed='].apply($b, $a), $a[$a.length-1]);
          self.backing_record = record.$backing_record();
          attributes = record.$backing_record().$attributes();
          ($a = ($b = data).$each, $a.$$p = (TMP_21 = function(k, v){var self = TMP_21.$$s || this, $c, $d;
            if (self.previous_changes == null) self.previous_changes = nil;
if (k == null) k = nil;if (v == null) v = nil;
          if ((($c = ((($d = self.$klass().$reflect_on_association(k)) !== false && $d !== nil && $d != null) ? $d : attributes['$[]'](k)['$=='](v))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return nil;};
            return self.previous_changes['$[]='](k, [attributes['$[]'](k), v]);}, TMP_21.$$s = self, TMP_21.$$arity = 2, TMP_21), $a).call($b);
          return self;
        }, TMP_22.$$arity = 3);

        Opal.defn(self, '$receive', TMP_23 = function $$receive(data, operation) {
          var $a, self = this, $iter = TMP_23.$$p, $yield = $iter || nil;

          TMP_23.$$p = null;
          self.destroyed = operation['$==']("destroy");
          self.is_new = operation['$==']("create");
          ((($a = self.channels) !== false && $a !== nil && $a != null) ? $a : self.channels = self.$class().$open_channels().$intersection(data['$[]']("channels")));
          if ((($a = self.channels['$include?'](data['$[]']("channel"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.$raise("synchromesh security violation")
          };
          self.received['$<<'](data['$[]']("channel"));
          ((($a = self.klass) !== false && $a !== nil && $a != null) ? $a : self.klass = data['$[]']("klass"));
          self.record['$merge!'](data['$[]']("record"));
          self.previous_changes['$merge!'](data['$[]']("previous_changes"));
          self.backing_record = (($scope.get('ReactiveRecord')).$$scope.get('Base'))['$exists?'](self.$klass(), self.$record()['$[]']("id"));
          if (self.channels['$=='](self.received)) {
            return Opal.yield1($yield, self['$complete!']());
            } else {
            return nil
          };
        }, TMP_23.$$arity = 2);

        Opal.defn(self, '$complete!', TMP_24 = function() {
          var self = this;

          return self.$class().$in_transit().$delete(self.id);
        }, TMP_24.$$arity = 0);

        return (Opal.defn(self, '$merge_current_values', TMP_26 = function $$merge_current_values(br) {try {

          var $a, $b, $c, TMP_25, self = this, current_values = nil, e = nil;

          try {
            current_values = ($a = $scope.get('Hash'))['$[]'].apply($a, Opal.to_a(($b = ($c = self.previous_changes).$collect, $b.$$p = (TMP_25 = function(attr, values){var self = TMP_25.$$s || this, $d, $e, $f, value = nil, e = nil;
if (attr == null) attr = nil;if (values == null) values = nil;
            value = (function() {if (attr['$==']("id")) {
                return self.$record()['$[]']("id")
                } else {
                return values.$first()
              }; return nil; })();
              try {
                if ((($d = ($e = ($f = br.$attributes()['$key?'](attr), $f !== false && $f !== nil && $f != null ?br.$attributes()['$[]'](attr)['$!='](br.$convert(attr, value)) : $f), $e !== false && $e !== nil && $e != null ?br.$attributes()['$[]'](attr)['$!='](br.$convert(attr, values.$last())) : $e)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
                  self.$puts("warning " + (attr) + " has changed locally - will force a reload.\n" + ("local value: " + (br.$attributes()['$[]'](attr)) + " remote value: " + (br.$convert(attr, value)) + "->" + (br.$convert(attr, values.$last()))));
                  Opal.ret(nil);}
              } catch ($err) {
                if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
                  try {
                    debugger;
                    nil;
                  } finally { Opal.pop_exception() }
                } else { throw $err; }
              };
              return [attr, value];}, TMP_25.$$s = self, TMP_25.$$arity = 2, TMP_25), $b).call($c).$compact().$flatten())).$merge(br.$attributes());
            return self.$klass().$_react_param_conversion(current_values);
          } catch ($err) {
            if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
              try {
                debugger;
                return nil;
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          };
          } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
        }, TMP_26.$$arity = 1), nil) && 'merge_current_values';
      })($scope.base, null);};

    (function($base, $super) {
      function $LocalSync(){};
      var self = $LocalSync = $klass($base, $super, 'LocalSync', $LocalSync);

      var def = self.$$proto, $scope = self.$$scope, TMP_27;

      return (Opal.defs(self, '$after_save', TMP_27 = function $$after_save(record, data) {
        var $a, self = this, operation = nil, dummy_broadcast = nil;

        if (data == null) {
          data = $hash2([], {});
        }
        operation = (function() {if ((($a = record['$new?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "create"
          } else {
          return ((function() {if ((($a = record['$destroyed?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return "destroy"
            } else {
            return "change"
          }; return nil; })())
        }; return nil; })();
        dummy_broadcast = $scope.get('IncomingBroadcast').$new().$local(operation, record, data);
        if (operation['$==']("destroy")) {
          } else {
          record.$backing_record()['$sync!'](data)
        };
        return (($scope.get('ReactiveRecord')).$$scope.get('Collection')).$sync_scopes(dummy_broadcast);
      }, TMP_27.$$arity = -2), nil) && 'after_save'
    })($scope.base, null);

    (function($base, $super) {
      function $ClientDrivers(){};
      var self = $ClientDrivers = $klass($base, $super, 'ClientDrivers', $ClientDrivers);

      var def = self.$$proto, $scope = self.$$scope, TMP_30, TMP_33, TMP_35, $a, TMP_36, $b, TMP_37, TMP_40, TMP_43, $c, TMP_44, TMP_50;

      self.$include((($scope.get('React')).$$scope.get('IsomorphicHelpers')));

      Opal.defs(self, '$sync_create', TMP_30 = function $$sync_create(data) {
        var $a, $b, TMP_28, self = this;

        return ($a = ($b = $scope.get('IncomingBroadcast')).$receive, $a.$$p = (TMP_28 = function(broadcast){var self = TMP_28.$$s || this, $c, $d, TMP_29;
if (broadcast == null) broadcast = nil;
        return ($c = ($d = (($scope.get('ReactiveRecord')).$$scope.get('Base'))).$when_not_saving, $c.$$p = (TMP_29 = function(){var self = TMP_29.$$s || this;

          return (($scope.get('ReactiveRecord')).$$scope.get('Collection')).$sync_scopes(broadcast)}, TMP_29.$$s = self, TMP_29.$$arity = 0, TMP_29), $c).call($d, broadcast.$klass())}, TMP_28.$$s = self, TMP_28.$$arity = 1, TMP_28), $a).call($b, data, "create");
      }, TMP_30.$$arity = 1);

      Opal.defs(self, '$sync_change', TMP_33 = function $$sync_change(data) {
        var $a, $b, TMP_31, self = this;

        return ($a = ($b = $scope.get('IncomingBroadcast')).$receive, $a.$$p = (TMP_31 = function(broadcast){var self = TMP_31.$$s || this, $c, $d, TMP_32;
if (broadcast == null) broadcast = nil;
        return ($c = ($d = (($scope.get('ReactiveRecord')).$$scope.get('Base'))).$when_not_saving, $c.$$p = (TMP_32 = function(){var self = TMP_32.$$s || this;

          return (($scope.get('ReactiveRecord')).$$scope.get('Collection')).$sync_scopes(broadcast)}, TMP_32.$$s = self, TMP_32.$$arity = 0, TMP_32), $c).call($d, broadcast.$klass())}, TMP_31.$$s = self, TMP_31.$$arity = 1, TMP_31), $a).call($b, data, "change");
      }, TMP_33.$$arity = 1);

      Opal.defs(self, '$sync_destroy', TMP_35 = function $$sync_destroy(data) {
        var $a, $b, TMP_34, self = this;

        return ($a = ($b = $scope.get('IncomingBroadcast')).$receive, $a.$$p = (TMP_34 = function(broadcast){var self = TMP_34.$$s || this;
if (broadcast == null) broadcast = nil;
        return (($scope.get('ReactiveRecord')).$$scope.get('Collection')).$sync_scopes(broadcast)}, TMP_34.$$s = self, TMP_34.$$arity = 1, TMP_34), $a).call($b, data, "destroy");
      }, TMP_35.$$arity = 1);

      if ((($a = $scope.get('RUBY_ENGINE')['$!=']("opal")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {};

      Opal.defs(self, '$opts', TMP_36 = function $$opts() {
        var $a, self = this;
        if (self.opts == null) self.opts = nil;

        return ((($a = self.opts) !== false && $a !== nil && $a != null) ? $a : self.opts = $scope.get('Hash').$new(window.HyperMeshOpts));
      }, TMP_36.$$arity = 0);

      ($a = ($b = self).$isomorphic_method, $a.$$p = (TMP_37 = function(f){var self = TMP_37.$$s || this, $c, $d, TMP_38, $e, TMP_39;
if (f == null) f = nil;
      ($c = ($d = f).$when_on_client, $c.$$p = (TMP_38 = function(){var self = TMP_38.$$s || this, $e;

        return ((($e = self.$opts()['$[]']("public_columns_hash")) !== false && $e !== nil && $e != null) ? $e : $hash2([], {}))}, TMP_38.$$s = self, TMP_38.$$arity = 0, TMP_38), $c).call($d);
        f.$send_to_server();
        return ($c = ($e = f).$when_on_server, $c.$$p = (TMP_39 = function(){var self = TMP_39.$$s || this;

        return (($scope.get('ActiveRecord')).$$scope.get('Base')).$public_columns_hash()}, TMP_39.$$s = self, TMP_39.$$arity = 0, TMP_39), $c).call($e);}, TMP_37.$$s = self, TMP_37.$$arity = 1, TMP_37), $a).call($b, "get_public_columns_hash");

      Opal.defs(self, '$public_columns_hash', TMP_40 = function $$public_columns_hash() {
        var $a, self = this;
        if (self.public_columns_hash == null) self.public_columns_hash = nil;

        return ((($a = self.public_columns_hash) !== false && $a !== nil && $a != null) ? $a : self.public_columns_hash = self.$get_public_columns_hash());
      }, TMP_40.$$arity = 0);

      Opal.defs(self, '$get_queued_data', TMP_43 = function $$get_queued_data(operation, channel, opts) {
        var $a, $b, TMP_41, self = this;

        if (channel == null) {
          channel = nil;
        }
        if (opts == null) {
          opts = $hash2([], {});
        }
        return ($a = ($b = $scope.get('HTTP').$get(self.$polling_path(operation, channel), opts)).$then, $a.$$p = (TMP_41 = function(response){var self = TMP_41.$$s || this, $c, $d, TMP_42;
if (response == null) response = nil;
        return ($c = ($d = response.$json()).$each, $c.$$p = (TMP_42 = function(update){var self = TMP_42.$$s || this;
if (update == null) update = nil;
          return self.$send("sync_" + (update['$[]'](0)), update['$[]'](1))}, TMP_42.$$s = self, TMP_42.$$arity = 1, TMP_42), $c).call($d)}, TMP_41.$$s = self, TMP_41.$$arity = 1, TMP_41), $a).call($b);
      }, TMP_43.$$arity = -2);

      ($a = ($c = self).$before_first_mount, $a.$$p = (TMP_44 = function(){var self = TMP_44.$$s || this, $d, $e, TMP_45, $f, TMP_46, $g, TMP_47, $h, $i, $j, TMP_48, $k, TMP_49, h = nil, pusher_api = nil;

      if ((($d = self['$on_opal_client?']()) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          if (self.$opts()['$[]']("transport")['$==']("pusher")) {
            self.$opts()['$[]=']("create", ($d = ($e = self).$lambda, $d.$$p = (TMP_45 = function(data){var self = TMP_45.$$s || this;
if (data == null) data = nil;
            return self.$sync_create($scope.get('JSON').$parse(JSON.stringify(data)))}, TMP_45.$$s = self, TMP_45.$$arity = 1, TMP_45), $d).call($e));
            self.$opts()['$[]=']("change", ($d = ($f = self).$lambda, $d.$$p = (TMP_46 = function(data){var self = TMP_46.$$s || this;
if (data == null) data = nil;
            return self.$sync_change($scope.get('JSON').$parse(JSON.stringify(data)))}, TMP_46.$$s = self, TMP_46.$$arity = 1, TMP_46), $d).call($f));
            self.$opts()['$[]=']("destroy", ($d = ($g = self).$lambda, $d.$$p = (TMP_47 = function(data){var self = TMP_47.$$s || this;
if (data == null) data = nil;
            return self.$sync_destroy($scope.get('JSON').$parse(JSON.stringify(data)))}, TMP_47.$$s = self, TMP_47.$$arity = 1, TMP_47), $d).call($g));
            if ((($d = ($h = self.$opts()['$[]']("client_logging"), $h !== false && $h !== nil && $h != null ?window.console && window.console.log : $h)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
              Pusher.log = function(message) {window.console.log(message);}};
            if ((($d = self.$opts()['$[]']("pusher_fake_js")) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
              self.$opts()['$[]=']("pusher_api", eval(self.$opts()['$[]']("pusher_fake_js")))
              } else {
              h = nil;
              pusher_api = nil;
              
              h = {
                encrypted: self.$opts()['$[]']("encrypted"),
                authEndpoint: window.ReactiveRecordEnginePath+'/synchromesh-pusher-auth',
                auth: {headers: {'X-CSRF-Token': self.$opts()['$[]']("form_authenticity_token")}}
              };
              pusher_api = new Pusher(self.$opts()['$[]']("key"), h)
            ;
              self.$opts()['$[]=']("pusher_api", pusher_api);
            };
            return ($d = $scope.get('HyperMesh')).$connect.apply($d, Opal.to_a(self.$opts()['$[]']("auto_connect")));
          } else if (self.$opts()['$[]']("transport")['$==']("action_cable")) {
            self.$opts()['$[]=']("action_cable_consumer", ActionCable.createConsumer.apply(ActionCable, [].concat(Opal.to_a(self.$opts()['$[]']("action_cable_consumer_url")))));
            return ($h = $scope.get('HyperMesh')).$connect.apply($h, Opal.to_a(self.$opts()['$[]']("auto_connect")));
          } else if (self.$opts()['$[]']("transport")['$==']("simple_poller")) {
            ($i = ($j = self.$opts()['$[]']("auto_connect")).$each, $i.$$p = (TMP_48 = function(channel){var self = TMP_48.$$s || this, $k;
if (channel == null) channel = nil;
            return ($k = $scope.get('IncomingBroadcast')).$add_connection.apply($k, Opal.to_a(channel))}, TMP_48.$$s = self, TMP_48.$$arity = 1, TMP_48), $i).call($j);
            return ($i = ($k = self).$every, $i.$$p = (TMP_49 = function(){var self = TMP_49.$$s || this;

            return self.$get_queued_data("read", nil, $hash2(["headers"], {"headers": $hash2(["X-SYNCHROMESH-SILENT-REQUEST"], {"X-SYNCHROMESH-SILENT-REQUEST": true})}))}, TMP_49.$$s = self, TMP_49.$$arity = 0, TMP_49), $i).call($k, self.$opts()['$[]']("seconds_between_poll"));
            } else {
            return nil
          }
          } else {
          return nil
        }}, TMP_44.$$s = self, TMP_44.$$arity = 0, TMP_44), $a).call($c);

      return (Opal.defs(self, '$polling_path', TMP_50 = function $$polling_path(to, id) {
        var self = this, s = nil;

        if (id == null) {
          id = nil;
        }
        s = "" + (window.ReactiveRecordEnginePath) + "/synchromesh-" + (to) + "/" + (self.$opts()['$[]']("id"));
        if (id !== false && id !== nil && id != null) {
          s = "" + (s) + "/" + (id)};
        return s;
      }, TMP_50.$$arity = -2), nil) && 'polling_path';
    })($scope.base, null);
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["hyper-mesh"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require', '$==']);
  self.$require("set");
  if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
    self.$require("hyper-react");
    self.$require("active_support");
    self.$require("time");
    self.$require("date");
    self.$require("reactive_record/active_record/error");
    self.$require("reactive_record/server_data_cache");
    self.$require("reactive_record/active_record/reactive_record/while_loading");
    self.$require("reactive_record/active_record/reactive_record/isomorphic_base");
    self.$require("reactive_record/active_record/reactive_record/dummy_value");
    self.$require("reactive_record/active_record/reactive_record/column_types");
    self.$require("reactive_record/active_record/aggregations");
    self.$require("reactive_record/active_record/associations");
    self.$require("reactive_record/active_record/reactive_record/base");
    self.$require("reactive_record/active_record/reactive_record/reactive_set_relationship_helpers");
    self.$require("reactive_record/active_record/reactive_record/collection");
    self.$require("reactive_record/active_record/reactive_record/scoped_collection");
    self.$require("reactive_record/active_record/reactive_record/unscoped_collection");
    self.$require("reactive_record/active_record/class_methods");
    self.$require("reactive_record/active_record/instance_methods");
    self.$require("reactive_record/active_record/base");
    self.$require("reactive_record/interval");
    self.$require("hyper-mesh"+ '/../' + "reactive_record/scope_description");
    self.$require("hyper-mesh"+ '/../' + "active_record_base");
    self.$require("hyper-mesh"+ '/../' + "hypermesh/version");
    self.$require("hyper-mesh"+ '/../' + "opal/parse_patch");
    self.$require("hyper-mesh"+ '/../' + "opal/set_patches");
    self.$require("hyper-mesh"+ '/../' + "opal/equality_patches");};
  self.$require("enumerable/pluck");
  return self.$require("hyper-mesh"+ '/../' + "synchromesh/client_drivers");
};
/* Generated by Opal 0.10.3 */
Opal.modules["public/company"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$has_many', '$aggregate_change_record', '$current_payment', '$generate_transaction_order', '$not', '$where', '$id', '$empty?', '$create', '$payments', '$first', '$each', '$[]', '$include?', '$nil?', '$[]=', '$tstore', '$submissions', '$accounts', '$incorporation_date', '$end_date=', '$new', '$+', '$year', '$today', '$month', '$-', '$day', '$start_date=', '$save', '$<', '$end_date']);
  return (function($base, $super) {
    function $Company(){};
    var self = $Company = $klass($base, $super, 'Company', $Company);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_4, TMP_5, TMP_6, TMP_7;

    self.$has_many("officers", $hash2(["dependent"], {"dependent": "destroy"}));

    self.$has_many("shareholders", $hash2(["dependent"], {"dependent": "destroy"}));

    self.$has_many("filers", $hash2(["dependent"], {"dependent": "destroy"}));

    self.$has_many("payments", $hash2(["dependent"], {"dependent": "destroy"}));

    self.$has_many("submissions", $hash2(["dependent"], {"dependent": "destroy"}));

    Opal.defn(self, '$process_tstore_and_generate_bill', TMP_1 = function $$process_tstore_and_generate_bill() {
      var self = this, aggregate = nil, curr = nil;

      aggregate = self.$aggregate_change_record();
      curr = self.$current_payment();
      curr.$generate_transaction_order(aggregate);
      return curr;
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$current_payment', TMP_2 = function $$current_payment() {
      var $a, self = this, active_payments = nil, curr = nil;

      active_payments = $scope.get('Payment').$where($hash2(["company_id"], {"company_id": self.$id()})).$where().$not($hash2(["workflow_state"], {"workflow_state": "completed"}));
      return curr = (function() {if ((($a = active_payments['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$payments().$create()
        } else {
        return active_payments.$first()
      }; return nil; })();
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$aggregate_change_record', TMP_4 = function $$aggregate_change_record() {
      var $a, $b, TMP_3, self = this, changeset = nil;

      changeset = $hash2(["reg", "sit", "cap", "off", "sha", "fil"], {"reg": $hash2([], {}), "sit": $hash2([], {}), "cap": $hash2([], {}), "off": $hash2([], {}), "sha": $hash2([], {}), "fil": $hash2([], {})});
      ($a = ($b = self.$tstore()).$each, $a.$$p = (TMP_3 = function(k, v){var self = TMP_3.$$s || this, $c, nk = nil;
if (k == null) k = nil;if (v == null) v = nil;
      nk = k['$[]'](0, 3);
        if ((($c = (["reg", "sit", "cap", "fil"]['$include?'](nk))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          if ((($c = (v['$nil?']())) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return nil
            } else {
            return changeset['$[]'](nk)['$[]='](k, v)
          }
          } else {
          return nil
        };}, TMP_3.$$s = self, TMP_3.$$arity = 2, TMP_3), $a).call($b);
      return changeset;
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$queue_filing_for_review', TMP_5 = function $$queue_filing_for_review() {
      var $a, $b, self = this, s = nil, d = nil, e = nil;

      s = self.$submissions().$create($hash2(["submission_type"], {"submission_type": self.$accounts()}));
      d = self.$incorporation_date();
      (($a = [$scope.get('Date').$new($rb_plus($scope.get('Date').$today().$year(), 1), d.$month(), $rb_minus(d.$day(), 1))]), $b = s, $b['$end_date='].apply($b, $a), $a[$a.length-1]);
      return (($a = [e = $scope.get('Date').$new($scope.get('Date').$today().$year(), d.$month(), d.$day())]), $b = s, $b['$start_date='].apply($b, $a), $a[$a.length-1]);
    }, TMP_5.$$arity = 0);

    Opal.defn(self, '$commit_tstore_details', TMP_6 = function $$commit_tstore_details() {
      var self = this, registered_office_address = nil, registered_office_address_2 = nil, registered_office_city = nil, registered_office_state = nil, registered_office_po = nil, zonal_office = nil, auth_share_capital = nil, number_of_shares = nil, issued_share_capital = nil, paid_up_capital = nil, situation_address = nil, situation_address_2 = nil, situation_city = nil, situation_state = nil;

      registered_office_address = self.$tstore()['$[]']("reg_address");
      registered_office_address_2 = self.$tstore()['$[]']("reg_address_2");
      registered_office_city = self.$tstore()['$[]']("reg_city");
      registered_office_state = self.$tstore()['$[]']("reg_state");
      registered_office_po = self.$tstore()['$[]']("reg_po");
      zonal_office = self.$tstore()['$[]']("reg_zone");
      auth_share_capital = self.$tstore()['$[]']("auth_share_capital");
      number_of_shares = self.$tstore()['$[]']("number_of_shares");
      issued_share_capital = self.$tstore()['$[]']("issued_share_capital");
      paid_up_capital = self.$tstore()['$[]']("paid_up_capital");
      situation_address = self.$tstore()['$[]']("sit_address");
      situation_address_2 = self.$tstore()['$[]']("sit_address_2");
      situation_city = self.$tstore()['$[]']("sit_city");
      situation_state = self.$tstore()['$[]']("sit_state");
      return self.$save();
    }, TMP_6.$$arity = 0);

    return (Opal.defn(self, '$submission_status', TMP_7 = function $$submission_status() {
      var $a, self = this, ret = nil, last_returns = nil, last_accounts = nil;

      ret = $hash2(["returns", "accounts"], {"returns": false, "accounts": false});
      last_returns = self.$submissions().$where($hash2(["submission_type"], {"submission_type": "returns"})).$first();
      last_accounts = self.$submissions().$where($hash2(["submission_type"], {"submission_type": "accounts"})).$first();
      if ((($a = last_returns['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        ret['$[]=']("returns", $rb_lt(last_returns.$end_date(), $scope.get('Date').$today()))
      };
      if ((($a = last_accounts['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        ret['$[]=']("accounts", $rb_lt(last_accounts.$end_date(), $scope.get('Date').$today()))
      };
      return ret;
    }, TMP_7.$$arity = 0), nil) && 'submission_status';
  })($scope.base, (($scope.get('ActiveRecord')).$$scope.get('Base')))
};
/* Generated by Opal 0.10.3 */
Opal.modules["public/filer"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$belongs_to']);
  return (function($base, $super) {
    function $Filer(){};
    var self = $Filer = $klass($base, $super, 'Filer', $Filer);

    var def = self.$$proto, $scope = self.$$scope;

    return self.$belongs_to("company")
  })($scope.base, (($scope.get('ActiveRecord')).$$scope.get('Base')))
};
/* Generated by Opal 0.10.3 */
Opal.modules["public/officer"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$belongs_to', '$nil?', '$company', '$puts', '$registered_office_address', '$residential_address=', '$residential_address_city=', '$registered_office_city', '$residential_address_state=', '$registered_office_state', '$to_s', '$save']);
  return (function($base, $super) {
    function $Officer(){};
    var self = $Officer = $klass($base, $super, 'Officer', $Officer);

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    self.$belongs_to("company");

    return (Opal.defn(self, '$assign_company_address', TMP_1 = function $$assign_company_address() {
      var $a, $b, self = this;

      if ((($a = self.$company()['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return nil
        } else {
        self.$puts(self.$company().$registered_office_address());
        (($a = [self.$company().$registered_office_address()]), $b = self, $b['$residential_address='].apply($b, $a), $a[$a.length-1]);
        (($a = [self.$company().$registered_office_city()]), $b = self, $b['$residential_address_city='].apply($b, $a), $a[$a.length-1]);
        (($a = [self.$company().$registered_office_state()]), $b = self, $b['$residential_address_state='].apply($b, $a), $a[$a.length-1]);
        self.$puts(self.$to_s());
        return self.$save();
      };
    }, TMP_1.$$arity = 0), nil) && 'assign_company_address';
  })($scope.base, (($scope.get('ActiveRecord')).$$scope.get('Base')))
};
/* Generated by Opal 0.10.3 */
Opal.modules["public/shareholder"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$belongs_to']);
  return (function($base, $super) {
    function $Shareholder(){};
    var self = $Shareholder = $klass($base, $super, 'Shareholder', $Shareholder);

    var def = self.$$proto, $scope = self.$$scope;

    return self.$belongs_to("company")
  })($scope.base, (($scope.get('ActiveRecord')).$$scope.get('Base')))
};
/* Generated by Opal 0.10.3 */
Opal.modules["models"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require_tree']);
  return self.$require_tree("public")
};
/* Generated by Opal 0.10.3 */
Opal.modules["components/filing/address"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$present?', '$reg_address', '$state', '$reg_city', '$reg_state', '$param', '$before_mount', '$address_update!', '$reg_address!', '$retrieve_item', '$reg_address_2!', '$reg_city!', '$reg_state!', '$reg_po!', '$reg_zone!', '$after_mount', '$before_update', '$before_unmount', '$div', '$==', '$address_update', '$on', '$button', '$p', '$span', '$[]', '$company', '$params', '$br', '$hr', '$h5', '$reg_address_2', '$reg_po', '$zonal_office', '$text', '$value', '$target', '$input', '$reg_zone', '$valid_address_input?', '$add_item']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Filing, self = $Filing = $module($base, 'Filing');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Address(){};
        var self = $Address = $klass($base, $super, 'Address', $Address);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, $b, TMP_2, $c, TMP_3, $d, TMP_4, $e, TMP_5, TMP_49;

        Opal.defn(self, '$valid_address_input?', TMP_1 = function() {
          var $a, $b, self = this;

          return ($a = ($b = self.$state().$reg_address()['$present?'](), $b !== false && $b !== nil && $b != null ?self.$state().$reg_city()['$present?']() : $b), $a !== false && $a !== nil && $a != null ?self.$state().$reg_state()['$present?']() : $a);
        }, TMP_1.$$arity = 0);

        self.$param("company");

        ($a = ($b = self).$before_mount, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

        self.$state()['$address_update!'](0);
          self.$state()['$reg_address!']($scope.get('Store').$retrieve_item("reg_address"));
          self.$state()['$reg_address_2!']($scope.get('Store').$retrieve_item("reg_address_2"));
          self.$state()['$reg_city!']($scope.get('Store').$retrieve_item("reg_city"));
          self.$state()['$reg_state!']($scope.get('Store').$retrieve_item("reg_state"));
          self.$state()['$reg_po!']($scope.get('Store').$retrieve_item("reg_po"));
          return self.$state()['$reg_zone!']($scope.get('Store').$retrieve_item("reg_zone"));}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2), $a).call($b);

        ($a = ($c = self).$after_mount, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

        return nil}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $a).call($c);

        ($a = ($d = self).$before_update, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

        return nil}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($d);

        ($a = ($e = self).$before_unmount, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

        return nil}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($e);

        return (Opal.defn(self, '$render', TMP_49 = function $$render() {
          var $a, $b, TMP_6, self = this;

          return ($a = ($b = self).$div, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this, $c, $d, TMP_7;

          return ($c = ($d = self).$div, $c.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this, $e, $f, TMP_8;

            return ($e = ($f = self).$div, $e.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this, $g, $h, TMP_9, $i, TMP_28, $j, TMP_46;

              ($g = ($h = self).$div, $g.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this, $i, $j, TMP_10, $k, $l, TMP_11, TMP_12, $m, TMP_20, $n, TMP_21, $o, TMP_22, $p, TMP_23, $q, TMP_24, $r, TMP_25, $s, TMP_26, $t, TMP_27;

                if ((($i = (self.$state().$address_update()['$=='](0))) !== nil && $i != null && (!$i.$$is_boolean || $i == true))) {
                    ($i = ($j = ($k = ($l = self).$button, $k.$$p = (TMP_11 = function(){var self = TMP_11.$$s || this;

                    return "Update Address"}, TMP_11.$$s = self, TMP_11.$$arity = 0, TMP_11), $k).call($l, $hash2(["type", "class"], {"type": "button", "class": "btn button action inner"}))).$on, $i.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this;

                    return self.$state()['$address_update!'](1)}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10), $i).call($j, "click")};
                  ($i = ($k = self).$p, $i.$$p = (TMP_12 = function(){var self = TMP_12.$$s || this, $m, $n, TMP_13, $o, TMP_14, $p, TMP_15, $q, TMP_16, $r, TMP_17, $s, TMP_18, $t, TMP_19;

                  ($m = ($n = self).$span, $m.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this;

                    return self.$params().$company()['$[]']("name")}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13), $m).call($n);
                    self.$br();
                    ($m = ($o = self).$span, $m.$$p = (TMP_14 = function(){var self = TMP_14.$$s || this;

                    return self.$params().$company()['$[]']("registered_office_address")}, TMP_14.$$s = self, TMP_14.$$arity = 0, TMP_14), $m).call($o);
                    if ((($m = (self.$params().$company()['$[]']("registered_office_address_2")['$present?']())) !== nil && $m != null && (!$m.$$is_boolean || $m == true))) {
                      self.$br();
                      ($m = ($p = self).$span, $m.$$p = (TMP_15 = function(){var self = TMP_15.$$s || this;

                      return self.$params().$company()['$[]']("registered_office_address_2")}, TMP_15.$$s = self, TMP_15.$$arity = 0, TMP_15), $m).call($p);};
                    self.$br();
                    ($m = ($q = self).$span, $m.$$p = (TMP_16 = function(){var self = TMP_16.$$s || this;

                    return self.$params().$company()['$[]']("registered_office_city")}, TMP_16.$$s = self, TMP_16.$$arity = 0, TMP_16), $m).call($q);
                    if ((($m = (self.$params().$company()['$[]']("registered_office_po"))) !== nil && $m != null && (!$m.$$is_boolean || $m == true))) {
                      self.$br();
                      ($m = ($r = self).$span, $m.$$p = (TMP_17 = function(){var self = TMP_17.$$s || this;

                      return self.$params().$company()['$[]']("registered_office_po")}, TMP_17.$$s = self, TMP_17.$$arity = 0, TMP_17), $m).call($r);};
                    self.$br();
                    ($m = ($s = self).$span, $m.$$p = (TMP_18 = function(){var self = TMP_18.$$s || this;

                    return self.$params().$company()['$[]']("registered_office_state")}, TMP_18.$$s = self, TMP_18.$$arity = 0, TMP_18), $m).call($s);
                    self.$br();
                    "Zonal Office - ";
                    return ($m = ($t = self).$span, $m.$$p = (TMP_19 = function(){var self = TMP_19.$$s || this;

                    return self.$params().$company()['$[]']("zonal_office")}, TMP_19.$$s = self, TMP_19.$$arity = 0, TMP_19), $m).call($t);}, TMP_12.$$s = self, TMP_12.$$arity = 0, TMP_12), $i).call($k);
                  if ((($i = (((($m = self.$state().$address_update()['$=='](1)) !== false && $m !== nil && $m != null) ? $m : self.$state().$reg_address()['$present?']()))) !== nil && $i != null && (!$i.$$is_boolean || $i == true))) {
                    self.$hr();
                    ($i = ($m = self).$h5, $i.$$p = (TMP_20 = function(){var self = TMP_20.$$s || this;

                    return "New Registered Address"}, TMP_20.$$s = self, TMP_20.$$arity = 0, TMP_20), $i).call($m);
                    ($i = ($n = self).$span, $i.$$p = (TMP_21 = function(){var self = TMP_21.$$s || this;

                    return self.$params().$company()['$[]']("name")}, TMP_21.$$s = self, TMP_21.$$arity = 0, TMP_21), $i).call($n);
                    self.$br();
                    ($i = ($o = self).$span, $i.$$p = (TMP_22 = function(){var self = TMP_22.$$s || this;

                    return self.$state().$reg_address()}, TMP_22.$$s = self, TMP_22.$$arity = 0, TMP_22), $i).call($o);
                    if ((($i = (self.$state().$reg_address_2()['$present?']())) !== nil && $i != null && (!$i.$$is_boolean || $i == true))) {
                      self.$br();
                      ($i = ($p = self).$span, $i.$$p = (TMP_23 = function(){var self = TMP_23.$$s || this;

                      return self.$state().$reg_address_2()}, TMP_23.$$s = self, TMP_23.$$arity = 0, TMP_23), $i).call($p);};
                    self.$br();
                    ($i = ($q = self).$span, $i.$$p = (TMP_24 = function(){var self = TMP_24.$$s || this;

                    return self.$state().$reg_city()}, TMP_24.$$s = self, TMP_24.$$arity = 0, TMP_24), $i).call($q);
                    if ((($i = (self.$state().$reg_po()['$present?']())) !== nil && $i != null && (!$i.$$is_boolean || $i == true))) {
                      self.$br();
                      ($i = ($r = self).$span, $i.$$p = (TMP_25 = function(){var self = TMP_25.$$s || this;

                      return self.$state().$reg_po()}, TMP_25.$$s = self, TMP_25.$$arity = 0, TMP_25), $i).call($r);};
                    self.$br();
                    ($i = ($s = self).$span, $i.$$p = (TMP_26 = function(){var self = TMP_26.$$s || this;

                    return self.$state().$reg_state()}, TMP_26.$$s = self, TMP_26.$$arity = 0, TMP_26), $i).call($s);
                    self.$br();
                    "Zonal Office - ";
                    ($i = ($t = self).$span, $i.$$p = (TMP_27 = function(){var self = TMP_27.$$s || this;

                    return self.$state().$zonal_office()}, TMP_27.$$s = self, TMP_27.$$arity = 0, TMP_27), $i).call($t);};
                  return self.$hr($hash2(["class"], {"class": "noborder"}));}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $g).call($h, $hash2(["class"], {"class": "small-12 large-4 medium-4 collapse columns"}));
                ($g = ($i = self).$div, $g.$$p = (TMP_28 = function(){var self = TMP_28.$$s || this, $j, $k, TMP_29;

                if ((($j = (self.$state().$address_update()['$=='](1))) !== nil && $j != null && (!$j.$$is_boolean || $j == true))) {
                    return ($j = ($k = self).$div, $j.$$p = (TMP_29 = function(){var self = TMP_29.$$s || this, $l, $m, TMP_30, $n, TMP_31, $o, TMP_32, $p, TMP_33, $q, TMP_34, $r, TMP_35, $s, TMP_36, $t, TMP_37, $u, TMP_38, $v, TMP_39, $w, TMP_40, $x, TMP_41;

                    ($l = ($m = self).$text, $l.$$p = (TMP_30 = function(){var self = TMP_30.$$s || this;

                      return "Registered Office Address *"}, TMP_30.$$s = self, TMP_30.$$arity = 0, TMP_30), $l).call($m);
                      ($l = ($n = self.$input($hash2(["class", "id", "type", "placeholder", "value"], {"class": "handle", "id": "reg_address", "type": "text", "placeholder": "Registered Office Address", "value": self.$state().$reg_address()}))).$on, $l.$$p = (TMP_31 = function(e){var self = TMP_31.$$s || this;
if (e == null) e = nil;
                      return self.$state()['$reg_address!'](e.$target().$value())}, TMP_31.$$s = self, TMP_31.$$arity = 1, TMP_31), $l).call($n, "change");
                      ($l = ($o = self.$input($hash2(["class", "id", "type", "placeholder", "value"], {"class": "handle", "id": "reg_address_2", "type": "text", "placeholder": "Registered Office Address 2", "value": self.$state().$reg_address_2()}))).$on, $l.$$p = (TMP_32 = function(e){var self = TMP_32.$$s || this;
if (e == null) e = nil;
                      return self.$state()['$reg_address_2!'](e.$target().$value())}, TMP_32.$$s = self, TMP_32.$$arity = 1, TMP_32), $l).call($o, "change");
                      ($l = ($p = self).$text, $l.$$p = (TMP_33 = function(){var self = TMP_33.$$s || this;

                      return "Registered Office City *"}, TMP_33.$$s = self, TMP_33.$$arity = 0, TMP_33), $l).call($p);
                      ($l = ($q = self.$input($hash2(["class", "id", "type", "placeholder", "value"], {"class": "handle", "id": "reg_city", "type": "text", "placeholder": "Registered Office City", "value": self.$state().$reg_city()}))).$on, $l.$$p = (TMP_34 = function(e){var self = TMP_34.$$s || this;
if (e == null) e = nil;
                      return self.$state()['$reg_city!'](e.$target().$value())}, TMP_34.$$s = self, TMP_34.$$arity = 1, TMP_34), $l).call($q, "change");
                      ($l = ($r = self).$text, $l.$$p = (TMP_35 = function(){var self = TMP_35.$$s || this;

                      return "Registered Office PO Box"}, TMP_35.$$s = self, TMP_35.$$arity = 0, TMP_35), $l).call($r);
                      ($l = ($s = self.$input($hash2(["class", "id", "type", "placeholder", "value"], {"class": "handle", "id": "reg_po", "type": "text", "placeholder": "Registered Office PO Box", "value": self.$state().$reg_po()}))).$on, $l.$$p = (TMP_36 = function(e){var self = TMP_36.$$s || this;
if (e == null) e = nil;
                      return self.$state()['$reg_po!'](e.$target().$value())}, TMP_36.$$s = self, TMP_36.$$arity = 1, TMP_36), $l).call($s, "change");
                      ($l = ($t = self).$text, $l.$$p = (TMP_37 = function(){var self = TMP_37.$$s || this;

                      return "Registered Office State *"}, TMP_37.$$s = self, TMP_37.$$arity = 0, TMP_37), $l).call($t);
                      ($l = ($u = self.$input($hash2(["class", "id", "type", "placeholder", "value"], {"class": "handle", "id": "reg_state", "type": "text", "placeholder": "Registered Office State", "value": self.$state().$reg_state()}))).$on, $l.$$p = (TMP_38 = function(e){var self = TMP_38.$$s || this;
if (e == null) e = nil;
                      return self.$state()['$reg_state!'](e.$target().$value())}, TMP_38.$$s = self, TMP_38.$$arity = 1, TMP_38), $l).call($u, "change");
                      ($l = ($v = self).$text, $l.$$p = (TMP_39 = function(){var self = TMP_39.$$s || this;

                      return "Zonal Office *"}, TMP_39.$$s = self, TMP_39.$$arity = 0, TMP_39), $l).call($v);
                      ($l = ($w = self.$input($hash2(["class", "id", "type", "placeholder", "value"], {"class": "handle", "id": "reg_state", "type": "text", "placeholder": "CAC Zonal Office", "value": self.$state().$reg_zone()}))).$on, $l.$$p = (TMP_40 = function(e){var self = TMP_40.$$s || this;
if (e == null) e = nil;
                      return self.$state()['$reg_zone!'](e.$target().$value())}, TMP_40.$$s = self, TMP_40.$$arity = 1, TMP_40), $l).call($w, "change");
                      return ($l = ($x = self).$div, $l.$$p = (TMP_41 = function(){var self = TMP_41.$$s || this, $y, $z, TMP_42, $aa, $ab, TMP_43, TMP_44, $ac, $ad, TMP_45;

                      if ((($y = self['$valid_address_input?']()) !== nil && $y != null && (!$y.$$is_boolean || $y == true))) {
                          ($y = ($z = ($aa = ($ab = self).$button, $aa.$$p = (TMP_43 = function(){var self = TMP_43.$$s || this;

                          return "Save"}, TMP_43.$$s = self, TMP_43.$$arity = 0, TMP_43), $aa).call($ab, $hash2(["type", "class"], {"type": "button", "class": "btn button action"}))).$on, $y.$$p = (TMP_42 = function(){var self = TMP_42.$$s || this;

                          $scope.get('Store').$add_item("reg_address", self.$state().$reg_address());
                            $scope.get('Store').$add_item("reg_address_2", self.$state().$reg_address_2());
                            $scope.get('Store').$add_item("reg_po", self.$state().$reg_po());
                            $scope.get('Store').$add_item("reg_city", self.$state().$reg_city());
                            $scope.get('Store').$add_item("reg_state", self.$state().$reg_state());
                            $scope.get('Store').$add_item("reg_zone", self.$state().$reg_zone());
                            return self.$state()['$address_update!'](0);}, TMP_42.$$s = self, TMP_42.$$arity = 0, TMP_42), $y).call($z, "click")};
                        return ($y = ($aa = ($ac = ($ad = self).$button, $ac.$$p = (TMP_45 = function(){var self = TMP_45.$$s || this;

                        return "Cancel"}, TMP_45.$$s = self, TMP_45.$$arity = 0, TMP_45), $ac).call($ad, $hash2(["type", "class"], {"type": "button", "class": "btn button action inner alert"}))).$on, $y.$$p = (TMP_44 = function(){var self = TMP_44.$$s || this;

                        return self.$state()['$address_update!'](0)}, TMP_44.$$s = self, TMP_44.$$arity = 0, TMP_44), $y).call($aa, "click");}, TMP_41.$$s = self, TMP_41.$$arity = 0, TMP_41), $l).call($x);}, TMP_29.$$s = self, TMP_29.$$arity = 0, TMP_29), $j).call($k)
                    } else {
                    return nil
                  }}, TMP_28.$$s = self, TMP_28.$$arity = 0, TMP_28), $g).call($i, $hash2(["class"], {"class": "small-12 large-4 medium-4 collapse columns"}));
                return ($g = ($j = self).$div, $g.$$p = (TMP_46 = function(){var self = TMP_46.$$s || this, $k, $l, TMP_47;

                return ($k = ($l = self).$div, $k.$$p = (TMP_47 = function(){var self = TMP_47.$$s || this, $m, $n, TMP_48;

                  return ($m = ($n = self).$h5, $m.$$p = (TMP_48 = function(){var self = TMP_48.$$s || this;

                    return "Help"}, TMP_48.$$s = self, TMP_48.$$arity = 0, TMP_48), $m).call($n)}, TMP_47.$$s = self, TMP_47.$$arity = 0, TMP_47), $k).call($l, $hash2(["style"], {"style": $hash2(["background", "padding"], {"background": "#4caf50", "padding": "0.5rem"})}))}, TMP_46.$$s = self, TMP_46.$$arity = 0, TMP_46), $g).call($j, $hash2(["class"], {"class": "small-12 large-4 medium-4 collapse columns"}));}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $e).call($f, $hash2(["id", "class"], {"id": "section-pane", "class": "small-12 columns"}))}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $c).call($d, $hash2(["class"], {"class": "small-12 "}))}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($b);
        }, TMP_49.$$arity = 0), nil) && 'render';
      })($scope.base, (((($scope.get('React')).$$scope.get('Component'))).$$scope.get('Base')))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["components/filing/annual"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$param', '$before_mount', '$find', '$company_id', '$params', '$officers', '$shareholders', '$after_mount', '$before_update', '$before_unmount', '$div', '$Header', '$hr', '$Nav', '$Main', '$countries']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Filing, self = $Filing = $module($base, 'Filing');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Annual(){};
        var self = $Annual = $klass($base, $super, 'Annual', $Annual);

        var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, $c, TMP_2, $d, TMP_3, $e, TMP_4, TMP_6;

        self.$param("company_id");

        self.$param("countries");

        ($a = ($b = self).$before_mount, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this;
          if (self.company == null) self.company = nil;

        self.company = $scope.get('Company').$find(self.$params().$company_id());
          self.officers = self.company.$officers();
          return self.shareholders = self.company.$shareholders();}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1), $a).call($b);

        ($a = ($c = self).$after_mount, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

        return nil}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2), $a).call($c);

        ($a = ($d = self).$before_update, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

        return nil}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $a).call($d);

        ($a = ($e = self).$before_unmount, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

        return nil}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($e);

        return (Opal.defn(self, '$render', TMP_6 = function $$render() {
          var $a, $b, TMP_5, self = this;

          return ($a = ($b = self).$div, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;
            if (self.company == null) self.company = nil;
            if (self.officers == null) self.officers = nil;
            if (self.shareholders == null) self.shareholders = nil;

          self.$Header($hash2(["company"], {"company": self.company}));
            self.$hr($hash2(["class"], {"class": "noborder"}));
            self.$Nav();
            return self.$Main($hash2(["company", "officers", "shareholders", "countries"], {"company": self.company, "officers": self.officers, "shareholders": self.shareholders, "countries": self.$params().$countries()}));}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($b);
        }, TMP_6.$$arity = 0), nil) && 'render';
      })($scope.base, (((($scope.get('React')).$$scope.get('Component'))).$$scope.get('Base')))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["components/filing/capital"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$param', '$before_mount', '$capital_update!', '$state', '$cap_auth_share_capital!', '$retrieve_item', '$cap_number_of_shares!', '$cap_issued_share_capital!', '$cap_paid_up_capital!', '$after_mount', '$before_update', '$before_unmount', '$div', '$==', '$capital_update', '$on', '$button', '$p', '$br', '$span', '$text', '$[]', '$company', '$params', '$present?', '$cap_auth_share_capital', '$hr', '$b', '$cap_number_of_shares', '$cap_share_price', '$cap_issued_share_capital', '$cap_paid_up_capital', '$value', '$target', '$input', '$cap_share_price!', '$add_item']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Filing, self = $Filing = $module($base, 'Filing');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Capital(){};
        var self = $Capital = $klass($base, $super, 'Capital', $Capital);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, $b, TMP_2, $c, TMP_3, $d, TMP_4, $e, TMP_5, TMP_60;

        Opal.defn(self, '$valid_capital_input?', TMP_1 = function() {
          var self = this;

          return true;
        }, TMP_1.$$arity = 0);

        self.$param("company");

        ($a = ($b = self).$before_mount, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

        self.$state()['$capital_update!'](0);
          self.$state()['$cap_auth_share_capital!']($scope.get('Store').$retrieve_item("cap_auth_share_capital"));
          self.$state()['$cap_number_of_shares!']($scope.get('Store').$retrieve_item("cap_number_of_shares"));
          self.$state()['$cap_issued_share_capital!']($scope.get('Store').$retrieve_item("cap_issued_share_capital"));
          return self.$state()['$cap_paid_up_capital!']($scope.get('Store').$retrieve_item("cap_paid_up_capital"));}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2), $a).call($b);

        ($a = ($c = self).$after_mount, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

        return nil}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $a).call($c);

        ($a = ($d = self).$before_update, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

        return nil}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($d);

        ($a = ($e = self).$before_unmount, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

        return nil}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($e);

        return (Opal.defn(self, '$render', TMP_60 = function $$render() {
          var $a, $b, TMP_6, self = this;

          return ($a = ($b = self).$div, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this, $c, $d, TMP_7;

          return ($c = ($d = self).$div, $c.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this, $e, $f, TMP_8;

            return ($e = ($f = self).$div, $e.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this, $g, $h, TMP_9, $i, TMP_35;

              ($g = ($h = self).$div, $g.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this, $i, $j, TMP_10, $k, $l, TMP_11, TMP_12, $m, TMP_24, $n, TMP_25, $o, TMP_26, $p, TMP_27, $q, TMP_28, $r, TMP_29, $s, TMP_30, $t, TMP_31, $u, TMP_32, $v, TMP_33, $w, TMP_34;

                if ((($i = (self.$state().$capital_update()['$=='](0))) !== nil && $i != null && (!$i.$$is_boolean || $i == true))) {
                    ($i = ($j = ($k = ($l = self).$button, $k.$$p = (TMP_11 = function(){var self = TMP_11.$$s || this;

                    return "Update Capital"}, TMP_11.$$s = self, TMP_11.$$arity = 0, TMP_11), $k).call($l, $hash2(["type", "class"], {"type": "button", "class": "btn button action inner"}))).$on, $i.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this;

                    return self.$state()['$capital_update!'](1)}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10), $i).call($j, "click")};
                  ($i = ($k = self).$p, $i.$$p = (TMP_12 = function(){var self = TMP_12.$$s || this, $m, $n, TMP_13, $o, TMP_14, $p, TMP_15, $q, TMP_16, $r, TMP_17, $s, TMP_18, $t, TMP_19, $u, TMP_20, $v, TMP_21, $w, TMP_22, $x, TMP_23;

                  self.$br();
                    ($m = ($n = self).$span, $m.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this;

                    return "Current Capital Holding"}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13), $m).call($n);
                    self.$br();
                    ($m = ($o = self).$text, $m.$$p = (TMP_14 = function(){var self = TMP_14.$$s || this;

                    return "Authorized Share Capital: "}, TMP_14.$$s = self, TMP_14.$$arity = 0, TMP_14), $m).call($o, $hash2(["style"], {"style": $hash2(["fontWeight"], {"fontWeight": "bold"})}));
                    ($m = ($p = self).$span, $m.$$p = (TMP_15 = function(){var self = TMP_15.$$s || this;

                    return self.$params().$company()['$[]']("cap_auth_share_capital")}, TMP_15.$$s = self, TMP_15.$$arity = 0, TMP_15), $m).call($p);
                    self.$br();
                    ($m = ($q = self).$text, $m.$$p = (TMP_16 = function(){var self = TMP_16.$$s || this;

                    return "Number of Shares: "}, TMP_16.$$s = self, TMP_16.$$arity = 0, TMP_16), $m).call($q, $hash2(["style"], {"style": $hash2(["fontWeight"], {"fontWeight": "bold"})}));
                    ($m = ($r = self).$span, $m.$$p = (TMP_17 = function(){var self = TMP_17.$$s || this;

                    return self.$params().$company()['$[]']("cap_number_of_shares")}, TMP_17.$$s = self, TMP_17.$$arity = 0, TMP_17), $m).call($r);
                    self.$br();
                    ($m = ($s = self).$text, $m.$$p = (TMP_18 = function(){var self = TMP_18.$$s || this;

                    return "Price of Shares (N): "}, TMP_18.$$s = self, TMP_18.$$arity = 0, TMP_18), $m).call($s, $hash2(["style"], {"style": $hash2(["fontWeight"], {"fontWeight": "bold"})}));
                    ($m = ($t = self).$span, $m.$$p = (TMP_19 = function(){var self = TMP_19.$$s || this;

                    return self.$params().$company()['$[]']("cap_share_price")}, TMP_19.$$s = self, TMP_19.$$arity = 0, TMP_19), $m).call($t);
                    self.$br();
                    ($m = ($u = self).$text, $m.$$p = (TMP_20 = function(){var self = TMP_20.$$s || this;

                    return "Issued Share Capital: "}, TMP_20.$$s = self, TMP_20.$$arity = 0, TMP_20), $m).call($u, $hash2(["style"], {"style": $hash2(["fontWeight"], {"fontWeight": "bold"})}));
                    ($m = ($v = self).$span, $m.$$p = (TMP_21 = function(){var self = TMP_21.$$s || this;

                    return self.$params().$company()['$[]']("cap_issued_share_capital")}, TMP_21.$$s = self, TMP_21.$$arity = 0, TMP_21), $m).call($v);
                    self.$br();
                    ($m = ($w = self).$text, $m.$$p = (TMP_22 = function(){var self = TMP_22.$$s || this;

                    return "Paid Up Capital: "}, TMP_22.$$s = self, TMP_22.$$arity = 0, TMP_22), $m).call($w, $hash2(["style"], {"style": $hash2(["fontWeight"], {"fontWeight": "bold"})}));
                    ($m = ($x = self).$span, $m.$$p = (TMP_23 = function(){var self = TMP_23.$$s || this;

                    return self.$params().$company()['$[]']("cap_paid_up_capital")}, TMP_23.$$s = self, TMP_23.$$arity = 0, TMP_23), $m).call($x);
                    return self.$br();}, TMP_12.$$s = self, TMP_12.$$arity = 0, TMP_12), $i).call($k);
                  if ((($i = (((($m = self.$state().$capital_update()['$=='](1)) !== false && $m !== nil && $m != null) ? $m : self.$state().$cap_auth_share_capital()['$present?']()))) !== nil && $i != null && (!$i.$$is_boolean || $i == true))) {
                    self.$hr();
                    ($i = ($m = self).$span, $i.$$p = (TMP_24 = function(){var self = TMP_24.$$s || this;

                    return "New Capital Holding"}, TMP_24.$$s = self, TMP_24.$$arity = 0, TMP_24), $i).call($m);
                    self.$br();
                    ($i = ($n = self).$b, $i.$$p = (TMP_25 = function(){var self = TMP_25.$$s || this;

                    return "Authorized Share Capital: "}, TMP_25.$$s = self, TMP_25.$$arity = 0, TMP_25), $i).call($n);
                    ($i = ($o = self).$span, $i.$$p = (TMP_26 = function(){var self = TMP_26.$$s || this;

                    return self.$state().$cap_auth_share_capital()}, TMP_26.$$s = self, TMP_26.$$arity = 0, TMP_26), $i).call($o);
                    self.$br();
                    ($i = ($p = self).$b, $i.$$p = (TMP_27 = function(){var self = TMP_27.$$s || this;

                    return "Number of Shares: "}, TMP_27.$$s = self, TMP_27.$$arity = 0, TMP_27), $i).call($p);
                    ($i = ($q = self).$span, $i.$$p = (TMP_28 = function(){var self = TMP_28.$$s || this;

                    return self.$state().$cap_number_of_shares()}, TMP_28.$$s = self, TMP_28.$$arity = 0, TMP_28), $i).call($q);
                    self.$br();
                    ($i = ($r = self).$b, $i.$$p = (TMP_29 = function(){var self = TMP_29.$$s || this;

                    return "Price of Shares (N): "}, TMP_29.$$s = self, TMP_29.$$arity = 0, TMP_29), $i).call($r);
                    ($i = ($s = self).$span, $i.$$p = (TMP_30 = function(){var self = TMP_30.$$s || this;

                    return self.$state().$cap_share_price()}, TMP_30.$$s = self, TMP_30.$$arity = 0, TMP_30), $i).call($s);
                    self.$br();
                    ($i = ($t = self).$b, $i.$$p = (TMP_31 = function(){var self = TMP_31.$$s || this;

                    return "Issued Share Capital: "}, TMP_31.$$s = self, TMP_31.$$arity = 0, TMP_31), $i).call($t);
                    ($i = ($u = self).$span, $i.$$p = (TMP_32 = function(){var self = TMP_32.$$s || this;

                    return self.$state().$cap_issued_share_capital()}, TMP_32.$$s = self, TMP_32.$$arity = 0, TMP_32), $i).call($u);
                    self.$br();
                    ($i = ($v = self).$b, $i.$$p = (TMP_33 = function(){var self = TMP_33.$$s || this;

                    return "Paid Up Capital: "}, TMP_33.$$s = self, TMP_33.$$arity = 0, TMP_33), $i).call($v);
                    ($i = ($w = self).$span, $i.$$p = (TMP_34 = function(){var self = TMP_34.$$s || this;

                    return self.$state().$cap_paid_up_capital()}, TMP_34.$$s = self, TMP_34.$$arity = 0, TMP_34), $i).call($w);
                    self.$br();};
                  return self.$hr($hash2(["class"], {"class": "noborder"}));}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $g).call($h, $hash2(["class"], {"class": "small-12 large-6 medium-6 collapse columns"}));
                ($g = ($i = self).$div, $g.$$p = (TMP_35 = function(){var self = TMP_35.$$s || this, $j, $k, TMP_36;

                if ((($j = (self.$state().$capital_update()['$=='](1))) !== nil && $j != null && (!$j.$$is_boolean || $j == true))) {
                    return ($j = ($k = self).$div, $j.$$p = (TMP_36 = function(){var self = TMP_36.$$s || this, $l, $m, TMP_37, $n, TMP_44, $o, TMP_48, $p, TMP_55;

                    ($l = ($m = self).$div, $l.$$p = (TMP_37 = function(){var self = TMP_37.$$s || this, $n, $o, TMP_38, $p, TMP_41;

                      ($n = ($o = self).$div, $n.$$p = (TMP_38 = function(){var self = TMP_38.$$s || this, $p, $q, TMP_39, $r, TMP_40;

                        ($p = ($q = self).$span, $p.$$p = (TMP_39 = function(){var self = TMP_39.$$s || this;

                          return "Authorized Share Capital"}, TMP_39.$$s = self, TMP_39.$$arity = 0, TMP_39), $p).call($q);
                          return ($p = ($r = self.$input($hash2(["class", "type", "placeholder", "value"], {"class": "handle small-12", "type": "text", "placeholder": "Authorized Share Capital", "value": self.$state().$cap_auth_share_capital()}))).$on, $p.$$p = (TMP_40 = function(e){var self = TMP_40.$$s || this;
if (e == null) e = nil;
                          return self.$state()['$cap_auth_share_capital!'](e.$target().$value())}, TMP_40.$$s = self, TMP_40.$$arity = 1, TMP_40), $p).call($r, "change");}, TMP_38.$$s = self, TMP_38.$$arity = 0, TMP_38), $n).call($o, $hash2(["class"], {"class": "handle small-12 large-6 medium-6 columns"}));
                        return ($n = ($p = self).$div, $n.$$p = (TMP_41 = function(){var self = TMP_41.$$s || this, $q, $r, TMP_42, $s, TMP_43;

                        ($q = ($r = self).$span, $q.$$p = (TMP_42 = function(){var self = TMP_42.$$s || this;

                          return "Number of Shares"}, TMP_42.$$s = self, TMP_42.$$arity = 0, TMP_42), $q).call($r);
                          return ($q = ($s = self.$input($hash2(["class", "type", "placeholder", "value"], {"class": "handle small-12", "type": "text", "placeholder": "Number of Shares", "value": self.$state().$cap_number_of_shares()}))).$on, $q.$$p = (TMP_43 = function(e){var self = TMP_43.$$s || this;
if (e == null) e = nil;
                          return self.$state()['$cap_number_of_shares!'](e.$target().$value())}, TMP_43.$$s = self, TMP_43.$$arity = 1, TMP_43), $q).call($s, "change");}, TMP_41.$$s = self, TMP_41.$$arity = 0, TMP_41), $n).call($p, $hash2(["class"], {"class": "handle small-12 large-6 medium-6 columns"}));}, TMP_37.$$s = self, TMP_37.$$arity = 0, TMP_37), $l).call($m, $hash2(["class"], {"class": "row"}));
                      ($l = ($n = self).$div, $l.$$p = (TMP_44 = function(){var self = TMP_44.$$s || this, $o, $p, TMP_45;

                      return ($o = ($p = self).$div, $o.$$p = (TMP_45 = function(){var self = TMP_45.$$s || this, $q, $r, TMP_46, $s, TMP_47;

                        ($q = ($r = self).$span, $q.$$p = (TMP_46 = function(){var self = TMP_46.$$s || this;

                          return "Price of Shares (N)"}, TMP_46.$$s = self, TMP_46.$$arity = 0, TMP_46), $q).call($r);
                          return ($q = ($s = self.$input($hash2(["class", "type", "placeholder", "value"], {"class": "handle small-12", "type": "text", "placeholder": "Price of Shares (N)", "value": self.$state().$cap_share_price()}))).$on, $q.$$p = (TMP_47 = function(e){var self = TMP_47.$$s || this;
if (e == null) e = nil;
                          return self.$state()['$cap_share_price!'](e.$target().$value())}, TMP_47.$$s = self, TMP_47.$$arity = 1, TMP_47), $q).call($s, "change");}, TMP_45.$$s = self, TMP_45.$$arity = 0, TMP_45), $o).call($p, $hash2(["class"], {"class": "handle small-12 large-6 medium-6 columns"}))}, TMP_44.$$s = self, TMP_44.$$arity = 0, TMP_44), $l).call($n, $hash2(["class"], {"class": "row"}));
                      ($l = ($o = self).$div, $l.$$p = (TMP_48 = function(){var self = TMP_48.$$s || this, $p, $q, TMP_49, $r, TMP_52;

                      ($p = ($q = self).$div, $p.$$p = (TMP_49 = function(){var self = TMP_49.$$s || this, $r, $s, TMP_50, $t, TMP_51;

                        ($r = ($s = self).$span, $r.$$p = (TMP_50 = function(){var self = TMP_50.$$s || this;

                          return "Issued Share Capital"}, TMP_50.$$s = self, TMP_50.$$arity = 0, TMP_50), $r).call($s);
                          return ($r = ($t = self.$input($hash2(["class", "type", "placeholder", "value"], {"class": "handle small-12", "type": "text", "placeholder": "Issued Share Capital", "value": self.$state().$cap_issued_share_capital()}))).$on, $r.$$p = (TMP_51 = function(e){var self = TMP_51.$$s || this;
if (e == null) e = nil;
                          return self.$state()['$cap_issued_share_capital!'](e.$target().$value())}, TMP_51.$$s = self, TMP_51.$$arity = 1, TMP_51), $r).call($t, "change");}, TMP_49.$$s = self, TMP_49.$$arity = 0, TMP_49), $p).call($q, $hash2(["class"], {"class": "handle small-12 large-6 medium-6 columns"}));
                        return ($p = ($r = self).$div, $p.$$p = (TMP_52 = function(){var self = TMP_52.$$s || this, $s, $t, TMP_53, $u, TMP_54;

                        ($s = ($t = self).$span, $s.$$p = (TMP_53 = function(){var self = TMP_53.$$s || this;

                          return "Paid Up Capital"}, TMP_53.$$s = self, TMP_53.$$arity = 0, TMP_53), $s).call($t);
                          return ($s = ($u = self.$input($hash2(["class", "type", "placeholder", "value"], {"class": "handle small-12", "type": "text", "placeholder": "Paid Up Capital", "value": self.$state().$cap_paid_up_capital()}))).$on, $s.$$p = (TMP_54 = function(e){var self = TMP_54.$$s || this;
if (e == null) e = nil;
                          return self.$state()['$cap_paid_up_capital!'](e.$target().$value())}, TMP_54.$$s = self, TMP_54.$$arity = 1, TMP_54), $s).call($u, "change");}, TMP_52.$$s = self, TMP_52.$$arity = 0, TMP_52), $p).call($r, $hash2(["class"], {"class": "handle small-12 large-6 medium-6 columns"}));}, TMP_48.$$s = self, TMP_48.$$arity = 0, TMP_48), $l).call($o, $hash2(["class"], {"class": "row"}));
                      return ($l = ($p = self).$div, $l.$$p = (TMP_55 = function(){var self = TMP_55.$$s || this, $q, $r, TMP_56, $s, $t, TMP_57, TMP_58, $u, $v, TMP_59;

                      ($q = ($r = ($s = ($t = self).$button, $s.$$p = (TMP_57 = function(){var self = TMP_57.$$s || this;

                        return "Save"}, TMP_57.$$s = self, TMP_57.$$arity = 0, TMP_57), $s).call($t, $hash2(["type", "class"], {"type": "button", "class": "btn button action"}))).$on, $q.$$p = (TMP_56 = function(){var self = TMP_56.$$s || this;

                        $scope.get('Store').$add_item("cap_auth_share_capital", self.$state().$cap_auth_share_capital());
                          $scope.get('Store').$add_item("cap_number_of_shares", self.$state().$cap_number_of_shares());
                          $scope.get('Store').$add_item("cap_share_price", self.$state().$cap_share_price());
                          $scope.get('Store').$add_item("cap_issued_share_capital", self.$state().$cap_issued_share_capital());
                          $scope.get('Store').$add_item("cap_paid_up_capital", self.$state().$cap_paid_up_capital());
                          return self.$state()['$capital_update!'](0);}, TMP_56.$$s = self, TMP_56.$$arity = 0, TMP_56), $q).call($r, "click");
                        return ($q = ($s = ($u = ($v = self).$button, $u.$$p = (TMP_59 = function(){var self = TMP_59.$$s || this;

                        return "Cancel"}, TMP_59.$$s = self, TMP_59.$$arity = 0, TMP_59), $u).call($v, $hash2(["type", "class"], {"type": "button", "class": "btn button action inner"}))).$on, $q.$$p = (TMP_58 = function(){var self = TMP_58.$$s || this;

                        return self.$state()['$capital_update!'](0)}, TMP_58.$$s = self, TMP_58.$$arity = 0, TMP_58), $q).call($s, "click");}, TMP_55.$$s = self, TMP_55.$$arity = 0, TMP_55), $l).call($p);}, TMP_36.$$s = self, TMP_36.$$arity = 0, TMP_36), $j).call($k)
                    } else {
                    return nil
                  }}, TMP_35.$$s = self, TMP_35.$$arity = 0, TMP_35), $g).call($i, $hash2(["class"], {"class": "small-12 large-6 medium-6 collapse columns"}));
                return self.$hr($hash2(["class"], {"class": "noborder"}));}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $e).call($f, $hash2(["id", "class"], {"id": "section-pane", "class": "small-12 columns"}))}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $c).call($d, $hash2(["class"], {"class": "small-12 "}))}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($b);
        }, TMP_60.$$arity = 0), nil) && 'render';
      })($scope.base, (((($scope.get('React')).$$scope.get('Component'))).$$scope.get('Base')))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["components/filing/credit"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  return nil
};
/* Generated by Opal 0.10.3 */
Opal.modules["components/filing/display"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$param', '$puts', '$name', '$params', '$value', '$div', '$span', '$on', '$delete_item', '$button']);
  return (function($base, $super) {
    function $DisplayItem(){};
    var self = $DisplayItem = $klass($base, $super, 'DisplayItem', $DisplayItem);

    var def = self.$$proto, $scope = self.$$scope, TMP_4;

    self.$param("name");

    self.$param("value");

    return (Opal.defn(self, '$render', TMP_4 = function $$render() {
      var $a, $b, TMP_1, self = this;

      self.$puts("rerendering " + (self.$params().$name()) + ", " + (self.$params().$value()));
      return ($a = ($b = self).$div, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $c, $d, TMP_2, $e, $f, TMP_3;

      (((("") + (self.$params().$name())) + ": ") + (self.$params().$value())).$span();
        return ($c = ($d = ($e = ($f = self).$button, $e.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

        return "delete!"}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $e).call($f)).$on, $c.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

        return $scope.get('Store').$delete_item(self.$params().$name())}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2), $c).call($d, "click");}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1), $a).call($b);
    }, TMP_4.$$arity = 0), nil) && 'render';
  })($scope.base, (((($scope.get('React')).$$scope.get('Component'))).$$scope.get('Base')))
};
/* Generated by Opal 0.10.3 */
Opal.modules["components/filing/header"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$param', '$before_mount', '$after_mount', '$before_update', '$before_unmount', '$div', '$h2', '$b', '$[]', '$company', '$params', '$p', '$span', '$text', '$br']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Filing, self = $Filing = $module($base, 'Filing');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Header(){};
        var self = $Header = $klass($base, $super, 'Header', $Header);

        var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, $c, TMP_2, $d, TMP_3, $e, TMP_4, TMP_16;

        self.$param("company");

        ($a = ($b = self).$before_mount, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this;

        return nil}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1), $a).call($b);

        ($a = ($c = self).$after_mount, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

        return nil}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2), $a).call($c);

        ($a = ($d = self).$before_update, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

        return nil}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $a).call($d);

        ($a = ($e = self).$before_unmount, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

        return nil}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($e);

        return (Opal.defn(self, '$render', TMP_16 = function $$render() {
          var $a, $b, TMP_5, self = this;

          return ($a = ($b = self).$div, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this, $c, $d, TMP_6;

          return ($c = ($d = self).$div, $c.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this, $e, $f, TMP_7, $g, TMP_9, $h, TMP_12;

            ($e = ($f = self).$h2, $e.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this, $g, $h, TMP_8;

              return ($g = ($h = self).$b, $g.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this;

                return self.$params().$company()['$[]']("name")}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $g).call($h)}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $e).call($f);
              ($e = ($g = self).$p, $e.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this, $h, $i, TMP_10, $j, TMP_11;

              ($h = ($i = self).$b, $h.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this;

                return "Registered Company Number:"}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10), $h).call($i);
                return ($h = ($j = self).$span, $h.$$p = (TMP_11 = function(){var self = TMP_11.$$s || this;

                return self.$params().$company()['$[]']("rc_number")}, TMP_11.$$s = self, TMP_11.$$arity = 0, TMP_11), $h).call($j);}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $e).call($g);
              return ($e = ($h = self).$p, $e.$$p = (TMP_12 = function(){var self = TMP_12.$$s || this, $i, $j, TMP_13, $k, TMP_14, $l, TMP_15;

              $scope.get('A');
                ($i = ($j = self).$span, $i.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this;

                return "Private Limited Company "}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13), $i).call($j);
                ($i = ($k = self).$text, $i.$$p = (TMP_14 = function(){var self = TMP_14.$$s || this;

                return "incorporated on "}, TMP_14.$$s = self, TMP_14.$$arity = 0, TMP_14), $i).call($k);
                ($i = ($l = self).$span, $i.$$p = (TMP_15 = function(){var self = TMP_15.$$s || this;

                return "4 July 2003"}, TMP_15.$$s = self, TMP_15.$$arity = 0, TMP_15), $i).call($l);
                return self.$br();}, TMP_12.$$s = self, TMP_12.$$arity = 0, TMP_12), $e).call($h);}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $c).call($d, $hash2(["class"], {"class": "small-12 columns"}))}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($b, $hash2(["class"], {"class": "mainHeader"}));
        }, TMP_16.$$arity = 0), nil) && 'render';
      })($scope.base, (((($scope.get('React')).$$scope.get('Component'))).$$scope.get('Base')))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["components/filing/incoming"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$param', '$before_mount', '$after_mount', '$before_update', '$before_unmount', '$div', '$rrr', '$params', '$orderId']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Filing, self = $Filing = $module($base, 'Filing');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Incoming(){};
        var self = $Incoming = $klass($base, $super, 'Incoming', $Incoming);

        var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, $c, TMP_2, $d, TMP_3, $e, TMP_4, TMP_6;

        self.$param("rrr");

        self.$param("orderId");

        ($a = ($b = self).$before_mount, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this;

        return nil}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1), $a).call($b);

        ($a = ($c = self).$after_mount, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

        return nil}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2), $a).call($c);

        ($a = ($d = self).$before_update, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

        return nil}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $a).call($d);

        ($a = ($e = self).$before_unmount, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

        return nil}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($e);

        return (Opal.defn(self, '$render', TMP_6 = function $$render() {
          var $a, $b, TMP_5, self = this;

          return ($a = ($b = self).$div, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

          return "Filing::Incoming " + (self.$params().$rrr()) + " - " + (self.$params().$orderId())}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($b);
        }, TMP_6.$$arity = 0), nil) && 'render';
      })($scope.base, (((($scope.get('React')).$$scope.get('Component'))).$$scope.get('Base')))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["components/filing/location"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$present?', '$sit_address', '$state', '$sit_city', '$sit_state', '$param', '$before_mount', '$location_update!', '$sit_address!', '$retrieve_item', '$sit_address_2!', '$sit_city!', '$sit_state!', '$after_mount', '$before_update', '$before_unmount', '$div', '$==', '$location_update', '$on', '$button', '$p', '$[]', '$company', '$params', '$span', '$br', '$hr', '$b', '$sit_address_2', '$text', '$value', '$target', '$input', '$valid_situation_input?', '$add_item', '$h3']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Filing, self = $Filing = $module($base, 'Filing');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Location(){};
        var self = $Location = $klass($base, $super, 'Location', $Location);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, $b, TMP_2, $c, TMP_3, $d, TMP_4, $e, TMP_5, TMP_52;

        Opal.defn(self, '$valid_situation_input?', TMP_1 = function() {
          var $a, $b, self = this;

          return ($a = ($b = self.$state().$sit_address()['$present?'](), $b !== false && $b !== nil && $b != null ?self.$state().$sit_city()['$present?']() : $b), $a !== false && $a !== nil && $a != null ?self.$state().$sit_state()['$present?']() : $a);
        }, TMP_1.$$arity = 0);

        self.$param("company");

        ($a = ($b = self).$before_mount, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

        self.$state()['$location_update!'](0);
          self.$state()['$sit_address!']($scope.get('Store').$retrieve_item("sit_address"));
          self.$state()['$sit_address_2!']($scope.get('Store').$retrieve_item("sit_address_2"));
          self.$state()['$sit_city!']($scope.get('Store').$retrieve_item("sit_city"));
          return self.$state()['$sit_state!']($scope.get('Store').$retrieve_item("sit_state"));}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2), $a).call($b);

        ($a = ($c = self).$after_mount, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

        return nil}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $a).call($c);

        ($a = ($d = self).$before_update, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

        return nil}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($d);

        ($a = ($e = self).$before_unmount, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

        return nil}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($e);

        return (Opal.defn(self, '$render', TMP_52 = function $$render() {
          var $a, $b, TMP_6, self = this;

          return ($a = ($b = self).$div, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this, $c, $d, TMP_7;

          return ($c = ($d = self).$div, $c.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this, $e, $f, TMP_8;

            return ($e = ($f = self).$div, $e.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this, $g, $h, TMP_9, $i, TMP_35, $j, TMP_49;

              ($g = ($h = self).$div, $g.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this, $i, $j, TMP_10, $k, $l, TMP_11, TMP_12, $m, TMP_13, $n, TMP_24, $o, TMP_25, $p, TMP_26, $q, TMP_27, $r, TMP_28, $s, TMP_29, $t, TMP_30, $u, TMP_31, $v, TMP_32, $w, TMP_33, $x, TMP_34;

                if ((($i = (self.$state().$location_update()['$=='](0))) !== nil && $i != null && (!$i.$$is_boolean || $i == true))) {
                    ($i = ($j = ($k = ($l = self).$button, $k.$$p = (TMP_11 = function(){var self = TMP_11.$$s || this;

                    return "Update Situation"}, TMP_11.$$s = self, TMP_11.$$arity = 0, TMP_11), $k).call($l, $hash2(["type", "class"], {"type": "button", "class": "btn button action inner"}))).$on, $i.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this;

                    return self.$state()['$location_update!'](1)}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10), $i).call($j, "click")};
                  ($i = ($k = self).$p, $i.$$p = (TMP_12 = function(){var self = TMP_12.$$s || this;

                  return "Situation of Registers of Members & Debenture Holders (or any part of such registers) if other than the registered\noffice of the company"}, TMP_12.$$s = self, TMP_12.$$arity = 0, TMP_12), $i).call($k);
                  ($i = ($m = self).$p, $i.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this, $n, $o, TMP_14, $p, TMP_15, $q, TMP_16, $r, TMP_17, $s, TMP_18, $t, TMP_19, $u, TMP_20, $v, TMP_21, $w, TMP_22, $x, TMP_23;

                  if ((($n = (self.$params().$company()['$[]']("situation_address")['$present?']())) !== nil && $n != null && (!$n.$$is_boolean || $n == true))) {
                      ($n = ($o = self).$span, $n.$$p = (TMP_14 = function(){var self = TMP_14.$$s || this;

                      return self.$params().$company()['$[]']("name")}, TMP_14.$$s = self, TMP_14.$$arity = 0, TMP_14), $n).call($o);
                      self.$br();
                      ($n = ($p = self).$span, $n.$$p = (TMP_15 = function(){var self = TMP_15.$$s || this;

                      return self.$params().$company()['$[]']("situation_address")}, TMP_15.$$s = self, TMP_15.$$arity = 0, TMP_15), $n).call($p);
                      if ((($n = (self.$params().$company()['$[]']("situation_address_2")['$present?']())) !== nil && $n != null && (!$n.$$is_boolean || $n == true))) {
                        self.$br();
                        ($n = ($q = self).$span, $n.$$p = (TMP_16 = function(){var self = TMP_16.$$s || this;

                        return self.$params().$company()['$[]']("situation_address_2")}, TMP_16.$$s = self, TMP_16.$$arity = 0, TMP_16), $n).call($q);};
                      self.$br();
                      ($n = ($r = self).$span, $n.$$p = (TMP_17 = function(){var self = TMP_17.$$s || this;

                      return self.$params().$company()['$[]']("situation_city")}, TMP_17.$$s = self, TMP_17.$$arity = 0, TMP_17), $n).call($r);
                      self.$br();
                      return ($n = ($s = self).$span, $n.$$p = (TMP_18 = function(){var self = TMP_18.$$s || this;

                      return self.$params().$company()['$[]']("situation_state")}, TMP_18.$$s = self, TMP_18.$$arity = 0, TMP_18), $n).call($s);
                      } else {
                      ($n = ($t = self).$span, $n.$$p = (TMP_19 = function(){var self = TMP_19.$$s || this;

                      return self.$params().$company()['$[]']("name")}, TMP_19.$$s = self, TMP_19.$$arity = 0, TMP_19), $n).call($t);
                      self.$br();
                      ($n = ($u = self).$span, $n.$$p = (TMP_20 = function(){var self = TMP_20.$$s || this;

                      return self.$params().$company()['$[]']("registered_office_address")}, TMP_20.$$s = self, TMP_20.$$arity = 0, TMP_20), $n).call($u);
                      if ((($n = (self.$params().$company()['$[]']("registered_office_address_2")['$present?']())) !== nil && $n != null && (!$n.$$is_boolean || $n == true))) {
                        self.$br();
                        ($n = ($v = self).$span, $n.$$p = (TMP_21 = function(){var self = TMP_21.$$s || this;

                        return self.$params().$company()['$[]']("registered_office_address_2")}, TMP_21.$$s = self, TMP_21.$$arity = 0, TMP_21), $n).call($v);};
                      self.$br();
                      ($n = ($w = self).$span, $n.$$p = (TMP_22 = function(){var self = TMP_22.$$s || this;

                      return self.$params().$company()['$[]']("registered_office_city")}, TMP_22.$$s = self, TMP_22.$$arity = 0, TMP_22), $n).call($w);
                      self.$br();
                      return ($n = ($x = self).$span, $n.$$p = (TMP_23 = function(){var self = TMP_23.$$s || this;

                      return self.$params().$company()['$[]']("registered_office_state")}, TMP_23.$$s = self, TMP_23.$$arity = 0, TMP_23), $n).call($x);
                    }}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13), $i).call($m);
                  if ((($i = (((($n = self.$state().$location_update()['$=='](1)) !== false && $n !== nil && $n != null) ? $n : self.$state().$sit_address()['$present?']()))) !== nil && $i != null && (!$i.$$is_boolean || $i == true))) {
                    self.$hr();
                    ($i = ($n = self).$b, $i.$$p = (TMP_24 = function(){var self = TMP_24.$$s || this;

                    return "New Situation Address"}, TMP_24.$$s = self, TMP_24.$$arity = 0, TMP_24), $i).call($n);
                    self.$br();
                    ($i = ($o = self).$span, $i.$$p = (TMP_25 = function(){var self = TMP_25.$$s || this;

                    return self.$state().$sit_address()}, TMP_25.$$s = self, TMP_25.$$arity = 0, TMP_25), $i).call($o);
                    if ((($i = (self.$state().$sit_address_2()['$present?']())) !== nil && $i != null && (!$i.$$is_boolean || $i == true))) {
                      self.$br();
                      ($i = ($p = self).$span, $i.$$p = (TMP_26 = function(){var self = TMP_26.$$s || this;

                      return self.$state().$sit_address_2()}, TMP_26.$$s = self, TMP_26.$$arity = 0, TMP_26), $i).call($p);};
                    self.$br();
                    ($i = ($q = self).$span, $i.$$p = (TMP_27 = function(){var self = TMP_27.$$s || this;

                    return self.$state().$sit_city()}, TMP_27.$$s = self, TMP_27.$$arity = 0, TMP_27), $i).call($q);
                    self.$br();
                    ($i = ($r = self).$span, $i.$$p = (TMP_28 = function(){var self = TMP_28.$$s || this;

                    return self.$state().$sit_state()}, TMP_28.$$s = self, TMP_28.$$arity = 0, TMP_28), $i).call($r);
                  } else if ((($i = ($scope.get('Store').$retrieve_item("reg_address")['$present?']())) !== nil && $i != null && (!$i.$$is_boolean || $i == true))) {
                    self.$hr();
                    ($i = ($s = self).$b, $i.$$p = (TMP_29 = function(){var self = TMP_29.$$s || this;

                    return "UPDATED TO NEW REGISTERED ADDRESS"}, TMP_29.$$s = self, TMP_29.$$arity = 0, TMP_29), $i).call($s);
                    self.$br();
                    ($i = ($t = self).$span, $i.$$p = (TMP_30 = function(){var self = TMP_30.$$s || this;

                    return self.$params().$company()['$[]']("name")}, TMP_30.$$s = self, TMP_30.$$arity = 0, TMP_30), $i).call($t);
                    self.$br();
                    ($i = ($u = self).$span, $i.$$p = (TMP_31 = function(){var self = TMP_31.$$s || this;

                    return $scope.get('Store').$retrieve_item("reg_address")}, TMP_31.$$s = self, TMP_31.$$arity = 0, TMP_31), $i).call($u);
                    if ((($i = ($scope.get('Store').$retrieve_item("reg_address_2")['$present?']())) !== nil && $i != null && (!$i.$$is_boolean || $i == true))) {
                      self.$br();
                      ($i = ($v = self).$span, $i.$$p = (TMP_32 = function(){var self = TMP_32.$$s || this;

                      return $scope.get('Store').$retrieve_item("reg_address_2")}, TMP_32.$$s = self, TMP_32.$$arity = 0, TMP_32), $i).call($v);};
                    self.$br();
                    ($i = ($w = self).$span, $i.$$p = (TMP_33 = function(){var self = TMP_33.$$s || this;

                    return $scope.get('Store').$retrieve_item("reg_city")}, TMP_33.$$s = self, TMP_33.$$arity = 0, TMP_33), $i).call($w);
                    self.$br();
                    ($i = ($x = self).$span, $i.$$p = (TMP_34 = function(){var self = TMP_34.$$s || this;

                    return $scope.get('Store').$retrieve_item("reg_state")}, TMP_34.$$s = self, TMP_34.$$arity = 0, TMP_34), $i).call($x);};
                  return self.$hr($hash2(["class"], {"class": "noborder"}));}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $g).call($h, $hash2(["class"], {"class": "small-12 large-4 medium-4 collapse columns"}));
                ($g = ($i = self).$div, $g.$$p = (TMP_35 = function(){var self = TMP_35.$$s || this, $j, $k, TMP_36;

                if ((($j = (self.$state().$location_update()['$=='](1))) !== nil && $j != null && (!$j.$$is_boolean || $j == true))) {
                    return ($j = ($k = self).$div, $j.$$p = (TMP_36 = function(){var self = TMP_36.$$s || this, $l, $m, TMP_37, $n, TMP_38, $o, TMP_39, $p, TMP_40, $q, TMP_41, $r, TMP_42, $s, TMP_43, $t, TMP_44;

                    ($l = ($m = self).$text, $l.$$p = (TMP_37 = function(){var self = TMP_37.$$s || this;

                      return "Situation Address"}, TMP_37.$$s = self, TMP_37.$$arity = 0, TMP_37), $l).call($m);
                      ($l = ($n = self.$input($hash2(["class", "type", "placeholder", "value"], {"class": "handle", "type": "text", "placeholder": "Situation Address", "value": self.$state().$sit_address()}))).$on, $l.$$p = (TMP_38 = function(e){var self = TMP_38.$$s || this;
if (e == null) e = nil;
                      return self.$state()['$sit_address!'](e.$target().$value())}, TMP_38.$$s = self, TMP_38.$$arity = 1, TMP_38), $l).call($n, "change");
                      ($l = ($o = self.$input($hash2(["class", "type", "placeholder", "value"], {"class": "handle", "type": "text", "placeholder": "Situation Address 2", "value": self.$state().$sit_address_2()}))).$on, $l.$$p = (TMP_39 = function(e){var self = TMP_39.$$s || this;
if (e == null) e = nil;
                      return self.$state()['$sit_address_2!'](e.$target().$value())}, TMP_39.$$s = self, TMP_39.$$arity = 1, TMP_39), $l).call($o, "change");
                      ($l = ($p = self).$text, $l.$$p = (TMP_40 = function(){var self = TMP_40.$$s || this;

                      return "Situation City"}, TMP_40.$$s = self, TMP_40.$$arity = 0, TMP_40), $l).call($p);
                      ($l = ($q = self.$input($hash2(["class", "type", "placeholder", "value"], {"class": "handle", "type": "text", "placeholder": "Situation City", "value": self.$state().$sit_city()}))).$on, $l.$$p = (TMP_41 = function(e){var self = TMP_41.$$s || this;
if (e == null) e = nil;
                      return self.$state()['$sit_city!'](e.$target().$value())}, TMP_41.$$s = self, TMP_41.$$arity = 1, TMP_41), $l).call($q, "change");
                      ($l = ($r = self).$text, $l.$$p = (TMP_42 = function(){var self = TMP_42.$$s || this;

                      return "Situation State"}, TMP_42.$$s = self, TMP_42.$$arity = 0, TMP_42), $l).call($r);
                      ($l = ($s = self.$input($hash2(["class", "type", "placeholder", "value"], {"class": "handle", "type": "text", "placeholder": "Situation State", "value": self.$state().$sit_state()}))).$on, $l.$$p = (TMP_43 = function(e){var self = TMP_43.$$s || this;
if (e == null) e = nil;
                      return self.$state()['$sit_state!'](e.$target().$value())}, TMP_43.$$s = self, TMP_43.$$arity = 1, TMP_43), $l).call($s, "change");
                      return ($l = ($t = self).$div, $l.$$p = (TMP_44 = function(){var self = TMP_44.$$s || this, $u, $v, TMP_45, $w, $x, TMP_46, TMP_47, $y, $z, TMP_48;

                      if ((($u = self['$valid_situation_input?']()) !== nil && $u != null && (!$u.$$is_boolean || $u == true))) {
                          ($u = ($v = ($w = ($x = self).$button, $w.$$p = (TMP_46 = function(){var self = TMP_46.$$s || this;

                          return "Save"}, TMP_46.$$s = self, TMP_46.$$arity = 0, TMP_46), $w).call($x, $hash2(["type", "class"], {"type": "button", "class": "btn button action"}))).$on, $u.$$p = (TMP_45 = function(){var self = TMP_45.$$s || this;

                          $scope.get('Store').$add_item("sit_address", self.$state().$sit_address());
                            $scope.get('Store').$add_item("sit_address_2", self.$state().$sit_address_2());
                            $scope.get('Store').$add_item("sit_city", self.$state().$sit_city());
                            $scope.get('Store').$add_item("sit_state", self.$state().$sit_state());
                            return self.$state()['$location_update!'](0);}, TMP_45.$$s = self, TMP_45.$$arity = 0, TMP_45), $u).call($v, "click")};
                        return ($u = ($w = ($y = ($z = self).$button, $y.$$p = (TMP_48 = function(){var self = TMP_48.$$s || this;

                        return "Discard"}, TMP_48.$$s = self, TMP_48.$$arity = 0, TMP_48), $y).call($z, $hash2(["type", "class"], {"type": "button", "class": "btn button action inner"}))).$on, $u.$$p = (TMP_47 = function(){var self = TMP_47.$$s || this;

                        return self.$state()['$location_update!'](0)}, TMP_47.$$s = self, TMP_47.$$arity = 0, TMP_47), $u).call($w, "click");}, TMP_44.$$s = self, TMP_44.$$arity = 0, TMP_44), $l).call($t);}, TMP_36.$$s = self, TMP_36.$$arity = 0, TMP_36), $j).call($k)
                    } else {
                    return nil
                  }}, TMP_35.$$s = self, TMP_35.$$arity = 0, TMP_35), $g).call($i, $hash2(["class"], {"class": "small-12 large-4 medium-4 collapse columns"}));
                return ($g = ($j = self).$div, $g.$$p = (TMP_49 = function(){var self = TMP_49.$$s || this, $k, $l, TMP_50;

                return ($k = ($l = self).$div, $k.$$p = (TMP_50 = function(){var self = TMP_50.$$s || this, $m, $n, TMP_51;

                  return ($m = ($n = self).$h3, $m.$$p = (TMP_51 = function(){var self = TMP_51.$$s || this;

                    return "Help"}, TMP_51.$$s = self, TMP_51.$$arity = 0, TMP_51), $m).call($n).$b()}, TMP_50.$$s = self, TMP_50.$$arity = 0, TMP_50), $k).call($l, $hash2(["style"], {"style": $hash2(["background"], {"background": "orange"})}))}, TMP_49.$$s = self, TMP_49.$$arity = 0, TMP_49), $g).call($j, $hash2(["class"], {"class": "small-12 large-4 medium-4 collapse columns"}));}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $e).call($f, $hash2(["id", "class"], {"id": "section-pane", "class": "small-12 columns"}))}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $c).call($d, $hash2(["class"], {"class": "small-12 "}))}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($b);
        }, TMP_52.$$arity = 0), nil) && 'render';
      })($scope.base, (((($scope.get('React')).$$scope.get('Component'))).$$scope.get('Base')))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["components/filing/main"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$param', '$step!', '$state', '$before_mount', '$after_mount', '$before_update', '$before_unmount', '$div', '$hr', '$<', '$step', '$on', '$+', '$add_item', '$retrieve_item', '$button', '$>', '$-', '$===', '$Address', '$company', '$params', '$Location', '$Officers', '$officers', '$countries', '$Capital', '$Shareholders', '$shareholders', '$Submit', '$to_proc', '$method', '$Remita']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Filing, self = $Filing = $module($base, 'Filing');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Main(){};
        var self = $Main = $klass($base, $super, 'Main', $Main);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, $b, TMP_2, $c, TMP_3, $d, TMP_4, $e, TMP_5, TMP_13;

        self.$param("company");

        self.$param("officers");

        self.$param("shareholders");

        self.$param("countries");

        Opal.defn(self, '$stepper', TMP_1 = function $$stepper(val) {
          var self = this;

          return self.$state()['$step!'](val);
        }, TMP_1.$$arity = 1);

        ($a = ($b = self).$before_mount, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

        return self.$state()['$step!'](1)}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2), $a).call($b);

        ($a = ($c = self).$after_mount, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

        return nil}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $a).call($c);

        ($a = ($d = self).$before_update, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

        return nil}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($d);

        ($a = ($e = self).$before_unmount, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

        return nil}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($e);

        return (Opal.defn(self, '$render', TMP_13 = function $$render() {
          var $a, $b, TMP_6, self = this;

          return ($a = ($b = self).$div, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this, $c, $d, TMP_7, $e, $f, TMP_8, TMP_9, $g, $h, TMP_10, TMP_11, $i, $j, TMP_12, $case = nil;

          self.$hr($hash2(["class"], {"class": "noborder"}));
            if ((($c = ($rb_lt(self.$state().$step(), 6))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              ($c = ($d = ($e = ($f = self).$button, $e.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this;

              return "Next"}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $e).call($f, $hash2(["type", "class"], {"type": "button", "class": "btn button action right"}))).$on, $c.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this;

              self.$state()['$step!']($rb_plus(self.$state().$step(), 1));
                return $scope.get('Store').$add_item("step", ($rb_plus($scope.get('Store').$retrieve_item("step"), 1)));}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $c).call($d, "click")};
            if ((($c = ($rb_gt(self.$state().$step(), 1))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              ($c = ($e = ($g = ($h = self).$button, $g.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this;

              return "Back"}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10), $g).call($h, $hash2(["type", "class"], {"type": "button", "class": "btn button action right"}))).$on, $c.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this;

              self.$state()['$step!']($rb_minus(self.$state().$step(), 1));
                return $scope.get('Store').$add_item("step", ($rb_minus($scope.get('Store').$retrieve_item("step"), 1)));}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $c).call($e, "click")};
            ($c = ($g = ($i = ($j = self).$button, $i.$$p = (TMP_12 = function(){var self = TMP_12.$$s || this;

            return "Cancel"}, TMP_12.$$s = self, TMP_12.$$arity = 0, TMP_12), $i).call($j, $hash2(["type", "class"], {"type": "button", "class": "btn button alert right"}))).$on, $c.$$p = (TMP_11 = function(){var self = TMP_11.$$s || this;

            return window.location = "/";}, TMP_11.$$s = self, TMP_11.$$arity = 0, TMP_11), $c).call($g, "click");
            self.$hr($hash2(["class"], {"class": "noborder"}));
            return (function() {$case = self.$state().$step();if ((1)['$===']($case)) {return self.$Address($hash2(["company"], {"company": self.$params().$company()}))}else if ((2)['$===']($case)) {return self.$Location($hash2(["company"], {"company": self.$params().$company()}))}else if ((3)['$===']($case)) {return self.$Officers($hash2(["company", "officers", "countries"], {"company": self.$params().$company(), "officers": self.$params().$officers(), "countries": self.$params().$countries()}))}else if ((4)['$===']($case)) {return self.$Capital($hash2(["company"], {"company": self.$params().$company()}))}else if ((5)['$===']($case)) {return self.$Shareholders($hash2(["company", "shareholders"], {"company": self.$params().$company(), "shareholders": self.$params().$shareholders()}))}else if ((6)['$===']($case)) {return self.$Submit($hash2(["stepper", "company"], {"stepper": self.$method("stepper").$to_proc(), "company": self.$params().$company()}))}else if ((7)['$===']($case)) {return self.$Remita()}else {return self.$Address()}})();}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($b);
        }, TMP_13.$$arity = 0), nil) && 'render';
      })($scope.base, (((($scope.get('React')).$$scope.get('Component'))).$$scope.get('Base')))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["components/filing/nav"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$==', '$retrieve_item', '$>', '$+', '$before_mount', '$after_mount', '$before_update', '$before_unmount', '$div', '$a', '$span', '$text', '$component_class', '$br']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Filing, self = $Filing = $module($base, 'Filing');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Nav(){};
        var self = $Nav = $klass($base, $super, 'Nav', $Nav);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, $b, TMP_2, $c, TMP_3, $d, TMP_4, $e, TMP_5, TMP_33;

        Opal.defn(self, '$component_class', TMP_1 = function $$component_class(level) {
          var $a, self = this, c = nil, d = nil, e = nil;

          c = (function() {if ((($a = ($scope.get('Store').$retrieve_item("step")['$=='](level))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return "active-step"
            } else {
            return ""
          }; return nil; })();
          d = (function() {if ((($a = ($rb_gt($scope.get('Store').$retrieve_item("step"), level))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return "completed-step"
            } else {
            return ""
          }; return nil; })();
          return e = $rb_plus($rb_plus(c, " "), d);
        }, TMP_1.$$arity = 1);

        ($a = ($b = self).$before_mount, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

        return nil}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2), $a).call($b);

        ($a = ($c = self).$after_mount, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

        return nil}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $a).call($c);

        ($a = ($d = self).$before_update, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

        return nil}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($d);

        ($a = ($e = self).$before_unmount, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

        return nil}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($e);

        return (Opal.defn(self, '$render', TMP_33 = function $$render() {
          var $a, $b, TMP_6, self = this;

          return ($a = ($b = self).$div, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this, $c, $d, TMP_7;

          ($c = ($d = self).$div, $c.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this, $e, $f, TMP_8;

            return ($e = ($f = self).$div, $e.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this, $g, $h, TMP_9, $i, TMP_13, $j, TMP_17, $k, TMP_21, $l, TMP_25, $m, TMP_29;

              ($g = ($h = self).$div, $g.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this, $i, $j, TMP_10;

                return ($i = ($j = self).$a, $i.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this, $k, $l, TMP_11, $m, TMP_12;

                  ($k = ($l = self).$span, $k.$$p = (TMP_11 = function(){var self = TMP_11.$$s || this;

                    return "1"}, TMP_11.$$s = self, TMP_11.$$arity = 0, TMP_11), $k).call($l);
                    return ($k = ($m = self).$text, $k.$$p = (TMP_12 = function(){var self = TMP_12.$$s || this;

                    return "Registered Address"}, TMP_12.$$s = self, TMP_12.$$arity = 0, TMP_12), $k).call($m);}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10), $i).call($j, $hash2(["class"], {"class": "nothing"}))}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $g).call($h, $hash2(["class"], {"class": self.$component_class(0)}));
                ($g = ($i = self).$div, $g.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this, $j, $k, TMP_14;

                return ($j = ($k = self).$a, $j.$$p = (TMP_14 = function(){var self = TMP_14.$$s || this, $l, $m, TMP_15, $n, TMP_16;

                  ($l = ($m = self).$span, $l.$$p = (TMP_15 = function(){var self = TMP_15.$$s || this;

                    return "2"}, TMP_15.$$s = self, TMP_15.$$arity = 0, TMP_15), $l).call($m);
                    return ($l = ($n = self).$text, $l.$$p = (TMP_16 = function(){var self = TMP_16.$$s || this;

                    return "Situation"}, TMP_16.$$s = self, TMP_16.$$arity = 0, TMP_16), $l).call($n);}, TMP_14.$$s = self, TMP_14.$$arity = 0, TMP_14), $j).call($k, $hash2(["class"], {"class": "nothing"}))}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13), $g).call($i, $hash2(["class"], {"class": self.$component_class(1)}));
                ($g = ($j = self).$div, $g.$$p = (TMP_17 = function(){var self = TMP_17.$$s || this, $k, $l, TMP_18;

                return ($k = ($l = self).$a, $k.$$p = (TMP_18 = function(){var self = TMP_18.$$s || this, $m, $n, TMP_19, $o, TMP_20;

                  ($m = ($n = self).$span, $m.$$p = (TMP_19 = function(){var self = TMP_19.$$s || this;

                    return "3"}, TMP_19.$$s = self, TMP_19.$$arity = 0, TMP_19), $m).call($n);
                    return ($m = ($o = self).$text, $m.$$p = (TMP_20 = function(){var self = TMP_20.$$s || this;

                    return "Officers"}, TMP_20.$$s = self, TMP_20.$$arity = 0, TMP_20), $m).call($o);}, TMP_18.$$s = self, TMP_18.$$arity = 0, TMP_18), $k).call($l, $hash2(["class"], {"class": "nothing"}))}, TMP_17.$$s = self, TMP_17.$$arity = 0, TMP_17), $g).call($j, $hash2(["class"], {"class": self.$component_class(2)}));
                ($g = ($k = self).$div, $g.$$p = (TMP_21 = function(){var self = TMP_21.$$s || this, $l, $m, TMP_22;

                return ($l = ($m = self).$a, $l.$$p = (TMP_22 = function(){var self = TMP_22.$$s || this, $n, $o, TMP_23, $p, TMP_24;

                  ($n = ($o = self).$span, $n.$$p = (TMP_23 = function(){var self = TMP_23.$$s || this;

                    return "4"}, TMP_23.$$s = self, TMP_23.$$arity = 0, TMP_23), $n).call($o);
                    return ($n = ($p = self).$text, $n.$$p = (TMP_24 = function(){var self = TMP_24.$$s || this;

                    return "Capital"}, TMP_24.$$s = self, TMP_24.$$arity = 0, TMP_24), $n).call($p);}, TMP_22.$$s = self, TMP_22.$$arity = 0, TMP_22), $l).call($m, $hash2(["class"], {"class": "nothing"}))}, TMP_21.$$s = self, TMP_21.$$arity = 0, TMP_21), $g).call($k, $hash2(["class"], {"class": self.$component_class(3)}));
                ($g = ($l = self).$div, $g.$$p = (TMP_25 = function(){var self = TMP_25.$$s || this, $m, $n, TMP_26;

                return ($m = ($n = self).$a, $m.$$p = (TMP_26 = function(){var self = TMP_26.$$s || this, $o, $p, TMP_27, $q, TMP_28;

                  ($o = ($p = self).$span, $o.$$p = (TMP_27 = function(){var self = TMP_27.$$s || this;

                    return "5"}, TMP_27.$$s = self, TMP_27.$$arity = 0, TMP_27), $o).call($p);
                    return ($o = ($q = self).$text, $o.$$p = (TMP_28 = function(){var self = TMP_28.$$s || this;

                    return "Shareholders"}, TMP_28.$$s = self, TMP_28.$$arity = 0, TMP_28), $o).call($q);}, TMP_26.$$s = self, TMP_26.$$arity = 0, TMP_26), $m).call($n, $hash2(["class"], {"class": "nothing"}))}, TMP_25.$$s = self, TMP_25.$$arity = 0, TMP_25), $g).call($l, $hash2(["class"], {"class": self.$component_class(4)}));
                return ($g = ($m = self).$div, $g.$$p = (TMP_29 = function(){var self = TMP_29.$$s || this, $n, $o, TMP_30;

                return ($n = ($o = self).$a, $n.$$p = (TMP_30 = function(){var self = TMP_30.$$s || this, $p, $q, TMP_31, $r, TMP_32;

                  ($p = ($q = self).$span, $p.$$p = (TMP_31 = function(){var self = TMP_31.$$s || this;

                    return "6"}, TMP_31.$$s = self, TMP_31.$$arity = 0, TMP_31), $p).call($q);
                    return ($p = ($r = self).$text, $p.$$p = (TMP_32 = function(){var self = TMP_32.$$s || this;

                    return "Submit"}, TMP_32.$$s = self, TMP_32.$$arity = 0, TMP_32), $p).call($r);}, TMP_30.$$s = self, TMP_30.$$arity = 0, TMP_30), $n).call($o, $hash2(["class"], {"class": "nothing"}))}, TMP_29.$$s = self, TMP_29.$$arity = 0, TMP_29), $g).call($m, $hash2(["class"], {"class": self.$component_class(5)}));}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $e).call($f, $hash2(["class"], {"class": "wizard-steps"}))}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $c).call($d);
            return self.$br();}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($b, $hash2(["class"], {"class": "nav"}));
        }, TMP_33.$$arity = 0), nil) && 'render';
      })($scope.base, (((($scope.get('React')).$$scope.get('Component'))).$$scope.get('Base')))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["components/filing/officers"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$param', '$before_mount', '$add_officer!', '$state', '$officers!', '$retrieve_item', '$tmp_surname!', '$tmp_fname!', '$tmp_oname!', '$tmp_address!', '$tmp_address2!', '$tmp_nationality!', '$tmp_city!', '$tmp_state!', '$tmp_country!', '$tmp_email!', '$tmp_pod!', '$tmp_dob!', '$tmp_tel_number!', '$tmp_occupation!', '$tmp_role!', '$tmp_state_array!', '$after_mount', '$before_update', '$before_unmount', '$div', '$==', '$add_officer', '$on', '$button', '$br', '$hr', '$h5', '$span', '$value', '$target', '$input', '$select', '$option', '$tmp_pob!', '$[]=', '$post', '$json', '$each', '$countries', '$params', '$tmp_state_array', '$textarea', '$new', '$tmp_surname', '$tmp_fname', '$tmp_oname', '$tmp_nationality', '$tmp_dob', '$tmp_tel_number', '$tmp_address', '$tmp_city', '$tmp_state', '$tmp_country', '$tmp_email', '$tmp_occupation', '$tmp_pod', '$tmp_role', '$<<', '$add_item', '$officers', '$ol', '$li', '$upcase', '$[]', '$text', '$present?', '$address_update', '$!', '$empty?', '$surname', '$first_name', '$other_names', '$role', '$nationality', '$dob', '$residential_address', '$residential_address_2', '$residential_address_city', '$residential_address_pob', '$residential_address_state', '$residential_address_country', '$email', '$occupation', '$tel_number', '$particulars_of_other_directorship']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Filing, self = $Filing = $module($base, 'Filing');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Officers(){};
        var self = $Officers = $klass($base, $super, 'Officers', $Officers);

        var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, TMP_2, $c, TMP_3, $d, TMP_4, $e, TMP_5, TMP_164;

        self.$param("company");

        self.$param("officers");

        self.$param("countries");

        ($a = ($b = self).$before_mount, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $c;

        self.$state()['$add_officer!'](0);
          self.$state()['$officers!'](((($c = $scope.get('Store').$retrieve_item("officers")) !== false && $c !== nil && $c != null) ? $c : []));
          self.$state()['$tmp_surname!']("");
          self.$state()['$tmp_fname!']("");
          self.$state()['$tmp_oname!']("");
          self.$state()['$tmp_address!']("");
          self.$state()['$tmp_address2!']("");
          self.$state()['$tmp_nationality!']("");
          self.$state()['$tmp_city!']("");
          self.$state()['$tmp_state!']("");
          self.$state()['$tmp_country!']("");
          self.$state()['$tmp_email!']("");
          self.$state()['$tmp_pod!']("");
          self.$state()['$tmp_dob!'](new Date());
          self.$state()['$tmp_tel_number!']("");
          self.$state()['$tmp_occupation!']("");
          self.$state()['$tmp_role!']("");
          return self.$state()['$tmp_state_array!']([]);}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1), $a).call($b);

        Opal.defn(self, '$handleChange!', TMP_2 = function(date) {
          var self = this;

          return self.$state()['$tmp_dob!'](date);
        }, TMP_2.$$arity = 1);

        ($a = ($c = self).$after_mount, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

        return nil}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $a).call($c);

        ($a = ($d = self).$before_update, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

        return nil}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($d);

        ($a = ($e = self).$before_unmount, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

        return nil}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($e);

        return (Opal.defn(self, '$render', TMP_164 = function $$render() {
          var $a, $b, TMP_6, self = this;

          return ($a = ($b = self).$div, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this, $c, $d, TMP_7;

          return ($c = ($d = self).$div, $c.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this, $e, $f, TMP_8;

            return ($e = ($f = self).$div, $e.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this, $g, $h, TMP_9, $i, TMP_13, $j, TMP_86, $k, TMP_125;

              ($g = ($h = self).$div, $g.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this, $i, $j, TMP_10;

                return ($i = ($j = self).$div, $i.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this, $k, $l, TMP_11, $m, $n, TMP_12;

                  if ((($k = (self.$state().$add_officer()['$=='](0))) !== nil && $k != null && (!$k.$$is_boolean || $k == true))) {
                      ($k = ($l = ($m = ($n = self).$button, $m.$$p = (TMP_12 = function(){var self = TMP_12.$$s || this;

                      return "Add New Officer"}, TMP_12.$$s = self, TMP_12.$$arity = 0, TMP_12), $m).call($n, $hash2(["type", "class"], {"type": "button", "class": "btn button action inner"}))).$on, $k.$$p = (TMP_11 = function(){var self = TMP_11.$$s || this;

                      return self.$state()['$add_officer!'](1)}, TMP_11.$$s = self, TMP_11.$$arity = 0, TMP_11), $k).call($l, "click");
                      self.$br();};
                    return self.$hr($hash2(["class"], {"class": "noborder"}));}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10), $i).call($j)}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $g).call($h, $hash2(["class"], {"class": "small-12 columns end"}));
                ($g = ($i = self).$div, $g.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this, $j, $k, TMP_14;

                return ($j = ($k = self).$div, $j.$$p = (TMP_14 = function(){var self = TMP_14.$$s || this, $l, $m, TMP_15, $n, TMP_16, $o, TMP_23, $p, TMP_34, $q, TMP_40, $r, TMP_44, $s, TMP_47, $t, TMP_54, $u, TMP_70, $v, TMP_77, $w, TMP_81;

                  if ((($l = (self.$state().$add_officer()['$=='](1))) !== nil && $l != null && (!$l.$$is_boolean || $l == true))) {
                      ($l = ($m = self).$h5, $l.$$p = (TMP_15 = function(){var self = TMP_15.$$s || this;

                      return "New Company Officer"}, TMP_15.$$s = self, TMP_15.$$arity = 0, TMP_15), $l).call($m);
                      self.$hr($hash2(["class"], {"class": "noborder"}));
                      ($l = ($n = self).$div, $l.$$p = (TMP_16 = function(){var self = TMP_16.$$s || this, $o, $p, TMP_17, $q, TMP_20;

                      ($o = ($p = self).$div, $o.$$p = (TMP_17 = function(){var self = TMP_17.$$s || this, $q, $r, TMP_18, $s, TMP_19;

                        ($q = ($r = self).$span, $q.$$p = (TMP_18 = function(){var self = TMP_18.$$s || this;

                          return "Surname"}, TMP_18.$$s = self, TMP_18.$$arity = 0, TMP_18), $q).call($r);
                          return ($q = ($s = self.$input($hash2(["class", "type", "placeholder"], {"class": "handle small-12", "type": "text", "placeholder": "Surname"}))).$on, $q.$$p = (TMP_19 = function(e){var self = TMP_19.$$s || this;
if (e == null) e = nil;
                          return self.$state()['$tmp_surname!'](e.$target().$value())}, TMP_19.$$s = self, TMP_19.$$arity = 1, TMP_19), $q).call($s, "change");}, TMP_17.$$s = self, TMP_17.$$arity = 0, TMP_17), $o).call($p, $hash2(["class"], {"class": "handle small-6 large-6 medium-6 columns"}));
                        return ($o = ($q = self).$div, $o.$$p = (TMP_20 = function(){var self = TMP_20.$$s || this, $r, $s, TMP_21, $t, TMP_22;

                        ($r = ($s = self).$span, $r.$$p = (TMP_21 = function(){var self = TMP_21.$$s || this;

                          return "First Name"}, TMP_21.$$s = self, TMP_21.$$arity = 0, TMP_21), $r).call($s);
                          return ($r = ($t = self.$input($hash2(["class", "type", "placeholder"], {"class": "handle small-12", "type": "text", "placeholder": "First Name"}))).$on, $r.$$p = (TMP_22 = function(e){var self = TMP_22.$$s || this;
if (e == null) e = nil;
                          return self.$state()['$tmp_fname!'](e.$target().$value())}, TMP_22.$$s = self, TMP_22.$$arity = 1, TMP_22), $r).call($t, "change");}, TMP_20.$$s = self, TMP_20.$$arity = 0, TMP_20), $o).call($q, $hash2(["class"], {"class": "handle small-6 large-6 medium-6 columns"}));}, TMP_16.$$s = self, TMP_16.$$arity = 0, TMP_16), $l).call($n, $hash2(["class"], {"class": "row"}));
                      ($l = ($o = self).$div, $l.$$p = (TMP_23 = function(){var self = TMP_23.$$s || this, $p, $q, TMP_24, $r, TMP_27;

                      ($p = ($q = self).$div, $p.$$p = (TMP_24 = function(){var self = TMP_24.$$s || this, $r, $s, TMP_25, $t, TMP_26;

                        ($r = ($s = self).$span, $r.$$p = (TMP_25 = function(){var self = TMP_25.$$s || this;

                          return "Other Names"}, TMP_25.$$s = self, TMP_25.$$arity = 0, TMP_25), $r).call($s);
                          return ($r = ($t = self.$input($hash2(["class", "type", "placeholder"], {"class": "handle small-12", "type": "text", "placeholder": "Other Names"}))).$on, $r.$$p = (TMP_26 = function(e){var self = TMP_26.$$s || this;
if (e == null) e = nil;
                          return self.$state()['$tmp_oname!'](e.$target().$value())}, TMP_26.$$s = self, TMP_26.$$arity = 1, TMP_26), $r).call($t, "change");}, TMP_24.$$s = self, TMP_24.$$arity = 0, TMP_24), $p).call($q, $hash2(["class"], {"class": "handle small-6 large-6 medium-6 columns"}));
                        return ($p = ($r = self).$div, $p.$$p = (TMP_27 = function(){var self = TMP_27.$$s || this, $s, $t, TMP_28, $u, TMP_29, $v, $w, TMP_30;

                        ($s = ($t = self).$span, $s.$$p = (TMP_28 = function(){var self = TMP_28.$$s || this;

                          return "Role"}, TMP_28.$$s = self, TMP_28.$$arity = 0, TMP_28), $s).call($t);
                          return ($s = ($u = ($v = ($w = self).$select, $v.$$p = (TMP_30 = function(){var self = TMP_30.$$s || this, $x, $y, TMP_31, $z, TMP_32, $aa, TMP_33;

                          ($x = ($y = self).$option, $x.$$p = (TMP_31 = function(){var self = TMP_31.$$s || this;

                            return "Select Role"}, TMP_31.$$s = self, TMP_31.$$arity = 0, TMP_31), $x).call($y, $hash2(["value"], {"value": ""}));
                            ($x = ($z = self).$option, $x.$$p = (TMP_32 = function(){var self = TMP_32.$$s || this;

                            return "Director"}, TMP_32.$$s = self, TMP_32.$$arity = 0, TMP_32), $x).call($z, $hash2(["value"], {"value": "Director"}));
                            return ($x = ($aa = self).$option, $x.$$p = (TMP_33 = function(){var self = TMP_33.$$s || this;

                            return "Secretary"}, TMP_33.$$s = self, TMP_33.$$arity = 0, TMP_33), $x).call($aa, $hash2(["value"], {"value": "Secretary"}));}, TMP_30.$$s = self, TMP_30.$$arity = 0, TMP_30), $v).call($w)).$on, $s.$$p = (TMP_29 = function(e){var self = TMP_29.$$s || this;
if (e == null) e = nil;
                          return self.$state()['$tmp_role!'](e.$target().$value())}, TMP_29.$$s = self, TMP_29.$$arity = 1, TMP_29), $s).call($u, "change");}, TMP_27.$$s = self, TMP_27.$$arity = 0, TMP_27), $p).call($r, $hash2(["class"], {"class": "handle small-6 large-6 medium-6 columns"}));}, TMP_23.$$s = self, TMP_23.$$arity = 0, TMP_23), $l).call($o, $hash2(["class"], {"class": "row"}));
                      ($l = ($p = self).$div, $l.$$p = (TMP_34 = function(){var self = TMP_34.$$s || this, $q, $r, TMP_35, $s, TMP_38;

                      ($q = ($r = self).$div, $q.$$p = (TMP_35 = function(){var self = TMP_35.$$s || this, $s, $t, TMP_36, $u, TMP_37;

                        ($s = ($t = self).$span, $s.$$p = (TMP_36 = function(){var self = TMP_36.$$s || this;

                          return "Nationality"}, TMP_36.$$s = self, TMP_36.$$arity = 0, TMP_36), $s).call($t);
                          return ($s = ($u = self.$input($hash2(["class", "type", "placeholder"], {"class": "handle small-12", "type": "text", "placeholder": "Nationality"}))).$on, $s.$$p = (TMP_37 = function(e){var self = TMP_37.$$s || this;
if (e == null) e = nil;
                          return self.$state()['$tmp_nationality!'](e.$target().$value())}, TMP_37.$$s = self, TMP_37.$$arity = 1, TMP_37), $s).call($u, "change");}, TMP_35.$$s = self, TMP_35.$$arity = 0, TMP_35), $q).call($r, $hash2(["class"], {"class": "handle small-12 large-6 medium-6 columns"}));
                        return ($q = ($s = self).$div, $q.$$p = (TMP_38 = function(){var self = TMP_38.$$s || this, $t, $u, TMP_39;

                        ($t = ($u = self).$span, $t.$$p = (TMP_39 = function(){var self = TMP_39.$$s || this;

                          return "Date of Birth"}, TMP_39.$$s = self, TMP_39.$$arity = 0, TMP_39), $t).call($u);
                          return self.$br();}, TMP_38.$$s = self, TMP_38.$$arity = 0, TMP_38), $q).call($s, $hash2(["class"], {"class": "handle small-12 large-6 medium-6 columns"}));}, TMP_34.$$s = self, TMP_34.$$arity = 0, TMP_34), $l).call($p, $hash2(["class"], {"class": "row"}));
                      ($l = ($q = self).$div, $l.$$p = (TMP_40 = function(){var self = TMP_40.$$s || this, $r, $s, TMP_41;

                      return ($r = ($s = self).$div, $r.$$p = (TMP_41 = function(){var self = TMP_41.$$s || this, $t, $u, TMP_42, $v, TMP_43;

                        ($t = ($u = self).$span, $t.$$p = (TMP_42 = function(){var self = TMP_42.$$s || this;

                          return "Residential Address"}, TMP_42.$$s = self, TMP_42.$$arity = 0, TMP_42), $t).call($u);
                          return ($t = ($v = self.$input($hash2(["class", "type", "placeholder"], {"class": "handle small-12", "type": "text", "placeholder": "Residential Address"}))).$on, $t.$$p = (TMP_43 = function(e){var self = TMP_43.$$s || this;
if (e == null) e = nil;
                          return self.$state()['$tmp_address!'](e.$target().$value())}, TMP_43.$$s = self, TMP_43.$$arity = 1, TMP_43), $t).call($v, "change");}, TMP_41.$$s = self, TMP_41.$$arity = 0, TMP_41), $r).call($s, $hash2(["class"], {"class": "handle small-12 columns"}))}, TMP_40.$$s = self, TMP_40.$$arity = 0, TMP_40), $l).call($q, $hash2(["class"], {"class": "row"}));
                      ($l = ($r = self).$div, $l.$$p = (TMP_44 = function(){var self = TMP_44.$$s || this, $s, $t, TMP_45;

                      return ($s = ($t = self).$div, $s.$$p = (TMP_45 = function(){var self = TMP_45.$$s || this, $u, $v, TMP_46;

                        return ($u = ($v = self.$input($hash2(["class", "type", "placeholder"], {"class": "handle small-12", "type": "text", "placeholder": "Residential Address"}))).$on, $u.$$p = (TMP_46 = function(e){var self = TMP_46.$$s || this;
if (e == null) e = nil;
                          return self.$state()['$tmp_address2!'](e.$target().$value())}, TMP_46.$$s = self, TMP_46.$$arity = 1, TMP_46), $u).call($v, "change")}, TMP_45.$$s = self, TMP_45.$$arity = 0, TMP_45), $s).call($t, $hash2(["class"], {"class": "handle small-12 columns"}))}, TMP_44.$$s = self, TMP_44.$$arity = 0, TMP_44), $l).call($r, $hash2(["class"], {"class": "row"}));
                      ($l = ($s = self).$div, $l.$$p = (TMP_47 = function(){var self = TMP_47.$$s || this, $t, $u, TMP_48, $v, TMP_51;

                      ($t = ($u = self).$div, $t.$$p = (TMP_48 = function(){var self = TMP_48.$$s || this, $v, $w, TMP_49, $x, TMP_50;

                        ($v = ($w = self).$span, $v.$$p = (TMP_49 = function(){var self = TMP_49.$$s || this;

                          return "City"}, TMP_49.$$s = self, TMP_49.$$arity = 0, TMP_49), $v).call($w);
                          return ($v = ($x = self.$input($hash2(["class", "type", "placeholder"], {"class": "handle small-12", "type": "text", "placeholder": "City"}))).$on, $v.$$p = (TMP_50 = function(e){var self = TMP_50.$$s || this;
if (e == null) e = nil;
                          return self.$state()['$tmp_city!'](e.$target().$value())}, TMP_50.$$s = self, TMP_50.$$arity = 1, TMP_50), $v).call($x, "change");}, TMP_48.$$s = self, TMP_48.$$arity = 0, TMP_48), $t).call($u, $hash2(["class"], {"class": "handle small-6 large-6 medium-6 columns"}));
                        return ($t = ($v = self).$div, $t.$$p = (TMP_51 = function(){var self = TMP_51.$$s || this, $w, $x, TMP_52, $y, TMP_53;

                        ($w = ($x = self).$span, $w.$$p = (TMP_52 = function(){var self = TMP_52.$$s || this;

                          return "POB"}, TMP_52.$$s = self, TMP_52.$$arity = 0, TMP_52), $w).call($x);
                          return ($w = ($y = self.$input($hash2(["class", "type", "placeholder"], {"class": "handle small-12", "type": "text", "placeholder": "POB"}))).$on, $w.$$p = (TMP_53 = function(e){var self = TMP_53.$$s || this;
if (e == null) e = nil;
                          return self.$state()['$tmp_pob!'](e.$target().$value())}, TMP_53.$$s = self, TMP_53.$$arity = 1, TMP_53), $w).call($y, "change");}, TMP_51.$$s = self, TMP_51.$$arity = 0, TMP_51), $t).call($v, $hash2(["class"], {"class": "handle small-6 large-6 medium-6 columns"}));}, TMP_47.$$s = self, TMP_47.$$arity = 0, TMP_47), $l).call($s, $hash2(["class"], {"class": "row"}));
                      ($l = ($t = self).$div, $l.$$p = (TMP_54 = function(){var self = TMP_54.$$s || this, $u, $v, TMP_55, $w, TMP_63;

                      ($u = ($v = self).$div, $u.$$p = (TMP_55 = function(){var self = TMP_55.$$s || this, $w, $x, TMP_56, $y, TMP_57, $z, $aa, TMP_59;

                        ($w = ($x = self).$span, $w.$$p = (TMP_56 = function(){var self = TMP_56.$$s || this;

                          return "Country"}, TMP_56.$$s = self, TMP_56.$$arity = 0, TMP_56), $w).call($x);
                          return ($w = ($y = ($z = ($aa = self).$select, $z.$$p = (TMP_59 = function(){var self = TMP_59.$$s || this, $ab, $ac, TMP_60, $ad, TMP_61;

                          ($ab = ($ac = self).$option, $ab.$$p = (TMP_60 = function(){var self = TMP_60.$$s || this;

                            return "Select Country"}, TMP_60.$$s = self, TMP_60.$$arity = 0, TMP_60), $ab).call($ac, $hash2(["value"], {"value": ""}));
                            return ($ab = ($ad = self.$params().$countries()).$each, $ab.$$p = (TMP_61 = function(c){var self = TMP_61.$$s || this, $ae, $af, TMP_62;
if (c == null) c = nil;
                            return ($ae = ($af = self).$option, $ae.$$p = (TMP_62 = function(){var self = TMP_62.$$s || this;

                              return c}, TMP_62.$$s = self, TMP_62.$$arity = 0, TMP_62), $ae).call($af, $hash2(["value"], {"value": c}))}, TMP_61.$$s = self, TMP_61.$$arity = 1, TMP_61), $ab).call($ad);}, TMP_59.$$s = self, TMP_59.$$arity = 0, TMP_59), $z).call($aa)).$on, $w.$$p = (TMP_57 = function(e){var self = TMP_57.$$s || this, $z, $aa, TMP_58, data = nil;
if (e == null) e = nil;
                          self.$state()['$tmp_country!'](e.$target().$value());
                            data = $hash2([], {});
                            data['$[]=']("country", e.$target().$value());
                            return ($z = ($aa = $scope.get('HTTP')).$post, $z.$$p = (TMP_58 = function(res){var self = TMP_58.$$s || this;
if (res == null) res = nil;
                            self.$state()['$tmp_state_array!']([]);
                              return self.$state()['$tmp_state_array!'](res.$json());}, TMP_58.$$s = self, TMP_58.$$arity = 1, TMP_58), $z).call($aa, "/platform/country_states", $hash2(["payload"], {"payload": data}));}, TMP_57.$$s = self, TMP_57.$$arity = 1, TMP_57), $w).call($y, "change");}, TMP_55.$$s = self, TMP_55.$$arity = 0, TMP_55), $u).call($v, $hash2(["class"], {"class": "handle small-12 large-6 medium-6 columns"}));
                        return ($u = ($w = self).$div, $u.$$p = (TMP_63 = function(){var self = TMP_63.$$s || this, $x, $y, TMP_64, $z, TMP_65, $aa, $ab, TMP_66;

                        ($x = ($y = self).$span, $x.$$p = (TMP_64 = function(){var self = TMP_64.$$s || this;

                          return "State"}, TMP_64.$$s = self, TMP_64.$$arity = 0, TMP_64), $x).call($y);
                          self.$state().$tmp_state_array();
                          return ($x = ($z = ($aa = ($ab = self).$select, $aa.$$p = (TMP_66 = function(){var self = TMP_66.$$s || this, $ac, $ad, TMP_67, $ae, TMP_68;

                          ($ac = ($ad = self).$option, $ac.$$p = (TMP_67 = function(){var self = TMP_67.$$s || this;

                            return "Select State"}, TMP_67.$$s = self, TMP_67.$$arity = 0, TMP_67), $ac).call($ad, $hash2(["value"], {"value": ""}));
                            return ($ac = ($ae = self.$state().$tmp_state_array()).$each, $ac.$$p = (TMP_68 = function(s){var self = TMP_68.$$s || this, $af, $ag, TMP_69;
if (s == null) s = nil;
                            return ($af = ($ag = self).$option, $af.$$p = (TMP_69 = function(){var self = TMP_69.$$s || this;

                              return s}, TMP_69.$$s = self, TMP_69.$$arity = 0, TMP_69), $af).call($ag, $hash2(["value"], {"value": s}))}, TMP_68.$$s = self, TMP_68.$$arity = 1, TMP_68), $ac).call($ae);}, TMP_66.$$s = self, TMP_66.$$arity = 0, TMP_66), $aa).call($ab)).$on, $x.$$p = (TMP_65 = function(e){var self = TMP_65.$$s || this;
if (e == null) e = nil;
                          return self.$state()['$tmp_state!'](e.$target().$value())}, TMP_65.$$s = self, TMP_65.$$arity = 1, TMP_65), $x).call($z, "change");}, TMP_63.$$s = self, TMP_63.$$arity = 0, TMP_63), $u).call($w, $hash2(["class"], {"class": "handle small-12 large-6 medium-6 columns"}));}, TMP_54.$$s = self, TMP_54.$$arity = 0, TMP_54), $l).call($t, $hash2(["class"], {"class": "row"}));
                      ($l = ($u = self).$div, $l.$$p = (TMP_70 = function(){var self = TMP_70.$$s || this, $v, $w, TMP_71, $x, TMP_74;

                      ($v = ($w = self).$div, $v.$$p = (TMP_71 = function(){var self = TMP_71.$$s || this, $x, $y, TMP_72, $z, TMP_73;

                        ($x = ($y = self).$span, $x.$$p = (TMP_72 = function(){var self = TMP_72.$$s || this;

                          return "Email"}, TMP_72.$$s = self, TMP_72.$$arity = 0, TMP_72), $x).call($y);
                          return ($x = ($z = self.$input($hash2(["class", "type", "placeholder"], {"class": "handle small-12", "type": "text", "placeholder": "Email"}))).$on, $x.$$p = (TMP_73 = function(e){var self = TMP_73.$$s || this;
if (e == null) e = nil;
                          return self.$state()['$tmp_email!'](e.$target().$value())}, TMP_73.$$s = self, TMP_73.$$arity = 1, TMP_73), $x).call($z, "change");}, TMP_71.$$s = self, TMP_71.$$arity = 0, TMP_71), $v).call($w, $hash2(["class"], {"class": "handle small-12 large-6 medium-6 columns"}));
                        return ($v = ($x = self).$div, $v.$$p = (TMP_74 = function(){var self = TMP_74.$$s || this, $y, $z, TMP_75, $aa, TMP_76;

                        ($y = ($z = self).$span, $y.$$p = (TMP_75 = function(){var self = TMP_75.$$s || this;

                          return "Occupation"}, TMP_75.$$s = self, TMP_75.$$arity = 0, TMP_75), $y).call($z);
                          return ($y = ($aa = self.$input($hash2(["class", "type", "placeholder"], {"class": "handle small-12", "type": "text", "placeholder": "Occupation"}))).$on, $y.$$p = (TMP_76 = function(e){var self = TMP_76.$$s || this;
if (e == null) e = nil;
                          return self.$state()['$tmp_occupation!'](e.$target().$value())}, TMP_76.$$s = self, TMP_76.$$arity = 1, TMP_76), $y).call($aa, "change");}, TMP_74.$$s = self, TMP_74.$$arity = 0, TMP_74), $v).call($x, $hash2(["class"], {"class": "handle small-12 large-6 medium-6 columns"}));}, TMP_70.$$s = self, TMP_70.$$arity = 0, TMP_70), $l).call($u, $hash2(["class"], {"class": "row"}));
                      ($l = ($v = self).$div, $l.$$p = (TMP_77 = function(){var self = TMP_77.$$s || this, $w, $x, TMP_78;

                      return ($w = ($x = self).$div, $w.$$p = (TMP_78 = function(){var self = TMP_78.$$s || this, $y, $z, TMP_79, $aa, TMP_80;

                        ($y = ($z = self).$span, $y.$$p = (TMP_79 = function(){var self = TMP_79.$$s || this;

                          return "Particulars of Other Directorship"}, TMP_79.$$s = self, TMP_79.$$arity = 0, TMP_79), $y).call($z);
                          return ($y = ($aa = self.$textarea($hash2(["class", "type", "placeholder"], {"class": "handle small-12", "type": "text", "placeholder": "Particulars of Other Directorship"}))).$on, $y.$$p = (TMP_80 = function(e){var self = TMP_80.$$s || this;
if (e == null) e = nil;
                          return self.$state()['$tmp_pod!'](e.$target().$value())}, TMP_80.$$s = self, TMP_80.$$arity = 1, TMP_80), $y).call($aa, "change");}, TMP_78.$$s = self, TMP_78.$$arity = 0, TMP_78), $w).call($x, $hash2(["class"], {"class": "handle small-12 columns"}))}, TMP_77.$$s = self, TMP_77.$$arity = 0, TMP_77), $l).call($v, $hash2(["class"], {"class": "row"}));
                      ($l = ($w = self).$div, $l.$$p = (TMP_81 = function(){var self = TMP_81.$$s || this, $x, $y, TMP_82, $z, $aa, TMP_83, TMP_84, $ab, $ac, TMP_85;

                      ($x = ($y = ($z = ($aa = self).$button, $z.$$p = (TMP_83 = function(){var self = TMP_83.$$s || this;

                        return "Add"}, TMP_83.$$s = self, TMP_83.$$arity = 0, TMP_83), $z).call($aa, $hash2(["type", "class"], {"type": "button", "class": "btn button action"}))).$on, $x.$$p = (TMP_82 = function(){var self = TMP_82.$$s || this, officer = nil;

                        officer = $scope.get('Officer').$new($hash2(["surname", "first_name", "other_names", "nationality", "dob", "tel_number", "residential_address", "residential_address_city", "residential_address_state", "residential_address_country", "email", "occupation", "particulars_of_other_directorship", "role"], {"surname": self.$state().$tmp_surname(), "first_name": self.$state().$tmp_fname(), "other_names": self.$state().$tmp_oname(), "nationality": self.$state().$tmp_nationality(), "dob": self.$state().$tmp_dob(), "tel_number": self.$state().$tmp_tel_number(), "residential_address": self.$state().$tmp_address(), "residential_address_city": self.$state().$tmp_city(), "residential_address_state": self.$state().$tmp_state(), "residential_address_country": self.$state().$tmp_country(), "email": self.$state().$tmp_email(), "occupation": self.$state().$tmp_occupation(), "particulars_of_other_directorship": self.$state().$tmp_pod(), "role": self.$state().$tmp_role()}));
                          self.$state()['$officers!']()['$<<'](officer);
                          $scope.get('Store').$add_item("officers", self.$state().$officers());
                          return self.$state()['$add_officer!'](0);}, TMP_82.$$s = self, TMP_82.$$arity = 0, TMP_82), $x).call($y, "click");
                        return ($x = ($z = ($ab = ($ac = self).$button, $ab.$$p = (TMP_85 = function(){var self = TMP_85.$$s || this;

                        return "Cancel"}, TMP_85.$$s = self, TMP_85.$$arity = 0, TMP_85), $ab).call($ac, $hash2(["type", "class"], {"type": "button", "class": "btn button action inner"}))).$on, $x.$$p = (TMP_84 = function(){var self = TMP_84.$$s || this;

                        return self.$state()['$add_officer!'](0)}, TMP_84.$$s = self, TMP_84.$$arity = 0, TMP_84), $x).call($z, "click");}, TMP_81.$$s = self, TMP_81.$$arity = 0, TMP_81), $l).call($w);
                      return self.$hr();
                      } else {
                      return nil
                    }}, TMP_14.$$s = self, TMP_14.$$arity = 0, TMP_14), $j).call($k, $hash2(["class"], {"class": "large-8 medium-8 small-12"}))}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13), $g).call($i, $hash2(["class"], {"class": "small-12 columns end"}));
                ($g = ($j = self).$div, $g.$$p = (TMP_86 = function(){var self = TMP_86.$$s || this, $k, $l, TMP_87, $m, TMP_88;

                ($k = ($l = self).$h5, $k.$$p = (TMP_87 = function(){var self = TMP_87.$$s || this;

                  return "Existing Company Officers"}, TMP_87.$$s = self, TMP_87.$$arity = 0, TMP_87), $k).call($l);
                  ($k = ($m = self).$ol, $k.$$p = (TMP_88 = function(){var self = TMP_88.$$s || this, $n, $o, TMP_89;

                  return ($n = ($o = self.$params().$officers()).$each, $n.$$p = (TMP_89 = function(officer){var self = TMP_89.$$s || this, $p, $q, TMP_90;
if (officer == null) officer = nil;
                    return ($p = ($q = self).$li, $p.$$p = (TMP_90 = function(){var self = TMP_90.$$s || this, $r, $s, TMP_91, $t, TMP_92, $u, TMP_93, $v, TMP_94, $w, TMP_95, $x, TMP_96, $y, TMP_97, $z, TMP_98, $aa, TMP_99, $ab, TMP_100, $ac, TMP_101, $ad, TMP_102, $ae, TMP_103, $af, TMP_104, $ag, TMP_105, $ah, TMP_106, $ai, TMP_107, $aj, TMP_108, $ak, TMP_109, $al, TMP_110, $am, TMP_111, $an, TMP_112, $ao, TMP_113, $ap, TMP_114, $aq, TMP_115, $ar, TMP_116, $as, TMP_117, $at, TMP_118, $au, TMP_119, $av, TMP_120;

                      ($r = ($s = self).$span, $r.$$p = (TMP_91 = function(){var self = TMP_91.$$s || this;

                        return officer['$[]']("surname").$upcase()}, TMP_91.$$s = self, TMP_91.$$arity = 0, TMP_91), $r).call($s);
                        ($r = ($t = self).$span, $r.$$p = (TMP_92 = function(){var self = TMP_92.$$s || this;

                        return ", "}, TMP_92.$$s = self, TMP_92.$$arity = 0, TMP_92), $r).call($t);
                        ($r = ($u = self).$span, $r.$$p = (TMP_93 = function(){var self = TMP_93.$$s || this;

                        return officer['$[]']("first_name")}, TMP_93.$$s = self, TMP_93.$$arity = 0, TMP_93), $r).call($u);
                        ($r = ($v = self).$span, $r.$$p = (TMP_94 = function(){var self = TMP_94.$$s || this;

                        return " "}, TMP_94.$$s = self, TMP_94.$$arity = 0, TMP_94), $r).call($v);
                        ($r = ($w = self).$span, $r.$$p = (TMP_95 = function(){var self = TMP_95.$$s || this;

                        return officer['$[]']("other_names")}, TMP_95.$$s = self, TMP_95.$$arity = 0, TMP_95), $r).call($w);
                        self.$br();
                        ($r = ($x = self).$text, $r.$$p = (TMP_96 = function(){var self = TMP_96.$$s || this;

                        return "Role: "}, TMP_96.$$s = self, TMP_96.$$arity = 0, TMP_96), $r).call($x, $hash2(["style"], {"style": $hash2(["fontWeight"], {"fontWeight": "bold"})}));
                        ($r = ($y = self).$span, $r.$$p = (TMP_97 = function(){var self = TMP_97.$$s || this;

                        return officer['$[]']("role")}, TMP_97.$$s = self, TMP_97.$$arity = 0, TMP_97), $r).call($y);
                        self.$br();
                        ($r = ($z = self).$text, $r.$$p = (TMP_98 = function(){var self = TMP_98.$$s || this;

                        return "Nationality: "}, TMP_98.$$s = self, TMP_98.$$arity = 0, TMP_98), $r).call($z, $hash2(["style"], {"style": $hash2(["fontWeight"], {"fontWeight": "bold"})}));
                        ($r = ($aa = self).$span, $r.$$p = (TMP_99 = function(){var self = TMP_99.$$s || this;

                        return officer['$[]']("nationality")}, TMP_99.$$s = self, TMP_99.$$arity = 0, TMP_99), $r).call($aa);
                        self.$br();
                        ($r = ($ab = self).$text, $r.$$p = (TMP_100 = function(){var self = TMP_100.$$s || this;

                        return "Date of Birth: "}, TMP_100.$$s = self, TMP_100.$$arity = 0, TMP_100), $r).call($ab, $hash2(["style"], {"style": $hash2(["fontWeight"], {"fontWeight": "bold"})}));
                        ($r = ($ac = self).$span, $r.$$p = (TMP_101 = function(){var self = TMP_101.$$s || this;

                        return officer['$[]']("dob")}, TMP_101.$$s = self, TMP_101.$$arity = 0, TMP_101), $r).call($ac);
                        self.$br();
                        ($r = ($ad = self).$text, $r.$$p = (TMP_102 = function(){var self = TMP_102.$$s || this;

                        return "Address"}, TMP_102.$$s = self, TMP_102.$$arity = 0, TMP_102), $r).call($ad, $hash2(["style"], {"style": $hash2(["fontWeight"], {"fontWeight": "bold"})}));
                        self.$br();
                        ($r = ($ae = self).$span, $r.$$p = (TMP_103 = function(){var self = TMP_103.$$s || this;

                        return officer['$[]']("residential_address")}, TMP_103.$$s = self, TMP_103.$$arity = 0, TMP_103), $r).call($ae);
                        self.$br();
                        if ((($r = (officer['$[]']("residential_address_2")['$present?']())) !== nil && $r != null && (!$r.$$is_boolean || $r == true))) {
                          ($r = ($af = self).$span, $r.$$p = (TMP_104 = function(){var self = TMP_104.$$s || this;

                          return officer['$[]']("residential_address_2")}, TMP_104.$$s = self, TMP_104.$$arity = 0, TMP_104), $r).call($af);
                          self.$br();};
                        ($r = ($ag = self).$span, $r.$$p = (TMP_105 = function(){var self = TMP_105.$$s || this;

                        return officer['$[]']("residential_address_city")}, TMP_105.$$s = self, TMP_105.$$arity = 0, TMP_105), $r).call($ag);
                        ($r = ($ah = self).$span, $r.$$p = (TMP_106 = function(){var self = TMP_106.$$s || this;

                        return ", "}, TMP_106.$$s = self, TMP_106.$$arity = 0, TMP_106), $r).call($ah);
                        if ((($r = (officer['$[]']("residential_address_pob")['$present?']())) !== nil && $r != null && (!$r.$$is_boolean || $r == true))) {
                          self.$br();
                          ($r = ($ai = self).$span, $r.$$p = (TMP_107 = function(){var self = TMP_107.$$s || this;

                          return "POB "}, TMP_107.$$s = self, TMP_107.$$arity = 0, TMP_107), $r).call($ai);
                          ($r = ($aj = self).$span, $r.$$p = (TMP_108 = function(){var self = TMP_108.$$s || this;

                          return officer['$[]']("residential_address_pob")}, TMP_108.$$s = self, TMP_108.$$arity = 0, TMP_108), $r).call($aj);
                          ($r = ($ak = self).$span, $r.$$p = (TMP_109 = function(){var self = TMP_109.$$s || this;

                          return ", "}, TMP_109.$$s = self, TMP_109.$$arity = 0, TMP_109), $r).call($ak);};
                        self.$br();
                        ($r = ($al = self).$span, $r.$$p = (TMP_110 = function(){var self = TMP_110.$$s || this;

                        return officer['$[]']("residential_address_state")}, TMP_110.$$s = self, TMP_110.$$arity = 0, TMP_110), $r).call($al);
                        self.$br();
                        ($r = ($am = self).$span, $r.$$p = (TMP_111 = function(){var self = TMP_111.$$s || this;

                        return officer['$[]']("residential_address_country")}, TMP_111.$$s = self, TMP_111.$$arity = 0, TMP_111), $r).call($am);
                        self.$br();
                        ($r = ($an = self).$span, $r.$$p = (TMP_112 = function(){var self = TMP_112.$$s || this;

                        return "Email Address: "}, TMP_112.$$s = self, TMP_112.$$arity = 0, TMP_112), $r).call($an, $hash2(["style"], {"style": $hash2(["fontWeight"], {"fontWeight": "bold"})}));
                        ($r = ($ao = self).$span, $r.$$p = (TMP_113 = function(){var self = TMP_113.$$s || this;

                        return officer['$[]']("email")}, TMP_113.$$s = self, TMP_113.$$arity = 0, TMP_113), $r).call($ao);
                        self.$br();
                        ($r = ($ap = self).$span, $r.$$p = (TMP_114 = function(){var self = TMP_114.$$s || this;

                        return "Occupation: "}, TMP_114.$$s = self, TMP_114.$$arity = 0, TMP_114), $r).call($ap, $hash2(["style"], {"style": $hash2(["fontWeight"], {"fontWeight": "bold"})}));
                        ($r = ($aq = self).$span, $r.$$p = (TMP_115 = function(){var self = TMP_115.$$s || this;

                        return officer['$[]']("occupation")}, TMP_115.$$s = self, TMP_115.$$arity = 0, TMP_115), $r).call($aq);
                        self.$br();
                        ($r = ($ar = self).$span, $r.$$p = (TMP_116 = function(){var self = TMP_116.$$s || this;

                        return "Tel Number: "}, TMP_116.$$s = self, TMP_116.$$arity = 0, TMP_116), $r).call($ar, $hash2(["style"], {"style": $hash2(["fontWeight"], {"fontWeight": "bold"})}));
                        ($r = ($as = self).$span, $r.$$p = (TMP_117 = function(){var self = TMP_117.$$s || this;

                        return officer['$[]']("tel_number")}, TMP_117.$$s = self, TMP_117.$$arity = 0, TMP_117), $r).call($as);
                        self.$br();
                        ($r = ($at = self).$span, $r.$$p = (TMP_118 = function(){var self = TMP_118.$$s || this;

                        return "Particulars of Other Directorship "}, TMP_118.$$s = self, TMP_118.$$arity = 0, TMP_118), $r).call($at, $hash2(["style"], {"style": $hash2(["fontWeight"], {"fontWeight": "bold"})}));
                        if ((($r = (officer['$[]']("particulars_of_other_directorship")['$present?']())) !== nil && $r != null && (!$r.$$is_boolean || $r == true))) {
                          self.$br();
                          ($r = ($au = self).$span, $r.$$p = (TMP_119 = function(){var self = TMP_119.$$s || this;

                          return officer['$[]']("particulars_of_other_directorship")}, TMP_119.$$s = self, TMP_119.$$arity = 0, TMP_119), $r).call($au);};
                        self.$hr($hash2(["class"], {"class": "noborder"}));
                        return ($r = ($av = self).$div, $r.$$p = (TMP_120 = function(){var self = TMP_120.$$s || this, $aw, $ax, TMP_121, $ay, $az, TMP_122, TMP_123, $ba, $bb, TMP_124;

                        ($aw = ($ax = ($ay = ($az = self).$button, $ay.$$p = (TMP_122 = function(){var self = TMP_122.$$s || this;

                          return "Edit"}, TMP_122.$$s = self, TMP_122.$$arity = 0, TMP_122), $ay).call($az, $hash2(["type", "style", "class"], {"type": "button", "style": $hash2(["fontWeight"], {"fontWeight": "bold"}), "class": "btn button action smaller"}))).$on, $aw.$$p = (TMP_121 = function(){var self = TMP_121.$$s || this;

                          return nil}, TMP_121.$$s = self, TMP_121.$$arity = 0, TMP_121), $aw).call($ax, "click");
                          ($aw = ($ay = ($ba = ($bb = self).$button, $ba.$$p = (TMP_124 = function(){var self = TMP_124.$$s || this;

                          return "Delete"}, TMP_124.$$s = self, TMP_124.$$arity = 0, TMP_124), $ba).call($bb, $hash2(["type", "class"], {"type": "button", "class": "btn button action smaller alert"}))).$on, $aw.$$p = (TMP_123 = function(){var self = TMP_123.$$s || this;

                          return nil}, TMP_123.$$s = self, TMP_123.$$arity = 0, TMP_123), $aw).call($ay, "click");
                          return self.$br();}, TMP_120.$$s = self, TMP_120.$$arity = 0, TMP_120), $r).call($av);}, TMP_90.$$s = self, TMP_90.$$arity = 0, TMP_90), $p).call($q)}, TMP_89.$$s = self, TMP_89.$$arity = 1, TMP_89), $n).call($o)}, TMP_88.$$s = self, TMP_88.$$arity = 0, TMP_88), $k).call($m);
                  return self.$hr($hash2(["class"], {"class": "noborder"}));}, TMP_86.$$s = self, TMP_86.$$arity = 0, TMP_86), $g).call($j, $hash2(["class"], {"class": "small-12 large-6 medium-6 collapse columns"}));
                ($g = ($k = self).$div, $g.$$p = (TMP_125 = function(){var self = TMP_125.$$s || this, $l, $m, TMP_126, $n, TMP_127;

                if ((($l = (((($m = self.$state().$address_update()['$=='](1)) !== false && $m !== nil && $m != null) ? $m : self.$state().$officers()['$empty?']()['$!']()))) !== nil && $l != null && (!$l.$$is_boolean || $l == true))) {
                    ($l = ($m = self).$h5, $l.$$p = (TMP_126 = function(){var self = TMP_126.$$s || this;

                    return "New Officers Added"}, TMP_126.$$s = self, TMP_126.$$arity = 0, TMP_126), $l).call($m);
                    return ($l = ($n = self).$ol, $l.$$p = (TMP_127 = function(){var self = TMP_127.$$s || this, $o, $p, TMP_128;

                    return ($o = ($p = self.$state().$officers()).$each, $o.$$p = (TMP_128 = function(officer){var self = TMP_128.$$s || this, $q, $r, TMP_129;
if (officer == null) officer = nil;
                      return ($q = ($r = self).$li, $q.$$p = (TMP_129 = function(){var self = TMP_129.$$s || this, $s, $t, TMP_130, $u, TMP_131, $v, TMP_132, $w, TMP_133, $x, TMP_134, $y, TMP_135, $z, TMP_136, $aa, TMP_137, $ab, TMP_138, $ac, TMP_139, $ad, TMP_140, $ae, TMP_141, $af, TMP_142, $ag, TMP_143, $ah, TMP_144, $ai, TMP_145, $aj, TMP_146, $ak, TMP_147, $al, TMP_148, $am, TMP_149, $an, TMP_150, $ao, TMP_151, $ap, TMP_152, $aq, TMP_153, $ar, TMP_154, $as, TMP_155, $at, TMP_156, $au, TMP_157, $av, TMP_158, $aw, TMP_159;

                        ($s = ($t = self).$span, $s.$$p = (TMP_130 = function(){var self = TMP_130.$$s || this;

                          return officer.$surname().$upcase()}, TMP_130.$$s = self, TMP_130.$$arity = 0, TMP_130), $s).call($t);
                          ($s = ($u = self).$span, $s.$$p = (TMP_131 = function(){var self = TMP_131.$$s || this;

                          return ", "}, TMP_131.$$s = self, TMP_131.$$arity = 0, TMP_131), $s).call($u);
                          ($s = ($v = self).$span, $s.$$p = (TMP_132 = function(){var self = TMP_132.$$s || this;

                          return officer.$first_name()}, TMP_132.$$s = self, TMP_132.$$arity = 0, TMP_132), $s).call($v);
                          ($s = ($w = self).$span, $s.$$p = (TMP_133 = function(){var self = TMP_133.$$s || this;

                          return " "}, TMP_133.$$s = self, TMP_133.$$arity = 0, TMP_133), $s).call($w);
                          ($s = ($x = self).$span, $s.$$p = (TMP_134 = function(){var self = TMP_134.$$s || this;

                          return officer.$other_names()}, TMP_134.$$s = self, TMP_134.$$arity = 0, TMP_134), $s).call($x);
                          self.$br();
                          ($s = ($y = self).$text, $s.$$p = (TMP_135 = function(){var self = TMP_135.$$s || this;

                          return "Role: "}, TMP_135.$$s = self, TMP_135.$$arity = 0, TMP_135), $s).call($y, $hash2(["style"], {"style": $hash2(["fontWeight"], {"fontWeight": "bold"})}));
                          ($s = ($z = self).$span, $s.$$p = (TMP_136 = function(){var self = TMP_136.$$s || this;

                          return officer.$role()}, TMP_136.$$s = self, TMP_136.$$arity = 0, TMP_136), $s).call($z);
                          self.$br();
                          ($s = ($aa = self).$text, $s.$$p = (TMP_137 = function(){var self = TMP_137.$$s || this;

                          return "Nationality: "}, TMP_137.$$s = self, TMP_137.$$arity = 0, TMP_137), $s).call($aa, $hash2(["style"], {"style": $hash2(["fontWeight"], {"fontWeight": "bold"})}));
                          ($s = ($ab = self).$span, $s.$$p = (TMP_138 = function(){var self = TMP_138.$$s || this;

                          return officer.$nationality()}, TMP_138.$$s = self, TMP_138.$$arity = 0, TMP_138), $s).call($ab);
                          self.$br();
                          ($s = ($ac = self).$text, $s.$$p = (TMP_139 = function(){var self = TMP_139.$$s || this;

                          return "Date of Birth: "}, TMP_139.$$s = self, TMP_139.$$arity = 0, TMP_139), $s).call($ac, $hash2(["style"], {"style": $hash2(["fontWeight"], {"fontWeight": "bold"})}));
                          ($s = ($ad = self).$span, $s.$$p = (TMP_140 = function(){var self = TMP_140.$$s || this;

                          return officer.$dob()}, TMP_140.$$s = self, TMP_140.$$arity = 0, TMP_140), $s).call($ad);
                          self.$br();
                          ($s = ($ae = self).$text, $s.$$p = (TMP_141 = function(){var self = TMP_141.$$s || this;

                          return "Address"}, TMP_141.$$s = self, TMP_141.$$arity = 0, TMP_141), $s).call($ae, $hash2(["style"], {"style": $hash2(["fontWeight"], {"fontWeight": "bold"})}));
                          self.$br();
                          ($s = ($af = self).$span, $s.$$p = (TMP_142 = function(){var self = TMP_142.$$s || this;

                          return officer.$residential_address()}, TMP_142.$$s = self, TMP_142.$$arity = 0, TMP_142), $s).call($af);
                          self.$br();
                          if ((($s = (officer.$residential_address_2()['$present?']())) !== nil && $s != null && (!$s.$$is_boolean || $s == true))) {
                            ($s = ($ag = self).$span, $s.$$p = (TMP_143 = function(){var self = TMP_143.$$s || this;

                            return officer.$residential_address_2()}, TMP_143.$$s = self, TMP_143.$$arity = 0, TMP_143), $s).call($ag);
                            self.$br();};
                          ($s = ($ah = self).$span, $s.$$p = (TMP_144 = function(){var self = TMP_144.$$s || this;

                          return officer.$residential_address_city()}, TMP_144.$$s = self, TMP_144.$$arity = 0, TMP_144), $s).call($ah);
                          ($s = ($ai = self).$span, $s.$$p = (TMP_145 = function(){var self = TMP_145.$$s || this;

                          return ", "}, TMP_145.$$s = self, TMP_145.$$arity = 0, TMP_145), $s).call($ai);
                          if ((($s = (officer.$residential_address_pob()['$present?']())) !== nil && $s != null && (!$s.$$is_boolean || $s == true))) {
                            self.$br();
                            ($s = ($aj = self).$text, $s.$$p = (TMP_146 = function(){var self = TMP_146.$$s || this;

                            return "POB "}, TMP_146.$$s = self, TMP_146.$$arity = 0, TMP_146), $s).call($aj);
                            ($s = ($ak = self).$span, $s.$$p = (TMP_147 = function(){var self = TMP_147.$$s || this;

                            return officer.$residential_address_pob()}, TMP_147.$$s = self, TMP_147.$$arity = 0, TMP_147), $s).call($ak);
                            ($s = ($al = self).$span, $s.$$p = (TMP_148 = function(){var self = TMP_148.$$s || this;

                            return ", "}, TMP_148.$$s = self, TMP_148.$$arity = 0, TMP_148), $s).call($al);};
                          self.$br();
                          ($s = ($am = self).$span, $s.$$p = (TMP_149 = function(){var self = TMP_149.$$s || this;

                          return officer.$residential_address_state()}, TMP_149.$$s = self, TMP_149.$$arity = 0, TMP_149), $s).call($am);
                          self.$br();
                          ($s = ($an = self).$span, $s.$$p = (TMP_150 = function(){var self = TMP_150.$$s || this;

                          return officer.$residential_address_country()}, TMP_150.$$s = self, TMP_150.$$arity = 0, TMP_150), $s).call($an);
                          self.$br();
                          ($s = ($ao = self).$span, $s.$$p = (TMP_151 = function(){var self = TMP_151.$$s || this;

                          return "Email Address: "}, TMP_151.$$s = self, TMP_151.$$arity = 0, TMP_151), $s).call($ao, $hash2(["style"], {"style": $hash2(["fontWeight"], {"fontWeight": "bold"})}));
                          ($s = ($ap = self).$span, $s.$$p = (TMP_152 = function(){var self = TMP_152.$$s || this;

                          return officer.$email()}, TMP_152.$$s = self, TMP_152.$$arity = 0, TMP_152), $s).call($ap);
                          self.$br();
                          ($s = ($aq = self).$span, $s.$$p = (TMP_153 = function(){var self = TMP_153.$$s || this;

                          return "Occupation: "}, TMP_153.$$s = self, TMP_153.$$arity = 0, TMP_153), $s).call($aq, $hash2(["style"], {"style": $hash2(["fontWeight"], {"fontWeight": "bold"})}));
                          ($s = ($ar = self).$span, $s.$$p = (TMP_154 = function(){var self = TMP_154.$$s || this;

                          return officer.$occupation()}, TMP_154.$$s = self, TMP_154.$$arity = 0, TMP_154), $s).call($ar);
                          self.$br();
                          ($s = ($as = self).$span, $s.$$p = (TMP_155 = function(){var self = TMP_155.$$s || this;

                          return "Tel Number: "}, TMP_155.$$s = self, TMP_155.$$arity = 0, TMP_155), $s).call($as, $hash2(["style"], {"style": $hash2(["fontWeight"], {"fontWeight": "bold"})}));
                          ($s = ($at = self).$span, $s.$$p = (TMP_156 = function(){var self = TMP_156.$$s || this;

                          return officer.$tel_number()}, TMP_156.$$s = self, TMP_156.$$arity = 0, TMP_156), $s).call($at);
                          self.$br();
                          ($s = ($au = self).$span, $s.$$p = (TMP_157 = function(){var self = TMP_157.$$s || this;

                          return "Particulars of Other Directorship: "}, TMP_157.$$s = self, TMP_157.$$arity = 0, TMP_157), $s).call($au, $hash2(["style"], {"style": $hash2(["fontWeight"], {"fontWeight": "bold"})}));
                          self.$br();
                          if ((($s = (officer.$particulars_of_other_directorship()['$present?']())) !== nil && $s != null && (!$s.$$is_boolean || $s == true))) {
                            ($s = ($av = self).$span, $s.$$p = (TMP_158 = function(){var self = TMP_158.$$s || this;

                            return officer.$particulars_of_other_directorship()}, TMP_158.$$s = self, TMP_158.$$arity = 0, TMP_158), $s).call($av);
                            self.$br();};
                          self.$hr($hash2(["class"], {"class": "noborder"}));
                          return ($s = ($aw = self).$div, $s.$$p = (TMP_159 = function(){var self = TMP_159.$$s || this, $ax, $ay, TMP_160, $az, $ba, TMP_161, TMP_162, $bb, $bc, TMP_163;

                          ($ax = ($ay = ($az = ($ba = self).$button, $az.$$p = (TMP_161 = function(){var self = TMP_161.$$s || this;

                            return "Edit"}, TMP_161.$$s = self, TMP_161.$$arity = 0, TMP_161), $az).call($ba, $hash2(["type", "style", "class"], {"type": "button", "style": $hash2(["fontWeight"], {"fontWeight": "bold"}), "class": "btn button action smaller"}))).$on, $ax.$$p = (TMP_160 = function(){var self = TMP_160.$$s || this;

                            return nil}, TMP_160.$$s = self, TMP_160.$$arity = 0, TMP_160), $ax).call($ay, "click");
                            ($ax = ($az = ($bb = ($bc = self).$button, $bb.$$p = (TMP_163 = function(){var self = TMP_163.$$s || this;

                            return "Delete"}, TMP_163.$$s = self, TMP_163.$$arity = 0, TMP_163), $bb).call($bc, $hash2(["type", "class"], {"type": "button", "class": "btn button action smaller alert"}))).$on, $ax.$$p = (TMP_162 = function(){var self = TMP_162.$$s || this;

                            return nil}, TMP_162.$$s = self, TMP_162.$$arity = 0, TMP_162), $ax).call($az, "click");
                            return self.$br();}, TMP_159.$$s = self, TMP_159.$$arity = 0, TMP_159), $s).call($aw);}, TMP_129.$$s = self, TMP_129.$$arity = 0, TMP_129), $q).call($r)}, TMP_128.$$s = self, TMP_128.$$arity = 1, TMP_128), $o).call($p)}, TMP_127.$$s = self, TMP_127.$$arity = 0, TMP_127), $l).call($n);
                    } else {
                    return nil
                  }}, TMP_125.$$s = self, TMP_125.$$arity = 0, TMP_125), $g).call($k, $hash2(["class"], {"class": "small-12 large-6 medium-6 collapse columns"}));
                return self.$hr($hash2(["class"], {"class": "noborder"}));}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $e).call($f, $hash2(["id", "class"], {"id": "section-pane", "class": "small-12 columns"}))}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $c).call($d, $hash2(["class"], {"class": "small-12 "}))}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($b);
        }, TMP_164.$$arity = 0), nil) && 'render';
      })($scope.base, (((($scope.get('React')).$$scope.get('Component'))).$$scope.get('Base')))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["components/filing/person"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$before_mount', '$after_mount', '$before_update', '$before_unmount', '$div']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Filing, self = $Filing = $module($base, 'Filing');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Person(){};
        var self = $Person = $klass($base, $super, 'Person', $Person);

        var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, $c, TMP_2, $d, TMP_3, $e, TMP_4, TMP_6;

        ($a = ($b = self).$before_mount, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this;

        return nil}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1), $a).call($b);

        ($a = ($c = self).$after_mount, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

        return nil}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2), $a).call($c);

        ($a = ($d = self).$before_update, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

        return nil}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $a).call($d);

        ($a = ($e = self).$before_unmount, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

        return nil}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($e);

        return (Opal.defn(self, '$render', TMP_6 = function $$render() {
          var $a, $b, TMP_5, self = this;

          return ($a = ($b = self).$div, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

          return "Filing::Person"}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($b);
        }, TMP_6.$$arity = 0), nil) && 'render';
      })($scope.base, (((($scope.get('React')).$$scope.get('Component'))).$$scope.get('Base')))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["components/filing/remita"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$before_mount', '$merchantId!', '$state', '$serviceTypeId!', '$orderId!', '$payerName!', '$payerEmail!', '$payerPhone!', '$amt!', '$after_mount', '$before_update', '$before_unmount', '$div', '$iframe', '$form', '$input', '$merchantId', '$serviceTypeId', '$orderId', '$payerName', '$payerEmail', '$payerPhone', '$amt']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Filing, self = $Filing = $module($base, 'Filing');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Remita(){};
        var self = $Remita = $klass($base, $super, 'Remita', $Remita);

        var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, $c, TMP_2, $d, TMP_3, $e, TMP_4, TMP_7;

        ($a = ($b = self).$before_mount, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this;

        self.$state()['$merchantId!']("2547916");
          self.$state()['$serviceTypeId!']("4430731");
          self.$state()['$orderId!']("223348");
          self.$state()['$payerName!']("Odu Folarin");
          self.$state()['$payerEmail!']("odufolarin@yahoo.com");
          self.$state()['$payerPhone!']("0809009888");
          return self.$state()['$amt!']("5000");}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1), $a).call($b);

        ($a = ($c = self).$after_mount, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

        return nil}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2), $a).call($c);

        ($a = ($d = self).$before_update, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

        return nil}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $a).call($d);

        ($a = ($e = self).$before_unmount, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

        return nil}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($e);

        return (Opal.defn(self, '$render', TMP_7 = function $$render() {
          var $a, $b, TMP_5, self = this;

          return ($a = ($b = self).$div, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this, $c, $d, TMP_6;

          self.$iframe($hash2(["height", "width", "id", "name"], {"height": "600px", "width": "100%", "id": "iframe-a", "name": "iframe-a"}));
            return ($c = ($d = self).$form, $c.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this, hashv = nil;

            hashv = "7388a3387c8bdc3f33c55877cd3a727430e709188916bc6b855757d7d603d7e5f14d82e1575c82e45a87c945eea2c2735485939ec92d248fdf5c4c469f021cdd";
              self.$input($hash2(["id", "placeholder", "value", "type"], {"id": "merchantId", "placeholder": "merchantId", "value": self.$state().$merchantId(), "type": "hidden"}));
              self.$input($hash2(["id", "placeholder", "value", "type"], {"id": "serviceTypeId", "placeholder": "serviceTypeId", "value": self.$state().$serviceTypeId(), "type": "hidden"}));
              self.$input($hash2(["id", "placeholder", "value", "type"], {"id": "orderId", "placeholder": "orderId", "value": self.$state().$orderId(), "type": "hidden"}));
              self.$input($hash2(["id", "placeholder", "value", "type"], {"id": "hash", "placeholder": "hash", "value": hashv, "type": "hidden"}));
              self.$input($hash2(["id", "placeholder", "value", "type"], {"id": "payerName", "placeholder": "payerName", "value": self.$state().$payerName(), "type": "hidden"}));
              self.$input($hash2(["id", "placeholder", "value", "type"], {"id": "payerEmail", "placeholder": "payerEmail", "value": self.$state().$payerEmail(), "type": "hidden"}));
              self.$input($hash2(["id", "placeholder", "value", "type"], {"id": "payerPhone", "placeholder": "payerPhone", "value": self.$state().$payerPhone(), "type": "hidden"}));
              self.$input($hash2(["id", "placeholder", "value", "type"], {"id": "amt", "placeholder": "amt", "value": self.$state().$amt(), "type": "hidden"}));
              self.$input($hash2(["id", "placeholder", "value", "type"], {"id": "responseurl", "placeholder": "responseurl", "value": "http://localhost:3000/filing/incoming/", "type": "hidden"}));
              return self.$input($hash2(["type", "value"], {"type": "submit", "value": "PAY VIA REMITA"}));}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $c).call($d, $hash2(["action", "name", "method", "target"], {"action": "http://www.remitademo.net/remita/ecomm/init.reg", "name": "SubmitRemitaform", "method": "post", "target": "iframe-a"}));}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($b);
        }, TMP_7.$$arity = 0), nil) && 'render';
      })($scope.base, (((($scope.get('React')).$$scope.get('Component'))).$$scope.get('Base')))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["components/filing/shareholders"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$param', '$before_mount', '$add_shareholder!', '$state', '$shareholders!', '$retrieve_item', '$tmp_surname!', '$tmp_fname!', '$tmp_oname!', '$tmp_address!', '$tmp_address2!', '$tmp_nationality!', '$tmp_city!', '$tmp_state!', '$tmp_country!', '$tmp_holding!', '$after_mount', '$before_update', '$before_unmount', '$div', '$==', '$add_shareholder', '$on', '$button', '$br', '$hr', '$h5', '$span', '$value', '$target', '$input', '$new', '$tmp_surname', '$tmp_fname', '$tmp_oname', '$tmp_nationality', '$tmp_address', '$tmp_city', '$tmp_state', '$tmp_country', '$tmp_holding', '$<<', '$add_item', '$shareholders', '$ol', '$each', '$li', '$upcase', '$surname', '$first_name', '$other_names', '$text', '$nationality', '$residential_address', '$residential_address_city', '$residential_address_state', '$residential_address_country', '$holding', '$params', '$!', '$empty?', '$present?', '$residential_address_2', '$residential_address_pob']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Filing, self = $Filing = $module($base, 'Filing');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Shareholders(){};
        var self = $Shareholders = $klass($base, $super, 'Shareholders', $Shareholders);

        var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, $c, TMP_2, $d, TMP_3, $e, TMP_4, TMP_108;

        self.$param("company");

        self.$param("shareholders");

        ($a = ($b = self).$before_mount, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $c;

        self.$state()['$add_shareholder!'](0);
          self.$state()['$shareholders!'](((($c = $scope.get('Store').$retrieve_item("shareholders")) !== false && $c !== nil && $c != null) ? $c : []));
          self.$state()['$tmp_surname!']("");
          self.$state()['$tmp_fname!']("");
          self.$state()['$tmp_oname!']("");
          self.$state()['$tmp_address!']("");
          self.$state()['$tmp_address2!']("");
          self.$state()['$tmp_nationality!']("");
          self.$state()['$tmp_city!']("");
          self.$state()['$tmp_state!']("");
          self.$state()['$tmp_country!']("");
          return self.$state()['$tmp_holding!']("");}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1), $a).call($b);

        ($a = ($c = self).$after_mount, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

        return nil}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2), $a).call($c);

        ($a = ($d = self).$before_update, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

        return nil}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $a).call($d);

        ($a = ($e = self).$before_unmount, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

        return nil}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($e);

        return (Opal.defn(self, '$render', TMP_108 = function $$render() {
          var $a, $b, TMP_5, self = this;

          return ($a = ($b = self).$div, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this, $c, $d, TMP_6;

          return ($c = ($d = self).$div, $c.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this, $e, $f, TMP_7;

            return ($e = ($f = self).$div, $e.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this, $g, $h, TMP_8, $i, TMP_12, $j, TMP_55, $k, TMP_79;

              ($g = ($h = self).$div, $g.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this, $i, $j, TMP_9;

                return ($i = ($j = self).$div, $i.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this, $k, $l, TMP_10, $m, $n, TMP_11;

                  if ((($k = (self.$state().$add_shareholder()['$=='](0))) !== nil && $k != null && (!$k.$$is_boolean || $k == true))) {
                      ($k = ($l = ($m = ($n = self).$button, $m.$$p = (TMP_11 = function(){var self = TMP_11.$$s || this;

                      return "Add New Shareholder"}, TMP_11.$$s = self, TMP_11.$$arity = 0, TMP_11), $m).call($n, $hash2(["type", "class"], {"type": "button", "class": "btn button action inner"}))).$on, $k.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this;

                      return self.$state()['$add_shareholder!'](1)}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10), $k).call($l, "click");
                      self.$br();};
                    return self.$hr($hash2(["class"], {"class": "noborder"}));}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $i).call($j)}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $g).call($h, $hash2(["class"], {"class": "small-12 columns end"}));
                ($g = ($i = self).$div, $g.$$p = (TMP_12 = function(){var self = TMP_12.$$s || this, $j, $k, TMP_13;

                return ($j = ($k = self).$div, $j.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this, $l, $m, TMP_14, $n, TMP_15, $o, TMP_22, $p, TMP_29, $q, TMP_33, $r, TMP_39, $s, TMP_43, $t, TMP_50;

                  if ((($l = (self.$state().$add_shareholder()['$=='](1))) !== nil && $l != null && (!$l.$$is_boolean || $l == true))) {
                      ($l = ($m = self).$h5, $l.$$p = (TMP_14 = function(){var self = TMP_14.$$s || this;

                      return "New Shareholder"}, TMP_14.$$s = self, TMP_14.$$arity = 0, TMP_14), $l).call($m);
                      self.$hr($hash2(["class"], {"class": "noborder"}));
                      ($l = ($n = self).$div, $l.$$p = (TMP_15 = function(){var self = TMP_15.$$s || this, $o, $p, TMP_16, $q, TMP_19;

                      ($o = ($p = self).$div, $o.$$p = (TMP_16 = function(){var self = TMP_16.$$s || this, $q, $r, TMP_17, $s, TMP_18;

                        ($q = ($r = self).$span, $q.$$p = (TMP_17 = function(){var self = TMP_17.$$s || this;

                          return "Surname"}, TMP_17.$$s = self, TMP_17.$$arity = 0, TMP_17), $q).call($r);
                          return ($q = ($s = self.$input($hash2(["class", "type", "placeholder"], {"class": "handle small-12", "type": "text", "placeholder": "Surname"}))).$on, $q.$$p = (TMP_18 = function(e){var self = TMP_18.$$s || this;
if (e == null) e = nil;
                          return self.$state()['$tmp_surname!'](e.$target().$value())}, TMP_18.$$s = self, TMP_18.$$arity = 1, TMP_18), $q).call($s, "change");}, TMP_16.$$s = self, TMP_16.$$arity = 0, TMP_16), $o).call($p, $hash2(["class"], {"class": "handle small-6 large-6 medium-6 columns"}));
                        return ($o = ($q = self).$div, $o.$$p = (TMP_19 = function(){var self = TMP_19.$$s || this, $r, $s, TMP_20, $t, TMP_21;

                        ($r = ($s = self).$span, $r.$$p = (TMP_20 = function(){var self = TMP_20.$$s || this;

                          return "First Name"}, TMP_20.$$s = self, TMP_20.$$arity = 0, TMP_20), $r).call($s);
                          return ($r = ($t = self.$input($hash2(["class", "type", "placeholder"], {"class": "handle small-12", "type": "text", "placeholder": "First Name"}))).$on, $r.$$p = (TMP_21 = function(e){var self = TMP_21.$$s || this;
if (e == null) e = nil;
                          return self.$state()['$tmp_fname!'](e.$target().$value())}, TMP_21.$$s = self, TMP_21.$$arity = 1, TMP_21), $r).call($t, "change");}, TMP_19.$$s = self, TMP_19.$$arity = 0, TMP_19), $o).call($q, $hash2(["class"], {"class": "handle small-6 large-6 medium-6 columns"}));}, TMP_15.$$s = self, TMP_15.$$arity = 0, TMP_15), $l).call($n, $hash2(["class"], {"class": "row"}));
                      ($l = ($o = self).$div, $l.$$p = (TMP_22 = function(){var self = TMP_22.$$s || this, $p, $q, TMP_23, $r, TMP_26;

                      ($p = ($q = self).$div, $p.$$p = (TMP_23 = function(){var self = TMP_23.$$s || this, $r, $s, TMP_24, $t, TMP_25;

                        ($r = ($s = self).$span, $r.$$p = (TMP_24 = function(){var self = TMP_24.$$s || this;

                          return "Other Names"}, TMP_24.$$s = self, TMP_24.$$arity = 0, TMP_24), $r).call($s);
                          return ($r = ($t = self.$input($hash2(["class", "type", "placeholder"], {"class": "handle small-12", "type": "text", "placeholder": "Other Names"}))).$on, $r.$$p = (TMP_25 = function(e){var self = TMP_25.$$s || this;
if (e == null) e = nil;
                          return self.$state()['$tmp_oname!'](e.$target().$value())}, TMP_25.$$s = self, TMP_25.$$arity = 1, TMP_25), $r).call($t, "change");}, TMP_23.$$s = self, TMP_23.$$arity = 0, TMP_23), $p).call($q, $hash2(["class"], {"class": "handle small-6 large-6 medium-6 columns"}));
                        return ($p = ($r = self).$div, $p.$$p = (TMP_26 = function(){var self = TMP_26.$$s || this, $s, $t, TMP_27, $u, TMP_28;

                        ($s = ($t = self).$span, $s.$$p = (TMP_27 = function(){var self = TMP_27.$$s || this;

                          return "Shareholding"}, TMP_27.$$s = self, TMP_27.$$arity = 0, TMP_27), $s).call($t);
                          return ($s = ($u = self.$input($hash2(["class", "type", "placeholder"], {"class": "handle small-12", "type": "text", "placeholder": "Holding"}))).$on, $s.$$p = (TMP_28 = function(e){var self = TMP_28.$$s || this;
if (e == null) e = nil;
                          return self.$state()['$tmp_holding!'](e.$target().$value())}, TMP_28.$$s = self, TMP_28.$$arity = 1, TMP_28), $s).call($u, "change");}, TMP_26.$$s = self, TMP_26.$$arity = 0, TMP_26), $p).call($r, $hash2(["class"], {"class": "handle small-6 large-6 medium-6 columns"}));}, TMP_22.$$s = self, TMP_22.$$arity = 0, TMP_22), $l).call($o, $hash2(["class"], {"class": "row"}));
                      ($l = ($p = self).$div, $l.$$p = (TMP_29 = function(){var self = TMP_29.$$s || this, $q, $r, TMP_30;

                      return ($q = ($r = self).$div, $q.$$p = (TMP_30 = function(){var self = TMP_30.$$s || this, $s, $t, TMP_31, $u, TMP_32;

                        ($s = ($t = self).$span, $s.$$p = (TMP_31 = function(){var self = TMP_31.$$s || this;

                          return "Nationality"}, TMP_31.$$s = self, TMP_31.$$arity = 0, TMP_31), $s).call($t);
                          return ($s = ($u = self.$input($hash2(["class", "type", "placeholder"], {"class": "handle small-12", "type": "text", "placeholder": "Nationality"}))).$on, $s.$$p = (TMP_32 = function(e){var self = TMP_32.$$s || this;
if (e == null) e = nil;
                          return self.$state()['$tmp_nationality!'](e.$target().$value())}, TMP_32.$$s = self, TMP_32.$$arity = 1, TMP_32), $s).call($u, "change");}, TMP_30.$$s = self, TMP_30.$$arity = 0, TMP_30), $q).call($r, $hash2(["class"], {"class": "handle small-12 large-6 medium-6 columns"}))}, TMP_29.$$s = self, TMP_29.$$arity = 0, TMP_29), $l).call($p, $hash2(["class"], {"class": "row"}));
                      ($l = ($q = self).$div, $l.$$p = (TMP_33 = function(){var self = TMP_33.$$s || this, $r, $s, TMP_34, $t, TMP_37;

                      ($r = ($s = self).$div, $r.$$p = (TMP_34 = function(){var self = TMP_34.$$s || this, $t, $u, TMP_35, $v, TMP_36;

                        ($t = ($u = self).$span, $t.$$p = (TMP_35 = function(){var self = TMP_35.$$s || this;

                          return "Residential Address"}, TMP_35.$$s = self, TMP_35.$$arity = 0, TMP_35), $t).call($u);
                          return ($t = ($v = self.$input($hash2(["class", "type", "placeholder"], {"class": "handle small-12", "type": "text", "placeholder": "Residential Address"}))).$on, $t.$$p = (TMP_36 = function(e){var self = TMP_36.$$s || this;
if (e == null) e = nil;
                          return self.$state()['$tmp_address!'](e.$target().$value())}, TMP_36.$$s = self, TMP_36.$$arity = 1, TMP_36), $t).call($v, "change");}, TMP_34.$$s = self, TMP_34.$$arity = 0, TMP_34), $r).call($s, $hash2(["class"], {"class": "handle small-12 columns"}));
                        return ($r = ($t = self).$div, $r.$$p = (TMP_37 = function(){var self = TMP_37.$$s || this, $u, $v, TMP_38;

                        return ($u = ($v = self.$input($hash2(["class", "type", "placeholder"], {"class": "handle small-12", "type": "text", "placeholder": "Residential Address 2"}))).$on, $u.$$p = (TMP_38 = function(e){var self = TMP_38.$$s || this;
if (e == null) e = nil;
                          return self.$state()['$tmp_address2!'](e.$target().$value())}, TMP_38.$$s = self, TMP_38.$$arity = 1, TMP_38), $u).call($v, "change")}, TMP_37.$$s = self, TMP_37.$$arity = 0, TMP_37), $r).call($t, $hash2(["class"], {"class": "handle small-12 columns"}));}, TMP_33.$$s = self, TMP_33.$$arity = 0, TMP_33), $l).call($q, $hash2(["class"], {"class": "row"}));
                      ($l = ($r = self).$div, $l.$$p = (TMP_39 = function(){var self = TMP_39.$$s || this, $s, $t, TMP_40;

                      return ($s = ($t = self).$div, $s.$$p = (TMP_40 = function(){var self = TMP_40.$$s || this, $u, $v, TMP_41, $w, TMP_42;

                        ($u = ($v = self).$span, $u.$$p = (TMP_41 = function(){var self = TMP_41.$$s || this;

                          return "City"}, TMP_41.$$s = self, TMP_41.$$arity = 0, TMP_41), $u).call($v);
                          return ($u = ($w = self.$input($hash2(["class", "type", "placeholder"], {"class": "handle small-12", "type": "text", "placeholder": "City"}))).$on, $u.$$p = (TMP_42 = function(e){var self = TMP_42.$$s || this;
if (e == null) e = nil;
                          return self.$state()['$tmp_city!'](e.$target().$value())}, TMP_42.$$s = self, TMP_42.$$arity = 1, TMP_42), $u).call($w, "change");}, TMP_40.$$s = self, TMP_40.$$arity = 0, TMP_40), $s).call($t, $hash2(["class"], {"class": "handle small-6 large-6 medium-6 columns"}))}, TMP_39.$$s = self, TMP_39.$$arity = 0, TMP_39), $l).call($r, $hash2(["class"], {"class": "row"}));
                      ($l = ($s = self).$div, $l.$$p = (TMP_43 = function(){var self = TMP_43.$$s || this, $t, $u, TMP_44, $v, TMP_47;

                      ($t = ($u = self).$div, $t.$$p = (TMP_44 = function(){var self = TMP_44.$$s || this, $v, $w, TMP_45, $x, TMP_46;

                        ($v = ($w = self).$span, $v.$$p = (TMP_45 = function(){var self = TMP_45.$$s || this;

                          return "Country"}, TMP_45.$$s = self, TMP_45.$$arity = 0, TMP_45), $v).call($w);
                          return ($v = ($x = self.$input($hash2(["class", "type", "placeholder"], {"class": "handle small-12", "type": "text", "placeholder": "Country"}))).$on, $v.$$p = (TMP_46 = function(e){var self = TMP_46.$$s || this;
if (e == null) e = nil;
                          return self.$state()['$tmp_country!'](e.$target().$value())}, TMP_46.$$s = self, TMP_46.$$arity = 1, TMP_46), $v).call($x, "change");}, TMP_44.$$s = self, TMP_44.$$arity = 0, TMP_44), $t).call($u, $hash2(["class"], {"class": "handle small-12 large-6 medium-6 columns"}));
                        return ($t = ($v = self).$div, $t.$$p = (TMP_47 = function(){var self = TMP_47.$$s || this, $w, $x, TMP_48, $y, TMP_49;

                        ($w = ($x = self).$span, $w.$$p = (TMP_48 = function(){var self = TMP_48.$$s || this;

                          return "State"}, TMP_48.$$s = self, TMP_48.$$arity = 0, TMP_48), $w).call($x);
                          return ($w = ($y = self.$input($hash2(["class", "type", "placeholder"], {"class": "handle small-12", "type": "text", "placeholder": "State"}))).$on, $w.$$p = (TMP_49 = function(e){var self = TMP_49.$$s || this;
if (e == null) e = nil;
                          return self.$state()['$tmp_state!'](e.$target().$value())}, TMP_49.$$s = self, TMP_49.$$arity = 1, TMP_49), $w).call($y, "change");}, TMP_47.$$s = self, TMP_47.$$arity = 0, TMP_47), $t).call($v, $hash2(["class"], {"class": "handle small-12 large-6 medium-6 columns"}));}, TMP_43.$$s = self, TMP_43.$$arity = 0, TMP_43), $l).call($s, $hash2(["class"], {"class": "row"}));
                      ($l = ($t = self).$div, $l.$$p = (TMP_50 = function(){var self = TMP_50.$$s || this, $u, $v, TMP_51, $w, $x, TMP_52, TMP_53, $y, $z, TMP_54;

                      ($u = ($v = ($w = ($x = self).$button, $w.$$p = (TMP_52 = function(){var self = TMP_52.$$s || this;

                        return "Add"}, TMP_52.$$s = self, TMP_52.$$arity = 0, TMP_52), $w).call($x, $hash2(["type", "class"], {"type": "button", "class": "btn button action"}))).$on, $u.$$p = (TMP_51 = function(){var self = TMP_51.$$s || this, shareholder = nil;

                        shareholder = $scope.get('Shareholder').$new($hash2(["surname", "first_name", "other_names", "nationality", "residential_address", "residential_address_city", "residential_address_state", "residential_address_country", "holding"], {"surname": self.$state().$tmp_surname(), "first_name": self.$state().$tmp_fname(), "other_names": self.$state().$tmp_oname(), "nationality": self.$state().$tmp_nationality(), "residential_address": self.$state().$tmp_address(), "residential_address_city": self.$state().$tmp_city(), "residential_address_state": self.$state().$tmp_state(), "residential_address_country": self.$state().$tmp_country(), "holding": self.$state().$tmp_holding()}));
                          self.$state()['$shareholders!']()['$<<'](shareholder);
                          $scope.get('Store').$add_item("shareholders", self.$state().$shareholders());
                          return self.$state()['$add_shareholder!'](0);}, TMP_51.$$s = self, TMP_51.$$arity = 0, TMP_51), $u).call($v, "click");
                        return ($u = ($w = ($y = ($z = self).$button, $y.$$p = (TMP_54 = function(){var self = TMP_54.$$s || this;

                        return "Cancel"}, TMP_54.$$s = self, TMP_54.$$arity = 0, TMP_54), $y).call($z, $hash2(["type", "class"], {"type": "button", "class": "btn button action inner"}))).$on, $u.$$p = (TMP_53 = function(){var self = TMP_53.$$s || this;

                        return self.$state()['$add_shareholder!'](0)}, TMP_53.$$s = self, TMP_53.$$arity = 0, TMP_53), $u).call($w, "click");}, TMP_50.$$s = self, TMP_50.$$arity = 0, TMP_50), $l).call($t);
                      return self.$hr();
                      } else {
                      return nil
                    }}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13), $j).call($k, $hash2(["class"], {"class": "large-6 medium-6 small-12"}))}, TMP_12.$$s = self, TMP_12.$$arity = 0, TMP_12), $g).call($i, $hash2(["class"], {"class": "small-12 columns end"}));
                ($g = ($j = self).$div, $g.$$p = (TMP_55 = function(){var self = TMP_55.$$s || this, $k, $l, TMP_56, $m, TMP_57;

                ($k = ($l = self).$h5, $k.$$p = (TMP_56 = function(){var self = TMP_56.$$s || this;

                  return "Existing Shareholders"}, TMP_56.$$s = self, TMP_56.$$arity = 0, TMP_56), $k).call($l);
                  ($k = ($m = self).$ol, $k.$$p = (TMP_57 = function(){var self = TMP_57.$$s || this, $n, $o, TMP_58;

                  return ($n = ($o = self.$params().$shareholders()).$each, $n.$$p = (TMP_58 = function(shareholder){var self = TMP_58.$$s || this, $p, $q, TMP_59;
if (shareholder == null) shareholder = nil;
                    return ($p = ($q = self).$li, $p.$$p = (TMP_59 = function(){var self = TMP_59.$$s || this, $r, $s, TMP_60, $t, TMP_61, $u, TMP_62, $v, TMP_63, $w, TMP_64, $x, TMP_65, $y, TMP_66, $z, TMP_67, $aa, TMP_68, $ab, TMP_69, $ac, TMP_70, $ad, TMP_71, $ae, TMP_72, $af, TMP_73, $ag, TMP_74;

                      ($r = ($s = self).$span, $r.$$p = (TMP_60 = function(){var self = TMP_60.$$s || this;

                        return shareholder.$surname().$upcase()}, TMP_60.$$s = self, TMP_60.$$arity = 0, TMP_60), $r).call($s);
                        ($r = ($t = self).$span, $r.$$p = (TMP_61 = function(){var self = TMP_61.$$s || this;

                        return ", "}, TMP_61.$$s = self, TMP_61.$$arity = 0, TMP_61), $r).call($t);
                        ($r = ($u = self).$span, $r.$$p = (TMP_62 = function(){var self = TMP_62.$$s || this;

                        return shareholder.$first_name()}, TMP_62.$$s = self, TMP_62.$$arity = 0, TMP_62), $r).call($u);
                        ($r = ($v = self).$span, $r.$$p = (TMP_63 = function(){var self = TMP_63.$$s || this;

                        return " "}, TMP_63.$$s = self, TMP_63.$$arity = 0, TMP_63), $r).call($v);
                        ($r = ($w = self).$span, $r.$$p = (TMP_64 = function(){var self = TMP_64.$$s || this;

                        return shareholder.$other_names()}, TMP_64.$$s = self, TMP_64.$$arity = 0, TMP_64), $r).call($w);
                        self.$br();
                        ($r = ($x = self).$text, $r.$$p = (TMP_65 = function(){var self = TMP_65.$$s || this;

                        return "Nationality: "}, TMP_65.$$s = self, TMP_65.$$arity = 0, TMP_65), $r).call($x, $hash2(["style"], {"style": $hash2(["fontWeight"], {"fontWeight": "bold"})}));
                        ($r = ($y = self).$span, $r.$$p = (TMP_66 = function(){var self = TMP_66.$$s || this;

                        return shareholder.$nationality()}, TMP_66.$$s = self, TMP_66.$$arity = 0, TMP_66), $r).call($y);
                        self.$br();
                        ($r = ($z = self).$text, $r.$$p = (TMP_67 = function(){var self = TMP_67.$$s || this;

                        return "Address"}, TMP_67.$$s = self, TMP_67.$$arity = 0, TMP_67), $r).call($z, $hash2(["style"], {"style": $hash2(["fontWeight"], {"fontWeight": "bold"})}));
                        self.$br();
                        ($r = ($aa = self).$span, $r.$$p = (TMP_68 = function(){var self = TMP_68.$$s || this;

                        return shareholder.$residential_address()}, TMP_68.$$s = self, TMP_68.$$arity = 0, TMP_68), $r).call($aa);
                        self.$br();
                        ($r = ($ab = self).$span, $r.$$p = (TMP_69 = function(){var self = TMP_69.$$s || this;

                        return shareholder.$residential_address_city()}, TMP_69.$$s = self, TMP_69.$$arity = 0, TMP_69), $r).call($ab);
                        ($r = ($ac = self).$span, $r.$$p = (TMP_70 = function(){var self = TMP_70.$$s || this;

                        return ", "}, TMP_70.$$s = self, TMP_70.$$arity = 0, TMP_70), $r).call($ac);
                        self.$br();
                        ($r = ($ad = self).$span, $r.$$p = (TMP_71 = function(){var self = TMP_71.$$s || this;

                        return shareholder.$residential_address_state()}, TMP_71.$$s = self, TMP_71.$$arity = 0, TMP_71), $r).call($ad);
                        self.$br();
                        ($r = ($ae = self).$span, $r.$$p = (TMP_72 = function(){var self = TMP_72.$$s || this;

                        return shareholder.$residential_address_country()}, TMP_72.$$s = self, TMP_72.$$arity = 0, TMP_72), $r).call($ae);
                        self.$br();
                        ($r = ($af = self).$span, $r.$$p = (TMP_73 = function(){var self = TMP_73.$$s || this;

                        return shareholder.$holding()}, TMP_73.$$s = self, TMP_73.$$arity = 0, TMP_73), $r).call($af);
                        self.$br();
                        return ($r = ($ag = self).$div, $r.$$p = (TMP_74 = function(){var self = TMP_74.$$s || this, $ah, $ai, TMP_75, $aj, $ak, TMP_76, TMP_77, $al, $am, TMP_78;

                        ($ah = ($ai = ($aj = ($ak = self).$button, $aj.$$p = (TMP_76 = function(){var self = TMP_76.$$s || this;

                          return "Edit"}, TMP_76.$$s = self, TMP_76.$$arity = 0, TMP_76), $aj).call($ak, $hash2(["type", "style", "class"], {"type": "button", "style": $hash2(["fontWeight"], {"fontWeight": "bold"}), "class": "btn button action smaller"}))).$on, $ah.$$p = (TMP_75 = function(){var self = TMP_75.$$s || this;

                          return nil}, TMP_75.$$s = self, TMP_75.$$arity = 0, TMP_75), $ah).call($ai, "click");
                          ($ah = ($aj = ($al = ($am = self).$button, $al.$$p = (TMP_78 = function(){var self = TMP_78.$$s || this;

                          return "Delete"}, TMP_78.$$s = self, TMP_78.$$arity = 0, TMP_78), $al).call($am, $hash2(["type", "class"], {"type": "button", "class": "btn button action smaller alert"}))).$on, $ah.$$p = (TMP_77 = function(){var self = TMP_77.$$s || this;

                          return nil}, TMP_77.$$s = self, TMP_77.$$arity = 0, TMP_77), $ah).call($aj, "click");
                          return self.$br();}, TMP_74.$$s = self, TMP_74.$$arity = 0, TMP_74), $r).call($ag);}, TMP_59.$$s = self, TMP_59.$$arity = 0, TMP_59), $p).call($q)}, TMP_58.$$s = self, TMP_58.$$arity = 1, TMP_58), $n).call($o)}, TMP_57.$$s = self, TMP_57.$$arity = 0, TMP_57), $k).call($m);
                  return self.$hr($hash2(["class"], {"class": "noborder"}));}, TMP_55.$$s = self, TMP_55.$$arity = 0, TMP_55), $g).call($j, $hash2(["class"], {"class": "small-12 large-6 medium-6 collapse columns"}));
                return ($g = ($k = self).$div, $g.$$p = (TMP_79 = function(){var self = TMP_79.$$s || this, $l, $m, TMP_80, $n, TMP_81;

                if ((($l = (((($m = self.$state().$add_shareholder()['$=='](1)) !== false && $m !== nil && $m != null) ? $m : self.$state().$shareholders()['$empty?']()['$!']()))) !== nil && $l != null && (!$l.$$is_boolean || $l == true))) {
                    ($l = ($m = self).$h5, $l.$$p = (TMP_80 = function(){var self = TMP_80.$$s || this;

                    return "New Shareholders Added"}, TMP_80.$$s = self, TMP_80.$$arity = 0, TMP_80), $l).call($m);
                    return ($l = ($n = self).$ol, $l.$$p = (TMP_81 = function(){var self = TMP_81.$$s || this, $o, $p, TMP_82;

                    return ($o = ($p = self.$state().$shareholders()).$each, $o.$$p = (TMP_82 = function(shareholder){var self = TMP_82.$$s || this, $q, $r, TMP_83;
if (shareholder == null) shareholder = nil;
                      return ($q = ($r = self).$li, $q.$$p = (TMP_83 = function(){var self = TMP_83.$$s || this, $s, $t, TMP_84, $u, TMP_85, $v, TMP_86, $w, TMP_87, $x, TMP_88, $y, TMP_89, $z, TMP_90, $aa, TMP_91, $ab, TMP_92, $ac, TMP_93, $ad, TMP_94, $ae, TMP_95, $af, TMP_96, $ag, TMP_97, $ah, TMP_98, $ai, TMP_99, $aj, TMP_100, $ak, TMP_101, $al, TMP_102, $am, TMP_103;

                        ($s = ($t = self).$span, $s.$$p = (TMP_84 = function(){var self = TMP_84.$$s || this;

                          return shareholder.$surname().$upcase()}, TMP_84.$$s = self, TMP_84.$$arity = 0, TMP_84), $s).call($t);
                          ($s = ($u = self).$span, $s.$$p = (TMP_85 = function(){var self = TMP_85.$$s || this;

                          return ", "}, TMP_85.$$s = self, TMP_85.$$arity = 0, TMP_85), $s).call($u);
                          ($s = ($v = self).$span, $s.$$p = (TMP_86 = function(){var self = TMP_86.$$s || this;

                          return shareholder.$first_name()}, TMP_86.$$s = self, TMP_86.$$arity = 0, TMP_86), $s).call($v);
                          ($s = ($w = self).$span, $s.$$p = (TMP_87 = function(){var self = TMP_87.$$s || this;

                          return " "}, TMP_87.$$s = self, TMP_87.$$arity = 0, TMP_87), $s).call($w);
                          ($s = ($x = self).$span, $s.$$p = (TMP_88 = function(){var self = TMP_88.$$s || this;

                          return shareholder.$other_names()}, TMP_88.$$s = self, TMP_88.$$arity = 0, TMP_88), $s).call($x);
                          self.$br();
                          ($s = ($y = self).$text, $s.$$p = (TMP_89 = function(){var self = TMP_89.$$s || this;

                          return "Shareholding: "}, TMP_89.$$s = self, TMP_89.$$arity = 0, TMP_89), $s).call($y, $hash2(["style"], {"style": $hash2(["fontWeight"], {"fontWeight": "bold"})}));
                          ($s = ($z = self).$span, $s.$$p = (TMP_90 = function(){var self = TMP_90.$$s || this;

                          return shareholder.$holding()}, TMP_90.$$s = self, TMP_90.$$arity = 0, TMP_90), $s).call($z);
                          self.$br();
                          ($s = ($aa = self).$text, $s.$$p = (TMP_91 = function(){var self = TMP_91.$$s || this;

                          return "Nationality: "}, TMP_91.$$s = self, TMP_91.$$arity = 0, TMP_91), $s).call($aa, $hash2(["style"], {"style": $hash2(["fontWeight"], {"fontWeight": "bold"})}));
                          ($s = ($ab = self).$span, $s.$$p = (TMP_92 = function(){var self = TMP_92.$$s || this;

                          return shareholder.$nationality()}, TMP_92.$$s = self, TMP_92.$$arity = 0, TMP_92), $s).call($ab);
                          self.$br();
                          ($s = ($ac = self).$text, $s.$$p = (TMP_93 = function(){var self = TMP_93.$$s || this;

                          return "Address"}, TMP_93.$$s = self, TMP_93.$$arity = 0, TMP_93), $s).call($ac, $hash2(["style"], {"style": $hash2(["fontWeight"], {"fontWeight": "bold"})}));
                          self.$br();
                          ($s = ($ad = self).$span, $s.$$p = (TMP_94 = function(){var self = TMP_94.$$s || this;

                          return shareholder.$residential_address()}, TMP_94.$$s = self, TMP_94.$$arity = 0, TMP_94), $s).call($ad);
                          self.$br();
                          if ((($s = (shareholder.$residential_address_2()['$present?']())) !== nil && $s != null && (!$s.$$is_boolean || $s == true))) {
                            ($s = ($ae = self).$span, $s.$$p = (TMP_95 = function(){var self = TMP_95.$$s || this;

                            return shareholder.$residential_address_2()}, TMP_95.$$s = self, TMP_95.$$arity = 0, TMP_95), $s).call($ae);
                            self.$br();};
                          ($s = ($af = self).$span, $s.$$p = (TMP_96 = function(){var self = TMP_96.$$s || this;

                          return shareholder.$residential_address_city()}, TMP_96.$$s = self, TMP_96.$$arity = 0, TMP_96), $s).call($af);
                          if ((($s = (shareholder.$residential_address_pob()['$present?']())) !== nil && $s != null && (!$s.$$is_boolean || $s == true))) {
                            ($s = ($ag = self).$span, $s.$$p = (TMP_97 = function(){var self = TMP_97.$$s || this;

                            return ", "}, TMP_97.$$s = self, TMP_97.$$arity = 0, TMP_97), $s).call($ag);
                            self.$br();
                            ($s = ($ah = self).$text, $s.$$p = (TMP_98 = function(){var self = TMP_98.$$s || this;

                            return "POB "}, TMP_98.$$s = self, TMP_98.$$arity = 0, TMP_98), $s).call($ah);
                            ($s = ($ai = self).$span, $s.$$p = (TMP_99 = function(){var self = TMP_99.$$s || this;

                            return shareholder.$residential_address_pob()}, TMP_99.$$s = self, TMP_99.$$arity = 0, TMP_99), $s).call($ai);
                            ($s = ($aj = self).$span, $s.$$p = (TMP_100 = function(){var self = TMP_100.$$s || this;

                            return ", "}, TMP_100.$$s = self, TMP_100.$$arity = 0, TMP_100), $s).call($aj);};
                          self.$br();
                          ($s = ($ak = self).$span, $s.$$p = (TMP_101 = function(){var self = TMP_101.$$s || this;

                          return shareholder.$residential_address_state()}, TMP_101.$$s = self, TMP_101.$$arity = 0, TMP_101), $s).call($ak);
                          self.$br();
                          ($s = ($al = self).$span, $s.$$p = (TMP_102 = function(){var self = TMP_102.$$s || this;

                          return shareholder.$residential_address_country()}, TMP_102.$$s = self, TMP_102.$$arity = 0, TMP_102), $s).call($al);
                          self.$br();
                          self.$hr($hash2(["class"], {"class": "noborder"}));
                          return ($s = ($am = self).$div, $s.$$p = (TMP_103 = function(){var self = TMP_103.$$s || this, $an, $ao, TMP_104, $ap, $aq, TMP_105, TMP_106, $ar, $as, TMP_107;

                          ($an = ($ao = ($ap = ($aq = self).$button, $ap.$$p = (TMP_105 = function(){var self = TMP_105.$$s || this;

                            return "Edit"}, TMP_105.$$s = self, TMP_105.$$arity = 0, TMP_105), $ap).call($aq, $hash2(["type", "style", "class"], {"type": "button", "style": $hash2(["fontWeight"], {"fontWeight": "bold"}), "class": "btn button action smaller"}))).$on, $an.$$p = (TMP_104 = function(){var self = TMP_104.$$s || this;

                            return nil}, TMP_104.$$s = self, TMP_104.$$arity = 0, TMP_104), $an).call($ao, "click");
                            ($an = ($ap = ($ar = ($as = self).$button, $ar.$$p = (TMP_107 = function(){var self = TMP_107.$$s || this;

                            return "Delete"}, TMP_107.$$s = self, TMP_107.$$arity = 0, TMP_107), $ar).call($as, $hash2(["type", "class"], {"type": "button", "class": "btn button action smaller alert"}))).$on, $an.$$p = (TMP_106 = function(){var self = TMP_106.$$s || this;

                            return nil}, TMP_106.$$s = self, TMP_106.$$arity = 0, TMP_106), $an).call($ap, "click");
                            return self.$br();}, TMP_103.$$s = self, TMP_103.$$arity = 0, TMP_103), $s).call($am);}, TMP_83.$$s = self, TMP_83.$$arity = 0, TMP_83), $q).call($r)}, TMP_82.$$s = self, TMP_82.$$arity = 1, TMP_82), $o).call($p)}, TMP_81.$$s = self, TMP_81.$$arity = 0, TMP_81), $l).call($n);
                    } else {
                    return nil
                  }}, TMP_79.$$s = self, TMP_79.$$arity = 0, TMP_79), $g).call($k, $hash2(["class"], {"class": "small-12 large-6 medium-6 collapse columns"}));}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $e).call($f, $hash2(["id", "class"], {"id": "section-pane", "class": "small-12 columns"}))}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $c).call($d, $hash2(["class"], {"class": "small-12 "}))}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($b);
        }, TMP_108.$$arity = 0), nil) && 'render';
      })($scope.base, (((($scope.get('React')).$$scope.get('Component'))).$$scope.get('Base')))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["components/filing/show"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$before_mount', '$after_mount', '$before_update', '$before_unmount', '$div']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Filing, self = $Filing = $module($base, 'Filing');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Show(){};
        var self = $Show = $klass($base, $super, 'Show', $Show);

        var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, $c, TMP_2, $d, TMP_3, $e, TMP_4, TMP_6;

        ($a = ($b = self).$before_mount, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this;

        return nil}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1), $a).call($b);

        ($a = ($c = self).$after_mount, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

        return nil}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2), $a).call($c);

        ($a = ($d = self).$before_update, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

        return nil}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $a).call($d);

        ($a = ($e = self).$before_unmount, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

        return nil}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($e);

        return (Opal.defn(self, '$render', TMP_6 = function $$render() {
          var $a, $b, TMP_5, self = this;

          return ($a = ($b = self).$div, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

          return "Filing::Show"}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($b);
        }, TMP_6.$$arity = 0), nil) && 'render';
      })($scope.base, (((($scope.get('React')).$$scope.get('Component'))).$$scope.get('Base')))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["components/filing/store"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$include', '$export_state', '$[]=', '$store!', '$[]', '$store', '$delete', '$each', '$to_proc', '$before_first_mount', '$init']);
  return (function($base, $super) {
    function $Store(){};
    var self = $Store = $klass($base, $super, 'Store', $Store);

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_7;

    self.$include((($scope.get('React')).$$scope.get('Component')));

    self.$include((($scope.get('React')).$$scope.get('IsomorphicHelpers')));

    self.$export_state("store");

    (function(self) {
      var $scope = self.$$scope, def = self.$$proto, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6;

      Opal.defn(self, '$add_item', TMP_1 = function $$add_item(key, value) {
        var self = this;

        return self['$store!']()['$[]='](key, value);
      }, TMP_1.$$arity = 2);
      Opal.defn(self, '$retrieve_item', TMP_2 = function $$retrieve_item(key) {
        var self = this;

        return self.$store()['$[]'](key);
      }, TMP_2.$$arity = 1);
      Opal.defn(self, '$delete_item', TMP_3 = function $$delete_item(key) {
        var self = this;

        return self['$store!']().$delete(key);
      }, TMP_3.$$arity = 1);
      Opal.defn(self, '$each', TMP_4 = function $$each() {
        var $a, $b, self = this, $iter = TMP_4.$$p, block = $iter || nil;

        TMP_4.$$p = null;
        return ($a = ($b = self.$store()).$each, $a.$$p = block.$to_proc(), $a).call($b);
      }, TMP_4.$$arity = 0);
      Opal.defn(self, '$commit', TMP_5 = function $$commit() {
        var self = this;

        return nil;
      }, TMP_5.$$arity = 0);
      return (Opal.defn(self, '$init', TMP_6 = function $$init() {
        var self = this;

        return self['$store!']($hash2(["step"], {"step": 0}));
      }, TMP_6.$$arity = 0), nil) && 'init';
    })(Opal.get_singleton_class(self));

    return ($a = ($b = self).$before_first_mount, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this;

    return $scope.get('Store').$init()}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $a).call($b);
  })($scope.base, null)
};
/* Generated by Opal 0.10.3 */
Opal.modules["components/filing/submit"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$param', '$new', '$post', '$ok?', '$puts', '$before_mount', '$filer_surname!', '$state', '$retrieve_item', '$filer_fname!', '$filer_oname!', '$filer_accr!', '$filer_address!', '$filer_address_2!', '$filer_city!', '$filer_state!', '$filer_tel_number!', '$filer_email!', '$after_mount', '$before_update', '$before_unmount', '$div', '$h5', '$hr', '$span', '$on', '$value', '$target', '$input', '$filer_address2!', '$b', '$br', '$present?', '$filer_surname', '$upcase', '$filer_fname', '$filer_oname', '$filer_accr', '$filer_address', '$filer_address_2', '$filer_city', '$filer_state', '$filer_tel_number', '$filer_email', '$add_item', '$commit', '$each', '$==', '$[]=', '$to_json', '$address_update!', '$then', '$put', '$id', '$company', '$params', '$button']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Filing, self = $Filing = $module($base, 'Filing');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Submit(){};
        var self = $Submit = $klass($base, $super, 'Submit', $Submit);

        var def = self.$$proto, $scope = self.$$scope, TMP_2, $a, $b, TMP_3, $c, TMP_4, $d, TMP_5, $e, TMP_6, TMP_71;

        self.$param("stepper", $hash2(["type"], {"type": $scope.get('Proc')}));

        self.$param("company");

        Opal.defn(self, '$post_to_gateway', TMP_2 = function $$post_to_gateway(url) {
          var $a, $b, TMP_1, self = this, promise = nil;

          promise = $scope.get('Promise').$new();
          ($a = ($b = $scope.get('HTTP')).$post, $a.$$p = (TMP_1 = function(response){var self = TMP_1.$$s || this, $c;
if (response == null) response = nil;
          if ((($c = response['$ok?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return self.$puts(response)
              } else {
              return self.$puts(response)
            }}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $a).call($b, url, $hash2(["payload"], {"payload": "<form></form>"}));
          return promise;
        }, TMP_2.$$arity = 1);

        ($a = ($b = self).$before_mount, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

        self.$state()['$filer_surname!']($scope.get('Store').$retrieve_item("filer_surname"));
          self.$state()['$filer_fname!']($scope.get('Store').$retrieve_item("filer_fname"));
          self.$state()['$filer_oname!']($scope.get('Store').$retrieve_item("filer_oname"));
          self.$state()['$filer_accr!']($scope.get('Store').$retrieve_item("filer_accr"));
          self.$state()['$filer_address!']($scope.get('Store').$retrieve_item("filer_address"));
          self.$state()['$filer_address_2!']($scope.get('Store').$retrieve_item("filer_address_2"));
          self.$state()['$filer_city!']($scope.get('Store').$retrieve_item("filer_city"));
          self.$state()['$filer_state!']($scope.get('Store').$retrieve_item("filer_state"));
          self.$state()['$filer_tel_number!']($scope.get('Store').$retrieve_item("filer_tel_number"));
          return self.$state()['$filer_email!']($scope.get('Store').$retrieve_item("filer_email"));}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $a).call($b);

        ($a = ($c = self).$after_mount, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

        return nil}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($c);

        ($a = ($d = self).$before_update, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

        return nil}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($d);

        ($a = ($e = self).$before_unmount, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

        return nil}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($e);

        return (Opal.defn(self, '$render', TMP_71 = function $$render() {
          var $a, $b, TMP_7, self = this;

          return ($a = ($b = self).$div, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this, $c, $d, TMP_8;

          return ($c = ($d = self).$div, $c.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this, $e, $f, TMP_9;

            return ($e = ($f = self).$div, $e.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this, $g, $h, TMP_10, $i, TMP_48;

              ($g = ($h = self).$div, $g.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this, $i, $j, TMP_11;

                ($i = ($j = self).$div, $i.$$p = (TMP_11 = function(){var self = TMP_11.$$s || this, $k, $l, TMP_12, $m, TMP_13, $n, TMP_20, $o, TMP_27, $p, TMP_31, $q, TMP_34, $r, TMP_41;

                  if ((($k = (true)) !== nil && $k != null && (!$k.$$is_boolean || $k == true))) {
                      ($k = ($l = self).$h5, $k.$$p = (TMP_12 = function(){var self = TMP_12.$$s || this;

                      return "Filing Presented By"}, TMP_12.$$s = self, TMP_12.$$arity = 0, TMP_12), $k).call($l);
                      self.$hr($hash2(["class"], {"class": "noborder"}));
                      ($k = ($m = self).$div, $k.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this, $n, $o, TMP_14, $p, TMP_17;

                      ($n = ($o = self).$div, $n.$$p = (TMP_14 = function(){var self = TMP_14.$$s || this, $p, $q, TMP_15, $r, TMP_16;

                        ($p = ($q = self).$span, $p.$$p = (TMP_15 = function(){var self = TMP_15.$$s || this;

                          return "Surname"}, TMP_15.$$s = self, TMP_15.$$arity = 0, TMP_15), $p).call($q);
                          return ($p = ($r = self.$input($hash2(["class", "type", "placeholder"], {"class": "handle small-12", "type": "text", "placeholder": "Surname"}))).$on, $p.$$p = (TMP_16 = function(e){var self = TMP_16.$$s || this;
if (e == null) e = nil;
                          return self.$state()['$filer_surname!'](e.$target().$value())}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16), $p).call($r, "change");}, TMP_14.$$s = self, TMP_14.$$arity = 0, TMP_14), $n).call($o, $hash2(["class"], {"class": "handle small-12 large-6 medium-6 columns"}));
                        return ($n = ($p = self).$div, $n.$$p = (TMP_17 = function(){var self = TMP_17.$$s || this, $q, $r, TMP_18, $s, TMP_19;

                        ($q = ($r = self).$span, $q.$$p = (TMP_18 = function(){var self = TMP_18.$$s || this;

                          return "First Name"}, TMP_18.$$s = self, TMP_18.$$arity = 0, TMP_18), $q).call($r);
                          return ($q = ($s = self.$input($hash2(["class", "type", "placeholder"], {"class": "handle small-12", "type": "text", "placeholder": "First Name"}))).$on, $q.$$p = (TMP_19 = function(e){var self = TMP_19.$$s || this;
if (e == null) e = nil;
                          return self.$state()['$filer_fname!'](e.$target().$value())}, TMP_19.$$s = self, TMP_19.$$arity = 1, TMP_19), $q).call($s, "change");}, TMP_17.$$s = self, TMP_17.$$arity = 0, TMP_17), $n).call($p, $hash2(["class"], {"class": "handle small-12 large-6 medium-6 columns"}));}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13), $k).call($m, $hash2(["class"], {"class": "row"}));
                      ($k = ($n = self).$div, $k.$$p = (TMP_20 = function(){var self = TMP_20.$$s || this, $o, $p, TMP_21, $q, TMP_24;

                      ($o = ($p = self).$div, $o.$$p = (TMP_21 = function(){var self = TMP_21.$$s || this, $q, $r, TMP_22, $s, TMP_23;

                        ($q = ($r = self).$span, $q.$$p = (TMP_22 = function(){var self = TMP_22.$$s || this;

                          return "Other names"}, TMP_22.$$s = self, TMP_22.$$arity = 0, TMP_22), $q).call($r);
                          return ($q = ($s = self.$input($hash2(["class", "type", "placeholder"], {"class": "handle small-12", "type": "text", "placeholder": "Other Names"}))).$on, $q.$$p = (TMP_23 = function(e){var self = TMP_23.$$s || this;
if (e == null) e = nil;
                          return self.$state()['$filer_oname!'](e.$target().$value())}, TMP_23.$$s = self, TMP_23.$$arity = 1, TMP_23), $q).call($s, "change");}, TMP_21.$$s = self, TMP_21.$$arity = 0, TMP_21), $o).call($p, $hash2(["class"], {"class": "handle small-12 large-6 medium-6 columns"}));
                        return ($o = ($q = self).$div, $o.$$p = (TMP_24 = function(){var self = TMP_24.$$s || this, $r, $s, TMP_25, $t, TMP_26;

                        ($r = ($s = self).$span, $r.$$p = (TMP_25 = function(){var self = TMP_25.$$s || this;

                          return "Accreditation Number"}, TMP_25.$$s = self, TMP_25.$$arity = 0, TMP_25), $r).call($s);
                          return ($r = ($t = self.$input($hash2(["class", "type", "placeholder"], {"class": "handle small-12", "type": "text", "placeholder": "Accreditation Number"}))).$on, $r.$$p = (TMP_26 = function(e){var self = TMP_26.$$s || this;
if (e == null) e = nil;
                          return self.$state()['$filer_accr!'](e.$target().$value())}, TMP_26.$$s = self, TMP_26.$$arity = 1, TMP_26), $r).call($t, "change");}, TMP_24.$$s = self, TMP_24.$$arity = 0, TMP_24), $o).call($q, $hash2(["class"], {"class": "handle small-12 large-6 medium-6 columns"}));}, TMP_20.$$s = self, TMP_20.$$arity = 0, TMP_20), $k).call($n, $hash2(["class"], {"class": "row"}));
                      ($k = ($o = self).$div, $k.$$p = (TMP_27 = function(){var self = TMP_27.$$s || this, $p, $q, TMP_28;

                      return ($p = ($q = self).$div, $p.$$p = (TMP_28 = function(){var self = TMP_28.$$s || this, $r, $s, TMP_29, $t, TMP_30;

                        ($r = ($s = self).$span, $r.$$p = (TMP_29 = function(){var self = TMP_29.$$s || this;

                          return "Address"}, TMP_29.$$s = self, TMP_29.$$arity = 0, TMP_29), $r).call($s);
                          return ($r = ($t = self.$input($hash2(["class", "type", "placeholder"], {"class": "handle small-12", "type": "text", "placeholder": "Address"}))).$on, $r.$$p = (TMP_30 = function(e){var self = TMP_30.$$s || this;
if (e == null) e = nil;
                          return self.$state()['$filer_address!'](e.$target().$value())}, TMP_30.$$s = self, TMP_30.$$arity = 1, TMP_30), $r).call($t, "change");}, TMP_28.$$s = self, TMP_28.$$arity = 0, TMP_28), $p).call($q, $hash2(["class"], {"class": "handle small-12 columns"}))}, TMP_27.$$s = self, TMP_27.$$arity = 0, TMP_27), $k).call($o, $hash2(["class"], {"class": "row"}));
                      ($k = ($p = self).$div, $k.$$p = (TMP_31 = function(){var self = TMP_31.$$s || this, $q, $r, TMP_32;

                      return ($q = ($r = self).$div, $q.$$p = (TMP_32 = function(){var self = TMP_32.$$s || this, $s, $t, TMP_33;

                        return ($s = ($t = self.$input($hash2(["class", "type", "placeholder"], {"class": "handle small-12", "type": "text", "placeholder": "Address"}))).$on, $s.$$p = (TMP_33 = function(e){var self = TMP_33.$$s || this;
if (e == null) e = nil;
                          return self.$state()['$filer_address2!'](e.$target().$value())}, TMP_33.$$s = self, TMP_33.$$arity = 1, TMP_33), $s).call($t, "change")}, TMP_32.$$s = self, TMP_32.$$arity = 0, TMP_32), $q).call($r, $hash2(["class"], {"class": "handle small-12 columns"}))}, TMP_31.$$s = self, TMP_31.$$arity = 0, TMP_31), $k).call($p, $hash2(["class"], {"class": "row"}));
                      ($k = ($q = self).$div, $k.$$p = (TMP_34 = function(){var self = TMP_34.$$s || this, $r, $s, TMP_35, $t, TMP_38;

                      ($r = ($s = self).$div, $r.$$p = (TMP_35 = function(){var self = TMP_35.$$s || this, $t, $u, TMP_36, $v, TMP_37;

                        ($t = ($u = self).$span, $t.$$p = (TMP_36 = function(){var self = TMP_36.$$s || this;

                          return "City"}, TMP_36.$$s = self, TMP_36.$$arity = 0, TMP_36), $t).call($u);
                          return ($t = ($v = self.$input($hash2(["class", "type", "placeholder"], {"class": "handle small-12", "type": "text", "placeholder": "City"}))).$on, $t.$$p = (TMP_37 = function(e){var self = TMP_37.$$s || this;
if (e == null) e = nil;
                          return self.$state()['$filer_city!'](e.$target().$value())}, TMP_37.$$s = self, TMP_37.$$arity = 1, TMP_37), $t).call($v, "change");}, TMP_35.$$s = self, TMP_35.$$arity = 0, TMP_35), $r).call($s, $hash2(["class"], {"class": "handle small-6 large-6 medium-6 columns"}));
                        return ($r = ($t = self).$div, $r.$$p = (TMP_38 = function(){var self = TMP_38.$$s || this, $u, $v, TMP_39, $w, TMP_40;

                        ($u = ($v = self).$span, $u.$$p = (TMP_39 = function(){var self = TMP_39.$$s || this;

                          return "State"}, TMP_39.$$s = self, TMP_39.$$arity = 0, TMP_39), $u).call($v);
                          return ($u = ($w = self.$input($hash2(["class", "type", "placeholder"], {"class": "handle small-12", "type": "text", "placeholder": "State"}))).$on, $u.$$p = (TMP_40 = function(e){var self = TMP_40.$$s || this;
if (e == null) e = nil;
                          return self.$state()['$filer_state!'](e.$target().$value())}, TMP_40.$$s = self, TMP_40.$$arity = 1, TMP_40), $u).call($w, "change");}, TMP_38.$$s = self, TMP_38.$$arity = 0, TMP_38), $r).call($t, $hash2(["class"], {"class": "handle small-12 large-6 medium-6 columns"}));}, TMP_34.$$s = self, TMP_34.$$arity = 0, TMP_34), $k).call($q, $hash2(["class"], {"class": "row"}));
                      return ($k = ($r = self).$div, $k.$$p = (TMP_41 = function(){var self = TMP_41.$$s || this, $s, $t, TMP_42, $u, TMP_45;

                      ($s = ($t = self).$div, $s.$$p = (TMP_42 = function(){var self = TMP_42.$$s || this, $u, $v, TMP_43, $w, TMP_44;

                        ($u = ($v = self).$span, $u.$$p = (TMP_43 = function(){var self = TMP_43.$$s || this;

                          return "Tel Number"}, TMP_43.$$s = self, TMP_43.$$arity = 0, TMP_43), $u).call($v);
                          return ($u = ($w = self.$input($hash2(["class", "type", "placeholder"], {"class": "handle small-12", "type": "text", "placeholder": "Tel Number"}))).$on, $u.$$p = (TMP_44 = function(e){var self = TMP_44.$$s || this;
if (e == null) e = nil;
                          return self.$state()['$filer_tel_number!'](e.$target().$value())}, TMP_44.$$s = self, TMP_44.$$arity = 1, TMP_44), $u).call($w, "change");}, TMP_42.$$s = self, TMP_42.$$arity = 0, TMP_42), $s).call($t, $hash2(["class"], {"class": "handle small-6 large-6 medium-6 columns"}));
                        return ($s = ($u = self).$div, $s.$$p = (TMP_45 = function(){var self = TMP_45.$$s || this, $v, $w, TMP_46, $x, TMP_47;

                        ($v = ($w = self).$span, $v.$$p = (TMP_46 = function(){var self = TMP_46.$$s || this;

                          return "Email"}, TMP_46.$$s = self, TMP_46.$$arity = 0, TMP_46), $v).call($w);
                          return ($v = ($x = self.$input($hash2(["class", "type", "placeholder"], {"class": "handle small-12", "type": "text", "placeholder": "Email"}))).$on, $v.$$p = (TMP_47 = function(e){var self = TMP_47.$$s || this;
if (e == null) e = nil;
                          return self.$state()['$filer_email!'](e.$target().$value())}, TMP_47.$$s = self, TMP_47.$$arity = 1, TMP_47), $v).call($x, "change");}, TMP_45.$$s = self, TMP_45.$$arity = 0, TMP_45), $s).call($u, $hash2(["class"], {"class": "handle small-12 large-6 medium-6 columns"}));}, TMP_41.$$s = self, TMP_41.$$arity = 0, TMP_41), $k).call($r, $hash2(["class"], {"class": "row"}));
                      } else {
                      return nil
                    }}, TMP_11.$$s = self, TMP_11.$$arity = 0, TMP_11), $i).call($j, $hash2(["class"], {"class": "small-12"}));
                  return self.$hr($hash2(["class"], {"class": "noborder"}));}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10), $g).call($h, $hash2(["class"], {"class": "small-12 large-8 medium-8 columns"}));
                return ($g = ($i = self).$div, $g.$$p = (TMP_48 = function(){var self = TMP_48.$$s || this, $j, $k, TMP_49;

                return ($j = ($k = self).$div, $j.$$p = (TMP_49 = function(){var self = TMP_49.$$s || this, $l, $m, TMP_50, $n, TMP_51, $o, TMP_52, $p, TMP_53, $q, TMP_54, $r, TMP_55, $s, TMP_56, $t, TMP_57, $u, TMP_58, $v, TMP_59, $w, TMP_60, $x, TMP_61, $y, TMP_62, $z, TMP_63, $aa, TMP_64, $ab, TMP_65, $ac, TMP_66;

                  self.$hr();
                    ($l = ($m = self).$b, $l.$$p = (TMP_50 = function(){var self = TMP_50.$$s || this;

                    return "Presenter Details"}, TMP_50.$$s = self, TMP_50.$$arity = 0, TMP_50), $l).call($m);
                    self.$br();
                    if ((($l = (self.$state().$filer_surname()['$present?']())) !== nil && $l != null && (!$l.$$is_boolean || $l == true))) {
                      ($l = ($n = self).$span, $l.$$p = (TMP_51 = function(){var self = TMP_51.$$s || this;

                      return self.$state().$filer_surname().$upcase()}, TMP_51.$$s = self, TMP_51.$$arity = 0, TMP_51), $l).call($n);
                      ($l = ($o = self).$span, $l.$$p = (TMP_52 = function(){var self = TMP_52.$$s || this;

                      return ", "}, TMP_52.$$s = self, TMP_52.$$arity = 0, TMP_52), $l).call($o);
                      ($l = ($p = self).$span, $l.$$p = (TMP_53 = function(){var self = TMP_53.$$s || this;

                      return self.$state().$filer_fname()}, TMP_53.$$s = self, TMP_53.$$arity = 0, TMP_53), $l).call($p);
                      ($l = ($q = self).$span, $l.$$p = (TMP_54 = function(){var self = TMP_54.$$s || this;

                      return " "}, TMP_54.$$s = self, TMP_54.$$arity = 0, TMP_54), $l).call($q);
                      ($l = ($r = self).$span, $l.$$p = (TMP_55 = function(){var self = TMP_55.$$s || this;

                      return self.$state().$filer_oname()}, TMP_55.$$s = self, TMP_55.$$arity = 0, TMP_55), $l).call($r);
                      self.$br();
                      ($l = ($s = self).$b, $l.$$p = (TMP_56 = function(){var self = TMP_56.$$s || this;

                      return "Accreditation No. "}, TMP_56.$$s = self, TMP_56.$$arity = 0, TMP_56), $l).call($s);
                      ($l = ($t = self).$span, $l.$$p = (TMP_57 = function(){var self = TMP_57.$$s || this;

                      return self.$state().$filer_accr()}, TMP_57.$$s = self, TMP_57.$$arity = 0, TMP_57), $l).call($t);
                      self.$br();
                      ($l = ($u = self).$span, $l.$$p = (TMP_58 = function(){var self = TMP_58.$$s || this;

                      return self.$state().$filer_address()}, TMP_58.$$s = self, TMP_58.$$arity = 0, TMP_58), $l).call($u);
                      if ((($l = (self.$state().$filer_address_2()['$present?']())) !== nil && $l != null && (!$l.$$is_boolean || $l == true))) {
                        self.$br();
                        ($l = ($v = self).$span, $l.$$p = (TMP_59 = function(){var self = TMP_59.$$s || this;

                        return self.$state().$filer_address_2()}, TMP_59.$$s = self, TMP_59.$$arity = 0, TMP_59), $l).call($v);};
                      self.$br();
                      ($l = ($w = self).$span, $l.$$p = (TMP_60 = function(){var self = TMP_60.$$s || this;

                      return self.$state().$filer_city()}, TMP_60.$$s = self, TMP_60.$$arity = 0, TMP_60), $l).call($w);
                      self.$br();
                      ($l = ($x = self).$span, $l.$$p = (TMP_61 = function(){var self = TMP_61.$$s || this;

                      return self.$state().$filer_state()}, TMP_61.$$s = self, TMP_61.$$arity = 0, TMP_61), $l).call($x);
                      self.$br();
                      ($l = ($y = self).$b, $l.$$p = (TMP_62 = function(){var self = TMP_62.$$s || this;

                      return "Tel: "}, TMP_62.$$s = self, TMP_62.$$arity = 0, TMP_62), $l).call($y);
                      ($l = ($z = self).$span, $l.$$p = (TMP_63 = function(){var self = TMP_63.$$s || this;

                      return self.$state().$filer_tel_number()}, TMP_63.$$s = self, TMP_63.$$arity = 0, TMP_63), $l).call($z);
                      self.$br();
                      ($l = ($aa = self).$b, $l.$$p = (TMP_64 = function(){var self = TMP_64.$$s || this;

                      return "Email: "}, TMP_64.$$s = self, TMP_64.$$arity = 0, TMP_64), $l).call($aa);
                      ($l = ($ab = self).$span, $l.$$p = (TMP_65 = function(){var self = TMP_65.$$s || this;

                      return self.$state().$filer_email()}, TMP_65.$$s = self, TMP_65.$$arity = 0, TMP_65), $l).call($ab);
                      self.$hr($hash2(["class"], {"class": "noborder"}));
                      return ($l = ($ac = self).$div, $l.$$p = (TMP_66 = function(){var self = TMP_66.$$s || this, $ad, $ae, TMP_67, $af, $ag, TMP_70;

                      return ($ad = ($ae = ($af = ($ag = self).$button, $af.$$p = (TMP_70 = function(){var self = TMP_70.$$s || this;

                        return "Submit"}, TMP_70.$$s = self, TMP_70.$$arity = 0, TMP_70), $af).call($ag, $hash2(["type", "class"], {"type": "button", "class": "btn button action"}))).$on, $ad.$$p = (TMP_67 = function(){var self = TMP_67.$$s || this, $af, $ag, TMP_68, $ah, TMP_69, tstore = nil, data = nil;

                        $scope.get('Store').$add_item("filer_surname", self.$state().$filer_surname());
                          $scope.get('Store').$add_item("filer_fname", self.$state().$filer_fname());
                          $scope.get('Store').$add_item("filer_oname", self.$state().$filer_oname());
                          $scope.get('Store').$add_item("filer_accr", self.$state().$filer_accr());
                          $scope.get('Store').$add_item("filer_address", self.$state().$filer_address());
                          $scope.get('Store').$add_item("filer_address_2", self.$state().$filer_address_2());
                          $scope.get('Store').$add_item("filer_city", self.$state().$filer_city());
                          $scope.get('Store').$add_item("filer_state", self.$state().$filer_state());
                          $scope.get('Store').$add_item("filer_email", self.$state().$filer_email());
                          $scope.get('Store').$add_item("filer_tel_number", self.$state().$filer_tel_number());
                          $scope.get('Store').$commit();
                          tstore = $hash2([], {});
                          ($af = ($ag = $scope.get('Store')).$each, $af.$$p = (TMP_68 = function(k, v){var self = TMP_68.$$s || this, $ah;
if (k == null) k = nil;if (v == null) v = nil;
                          if (k['$==']((((($ah = "officers") !== false && $ah !== nil && $ah != null) ? $ah : "shareholders")))) {
                              return tstore['$[]='](k, v.$to_json())
                              } else {
                              return tstore['$[]='](k, v)
                            }}, TMP_68.$$s = self, TMP_68.$$arity = 2, TMP_68), $af).call($ag);
                          data = $hash2([], {});
                          data['$[]=']("tstore", tstore);
                          self.$state()['$address_update!'](0);
                          ($af = ($ah = $scope.get('HTTP').$put("/companies/" + (self.$params().$company().$id()), $hash2(["payload"], {"payload": data}))).$then, $af.$$p = (TMP_69 = function(req){var self = TMP_69.$$s || this;
if (req == null) req = nil;
                          return nil}, TMP_69.$$s = self, TMP_69.$$arity = 1, TMP_69), $af).call($ah);
                          return window.location = "/payments/new";}, TMP_67.$$s = self, TMP_67.$$arity = 0, TMP_67), $ad).call($ae, "click")}, TMP_66.$$s = self, TMP_66.$$arity = 0, TMP_66), $l).call($ac);
                      } else {
                      return nil
                    };}, TMP_49.$$s = self, TMP_49.$$arity = 0, TMP_49), $j).call($k)}, TMP_48.$$s = self, TMP_48.$$arity = 0, TMP_48), $g).call($i, $hash2(["class"], {"class": "small-12 large-4 medium-4 collapse columns"}));}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $e).call($f, $hash2(["id", "class"], {"id": "section-pane", "class": "small-12 columns"}))}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $c).call($d, $hash2(["class"], {"class": "small-12 "}))}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $a).call($b);
        }, TMP_71.$$arity = 0), nil) && 'render';
      })($scope.base, (((($scope.get('React')).$$scope.get('Component'))).$$scope.get('Base')))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.3 */
Opal.modules["components"] = function(Opal) {
  var $a, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require', '$on_opal_client?', '$require_tree']);
  self.$require("opal");
  self.$require("webpack/client_and_server.js");
  self.$require("hyper-react");
  self.$require("reactrb/auto-import");
  if ((($a = (($scope.get('React')).$$scope.get('IsomorphicHelpers'))['$on_opal_client?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
    self.$require("opal-jquery");
    self.$require("browser");
    self.$require("browser/interval");
    self.$require("browser/delay");};
  self.$require("hyper-router");
  self.$require("react_router");
  self.$require("hyper-mesh");
  self.$require("models");
  return self.$require_tree("components");
};
/*globals React, Turbolinks*/

// Unobtrusive scripting adapter for React
;(function(document, window) {
  // jQuery is optional. Use it to support legacy browsers.
  var $ = (typeof window.jQuery !== 'undefined') && window.jQuery;

  // create the  namespace
  window.ReactRailsUJS = {
    CLASS_NAME_ATTR: 'data-react-class',
    PROPS_ATTR: 'data-react-props',
    RAILS_ENV_DEVELOPMENT: true,
    // helper method for the mount and unmount methods to find the
    // `data-react-class` DOM elements
    findDOMNodes: function(searchSelector) {
      // we will use fully qualified paths as we do not bind the callbacks
      var selector, parent;

      switch (typeof searchSelector) {
        case 'undefined':
          selector = '[' + window.ReactRailsUJS.CLASS_NAME_ATTR + ']';
          parent = document;
          break;
        case 'object':
          selector = '[' + window.ReactRailsUJS.CLASS_NAME_ATTR + ']';
          parent = searchSelector;
          break;
        case 'string':
          selector = searchSelector + ' [' + window.ReactRailsUJS.CLASS_NAME_ATTR + ']';
          parent = document;
          break
        default:
          break;
      }

      if ($) {
        return $(selector, parent);
      } else {
        return parent.querySelectorAll(selector);
      }
    },

    mountComponents: function(searchSelector) {
      var nodes = window.ReactRailsUJS.findDOMNodes(searchSelector);

      for (var i = 0; i < nodes.length; ++i) {
        var node = nodes[i];
        var className = node.getAttribute(window.ReactRailsUJS.CLASS_NAME_ATTR);

        // Assume className is simple and can be found at top-level (window).
        // Fallback to eval to handle cases like 'My.React.ComponentName'.
        var constructor = window[className] || eval.call(window, className);
        var propsJson = node.getAttribute(window.ReactRailsUJS.PROPS_ATTR);
        var props = propsJson && JSON.parse(propsJson);

        // Prefer ReactDOM if defined (introduced in 0.14)
        var renderer = (typeof ReactDOM == "object") ? ReactDOM : React;

        renderer.render(React.createElement(constructor, props), node);
      }
    },

    unmountComponents: function(searchSelector) {
      var nodes = window.ReactRailsUJS.findDOMNodes(searchSelector);

      for (var i = 0; i < nodes.length; ++i) {
        var node = nodes[i];

        // Prefer ReactDOM if defined (introduced in 0.14)
        var renderer = (typeof ReactDOM == "object") ? ReactDOM : React;
        renderer.unmountComponentAtNode(node);
      }
    }
  };

  // functions not exposed publicly
  function handleTurbolinksEvents () {
    var handleEvent;
    var unmountEvent;

    if ($) {
      handleEvent = function(eventName, callback) {
        $(document).on(eventName, callback);
      };

    } else {
      handleEvent = function(eventName, callback) {
        document.addEventListener(eventName, callback);
      };
    }

    if (Turbolinks.EVENTS) {
      unmountEvent = Turbolinks.EVENTS.BEFORE_UNLOAD;
    } else {
      unmountEvent = 'page:receive';
      Turbolinks.pagesCached(0);

      if (window.ReactRailsUJS.RAILS_ENV_DEVELOPMENT) {
        console.warn('The Turbolinks cache has been disabled (Turbolinks >= 2.4.0 is recommended). See https://github.com/reactjs/react-rails/issues/87 for more information.');
      }
    }
    handleEvent('page:change', function() {window.ReactRailsUJS.mountComponents()});
    handleEvent(unmountEvent, function() {window.ReactRailsUJS.unmountComponents()});
  }

  function handleNativeEvents() {
    if ($) {
      $(function() {window.ReactRailsUJS.mountComponents()});
    } else {
      document.addEventListener('DOMContentLoaded', function() {window.ReactRailsUJS.mountComponents()});
    }
  }

  if (typeof Turbolinks !== 'undefined' && Turbolinks.supported) {
    handleTurbolinksEvents();
  } else {
    handleNativeEvents();
  }
})(document, window);
/*!
 * jQuery JavaScript Library v1.12.4
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-05-20T17:17Z
 */


(function( global, factory ) {

	if ( typeof module === "object" && typeof module.exports === "object" ) {
		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Support: Firefox 18+
// Can't be in strict mode, several libs including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
//"use strict";
var deletedIds = [];

var document = window.document;

var slice = deletedIds.slice;

var concat = deletedIds.concat;

var push = deletedIds.push;

var indexOf = deletedIds.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var support = {};



var
	version = "1.12.4",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android<4.1, IE<9
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num != null ?

			// Return just the one element from the set
			( num < 0 ? this[ num + this.length ] : this[ num ] ) :

			// Return all the elements in a clean array
			slice.call( this );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: deletedIds.sort,
	splice: deletedIds.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var src, copyIsArray, copy, name, options, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
		target = {};
	}

	// extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = jQuery.isArray( copy ) ) ) ) {

					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray( src ) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject( src ) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return jQuery.type( obj ) === "function";
	},

	isArray: Array.isArray || function( obj ) {
		return jQuery.type( obj ) === "array";
	},

	isWindow: function( obj ) {
		/* jshint eqeqeq: false */
		return obj != null && obj == obj.window;
	},

	isNumeric: function( obj ) {

		// parseFloat NaNs numeric-cast false positives (null|true|false|"")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		// adding 1 corrects loss of precision from parseFloat (#15100)
		var realStringObj = obj && obj.toString();
		return !jQuery.isArray( obj ) && ( realStringObj - parseFloat( realStringObj ) + 1 ) >= 0;
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	isPlainObject: function( obj ) {
		var key;

		// Must be an Object.
		// Because of IE, we also have to check the presence of the constructor property.
		// Make sure that DOM nodes and window objects don't pass through, as well
		if ( !obj || jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		try {

			// Not own constructor property must be Object
			if ( obj.constructor &&
				!hasOwn.call( obj, "constructor" ) &&
				!hasOwn.call( obj.constructor.prototype, "isPrototypeOf" ) ) {
				return false;
			}
		} catch ( e ) {

			// IE8,9 Will throw exceptions on certain host objects #9897
			return false;
		}

		// Support: IE<9
		// Handle iteration over inherited properties before own properties.
		if ( !support.ownFirst ) {
			for ( key in obj ) {
				return hasOwn.call( obj, key );
			}
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.
		for ( key in obj ) {}

		return key === undefined || hasOwn.call( obj, key );
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call( obj ) ] || "object" :
			typeof obj;
	},

	// Workarounds based on findings by Jim Driscoll
	// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
	globalEval: function( data ) {
		if ( data && jQuery.trim( data ) ) {

			// We use execScript on Internet Explorer
			// We use an anonymous function so that context is window
			// rather than jQuery in Firefox
			( window.execScript || function( data ) {
				window[ "eval" ].call( window, data ); // jscs:ignore requireDotNotation
			} )( data );
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// Support: Android<4.1, IE<9
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		var len;

		if ( arr ) {
			if ( indexOf ) {
				return indexOf.call( arr, elem, i );
			}

			len = arr.length;
			i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;

			for ( ; i < len; i++ ) {

				// Skip accessing in sparse arrays
				if ( i in arr && arr[ i ] === elem ) {
					return i;
				}
			}
		}

		return -1;
	},

	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		while ( j < len ) {
			first[ i++ ] = second[ j++ ];
		}

		// Support: IE<9
		// Workaround casting of .length to NaN on otherwise arraylike objects (e.g., NodeLists)
		if ( len !== len ) {
			while ( second[ j ] !== undefined ) {
				first[ i++ ] = second[ j++ ];
			}
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var args, proxy, tmp;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	now: function() {
		return +( new Date() );
	},

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

// JSHint would error on this code due to the Symbol not being defined in ES5.
// Defining this global in .jshintrc would create a danger of using the global
// unguarded in another place, it seems safer to just disable JSHint for these
// three lines.
/* jshint ignore: start */
if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = deletedIds[ Symbol.iterator ];
}
/* jshint ignore: end */

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: iOS 8.2 (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = jQuery.type( obj );

	if ( type === "function" || jQuery.isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.2.1
 * http://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2015-10-17
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// General-purpose constants
	MAX_NEGATIVE = 1 << 31,

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// http://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,
	rescape = /'|\\/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	};

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, nidselect, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

				// ID selector
				if ( (m = match[1]) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( (elem = context.getElementById( m )) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && (elem = newContext.getElementById( m )) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( (m = match[3]) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!compilerCache[ selector + " " ] &&
				(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

				if ( nodeType !== 1 ) {
					newContext = context;
					newSelector = selector;

				// qSA looks outside Element context, which is not what we want
				// Thanks to Andrew Dupont for this workaround technique
				// Support: IE <=8
				// Exclude object elements
				} else if ( context.nodeName.toLowerCase() !== "object" ) {

					// Capture the context ID, setting it first if necessary
					if ( (nid = context.getAttribute( "id" )) ) {
						nid = nid.replace( rescape, "\\$&" );
					} else {
						context.setAttribute( "id", (nid = expando) );
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					nidselect = ridentifier.test( nid ) ? "#" + nid : "[id='" + nid + "']";
					while ( i-- ) {
						groups[i] = nidselect + " " + toSelector( groups[i] );
					}
					newSelector = groups.join( "," );

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;
				}

				if ( newSelector ) {
					try {
						push.apply( results,
							newContext.querySelectorAll( newSelector )
						);
						return results;
					} catch ( qsaError ) {
					} finally {
						if ( nid === expando ) {
							context.removeAttribute( "id" );
						}
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return !!fn( div );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( div.parentNode ) {
			div.parentNode.removeChild( div );
		}
		// release memory in IE
		div = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			( ~b.sourceIndex || MAX_NEGATIVE ) -
			( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, parent,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9-11, Edge
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	if ( (parent = document.defaultView) && parent.top !== parent ) {
		// Support: IE 11
		if ( parent.addEventListener ) {
			parent.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( parent.attachEvent ) {
			parent.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( div ) {
		div.className = "i";
		return !div.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( div ) {
		div.appendChild( document.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( div ) {
		docElem.appendChild( div ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	});

	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var m = context.getElementById( id );
				return m ? [ m ] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find["ID"];

		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See http://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( div.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibing-combinator selector` fails
			if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( div ) {
			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement("input");
			input.setAttribute( "type", "hidden" );
			div.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( div.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === document ? -1 :
				b === document ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		!compilerCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || (node[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								(outerCache[ node.uniqueID ] = {});

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {
							// Use previously-cached element index if available
							if ( useCache ) {
								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] || (node[ expando ] = {});

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												(outerCache[ node.uniqueID ] = {});

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

						if ( (oldCache = uniqueCache[ dir ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ dir ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context === document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					if ( !context && elem.ownerDocument !== document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context || document, xml) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				support.getById && context.nodeType === 9 && documentIsHTML &&
				Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( div1 ) {
	// Should return 1, but returns 4 (following)
	return div1.compareDocumentPosition( document.createElement("div") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( div ) {
	div.innerHTML = "<a href='#'></a>";
	return div.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( div ) {
	div.innerHTML = "<input/>";
	div.firstChild.setAttribute( "value", "" );
	return div.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( div ) {
	return div.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;



var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = ( /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/ );



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			/* jshint -W018 */
			return !!qualifier.call( elem, i, elem ) !== not;
		} );

	}

	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );

	}

	if ( typeof qualifier === "string" ) {
		if ( risSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		qualifier = jQuery.filter( qualifier, elements );
	}

	return jQuery.grep( elements, function( elem ) {
		return ( jQuery.inArray( elem, qualifier ) > -1 ) !== not;
	} );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	return elems.length === 1 && elem.nodeType === 1 ?
		jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
		jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i,
			ret = [],
			self = this,
			len = self.length;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = this.selector ? this.selector + " " + selector : selector;
		return ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// init accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector.charAt( 0 ) === "<" &&
				selector.charAt( selector.length - 1 ) === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {

						// Handle the case where IE and Opera return items
						// by name instead of ID
						if ( elem.id !== match[ 2 ] ) {
							return rootjQuery.find( selector );
						}

						// Otherwise, we inject the element directly into the jQuery object
						this.length = 1;
						this[ 0 ] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return typeof root.ready !== "undefined" ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var i,
			targets = jQuery( target, this ),
			len = targets.length;

		return this.filter( function() {
			for ( i = 0; i < len; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

				// Always skip document fragments
				if ( cur.nodeType < 11 && ( pos ?
					pos.index( cur ) > -1 :

					// Don't pass non-elements to Sizzle
					cur.nodeType === 1 &&
						jQuery.find.matchesSelector( cur, selectors ) ) ) {

					matched.push( cur );
					break;
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// index in selector
		if ( typeof elem === "string" ) {
			return jQuery.inArray( this[ 0 ], jQuery( elem ) );
		}

		// Locate the position of the desired element
		return jQuery.inArray(

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem, this );
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	do {
		cur = cur[ dir ];
	} while ( cur && cur.nodeType !== 1 );

	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
		return jQuery.nodeName( elem, "iframe" ) ?
			elem.contentDocument || elem.contentWindow.document :
			jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var ret = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			ret = jQuery.filter( selector, ret );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				ret = jQuery.uniqueSort( ret );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				ret = ret.reverse();
			}
		}

		return this.pushStack( ret );
	};
} );
var rnotwhite = ( /\S+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( jQuery.isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = true;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks( "once memory" ), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks( "memory" ) ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];

							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this === promise ? newDefer.promise() : this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add( function() {

					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 ||
				( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred.
			// If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( values === progressValues ) {
						deferred.notifyWith( contexts, values );

					} else if ( !( --remaining ) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.progress( updateFunc( i, progressContexts, progressValues ) )
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject );
				} else {
					--remaining;
				}
			}
		}

		// if we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
} );


// The deferred used on DOM ready
var readyList;

jQuery.fn.ready = function( fn ) {

	// Add the callback
	jQuery.ready.promise().done( fn );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.triggerHandler ) {
			jQuery( document ).triggerHandler( "ready" );
			jQuery( document ).off( "ready" );
		}
	}
} );

/**
 * Clean-up method for dom ready events
 */
function detach() {
	if ( document.addEventListener ) {
		document.removeEventListener( "DOMContentLoaded", completed );
		window.removeEventListener( "load", completed );

	} else {
		document.detachEvent( "onreadystatechange", completed );
		window.detachEvent( "onload", completed );
	}
}

/**
 * The ready event handler and self cleanup method
 */
function completed() {

	// readyState === "complete" is good enough for us to call the dom ready in oldIE
	if ( document.addEventListener ||
		window.event.type === "load" ||
		document.readyState === "complete" ) {

		detach();
		jQuery.ready();
	}
}

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called
		// after the browser event has already occurred.
		// Support: IE6-10
		// Older IE sometimes signals "interactive" too soon
		if ( document.readyState === "complete" ||
			( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

			// Handle it asynchronously to allow scripts the opportunity to delay ready
			window.setTimeout( jQuery.ready );

		// Standards-based browsers support DOMContentLoaded
		} else if ( document.addEventListener ) {

			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed );

		// If IE event model is used
		} else {

			// Ensure firing before onload, maybe late but safe also for iframes
			document.attachEvent( "onreadystatechange", completed );

			// A fallback to window.onload, that will always work
			window.attachEvent( "onload", completed );

			// If IE and not a frame
			// continually check to see if the document is ready
			var top = false;

			try {
				top = window.frameElement == null && document.documentElement;
			} catch ( e ) {}

			if ( top && top.doScroll ) {
				( function doScrollCheck() {
					if ( !jQuery.isReady ) {

						try {

							// Use the trick by Diego Perini
							// http://javascript.nwbox.com/IEContentLoaded/
							top.doScroll( "left" );
						} catch ( e ) {
							return window.setTimeout( doScrollCheck, 50 );
						}

						// detach all dom ready events
						detach();

						// and execute any waiting functions
						jQuery.ready();
					}
				} )();
			}
		}
	}
	return readyList.promise( obj );
};

// Kick off the DOM ready check even if the user does not
jQuery.ready.promise();




// Support: IE<9
// Iteration over object's inherited properties before its own
var i;
for ( i in jQuery( support ) ) {
	break;
}
support.ownFirst = i === "0";

// Note: most support tests are defined in their respective modules.
// false until the test is run
support.inlineBlockNeedsLayout = false;

// Execute ASAP in case we need to set body.style.zoom
jQuery( function() {

	// Minified: var a,b,c,d
	var val, div, body, container;

	body = document.getElementsByTagName( "body" )[ 0 ];
	if ( !body || !body.style ) {

		// Return for frameset docs that don't have a body
		return;
	}

	// Setup
	div = document.createElement( "div" );
	container = document.createElement( "div" );
	container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
	body.appendChild( container ).appendChild( div );

	if ( typeof div.style.zoom !== "undefined" ) {

		// Support: IE<8
		// Check if natively block-level elements act like inline-block
		// elements when setting their display to 'inline' and giving
		// them layout
		div.style.cssText = "display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1";

		support.inlineBlockNeedsLayout = val = div.offsetWidth === 3;
		if ( val ) {

			// Prevent IE 6 from affecting layout for positioned elements #11048
			// Prevent IE from shrinking the body in IE 7 mode #12869
			// Support: IE<8
			body.style.zoom = 1;
		}
	}

	body.removeChild( container );
} );


( function() {
	var div = document.createElement( "div" );

	// Support: IE<9
	support.deleteExpando = true;
	try {
		delete div.test;
	} catch ( e ) {
		support.deleteExpando = false;
	}

	// Null elements to avoid leaks in IE.
	div = null;
} )();
var acceptData = function( elem ) {
	var noData = jQuery.noData[ ( elem.nodeName + " " ).toLowerCase() ],
		nodeType = +elem.nodeType || 1;

	// Do not set data on non-element DOM nodes because it will not be cleared (#8335).
	return nodeType !== 1 && nodeType !== 9 ?
		false :

		// Nodes accept data unless otherwise specified; rejection can be conditional
		!noData || noData !== true && elem.getAttribute( "classid" ) === noData;
};




var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /([A-Z])/g;

function dataAttr( elem, key, data ) {

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {

		var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();

		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :

					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
					data;
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			jQuery.data( elem, key, data );

		} else {
			data = undefined;
		}
	}

	return data;
}

// checks a cache object for emptiness
function isEmptyDataObject( obj ) {
	var name;
	for ( name in obj ) {

		// if the public data object is empty, the private is still empty
		if ( name === "data" && jQuery.isEmptyObject( obj[ name ] ) ) {
			continue;
		}
		if ( name !== "toJSON" ) {
			return false;
		}
	}

	return true;
}

function internalData( elem, name, data, pvt /* Internal Use Only */ ) {
	if ( !acceptData( elem ) ) {
		return;
	}

	var ret, thisCache,
		internalKey = jQuery.expando,

		// We have to handle DOM nodes and JS objects differently because IE6-7
		// can't GC object references properly across the DOM-JS boundary
		isNode = elem.nodeType,

		// Only DOM nodes need the global jQuery cache; JS object data is
		// attached directly to the object so GC can occur automatically
		cache = isNode ? jQuery.cache : elem,

		// Only defining an ID for JS objects if its cache already exists allows
		// the code to shortcut on the same path as a DOM node with no cache
		id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;

	// Avoid doing any more work than we need to when trying to get data on an
	// object that has no data at all
	if ( ( !id || !cache[ id ] || ( !pvt && !cache[ id ].data ) ) &&
		data === undefined && typeof name === "string" ) {
		return;
	}

	if ( !id ) {

		// Only DOM nodes need a new unique ID for each element since their data
		// ends up in the global cache
		if ( isNode ) {
			id = elem[ internalKey ] = deletedIds.pop() || jQuery.guid++;
		} else {
			id = internalKey;
		}
	}

	if ( !cache[ id ] ) {

		// Avoid exposing jQuery metadata on plain JS objects when the object
		// is serialized using JSON.stringify
		cache[ id ] = isNode ? {} : { toJSON: jQuery.noop };
	}

	// An object can be passed to jQuery.data instead of a key/value pair; this gets
	// shallow copied over onto the existing cache
	if ( typeof name === "object" || typeof name === "function" ) {
		if ( pvt ) {
			cache[ id ] = jQuery.extend( cache[ id ], name );
		} else {
			cache[ id ].data = jQuery.extend( cache[ id ].data, name );
		}
	}

	thisCache = cache[ id ];

	// jQuery data() is stored in a separate object inside the object's internal data
	// cache in order to avoid key collisions between internal data and user-defined
	// data.
	if ( !pvt ) {
		if ( !thisCache.data ) {
			thisCache.data = {};
		}

		thisCache = thisCache.data;
	}

	if ( data !== undefined ) {
		thisCache[ jQuery.camelCase( name ) ] = data;
	}

	// Check for both converted-to-camel and non-converted data property names
	// If a data property was specified
	if ( typeof name === "string" ) {

		// First Try to find as-is property data
		ret = thisCache[ name ];

		// Test for null|undefined property data
		if ( ret == null ) {

			// Try to find the camelCased property
			ret = thisCache[ jQuery.camelCase( name ) ];
		}
	} else {
		ret = thisCache;
	}

	return ret;
}

function internalRemoveData( elem, name, pvt ) {
	if ( !acceptData( elem ) ) {
		return;
	}

	var thisCache, i,
		isNode = elem.nodeType,

		// See jQuery.data for more information
		cache = isNode ? jQuery.cache : elem,
		id = isNode ? elem[ jQuery.expando ] : jQuery.expando;

	// If there is already no cache entry for this object, there is no
	// purpose in continuing
	if ( !cache[ id ] ) {
		return;
	}

	if ( name ) {

		thisCache = pvt ? cache[ id ] : cache[ id ].data;

		if ( thisCache ) {

			// Support array or space separated string names for data keys
			if ( !jQuery.isArray( name ) ) {

				// try the string as a key before any manipulation
				if ( name in thisCache ) {
					name = [ name ];
				} else {

					// split the camel cased version by spaces unless a key with the spaces exists
					name = jQuery.camelCase( name );
					if ( name in thisCache ) {
						name = [ name ];
					} else {
						name = name.split( " " );
					}
				}
			} else {

				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = name.concat( jQuery.map( name, jQuery.camelCase ) );
			}

			i = name.length;
			while ( i-- ) {
				delete thisCache[ name[ i ] ];
			}

			// If there is no data left in the cache, we want to continue
			// and let the cache object itself get destroyed
			if ( pvt ? !isEmptyDataObject( thisCache ) : !jQuery.isEmptyObject( thisCache ) ) {
				return;
			}
		}
	}

	// See jQuery.data for more information
	if ( !pvt ) {
		delete cache[ id ].data;

		// Don't destroy the parent cache unless the internal data object
		// had been the only thing left in it
		if ( !isEmptyDataObject( cache[ id ] ) ) {
			return;
		}
	}

	// Destroy the cache
	if ( isNode ) {
		jQuery.cleanData( [ elem ], true );

	// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
	/* jshint eqeqeq: false */
	} else if ( support.deleteExpando || cache != cache.window ) {
		/* jshint eqeqeq: true */
		delete cache[ id ];

	// When all else fails, undefined
	} else {
		cache[ id ] = undefined;
	}
}

jQuery.extend( {
	cache: {},

	// The following elements (space-suffixed to avoid Object.prototype collisions)
	// throw uncatchable exceptions if you attempt to set expando properties
	noData: {
		"applet ": true,
		"embed ": true,

		// ...but Flash objects (which have this classid) *can* handle expandos
		"object ": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
	},

	hasData: function( elem ) {
		elem = elem.nodeType ? jQuery.cache[ elem[ jQuery.expando ] ] : elem[ jQuery.expando ];
		return !!elem && !isEmptyDataObject( elem );
	},

	data: function( elem, name, data ) {
		return internalData( elem, name, data );
	},

	removeData: function( elem, name ) {
		return internalRemoveData( elem, name );
	},

	// For internal use only.
	_data: function( elem, name, data ) {
		return internalData( elem, name, data, true );
	},

	_removeData: function( elem, name ) {
		return internalRemoveData( elem, name, true );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Special expections of .data basically thwart jQuery.access,
		// so implement the relevant behavior ourselves

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = jQuery.data( elem );

				if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE11+
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = jQuery.camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					jQuery._data( elem, "parsedAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				jQuery.data( this, key );
			} );
		}

		return arguments.length > 1 ?

			// Sets one value
			this.each( function() {
				jQuery.data( this, key, value );
			} ) :

			// Gets one value
			// Try to fetch any internally stored data first
			elem ? dataAttr( elem, key, jQuery.data( elem, key ) ) : undefined;
	},

	removeData: function( key ) {
		return this.each( function() {
			jQuery.removeData( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = jQuery._data( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray( data ) ) {
					queue = jQuery._data( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// not intended for public consumption - generates a queueHooks object,
	// or returns the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return jQuery._data( elem, key ) || jQuery._data( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				jQuery._removeData( elem, type + "queue" );
				jQuery._removeData( elem, key );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = jQuery._data( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );


( function() {
	var shrinkWrapBlocksVal;

	support.shrinkWrapBlocks = function() {
		if ( shrinkWrapBlocksVal != null ) {
			return shrinkWrapBlocksVal;
		}

		// Will be changed later if needed.
		shrinkWrapBlocksVal = false;

		// Minified: var b,c,d
		var div, body, container;

		body = document.getElementsByTagName( "body" )[ 0 ];
		if ( !body || !body.style ) {

			// Test fired too early or in an unsupported environment, exit.
			return;
		}

		// Setup
		div = document.createElement( "div" );
		container = document.createElement( "div" );
		container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
		body.appendChild( container ).appendChild( div );

		// Support: IE6
		// Check if elements with layout shrink-wrap their children
		if ( typeof div.style.zoom !== "undefined" ) {

			// Reset CSS: box-sizing; display; margin; border
			div.style.cssText =

				// Support: Firefox<29, Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
				"box-sizing:content-box;display:block;margin:0;border:0;" +
				"padding:1px;width:1px;zoom:1";
			div.appendChild( document.createElement( "div" ) ).style.width = "5px";
			shrinkWrapBlocksVal = div.offsetWidth !== 3;
		}

		body.removeChild( container );

		return shrinkWrapBlocksVal;
	};

} )();
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHidden = function( elem, el ) {

		// isHidden might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;
		return jQuery.css( elem, "display" ) === "none" ||
			!jQuery.contains( elem.ownerDocument, elem );
	};



function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted,
		scale = 1,
		maxIterations = 20,
		currentValue = tween ?
			function() { return tween.cur(); } :
			function() { return jQuery.css( elem, prop, "" ); },
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		do {

			// If previous iteration zeroed out, double until we get *something*.
			// Use string for doubling so we don't accidentally see scale as unchanged below
			scale = scale || ".5";

			// Adjust and apply
			initialInUnit = initialInUnit / scale;
			jQuery.style( elem, prop, initialInUnit + unit );

		// Update scale, tolerating zero or NaN from tween.cur()
		// Break the loop if scale is unchanged or perfect, or if we've just had enough.
		} while (
			scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
		);
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		length = elems.length,
		bulk = key == null;

	// Sets many values
	if ( jQuery.type( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery.isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < length; i++ ) {
				fn(
					elems[ i ],
					key,
					raw ? value : value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	return chainable ?
		elems :

		// Gets
		bulk ?
			fn.call( elems ) :
			length ? fn( elems[ 0 ], key ) : emptyGet;
};
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([\w:-]+)/ );

var rscriptType = ( /^$|\/(?:java|ecma)script/i );

var rleadingWhitespace = ( /^\s+/ );

var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|" +
		"details|dialog|figcaption|figure|footer|header|hgroup|main|" +
		"mark|meter|nav|output|picture|progress|section|summary|template|time|video";



function createSafeFragment( document ) {
	var list = nodeNames.split( "|" ),
		safeFrag = document.createDocumentFragment();

	if ( safeFrag.createElement ) {
		while ( list.length ) {
			safeFrag.createElement(
				list.pop()
			);
		}
	}
	return safeFrag;
}


( function() {
	var div = document.createElement( "div" ),
		fragment = document.createDocumentFragment(),
		input = document.createElement( "input" );

	// Setup
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";

	// IE strips leading whitespace when .innerHTML is used
	support.leadingWhitespace = div.firstChild.nodeType === 3;

	// Make sure that tbody elements aren't automatically inserted
	// IE will insert them into empty tables
	support.tbody = !div.getElementsByTagName( "tbody" ).length;

	// Make sure that link elements get serialized correctly by innerHTML
	// This requires a wrapper element in IE
	support.htmlSerialize = !!div.getElementsByTagName( "link" ).length;

	// Makes sure cloning an html5 element does not cause problems
	// Where outerHTML is undefined, this still works
	support.html5Clone =
		document.createElement( "nav" ).cloneNode( true ).outerHTML !== "<:nav></:nav>";

	// Check if a disconnected checkbox will retain its checked
	// value of true after appended to the DOM (IE6/7)
	input.type = "checkbox";
	input.checked = true;
	fragment.appendChild( input );
	support.appendChecked = input.checked;

	// Make sure textarea (and checkbox) defaultValue is properly cloned
	// Support: IE6-IE11+
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;

	// #11217 - WebKit loses check when the name is after the checked attribute
	fragment.appendChild( div );

	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input = document.createElement( "input" );
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3
	// old WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE<9
	// Cloned elements keep attachEvent handlers, we use addEventListener on IE9+
	support.noCloneEvent = !!div.addEventListener;

	// Support: IE<9
	// Since attributes and properties are the same in IE,
	// cleanData must set properties to undefined rather than use removeAttribute
	div[ jQuery.expando ] = 1;
	support.attributes = !div.getAttribute( jQuery.expando );
} )();


// We have to close these tags to support XHTML (#13200)
var wrapMap = {
	option: [ 1, "<select multiple='multiple'>", "</select>" ],
	legend: [ 1, "<fieldset>", "</fieldset>" ],
	area: [ 1, "<map>", "</map>" ],

	// Support: IE8
	param: [ 1, "<object>", "</object>" ],
	thead: [ 1, "<table>", "</table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
	// unless wrapped in a div with non-breaking characters in front of it.
	_default: support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>" ]
};

// Support: IE8-IE9
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function getAll( context, tag ) {
	var elems, elem,
		i = 0,
		found = typeof context.getElementsByTagName !== "undefined" ?
			context.getElementsByTagName( tag || "*" ) :
			typeof context.querySelectorAll !== "undefined" ?
				context.querySelectorAll( tag || "*" ) :
				undefined;

	if ( !found ) {
		for ( found = [], elems = context.childNodes || context;
			( elem = elems[ i ] ) != null;
			i++
		) {
			if ( !tag || jQuery.nodeName( elem, tag ) ) {
				found.push( elem );
			} else {
				jQuery.merge( found, getAll( elem, tag ) );
			}
		}
	}

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], found ) :
		found;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var elem,
		i = 0;
	for ( ; ( elem = elems[ i ] ) != null; i++ ) {
		jQuery._data(
			elem,
			"globalEval",
			!refElements || jQuery._data( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/,
	rtbody = /<tbody/i;

function fixDefaultChecked( elem ) {
	if ( rcheckableType.test( elem.type ) ) {
		elem.defaultChecked = elem.checked;
	}
}

function buildFragment( elems, context, scripts, selection, ignored ) {
	var j, elem, contains,
		tmp, tag, tbody, wrap,
		l = elems.length,

		// Ensure a safe fragment
		safe = createSafeFragment( context ),

		nodes = [],
		i = 0;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( jQuery.type( elem ) === "object" ) {
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || safe.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;

				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Manually add leading whitespace removed by IE
				if ( !support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
					nodes.push( context.createTextNode( rleadingWhitespace.exec( elem )[ 0 ] ) );
				}

				// Remove IE's autoinserted <tbody> from table fragments
				if ( !support.tbody ) {

					// String was a <table>, *may* have spurious <tbody>
					elem = tag === "table" && !rtbody.test( elem ) ?
						tmp.firstChild :

						// String was a bare <thead> or <tfoot>
						wrap[ 1 ] === "<table>" && !rtbody.test( elem ) ?
							tmp :
							0;

					j = elem && elem.childNodes.length;
					while ( j-- ) {
						if ( jQuery.nodeName( ( tbody = elem.childNodes[ j ] ), "tbody" ) &&
							!tbody.childNodes.length ) {

							elem.removeChild( tbody );
						}
					}
				}

				jQuery.merge( nodes, tmp.childNodes );

				// Fix #12392 for WebKit and IE > 9
				tmp.textContent = "";

				// Fix #12392 for oldIE
				while ( tmp.firstChild ) {
					tmp.removeChild( tmp.firstChild );
				}

				// Remember the top-level container for proper cleanup
				tmp = safe.lastChild;
			}
		}
	}

	// Fix #11356: Clear elements from fragment
	if ( tmp ) {
		safe.removeChild( tmp );
	}

	// Reset defaultChecked for any radios and checkboxes
	// about to be appended to the DOM in IE 6/7 (#8060)
	if ( !support.appendChecked ) {
		jQuery.grep( getAll( nodes, "input" ), fixDefaultChecked );
	}

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}

			continue;
		}

		contains = jQuery.contains( elem.ownerDocument, elem );

		// Append to fragment
		tmp = getAll( safe.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( contains ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	tmp = null;

	return safe;
}


( function() {
	var i, eventName,
		div = document.createElement( "div" );

	// Support: IE<9 (lack submit/change bubble), Firefox (lack focus(in | out) events)
	for ( i in { submit: true, change: true, focusin: true } ) {
		eventName = "on" + i;

		if ( !( support[ i ] = eventName in window ) ) {

			// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)
			div.setAttribute( eventName, "t" );
			support[ i ] = div.attributes[ eventName ].expando === false;
		}
	}

	// Null elements to avoid leaks in IE.
	div = null;
} )();


var rformElems = /^(?:input|select|textarea)$/i,
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE9
// See #13393 for more info
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {
		var tmp, events, t, handleObjIn,
			special, eventHandle, handleObj,
			handlers, type, namespaces, origType,
			elemData = jQuery._data( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = {};
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" &&
					( !e || jQuery.event.triggered !== e.type ) ?
					jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
					undefined;
			};

			// Add elem as a property of the handle fn to prevent a memory leak
			// with IE non-native events
			eventHandle.elem = elem;
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener/attachEvent if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					// Bind the global event handler to the element
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );

					} else if ( elem.attachEvent ) {
						elem.attachEvent( "on" + type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

		// Nullify elem to prevent memory leaks in IE
		elem = null;
	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {
		var j, handleObj, tmp,
			origCount, t, events,
			special, handlers, type,
			namespaces, origType,
			elemData = jQuery.hasData( elem ) && jQuery._data( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;

			// removeData also checks for emptiness and clears the expando if empty
			// so use it instead of delete
			jQuery._removeData( elem, "events" );
		}
	},

	trigger: function( event, data, elem, onlyHandlers ) {
		var handle, ontype, cur,
			bubbleType, special, tmp, i,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] &&
				jQuery._data( cur, "handle" );

			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if (
				( !special._default ||
				 special._default.apply( eventPath.pop(), data ) === false
				) && acceptData( elem )
			) {

				// Call a native DOM method on the target with the same name name as the event.
				// Can't use an .isFunction() check here because IE6/7 fails that test.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && elem[ type ] && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					try {
						elem[ type ]();
					} catch ( e ) {

						// IE<9 dies on focus/blur to hidden element (#1486,#12518)
						// only reproducible on winXP IE8 native, not IE9 in IE8 mode
					}
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, j, ret, matched, handleObj,
			handlerQueue = [],
			args = slice.call( arguments ),
			handlers = ( jQuery._data( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, matches, sel, handleObj,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Support (at least): Chrome, IE9
		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		//
		// Support: Firefox<=42+
		// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)
		if ( delegateCount && cur.nodeType &&
			( event.type !== "click" || isNaN( event.button ) || event.button < 1 ) ) {

			/* jshint eqeqeq: false */
			for ( ; cur != this; cur = cur.parentNode || this ) {
				/* jshint eqeqeq: true */

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && ( cur.disabled !== true || event.type !== "click" ) ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push( { elem: cur, handlers: matches } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: this, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: IE<9
		// Fix target property (#1925)
		if ( !event.target ) {
			event.target = originalEvent.srcElement || document;
		}

		// Support: Safari 6-8+
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		// Support: IE<9
		// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)
		event.metaKey = !!event.metaKey;

		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: ( "altKey bubbles cancelable ctrlKey currentTarget detail eventPhase " +
		"metaKey relatedTarget shiftKey target timeStamp view which" ).split( " " ),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split( " " ),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: ( "button buttons clientX clientY fromElement offsetX offsetY " +
			"pageX pageY screenX screenY toElement" ).split( " " ),
		filter: function( event, original ) {
			var body, eventDoc, doc,
				button = original.button,
				fromElement = original.fromElement;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX +
					( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) -
					( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY +
					( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) -
					( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add relatedTarget, if necessary
			if ( !event.relatedTarget && fromElement ) {
				event.relatedTarget = fromElement === event.target ?
					original.toElement :
					fromElement;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {

			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					try {
						this.focus();
						return false;
					} catch ( e ) {

						// Support: IE<9
						// If we error on focus to hidden element (#1486, #12518),
						// let .trigger() run the handlers
					}
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {

			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( jQuery.nodeName( this, "input" ) && this.type === "checkbox" && this.click ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	},

	// Piggyback on a donor event to simulate a different one
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true

				// Previously, `originalEvent: {}` was set here, so stopPropagation call
				// would not be triggered on donor event, since in our own
				// jQuery.event.stopPropagation function we had a check for existence of
				// originalEvent.stopPropagation method, so, consequently it would be a noop.
				//
				// Guard for simulated events was moved to jQuery.event.stopPropagation function
				// since `originalEvent` should point to the original event for the
				// constancy with other events and for more focused logic
			}
		);

		jQuery.event.trigger( e, null, elem );

		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

jQuery.removeEvent = document.removeEventListener ?
	function( elem, type, handle ) {

		// This "if" is needed for plain objects
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle );
		}
	} :
	function( elem, type, handle ) {
		var name = "on" + type;

		if ( elem.detachEvent ) {

			// #8545, #7054, preventing memory leaks for custom events in IE6-8
			// detachEvent needed property on element, by name of that event,
			// to properly expose it to GC
			if ( typeof elem[ name ] === "undefined" ) {
				elem[ name ] = null;
			}

			elem.detachEvent( name, handle );
		}
	};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: IE < 9, Android < 4.0
				src.returnValue === false ?
			returnTrue :
			returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;
		if ( !e ) {
			return;
		}

		// If preventDefault exists, run it on the original event
		if ( e.preventDefault ) {
			e.preventDefault();

		// Support: IE
		// Otherwise set the returnValue property of the original event to false
		} else {
			e.returnValue = false;
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( !e || this.isSimulated ) {
			return;
		}

		// If stopPropagation exists, run it on the original event
		if ( e.stopPropagation ) {
			e.stopPropagation();
		}

		// Support: IE
		// Set the cancelBubble property of the original event to true
		e.cancelBubble = true;
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && e.stopImmediatePropagation ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://code.google.com/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

// IE submit delegation
if ( !support.submit ) {

	jQuery.event.special.submit = {
		setup: function() {

			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Lazy-add a submit handler when a descendant form may potentially be submitted
			jQuery.event.add( this, "click._submit keypress._submit", function( e ) {

				// Node name check avoids a VML-related crash in IE (#9807)
				var elem = e.target,
					form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ?

						// Support: IE <=8
						// We use jQuery.prop instead of elem.form
						// to allow fixing the IE8 delegated submit issue (gh-2332)
						// by 3rd party polyfills/workarounds.
						jQuery.prop( elem, "form" ) :
						undefined;

				if ( form && !jQuery._data( form, "submit" ) ) {
					jQuery.event.add( form, "submit._submit", function( event ) {
						event._submitBubble = true;
					} );
					jQuery._data( form, "submit", true );
				}
			} );

			// return undefined since we don't need an event listener
		},

		postDispatch: function( event ) {

			// If form was submitted by the user, bubble the event up the tree
			if ( event._submitBubble ) {
				delete event._submitBubble;
				if ( this.parentNode && !event.isTrigger ) {
					jQuery.event.simulate( "submit", this.parentNode, event );
				}
			}
		},

		teardown: function() {

			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
			jQuery.event.remove( this, "._submit" );
		}
	};
}

// IE change delegation and checkbox/radio fix
if ( !support.change ) {

	jQuery.event.special.change = {

		setup: function() {

			if ( rformElems.test( this.nodeName ) ) {

				// IE doesn't fire change on a check/radio until blur; trigger it on click
				// after a propertychange. Eat the blur-change in special.change.handle.
				// This still fires onchange a second time for check/radio after blur.
				if ( this.type === "checkbox" || this.type === "radio" ) {
					jQuery.event.add( this, "propertychange._change", function( event ) {
						if ( event.originalEvent.propertyName === "checked" ) {
							this._justChanged = true;
						}
					} );
					jQuery.event.add( this, "click._change", function( event ) {
						if ( this._justChanged && !event.isTrigger ) {
							this._justChanged = false;
						}

						// Allow triggered, simulated change events (#11500)
						jQuery.event.simulate( "change", this, event );
					} );
				}
				return false;
			}

			// Delegated event; lazy-add a change handler on descendant inputs
			jQuery.event.add( this, "beforeactivate._change", function( e ) {
				var elem = e.target;

				if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, "change" ) ) {
					jQuery.event.add( elem, "change._change", function( event ) {
						if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
							jQuery.event.simulate( "change", this.parentNode, event );
						}
					} );
					jQuery._data( elem, "change", true );
				}
			} );
		},

		handle: function( event ) {
			var elem = event.target;

			// Swallow native change events from checkbox/radio, we already triggered them above
			if ( this !== elem || event.isSimulated || event.isTrigger ||
				( elem.type !== "radio" && elem.type !== "checkbox" ) ) {

				return event.handleObj.handler.apply( this, arguments );
			}
		},

		teardown: function() {
			jQuery.event.remove( this, "._change" );

			return !rformElems.test( this.nodeName );
		}
	};
}

// Support: Firefox
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome, Safari
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = jQuery._data( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				jQuery._data( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = jQuery._data( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					jQuery._removeData( doc, fix );
				} else {
					jQuery._data( doc, fix, attaches );
				}
			}
		};
	} );
}

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	},

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


var rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
	rnoshimcache = new RegExp( "<(?:" + nodeNames + ")[\\s/>]", "i" ),
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,

	// Support: IE 10-11, Edge 10240+
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,
	safeFragment = createSafeFragment( document ),
	fragmentDiv = safeFragment.appendChild( document.createElement( "div" ) );

// Support: IE<8
// Manipulating tables requires a tbody
function manipulationTarget( elem, content ) {
	return jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?

		elem.getElementsByTagName( "tbody" )[ 0 ] ||
			elem.appendChild( elem.ownerDocument.createElement( "tbody" ) ) :
		elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( jQuery.find.attr( elem, "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );
	if ( match ) {
		elem.type = match[ 1 ];
	} else {
		elem.removeAttribute( "type" );
	}
	return elem;
}

function cloneCopyEvent( src, dest ) {
	if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
		return;
	}

	var type, i, l,
		oldData = jQuery._data( src ),
		curData = jQuery._data( dest, oldData ),
		events = oldData.events;

	if ( events ) {
		delete curData.handle;
		curData.events = {};

		for ( type in events ) {
			for ( i = 0, l = events[ type ].length; i < l; i++ ) {
				jQuery.event.add( dest, type, events[ type ][ i ] );
			}
		}
	}

	// make the cloned public data object a copy from the original
	if ( curData.data ) {
		curData.data = jQuery.extend( {}, curData.data );
	}
}

function fixCloneNodeIssues( src, dest ) {
	var nodeName, e, data;

	// We do not need to do anything for non-Elements
	if ( dest.nodeType !== 1 ) {
		return;
	}

	nodeName = dest.nodeName.toLowerCase();

	// IE6-8 copies events bound via attachEvent when using cloneNode.
	if ( !support.noCloneEvent && dest[ jQuery.expando ] ) {
		data = jQuery._data( dest );

		for ( e in data.events ) {
			jQuery.removeEvent( dest, e, data.handle );
		}

		// Event data gets referenced instead of copied if the expando gets copied too
		dest.removeAttribute( jQuery.expando );
	}

	// IE blanks contents when cloning scripts, and tries to evaluate newly-set text
	if ( nodeName === "script" && dest.text !== src.text ) {
		disableScript( dest ).text = src.text;
		restoreScript( dest );

	// IE6-10 improperly clones children of object elements using classid.
	// IE10 throws NoModificationAllowedError if parent is null, #12132.
	} else if ( nodeName === "object" ) {
		if ( dest.parentNode ) {
			dest.outerHTML = src.outerHTML;
		}

		// This path appears unavoidable for IE9. When cloning an object
		// element in IE9, the outerHTML strategy above is not sufficient.
		// If the src has innerHTML and the destination does not,
		// copy the src.innerHTML into the dest.innerHTML. #10324
		if ( support.html5Clone && ( src.innerHTML && !jQuery.trim( dest.innerHTML ) ) ) {
			dest.innerHTML = src.innerHTML;
		}

	} else if ( nodeName === "input" && rcheckableType.test( src.type ) ) {

		// IE6-8 fails to persist the checked state of a cloned checkbox
		// or radio button. Worse, IE6-7 fail to give the cloned element
		// a checked appearance if the defaultChecked value isn't also set

		dest.defaultChecked = dest.checked = src.checked;

		// IE6-7 get confused and end up setting the value of a cloned
		// checkbox/radio button to an empty string instead of "on"
		if ( dest.value !== src.value ) {
			dest.value = src.value;
		}

	// IE6-8 fails to return the selected option to the default selected
	// state when cloning options
	} else if ( nodeName === "option" ) {
		dest.defaultSelected = dest.selected = src.defaultSelected;

	// IE6-8 fails to set the defaultValue to the correct value when
	// cloning other types of input fields
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = concat.apply( [], args );

	var first, node, hasScripts,
		scripts, doc, fragment,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		isFunction = jQuery.isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( isFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( isFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android<4.1, PhantomJS<2
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!jQuery._data( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl ) {
								jQuery._evalUrl( node.src );
							}
						} else {
							jQuery.globalEval(
								( node.text || node.textContent || node.innerHTML || "" )
									.replace( rcleanScript, "" )
							);
						}
					}
				}
			}

			// Fix #11809: Avoid leaking memory
			fragment = first = null;
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		elems = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = elems[ i ] ) != null; i++ ) {

		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html.replace( rxhtmlTag, "<$1></$2>" );
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var destElements, node, clone, i, srcElements,
			inPage = jQuery.contains( elem.ownerDocument, elem );

		if ( support.html5Clone || jQuery.isXMLDoc( elem ) ||
			!rnoshimcache.test( "<" + elem.nodeName + ">" ) ) {

			clone = elem.cloneNode( true );

		// IE<=8 does not properly clone detached, unknown element nodes
		} else {
			fragmentDiv.innerHTML = elem.outerHTML;
			fragmentDiv.removeChild( clone = fragmentDiv.firstChild );
		}

		if ( ( !support.noCloneEvent || !support.noCloneChecked ) &&
				( elem.nodeType === 1 || elem.nodeType === 11 ) && !jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			// Fix all IE cloning issues
			for ( i = 0; ( node = srcElements[ i ] ) != null; ++i ) {

				// Ensure that the destination node is not null; Fixes #9587
				if ( destElements[ i ] ) {
					fixCloneNodeIssues( node, destElements[ i ] );
				}
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0; ( node = srcElements[ i ] ) != null; i++ ) {
					cloneCopyEvent( node, destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		destElements = srcElements = node = null;

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems, /* internal */ forceAcceptData ) {
		var elem, type, id, data,
			i = 0,
			internalKey = jQuery.expando,
			cache = jQuery.cache,
			attributes = support.attributes,
			special = jQuery.event.special;

		for ( ; ( elem = elems[ i ] ) != null; i++ ) {
			if ( forceAcceptData || acceptData( elem ) ) {

				id = elem[ internalKey ];
				data = id && cache[ id ];

				if ( data ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Remove cache only if it was not already removed by jQuery.event.remove
					if ( cache[ id ] ) {

						delete cache[ id ];

						// Support: IE<9
						// IE does not allow us to delete expando properties from nodes
						// IE creates expando attributes along with the property
						// IE does not have a removeAttribute function on Document nodes
						if ( !attributes && typeof elem.removeAttribute !== "undefined" ) {
							elem.removeAttribute( internalKey );

						// Webkit & Blink performance suffers when deleting properties
						// from DOM nodes, so set to undefined instead
						// https://code.google.com/p/chromium/issues/detail?id=378607
						} else {
							elem[ internalKey ] = undefined;
						}

						deletedIds.push( id );
					}
				}
			}
		}
	}
} );

jQuery.fn.extend( {

	// Keep domManip exposed until 3.0 (gh-2225)
	domManip: domManip,

	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().append(
					( this[ 0 ] && this[ 0 ].ownerDocument || document ).createTextNode( value )
				);
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {

			// Remove element nodes and prevent memory leaks
			if ( elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem, false ) );
			}

			// Remove any remaining nodes
			while ( elem.firstChild ) {
				elem.removeChild( elem.firstChild );
			}

			// If this is a select, ensure that it displays empty (#12336)
			// Support: IE<9
			if ( elem.options && jQuery.nodeName( elem, "select" ) ) {
				elem.options.length = 0;
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined ) {
				return elem.nodeType === 1 ?
					elem.innerHTML.replace( rinlinejQuery, "" ) :
					undefined;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				( support.htmlSerialize || !rnoshimcache.test( value )  ) &&
				( support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {

						// Remove element nodes and prevent memory leaks
						elem = this[ i ] || {};
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			i = 0,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );


var iframe,
	elemdisplay = {

		// Support: Firefox
		// We have to pre-define these values for FF (#10227)
		HTML: "block",
		BODY: "block"
	};

/**
 * Retrieve the actual display of a element
 * @param {String} name nodeName of the element
 * @param {Object} doc Document object
 */

// Called only from within defaultDisplay
function actualDisplay( name, doc ) {
	var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

		display = jQuery.css( elem[ 0 ], "display" );

	// We don't have any data stored on the element,
	// so use "detach" method as fast way to get rid of the element
	elem.detach();

	return display;
}

/**
 * Try to determine the default display value of an element
 * @param {String} nodeName
 */
function defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {

			// Use the already-created iframe if possible
			iframe = ( iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" ) )
				.appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = ( iframe[ 0 ].contentWindow || iframe[ 0 ].contentDocument ).document;

			// Support: IE
			doc.write();
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}
var rmargin = ( /^margin/ );

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var documentElement = document.documentElement;



( function() {
	var pixelPositionVal, pixelMarginRightVal, boxSizingReliableVal,
		reliableHiddenOffsetsVal, reliableMarginRightVal, reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	div.style.cssText = "float:left;opacity:.5";

	// Support: IE<9
	// Make sure that element opacity exists (as opposed to filter)
	support.opacity = div.style.opacity === "0.5";

	// Verify style float existence
	// (IE uses styleFloat instead of cssFloat)
	support.cssFloat = !!div.style.cssFloat;

	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	container = document.createElement( "div" );
	container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
		"padding:0;margin-top:1px;position:absolute";
	div.innerHTML = "";
	container.appendChild( div );

	// Support: Firefox<29, Android 2.3
	// Vendor-prefix box-sizing
	support.boxSizing = div.style.boxSizing === "" || div.style.MozBoxSizing === "" ||
		div.style.WebkitBoxSizing === "";

	jQuery.extend( support, {
		reliableHiddenOffsets: function() {
			if ( pixelPositionVal == null ) {
				computeStyleTests();
			}
			return reliableHiddenOffsetsVal;
		},

		boxSizingReliable: function() {

			// We're checking for pixelPositionVal here instead of boxSizingReliableVal
			// since that compresses better and they're computed together anyway.
			if ( pixelPositionVal == null ) {
				computeStyleTests();
			}
			return boxSizingReliableVal;
		},

		pixelMarginRight: function() {

			// Support: Android 4.0-4.3
			if ( pixelPositionVal == null ) {
				computeStyleTests();
			}
			return pixelMarginRightVal;
		},

		pixelPosition: function() {
			if ( pixelPositionVal == null ) {
				computeStyleTests();
			}
			return pixelPositionVal;
		},

		reliableMarginRight: function() {

			// Support: Android 2.3
			if ( pixelPositionVal == null ) {
				computeStyleTests();
			}
			return reliableMarginRightVal;
		},

		reliableMarginLeft: function() {

			// Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37
			if ( pixelPositionVal == null ) {
				computeStyleTests();
			}
			return reliableMarginLeftVal;
		}
	} );

	function computeStyleTests() {
		var contents, divStyle,
			documentElement = document.documentElement;

		// Setup
		documentElement.appendChild( container );

		div.style.cssText =

			// Support: Android 2.3
			// Vendor-prefix box-sizing
			"-webkit-box-sizing:border-box;box-sizing:border-box;" +
			"position:relative;display:block;" +
			"margin:auto;border:1px;padding:1px;" +
			"top:1%;width:50%";

		// Support: IE<9
		// Assume reasonable values in the absence of getComputedStyle
		pixelPositionVal = boxSizingReliableVal = reliableMarginLeftVal = false;
		pixelMarginRightVal = reliableMarginRightVal = true;

		// Check for getComputedStyle so that this code is not run in IE<9.
		if ( window.getComputedStyle ) {
			divStyle = window.getComputedStyle( div );
			pixelPositionVal = ( divStyle || {} ).top !== "1%";
			reliableMarginLeftVal = ( divStyle || {} ).marginLeft === "2px";
			boxSizingReliableVal = ( divStyle || { width: "4px" } ).width === "4px";

			// Support: Android 4.0 - 4.3 only
			// Some styles come back with percentage values, even though they shouldn't
			div.style.marginRight = "50%";
			pixelMarginRightVal = ( divStyle || { marginRight: "4px" } ).marginRight === "4px";

			// Support: Android 2.3 only
			// Div with explicit width and no margin-right incorrectly
			// gets computed margin-right based on width of container (#3333)
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			contents = div.appendChild( document.createElement( "div" ) );

			// Reset CSS: box-sizing; display; margin; border; padding
			contents.style.cssText = div.style.cssText =

				// Support: Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
				"box-sizing:content-box;display:block;margin:0;border:0;padding:0";
			contents.style.marginRight = contents.style.width = "0";
			div.style.width = "1px";

			reliableMarginRightVal =
				!parseFloat( ( window.getComputedStyle( contents ) || {} ).marginRight );

			div.removeChild( contents );
		}

		// Support: IE6-8
		// First check that getClientRects works as expected
		// Check if table cells still have offsetWidth/Height when they are set
		// to display:none and there are still other visible table cells in a
		// table row; if so, offsetWidth/Height are not reliable for use when
		// determining if an element has been hidden directly using
		// display:none (it is still safe to use offsets if a parent element is
		// hidden; don safety goggles and see bug #4512 for more information).
		div.style.display = "none";
		reliableHiddenOffsetsVal = div.getClientRects().length === 0;
		if ( reliableHiddenOffsetsVal ) {
			div.style.display = "";
			div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
			div.childNodes[ 0 ].style.borderCollapse = "separate";
			contents = div.getElementsByTagName( "td" );
			contents[ 0 ].style.cssText = "margin:0;border:0;padding:0;display:none";
			reliableHiddenOffsetsVal = contents[ 0 ].offsetHeight === 0;
			if ( reliableHiddenOffsetsVal ) {
				contents[ 0 ].style.display = "";
				contents[ 1 ].style.display = "none";
				reliableHiddenOffsetsVal = contents[ 0 ].offsetHeight === 0;
			}
		}

		// Teardown
		documentElement.removeChild( container );
	}

} )();


var getStyles, curCSS,
	rposition = /^(top|right|bottom|left)$/;

if ( window.getComputedStyle ) {
	getStyles = function( elem ) {

		// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

	curCSS = function( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,
			style = elem.style;

		computed = computed || getStyles( elem );

		// getPropertyValue is only needed for .css('filter') in IE9, see #12537
		ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;

		// Support: Opera 12.1x only
		// Fall back to style even without computed
		// computed is undefined for elems on document fragments
		if ( ( ret === "" || ret === undefined ) && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		if ( computed ) {

			// A tribute to the "awesome hack by Dean Edwards"
			// Chrome < 17 and Safari 5.0 uses "computed value"
			// instead of "used value" for margin-right
			// Safari 5.1.7 (at least) returns percentage for a larger set of values,
			// but width seems to be reliably pixels
			// this is against the CSSOM draft spec:
			// http://dev.w3.org/csswg/cssom/#resolved-values
			if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		// Support: IE
		// IE returns zIndex value as an integer.
		return ret === undefined ?
			ret :
			ret + "";
	};
} else if ( documentElement.currentStyle ) {
	getStyles = function( elem ) {
		return elem.currentStyle;
	};

	curCSS = function( elem, name, computed ) {
		var left, rs, rsLeft, ret,
			style = elem.style;

		computed = computed || getStyles( elem );
		ret = computed ? computed[ name ] : undefined;

		// Avoid setting ret to empty string here
		// so we don't default to auto
		if ( ret == null && style && style[ name ] ) {
			ret = style[ name ];
		}

		// From the awesome hack by Dean Edwards
		// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

		// If we're not dealing with a regular pixel number
		// but a number that has a weird ending, we need to convert it to pixels
		// but not position css attributes, as those are
		// proportional to the parent element instead
		// and we can't measure the parent instead because it
		// might trigger a "stacking dolls" problem
		if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {

			// Remember the original values
			left = style.left;
			rs = elem.runtimeStyle;
			rsLeft = rs && rs.left;

			// Put in the new values to get a computed value out
			if ( rsLeft ) {
				rs.left = elem.currentStyle.left;
			}
			style.left = name === "fontSize" ? "1em" : ret;
			ret = style.pixelLeft + "px";

			// Revert the changed values
			style.left = left;
			if ( rsLeft ) {
				rs.left = rsLeft;
			}
		}

		// Support: IE
		// IE returns zIndex value as an integer.
		return ret === undefined ?
			ret :
			ret + "" || "auto";
	};
}




function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var

		ralpha = /alpha\([^)]*\)/i,
	ropacity = /opacity\s*=\s*([^)]*)/i,

	// swappable if display is none or starts with table except
	// "table", "table-cell", or "table-caption"
	// see here for display values:
	// https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rnumsplit = new RegExp( "^(" + pnum + ")(.*)$", "i" ),

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style;


// return a css property mapped to a potentially vendor prefixed property
function vendorPropName( name ) {

	// shortcut for names that are not vendor prefixed
	if ( name in emptyStyle ) {
		return name;
	}

	// check for vendor prefixed names
	var capName = name.charAt( 0 ).toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = jQuery._data( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {

			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] =
					jQuery._data( elem, "olddisplay", defaultDisplay( elem.nodeName ) );
			}
		} else {
			hidden = isHidden( elem );

			if ( display && display !== "none" || !hidden ) {
				jQuery._data(
					elem,
					"olddisplay",
					hidden ? display : jQuery.css( elem, "display" )
				);
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?

		// If we already have the right measurement, avoid augmentation
		4 :

		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {

		// both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {

			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// at this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {

			// at this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// at this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = support.boxSizing &&
			jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {

		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test( val ) ) {
			return val;
		}

		// we need the check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox &&
			( support.boxSizingReliable() || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {

		// normalize float css property
		"float": support.cssFloat ? "cssFloat" : "styleFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] ||
			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set. See: #7116
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			if ( type === "number" ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,
			// but it would mean to define eight
			// (for every problematic property) identical functions
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				// Support: IE
				// Swallow errors from 'invalid' CSS values (#5509)
				try {
					style[ name ] = value;
				} catch ( e ) {}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var num, val, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] ||
			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		//convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Return, converting to number if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}
		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// certain elements can have dimension info if we invisibly show them
				// however, it must have a current display style that would benefit from this
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&
					elem.offsetWidth === 0 ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, name, extra );
						} ) :
						getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var styles = extra && getStyles( elem );
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					support.boxSizing &&
						jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				) : 0
			);
		}
	};
} );

if ( !support.opacity ) {
	jQuery.cssHooks.opacity = {
		get: function( elem, computed ) {

			// IE uses filters for opacity
			return ropacity.test( ( computed && elem.currentStyle ?
				elem.currentStyle.filter :
				elem.style.filter ) || "" ) ?
					( 0.01 * parseFloat( RegExp.$1 ) ) + "" :
					computed ? "1" : "";
		},

		set: function( elem, value ) {
			var style = elem.style,
				currentStyle = elem.currentStyle,
				opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
				filter = currentStyle && currentStyle.filter || style.filter || "";

			// IE has trouble with opacity if it does not have layout
			// Force it by setting the zoom level
			style.zoom = 1;

			// if setting opacity to 1, and no other filters exist -
			// attempt to remove filter attribute #6652
			// if value === "", then remove inline opacity #12685
			if ( ( value >= 1 || value === "" ) &&
					jQuery.trim( filter.replace( ralpha, "" ) ) === "" &&
					style.removeAttribute ) {

				// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
				// if "filter:" is present at all, clearType is disabled, we want to avoid this
				// style.removeAttribute is IE Only, but so apparently is this code path...
				style.removeAttribute( "filter" );

				// if there is no filter style applied in a css rule
				// or unset inline opacity, we are done
				if ( value === "" || currentStyle && !currentStyle.filter ) {
					return;
				}
			}

			// otherwise, set new filter values
			style.filter = ralpha.test( filter ) ?
				filter.replace( ralpha, opacity ) :
				filter + " " + opacity;
		}
	};
}

jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
	function( elem, computed ) {
		if ( computed ) {
			return swap( elem, { "display": "inline-block" },
				curCSS, [ elem, "marginRight" ] );
		}
	}
);

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return (
				parseFloat( curCSS( elem, "marginLeft" ) ) ||

				// Support: IE<=11+
				// Running getBoundingClientRect on a disconnected node in IE throws an error
				// Support: IE8 only
				// getClientRects() errors on disconnected elems
				( jQuery.contains( elem.ownerDocument, elem ) ?
					elem.getBoundingClientRect().left -
						swap( elem, { marginLeft: 0 }, function() {
							return elem.getBoundingClientRect().left;
						} ) :
					0
				)
			) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails
			// so, simple values such as "10px" are parsed to Float.
			// complex values such as "rotate(1rad)" are returned as is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// use step hook for back compat - use cssHook if its there - use .style if its
			// available and use plain properties where available
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 &&
				( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
					jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9
// Panic based approach to setting things on disconnected nodes

Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back Compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		attrs = { height: type },
		i = 0;

	// if we include width, step value is 1 to do all cssExpand values,
	// if we don't include width, step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// we're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	/* jshint validthis: true */
	var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHidden( elem ),
		dataShow = jQuery._data( elem, "fxshow" );

	// handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// doing this makes sure that the complete handler will be called
			// before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {

		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE does not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		display = jQuery.css( elem, "display" );

		// Test default display if display is currently "none"
		checkDisplay = display === "none" ?
			jQuery._data( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

		if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {

			// inline-level elements accept inline-block;
			// block-level elements need to be inline with layout
			if ( !support.inlineBlockNeedsLayout || defaultDisplay( elem.nodeName ) === "inline" ) {
				style.display = "inline-block";
			} else {
				style.zoom = 1;
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		if ( !support.shrinkWrapBlocks() ) {
			anim.always( function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			} );
		}
	}

	// show/hide pass
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// If there is dataShow left over from a stopped hide or show
				// and we are going to proceed with show, we should pretend to be hidden
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

		// Any non-fx value stops us from restoring the original display value
		} else {
			display = undefined;
		}
	}

	if ( !jQuery.isEmptyObject( orig ) ) {
		if ( dataShow ) {
			if ( "hidden" in dataShow ) {
				hidden = dataShow.hidden;
			}
		} else {
			dataShow = jQuery._data( elem, "fxshow", {} );
		}

		// store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done( function() {
				jQuery( elem ).hide();
			} );
		}
		anim.done( function() {
			var prop;
			jQuery._removeData( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		} );
		for ( prop in orig ) {
			tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}

	// If this is a noop like .hide().hide(), restore an overwritten display value
	} else if ( ( display === "none" ? defaultDisplay( elem.nodeName ) : display ) === "inline" ) {
		style.display = display;
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// not quite $.extend, this wont overwrite keys already present.
			// also - reusing 'index' from above because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// if we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// resolve when we played the last frame
				// otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( jQuery.isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					jQuery.proxy( result.stop, result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnotwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ?
			jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || jQuery._data( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = jQuery._data( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// start the next in the queue if the last step wasn't forced
			// timers currently will call their complete callbacks, which will dequeue
			// but only if they were gotoEnd
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = jQuery._data( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// enable finishing flag on private data
			data.finish = true;

			// empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		timers = jQuery.timers,
		i = 0;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	if ( timer() ) {
		jQuery.fx.start();
	} else {
		jQuery.timers.pop();
	}
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = window.setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	window.clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var a,
		input = document.createElement( "input" ),
		div = document.createElement( "div" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	// Setup
	div = document.createElement( "div" );
	div.setAttribute( "className", "t" );
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
	a = div.getElementsByTagName( "a" )[ 0 ];

	// Support: Windows Web Apps (WWA)
	// `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "checkbox" );
	div.appendChild( input );

	a = div.getElementsByTagName( "a" )[ 0 ];

	// First batch of tests.
	a.style.cssText = "top:1px";

	// Test setAttribute on camelCase class.
	// If it works, we need attrFixes when doing get/setAttribute (ie6/7)
	support.getSetAttribute = div.className !== "t";

	// Get the style information from getAttribute
	// (IE uses .cssText instead)
	support.style = /top/.test( a.getAttribute( "style" ) );

	// Make sure that URLs aren't manipulated
	// (IE normalizes it by default)
	support.hrefNormalized = a.getAttribute( "href" ) === "/a";

	// Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)
	support.checkOn = !!input.value;

	// Make sure that a selected-by-default option has a working selected property.
	// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
	support.optSelected = opt.selected;

	// Tests for enctype support on a form (#6743)
	support.enctype = !!document.createElement( "form" ).enctype;

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as disabled)
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Support: IE8 only
	// Check if we can trust getAttribute("value")
	input = document.createElement( "input" );
	input.setAttribute( "value", "" );
	support.input = input.getAttribute( "value" ) === "";

	// Check if an input maintains its value after becoming a radio
	input.value = "t";
	input.setAttribute( "type", "radio" );
	support.radioValue = input.value === "t";
} )();


var rreturn = /\r/g,
	rspaces = /[\x20\t\r\n\f]+/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if (
					hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?

					// handle most common string cases
					ret.replace( rreturn, "" ) :

					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";
			} else if ( typeof val === "number" ) {
				val += "";
			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {
				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE10-11+
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					jQuery.trim( jQuery.text( elem ) ).replace( rspaces, " " );
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// oldIE doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							( support.optDisabled ?
								!option.disabled :
								option.getAttribute( "disabled" ) === null ) &&
							( !option.parentNode.disabled ||
								!jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					if ( jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1 ) {

						// Support: IE6
						// When new option element is added to select box we need to
						// force reflow of newly added node in order to workaround delay
						// of initialization properties
						try {
							option.selected = optionSet = true;

						} catch ( _ ) {

							// Will be executed only in IE6
							option.scrollHeight;
						}

					} else {
						option.selected = false;
					}
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}

				return options;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




var nodeHook, boolHook,
	attrHandle = jQuery.expr.attrHandle,
	ruseDefault = /^(?:checked|selected)$/i,
	getSetAttribute = support.getSetAttribute,
	getSetInput = support.input;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					jQuery.nodeName( elem, "input" ) ) {

					// Setting the type on a radio button after the value resets the value in IE8-9
					// Reset value to default in case type is set after value during creation
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( jQuery.expr.match.bool.test( name ) ) {

					// Set corresponding property to false
					if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
						elem[ propName ] = false;

					// Support: IE<9
					// Also clear defaultChecked/defaultSelected (if appropriate)
					} else {
						elem[ jQuery.camelCase( "default-" + name ) ] =
							elem[ propName ] = false;
					}

				// See #9699 for explanation of this approach (setting first, then removal)
				} else {
					jQuery.attr( elem, name, "" );
				}

				elem.removeAttribute( getSetAttribute ? name : propName );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {

			// IE<8 needs the *property* name
			elem.setAttribute( !getSetAttribute && jQuery.propFix[ name ] || name, name );

		} else {

			// Support: IE<9
			// Use defaultChecked and defaultSelected for oldIE
			elem[ jQuery.camelCase( "default-" + name ) ] = elem[ name ] = true;
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
		attrHandle[ name ] = function( elem, name, isXML ) {
			var ret, handle;
			if ( !isXML ) {

				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ name ];
				attrHandle[ name ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					name.toLowerCase() :
					null;
				attrHandle[ name ] = handle;
			}
			return ret;
		};
	} else {
		attrHandle[ name ] = function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem[ jQuery.camelCase( "default-" + name ) ] ?
					name.toLowerCase() :
					null;
			}
		};
	}
} );

// fix oldIE attroperties
if ( !getSetInput || !getSetAttribute ) {
	jQuery.attrHooks.value = {
		set: function( elem, value, name ) {
			if ( jQuery.nodeName( elem, "input" ) ) {

				// Does not return so that setAttribute is also used
				elem.defaultValue = value;
			} else {

				// Use nodeHook if defined (#1954); otherwise setAttribute is fine
				return nodeHook && nodeHook.set( elem, value, name );
			}
		}
	};
}

// IE6/7 do not support getting/setting some attributes with get/setAttribute
if ( !getSetAttribute ) {

	// Use this for any attribute in IE6/7
	// This fixes almost every IE6/7 issue
	nodeHook = {
		set: function( elem, value, name ) {

			// Set the existing or create a new attribute node
			var ret = elem.getAttributeNode( name );
			if ( !ret ) {
				elem.setAttributeNode(
					( ret = elem.ownerDocument.createAttribute( name ) )
				);
			}

			ret.value = value += "";

			// Break association with cloned elements by also using setAttribute (#9646)
			if ( name === "value" || value === elem.getAttribute( name ) ) {
				return value;
			}
		}
	};

	// Some attributes are constructed with empty-string values when not defined
	attrHandle.id = attrHandle.name = attrHandle.coords =
		function( elem, name, isXML ) {
			var ret;
			if ( !isXML ) {
				return ( ret = elem.getAttributeNode( name ) ) && ret.value !== "" ?
					ret.value :
					null;
			}
		};

	// Fixing value retrieval on a button requires this module
	jQuery.valHooks.button = {
		get: function( elem, name ) {
			var ret = elem.getAttributeNode( name );
			if ( ret && ret.specified ) {
				return ret.value;
			}
		},
		set: nodeHook.set
	};

	// Set contenteditable to false on removals(#10429)
	// Setting to empty string throws an error as an invalid value
	jQuery.attrHooks.contenteditable = {
		set: function( elem, value, name ) {
			nodeHook.set( elem, value === "" ? false : value, name );
		}
	};

	// Set width and height to auto instead of 0 on empty string( Bug #8150 )
	// This is for removals
	jQuery.each( [ "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = {
			set: function( elem, value ) {
				if ( value === "" ) {
					elem.setAttribute( name, "auto" );
					return value;
				}
			}
		};
	} );
}

if ( !support.style ) {
	jQuery.attrHooks.style = {
		get: function( elem ) {

			// Return undefined in the case of empty string
			// Note: IE uppercases css property names, but if we were to .toLowerCase()
			// .cssText, that would destroy case sensitivity in URL's, like in "background"
			return elem.style.cssText || undefined;
		},
		set: function( elem, value ) {
			return ( elem.style.cssText = value + "" );
		}
	};
}




var rfocusable = /^(?:input|select|textarea|button|object)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		name = jQuery.propFix[ name ] || name;
		return this.each( function() {

			// try/catch handles cases where IE balks (such as removing a property on window)
			try {
				this[ name ] = undefined;
				delete this[ name ];
			} catch ( e ) {}
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				return tabindex ?
					parseInt( tabindex, 10 ) :
					rfocusable.test( elem.nodeName ) ||
						rclickable.test( elem.nodeName ) && elem.href ?
							0 :
							-1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Some attributes require a special call on IE
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !support.hrefNormalized ) {

	// href/src property should get the full normalized URL (#10299/#12915)
	jQuery.each( [ "href", "src" ], function( i, name ) {
		jQuery.propHooks[ name ] = {
			get: function( elem ) {
				return elem.getAttribute( name, 4 );
			}
		};
	} );
}

// Support: Safari, IE9+
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {
			var parent = elem.parentNode;

			if ( parent ) {
				parent.selectedIndex;

				// Make sure that it also works with optgroups, see #5701
				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
			return null;
		},
		set: function( elem ) {
			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );

// IE6/7 call enctype encoding
if ( !support.enctype ) {
	jQuery.propFix.enctype = "encoding";
}




var rclass = /[\t\r\n\f]/g;

function getClass( elem ) {
	return jQuery.attr( elem, "class" ) || "";
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnotwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 &&
					( " " + curValue + " " ).replace( rclass, " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( curValue !== finalValue ) {
						jQuery.attr( elem, "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnotwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 &&
					( " " + curValue + " " ).replace( rclass, " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( curValue !== finalValue ) {
						jQuery.attr( elem, "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( type === "string" ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = value.match( rnotwhite ) || [];

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// store className if set
					jQuery._data( this, "__className__", className );
				}

				// If the element has a class name or if we're passed "false",
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				jQuery.attr( this, "class",
					className || value === false ?
					"" :
					jQuery._data( this, "__className__" ) || ""
				);
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + getClass( elem ) + " " ).replace( rclass, " " )
					.indexOf( className ) > -1
			) {
				return true;
			}
		}

		return false;
	}
} );




// Return jQuery for attributes-only inclusion


jQuery.each( ( "blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu" ).split( " " ),
	function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
} );

jQuery.fn.extend( {
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );


var location = window.location;

var nonce = jQuery.now();

var rquery = ( /\?/ );



var rvalidtokens = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;

jQuery.parseJSON = function( data ) {

	// Attempt to parse using the native JSON parser first
	if ( window.JSON && window.JSON.parse ) {

		// Support: Android 2.3
		// Workaround failure to string-cast null input
		return window.JSON.parse( data + "" );
	}

	var requireNonComma,
		depth = null,
		str = jQuery.trim( data + "" );

	// Guard against invalid (and possibly dangerous) input by ensuring that nothing remains
	// after removing valid tokens
	return str && !jQuery.trim( str.replace( rvalidtokens, function( token, comma, open, close ) {

		// Force termination if we see a misplaced comma
		if ( requireNonComma && comma ) {
			depth = 0;
		}

		// Perform no more replacements after returning to outermost depth
		if ( depth === 0 ) {
			return token;
		}

		// Commas must not follow "[", "{", or ","
		requireNonComma = open || comma;

		// Determine new depth
		// array/object open ("[" or "{"): depth += true - false (increment)
		// array/object close ("]" or "}"): depth += false - true (decrement)
		// other cases ("," or primitive): depth += true - true (numeric cast)
		depth += !close - !open;

		// Remove this token
		return "";
	} ) ) ?
		( Function( "return " + str ) )() :
		jQuery.error( "Invalid JSON: " + data );
};


// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml, tmp;
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	try {
		if ( window.DOMParser ) { // Standard
			tmp = new window.DOMParser();
			xml = tmp.parseFromString( data, "text/xml" );
		} else { // IE
			xml = new window.ActiveXObject( "Microsoft.XMLDOM" );
			xml.async = "false";
			xml.loadXML( data );
		}
	} catch ( e ) {
		xml = undefined;
	}
	if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,

	// IE leaves an \r character at EOL
	rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Document location
	ajaxLocation = location.href,

	// Segment location into parts
	ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType.charAt( 0 ) === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var deep, key,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {
	var firstDataType, ct, finalDataType, type,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s[ "throws" ] ) { // jscs:ignore requireDotNotation
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: ajaxLocation,
		type: "GET",
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var

			// Cross-domain detection vars
			parts,

			// Loop variable
			i,

			// URL without anti-cache param
			cacheURL,

			// Response headers as string
			responseHeadersString,

			// timeout handle
			timeoutTimer,

			// To know if global events are to be dispatched
			fireGlobals,

			transport,

			// Response headers
			responseHeaders,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// The jqXHR state
			state = 0,

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {

								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || ajaxLocation ) + "" )
			.replace( rhash, "" )
			.replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( state === 2 ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );

				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// We extract error from statusText
				// then normalize statusText and status for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );


jQuery._evalUrl = function( url ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,
		"throws": true
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapAll( html.call( this, i ) );
			} );
		}

		if ( this[ 0 ] ) {

			// The elements to wrap the target around
			var wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
					elem = elem.firstChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function() {
		return this.parent().each( function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		} ).end();
	}
} );


function getDisplay( elem ) {
	return elem.style && elem.style.display || jQuery.css( elem, "display" );
}

function filterHidden( elem ) {

	// Disconnected elements are considered hidden
	if ( !jQuery.contains( elem.ownerDocument || document, elem ) ) {
		return true;
	}
	while ( elem && elem.nodeType === 1 ) {
		if ( getDisplay( elem ) === "none" || elem.type === "hidden" ) {
			return true;
		}
		elem = elem.parentNode;
	}
	return false;
}

jQuery.expr.filters.hidden = function( elem ) {

	// Support: Opera <= 12.12
	// Opera reports offsetWidths and offsetHeights less than zero on some elements
	return support.reliableHiddenOffsets() ?
		( elem.offsetWidth <= 0 && elem.offsetHeight <= 0 &&
			!elem.getClientRects().length ) :
			filterHidden( elem );
};

jQuery.expr.filters.visible = function( elem ) {
	return !jQuery.expr.filters.hidden( elem );
};




var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {

			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is(":disabled") so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( i, elem ) {
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					} ) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


// Create the request object
// (This is still attached to ajaxSettings for backward compatibility)
jQuery.ajaxSettings.xhr = window.ActiveXObject !== undefined ?

	// Support: IE6-IE8
	function() {

		// XHR cannot access local files, always use ActiveX for that case
		if ( this.isLocal ) {
			return createActiveXHR();
		}

		// Support: IE 9-11
		// IE seems to error on cross-domain PATCH requests when ActiveX XHR
		// is used. In IE 9+ always use the native XHR.
		// Note: this condition won't catch Edge as it doesn't define
		// document.documentMode but it also doesn't support ActiveX so it won't
		// reach this code.
		if ( document.documentMode > 8 ) {
			return createStandardXHR();
		}

		// Support: IE<9
		// oldIE XHR does not support non-RFC2616 methods (#13240)
		// See http://msdn.microsoft.com/en-us/library/ie/ms536648(v=vs.85).aspx
		// and http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9
		// Although this check for six methods instead of eight
		// since IE also does not support "trace" and "connect"
		return /^(get|post|head|put|delete|options)$/i.test( this.type ) &&
			createStandardXHR() || createActiveXHR();
	} :

	// For all other browsers, use the standard XMLHttpRequest object
	createStandardXHR;

var xhrId = 0,
	xhrCallbacks = {},
	xhrSupported = jQuery.ajaxSettings.xhr();

// Support: IE<10
// Open requests must be manually aborted on unload (#5280)
// See https://support.microsoft.com/kb/2856746 for more info
if ( window.attachEvent ) {
	window.attachEvent( "onunload", function() {
		for ( var key in xhrCallbacks ) {
			xhrCallbacks[ key ]( undefined, true );
		}
	} );
}

// Determine support properties
support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
xhrSupported = support.ajax = !!xhrSupported;

// Create transport if the browser can provide an xhr
if ( xhrSupported ) {

	jQuery.ajaxTransport( function( options ) {

		// Cross domain only allowed if supported through XMLHttpRequest
		if ( !options.crossDomain || support.cors ) {

			var callback;

			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr(),
						id = ++xhrId;

					// Open the socket
					xhr.open(
						options.type,
						options.url,
						options.async,
						options.username,
						options.password
					);

					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
						headers[ "X-Requested-With" ] = "XMLHttpRequest";
					}

					// Set headers
					for ( i in headers ) {

						// Support: IE<9
						// IE's ActiveXObject throws a 'Type Mismatch' exception when setting
						// request header to a null-value.
						//
						// To keep consistent with other XHR implementations, cast the value
						// to string and ignore `undefined`.
						if ( headers[ i ] !== undefined ) {
							xhr.setRequestHeader( i, headers[ i ] + "" );
						}
					}

					// Do send the request
					// This may raise an exception which is actually
					// handled in jQuery.ajax (so no try/catch here)
					xhr.send( ( options.hasContent && options.data ) || null );

					// Listener
					callback = function( _, isAbort ) {
						var status, statusText, responses;

						// Was never called and is aborted or complete
						if ( callback && ( isAbort || xhr.readyState === 4 ) ) {

							// Clean up
							delete xhrCallbacks[ id ];
							callback = undefined;
							xhr.onreadystatechange = jQuery.noop;

							// Abort manually if needed
							if ( isAbort ) {
								if ( xhr.readyState !== 4 ) {
									xhr.abort();
								}
							} else {
								responses = {};
								status = xhr.status;

								// Support: IE<10
								// Accessing binary-data responseText throws an exception
								// (#11426)
								if ( typeof xhr.responseText === "string" ) {
									responses.text = xhr.responseText;
								}

								// Firefox throws an exception when accessing
								// statusText for faulty cross-domain requests
								try {
									statusText = xhr.statusText;
								} catch ( e ) {

									// We normalize with Webkit giving an empty statusText
									statusText = "";
								}

								// Filter status for non standard behaviors

								// If the request is local and we have data: assume a success
								// (success with no data won't get notified, that's the best we
								// can do given current implementations)
								if ( !status && options.isLocal && !options.crossDomain ) {
									status = responses.text ? 200 : 404;

								// IE - #1450: sometimes returns 1223 when it should be 204
								} else if ( status === 1223 ) {
									status = 204;
								}
							}
						}

						// Call complete if needed
						if ( responses ) {
							complete( status, statusText, responses, xhr.getAllResponseHeaders() );
						}
					};

					// Do send the request
					// `xhr.send` may raise an exception, but it will be
					// handled in jQuery.ajax (so no try/catch here)
					if ( !options.async ) {

						// If we're in sync mode we fire the callback
						callback();
					} else if ( xhr.readyState === 4 ) {

						// (IE6 & IE7) if it's in cache and has been
						// retrieved directly we need to fire the callback
						window.setTimeout( callback );
					} else {

						// Register the callback, but delay it in case `xhr.send` throws
						// Add to the list of active xhr callbacks
						xhr.onreadystatechange = xhrCallbacks[ id ] = callback;
					}
				},

				abort: function() {
					if ( callback ) {
						callback( undefined, true );
					}
				}
			};
		}
	} );
}

// Functions to create xhrs
function createStandardXHR() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
}

function createActiveXHR() {
	try {
		return new window.ActiveXObject( "Microsoft.XMLHTTP" );
	} catch ( e ) {}
}




// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and global
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
		s.global = false;
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {

		var script,
			head = document.head || jQuery( "head" )[ 0 ] || document.documentElement;

		return {

			send: function( _, callback ) {

				script = document.createElement( "script" );

				script.async = true;

				if ( s.scriptCharset ) {
					script.charset = s.scriptCharset;
				}

				script.src = s.url;

				// Attach handlers for all browsers
				script.onload = script.onreadystatechange = function( _, isAbort ) {

					if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

						// Handle memory leak in IE
						script.onload = script.onreadystatechange = null;

						// Remove the script
						if ( script.parentNode ) {
							script.parentNode.removeChild( script );
						}

						// Dereference the script
						script = null;

						// Callback if not abort
						if ( !isAbort ) {
							callback( 200, "success" );
						}
					}
				};

				// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
				// Use native DOM manipulation to avoid our domManip AJAX trickery
				head.insertBefore( script, head.firstChild );
			},

			abort: function() {
				if ( script ) {
					script.onload( undefined, true );
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// data: string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}
	context = context || document;

	var parsed = rsingleTag.exec( data ),
		scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


// Keep a copy of the old load method
var _load = jQuery.fn.load;

/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = jQuery.trim( url.slice( off, url.length ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.expr.filters.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};





/**
 * Gets a window from an element
 */
function getWindow( elem ) {
	return jQuery.isWindow( elem ) ?
		elem :
		elem.nodeType === 9 ?
			elem.defaultView || elem.parentWindow :
			false;
}

jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			jQuery.inArray( "auto", [ curCSSTop, curCSSLeft ] ) > -1;

		// need to be able to calculate position if either top or left
		// is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;
		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );
		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {
	offset: function( options ) {
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var docElem, win,
			box = { top: 0, left: 0 },
			elem = this[ 0 ],
			doc = elem && elem.ownerDocument;

		if ( !doc ) {
			return;
		}

		docElem = doc.documentElement;

		// Make sure it's not a disconnected DOM node
		if ( !jQuery.contains( docElem, elem ) ) {
			return box;
		}

		// If we don't have gBCR, just use 0,0 rather than error
		// BlackBerry 5, iOS 3 (original iPhone)
		if ( typeof elem.getBoundingClientRect !== "undefined" ) {
			box = elem.getBoundingClientRect();
		}
		win = getWindow( doc );
		return {
			top: box.top  + ( win.pageYOffset || docElem.scrollTop )  - ( docElem.clientTop  || 0 ),
			left: box.left + ( win.pageXOffset || docElem.scrollLeft ) - ( docElem.clientLeft || 0 )
		};
	},

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			parentOffset = { top: 0, left: 0 },
			elem = this[ 0 ];

		// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
		// because it is its only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// we assume that getBoundingClientRect is available when computed position is fixed
			offset = elem.getBoundingClientRect();
		} else {

			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top  += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		// note: when an element has margin: auto the offsetLeft and marginLeft
		// are the same in Safari causing offset.left to incorrectly be 0
		return {
			top:  offset.top  - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) ) {
				offsetParent = offsetParent.offsetParent;
			}
			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = /Y/.test( prop );

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? ( prop in win ) ? win[ prop ] :
					win.document.documentElement[ method ] :
					elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : jQuery( win ).scrollLeft(),
					top ? val : jQuery( win ).scrollTop()
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
} );

// Support: Safari<7-8+, Chrome<37-44+
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// getComputedStyle returns percent when specified for top/left/bottom/right
// rather than make the css module depend on the offset module, we just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// if curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
	function( defaultExtra, funcName ) {

		// margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {

					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					// unfortunately, this causes bug #3838 in IE6/8 only,
					// but there is currently no good, small way to fix it.
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	} );
} );


jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	}
} );

// The number of elements contained in the matched element set
jQuery.fn.size = function() {
	return this.length;
};

jQuery.fn.andSelf = jQuery.fn.addBack;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	} );
}



var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in
// AMD (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( !noGlobal ) {
	window.jQuery = window.$ = jQuery;
}

return jQuery;
}));
(function($, undefined) {

/**
 * Unobtrusive scripting adapter for jQuery
 * https://github.com/rails/jquery-ujs
 *
 * Requires jQuery 1.8.0 or later.
 *
 * Released under the MIT license
 *
 */

  // Cut down on the number of issues from people inadvertently including jquery_ujs twice
  // by detecting and raising an error when it happens.
  'use strict';

  if ( $.rails !== undefined ) {
    $.error('jquery-ujs has already been loaded!');
  }

  // Shorthand to make it a little easier to call public rails functions from within rails.js
  var rails;
  var $document = $(document);

  $.rails = rails = {
    // Link elements bound by jquery-ujs
    linkClickSelector: 'a[data-confirm], a[data-method], a[data-remote]:not([disabled]), a[data-disable-with], a[data-disable]',

    // Button elements bound by jquery-ujs
    buttonClickSelector: 'button[data-remote]:not([form]):not(form button), button[data-confirm]:not([form]):not(form button)',

    // Select elements bound by jquery-ujs
    inputChangeSelector: 'select[data-remote], input[data-remote], textarea[data-remote]',

    // Form elements bound by jquery-ujs
    formSubmitSelector: 'form',

    // Form input elements bound by jquery-ujs
    formInputClickSelector: 'form input[type=submit], form input[type=image], form button[type=submit], form button:not([type]), input[type=submit][form], input[type=image][form], button[type=submit][form], button[form]:not([type])',

    // Form input elements disabled during form submission
    disableSelector: 'input[data-disable-with]:enabled, button[data-disable-with]:enabled, textarea[data-disable-with]:enabled, input[data-disable]:enabled, button[data-disable]:enabled, textarea[data-disable]:enabled',

    // Form input elements re-enabled after form submission
    enableSelector: 'input[data-disable-with]:disabled, button[data-disable-with]:disabled, textarea[data-disable-with]:disabled, input[data-disable]:disabled, button[data-disable]:disabled, textarea[data-disable]:disabled',

    // Form required input elements
    requiredInputSelector: 'input[name][required]:not([disabled]), textarea[name][required]:not([disabled])',

    // Form file input elements
    fileInputSelector: 'input[name][type=file]:not([disabled])',

    // Link onClick disable selector with possible reenable after remote submission
    linkDisableSelector: 'a[data-disable-with], a[data-disable]',

    // Button onClick disable selector with possible reenable after remote submission
    buttonDisableSelector: 'button[data-remote][data-disable-with], button[data-remote][data-disable]',

    // Up-to-date Cross-Site Request Forgery token
    csrfToken: function() {
     return $('meta[name=csrf-token]').attr('content');
    },

    // URL param that must contain the CSRF token
    csrfParam: function() {
     return $('meta[name=csrf-param]').attr('content');
    },

    // Make sure that every Ajax request sends the CSRF token
    CSRFProtection: function(xhr) {
      var token = rails.csrfToken();
      if (token) xhr.setRequestHeader('X-CSRF-Token', token);
    },

    // Make sure that all forms have actual up-to-date tokens (cached forms contain old ones)
    refreshCSRFTokens: function(){
      $('form input[name="' + rails.csrfParam() + '"]').val(rails.csrfToken());
    },

    // Triggers an event on an element and returns false if the event result is false
    fire: function(obj, name, data) {
      var event = $.Event(name);
      obj.trigger(event, data);
      return event.result !== false;
    },

    // Default confirm dialog, may be overridden with custom confirm dialog in $.rails.confirm
    confirm: function(message) {
      return confirm(message);
    },

    // Default ajax function, may be overridden with custom function in $.rails.ajax
    ajax: function(options) {
      return $.ajax(options);
    },

    // Default way to get an element's href. May be overridden at $.rails.href.
    href: function(element) {
      return element[0].href;
    },

    // Checks "data-remote" if true to handle the request through a XHR request.
    isRemote: function(element) {
      return element.data('remote') !== undefined && element.data('remote') !== false;
    },

    // Submits "remote" forms and links with ajax
    handleRemote: function(element) {
      var method, url, data, withCredentials, dataType, options;

      if (rails.fire(element, 'ajax:before')) {
        withCredentials = element.data('with-credentials') || null;
        dataType = element.data('type') || ($.ajaxSettings && $.ajaxSettings.dataType);

        if (element.is('form')) {
          method = element.data('ujs:submit-button-formmethod') || element.attr('method');
          url = element.data('ujs:submit-button-formaction') || element.attr('action');
          data = $(element[0]).serializeArray();
          // memoized value from clicked submit button
          var button = element.data('ujs:submit-button');
          if (button) {
            data.push(button);
            element.data('ujs:submit-button', null);
          }
          element.data('ujs:submit-button-formmethod', null);
          element.data('ujs:submit-button-formaction', null);
        } else if (element.is(rails.inputChangeSelector)) {
          method = element.data('method');
          url = element.data('url');
          data = element.serialize();
          if (element.data('params')) data = data + '&' + element.data('params');
        } else if (element.is(rails.buttonClickSelector)) {
          method = element.data('method') || 'get';
          url = element.data('url');
          data = element.serialize();
          if (element.data('params')) data = data + '&' + element.data('params');
        } else {
          method = element.data('method');
          url = rails.href(element);
          data = element.data('params') || null;
        }

        options = {
          type: method || 'GET', data: data, dataType: dataType,
          // stopping the "ajax:beforeSend" event will cancel the ajax request
          beforeSend: function(xhr, settings) {
            if (settings.dataType === undefined) {
              xhr.setRequestHeader('accept', '*/*;q=0.5, ' + settings.accepts.script);
            }
            if (rails.fire(element, 'ajax:beforeSend', [xhr, settings])) {
              element.trigger('ajax:send', xhr);
            } else {
              return false;
            }
          },
          success: function(data, status, xhr) {
            element.trigger('ajax:success', [data, status, xhr]);
          },
          complete: function(xhr, status) {
            element.trigger('ajax:complete', [xhr, status]);
          },
          error: function(xhr, status, error) {
            element.trigger('ajax:error', [xhr, status, error]);
          },
          crossDomain: rails.isCrossDomain(url)
        };

        // There is no withCredentials for IE6-8 when
        // "Enable native XMLHTTP support" is disabled
        if (withCredentials) {
          options.xhrFields = {
            withCredentials: withCredentials
          };
        }

        // Only pass url to `ajax` options if not blank
        if (url) { options.url = url; }

        return rails.ajax(options);
      } else {
        return false;
      }
    },

    // Determines if the request is a cross domain request.
    isCrossDomain: function(url) {
      var originAnchor = document.createElement('a');
      originAnchor.href = location.href;
      var urlAnchor = document.createElement('a');

      try {
        urlAnchor.href = url;
        // This is a workaround to a IE bug.
        urlAnchor.href = urlAnchor.href;

        // If URL protocol is false or is a string containing a single colon
        // *and* host are false, assume it is not a cross-domain request
        // (should only be the case for IE7 and IE compatibility mode).
        // Otherwise, evaluate protocol and host of the URL against the origin
        // protocol and host.
        return !(((!urlAnchor.protocol || urlAnchor.protocol === ':') && !urlAnchor.host) ||
          (originAnchor.protocol + '//' + originAnchor.host ===
            urlAnchor.protocol + '//' + urlAnchor.host));
      } catch (e) {
        // If there is an error parsing the URL, assume it is crossDomain.
        return true;
      }
    },

    // Handles "data-method" on links such as:
    // <a href="/users/5" data-method="delete" rel="nofollow" data-confirm="Are you sure?">Delete</a>
    handleMethod: function(link) {
      var href = rails.href(link),
        method = link.data('method'),
        target = link.attr('target'),
        csrfToken = rails.csrfToken(),
        csrfParam = rails.csrfParam(),
        form = $('<form method="post" action="' + href + '"></form>'),
        metadataInput = '<input name="_method" value="' + method + '" type="hidden" />';

      if (csrfParam !== undefined && csrfToken !== undefined && !rails.isCrossDomain(href)) {
        metadataInput += '<input name="' + csrfParam + '" value="' + csrfToken + '" type="hidden" />';
      }

      if (target) { form.attr('target', target); }

      form.hide().append(metadataInput).appendTo('body');
      form.submit();
    },

    // Helper function that returns form elements that match the specified CSS selector
    // If form is actually a "form" element this will return associated elements outside the from that have
    // the html form attribute set
    formElements: function(form, selector) {
      return form.is('form') ? $(form[0].elements).filter(selector) : form.find(selector);
    },

    /* Disables form elements:
      - Caches element value in 'ujs:enable-with' data store
      - Replaces element text with value of 'data-disable-with' attribute
      - Sets disabled property to true
    */
    disableFormElements: function(form) {
      rails.formElements(form, rails.disableSelector).each(function() {
        rails.disableFormElement($(this));
      });
    },

    disableFormElement: function(element) {
      var method, replacement;

      method = element.is('button') ? 'html' : 'val';
      replacement = element.data('disable-with');

      if (replacement !== undefined) {
        element.data('ujs:enable-with', element[method]());
        element[method](replacement);
      }

      element.prop('disabled', true);
      element.data('ujs:disabled', true);
    },

    /* Re-enables disabled form elements:
      - Replaces element text with cached value from 'ujs:enable-with' data store (created in `disableFormElements`)
      - Sets disabled property to false
    */
    enableFormElements: function(form) {
      rails.formElements(form, rails.enableSelector).each(function() {
        rails.enableFormElement($(this));
      });
    },

    enableFormElement: function(element) {
      var method = element.is('button') ? 'html' : 'val';
      if (element.data('ujs:enable-with') !== undefined) {
        element[method](element.data('ujs:enable-with'));
        element.removeData('ujs:enable-with'); // clean up cache
      }
      element.prop('disabled', false);
      element.removeData('ujs:disabled');
    },

   /* For 'data-confirm' attribute:
      - Fires `confirm` event
      - Shows the confirmation dialog
      - Fires the `confirm:complete` event

      Returns `true` if no function stops the chain and user chose yes; `false` otherwise.
      Attaching a handler to the element's `confirm` event that returns a `falsy` value cancels the confirmation dialog.
      Attaching a handler to the element's `confirm:complete` event that returns a `falsy` value makes this function
      return false. The `confirm:complete` event is fired whether or not the user answered true or false to the dialog.
   */
    allowAction: function(element) {
      var message = element.data('confirm'),
          answer = false, callback;
      if (!message) { return true; }

      if (rails.fire(element, 'confirm')) {
        try {
          answer = rails.confirm(message);
        } catch (e) {
          (console.error || console.log).call(console, e.stack || e);
        }
        callback = rails.fire(element, 'confirm:complete', [answer]);
      }
      return answer && callback;
    },

    // Helper function which checks for blank inputs in a form that match the specified CSS selector
    blankInputs: function(form, specifiedSelector, nonBlank) {
      var foundInputs = $(),
        input,
        valueToCheck,
        radiosForNameWithNoneSelected,
        radioName,
        selector = specifiedSelector || 'input,textarea',
        requiredInputs = form.find(selector),
        checkedRadioButtonNames = {};

      requiredInputs.each(function() {
        input = $(this);
        if (input.is('input[type=radio]')) {

          // Don't count unchecked required radio as blank if other radio with same name is checked,
          // regardless of whether same-name radio input has required attribute or not. The spec
          // states https://www.w3.org/TR/html5/forms.html#the-required-attribute
          radioName = input.attr('name');

          // Skip if we've already seen the radio with this name.
          if (!checkedRadioButtonNames[radioName]) {

            // If none checked
            if (form.find('input[type=radio]:checked[name="' + radioName + '"]').length === 0) {
              radiosForNameWithNoneSelected = form.find(
                'input[type=radio][name="' + radioName + '"]');
              foundInputs = foundInputs.add(radiosForNameWithNoneSelected);
            }

            // We only need to check each name once.
            checkedRadioButtonNames[radioName] = radioName;
          }
        } else {
          valueToCheck = input.is('input[type=checkbox],input[type=radio]') ? input.is(':checked') : !!input.val();
          if (valueToCheck === nonBlank) {
            foundInputs = foundInputs.add(input);
          }
        }
      });
      return foundInputs.length ? foundInputs : false;
    },

    // Helper function which checks for non-blank inputs in a form that match the specified CSS selector
    nonBlankInputs: function(form, specifiedSelector) {
      return rails.blankInputs(form, specifiedSelector, true); // true specifies nonBlank
    },

    // Helper function, needed to provide consistent behavior in IE
    stopEverything: function(e) {
      $(e.target).trigger('ujs:everythingStopped');
      e.stopImmediatePropagation();
      return false;
    },

    //  Replace element's html with the 'data-disable-with' after storing original html
    //  and prevent clicking on it
    disableElement: function(element) {
      var replacement = element.data('disable-with');

      if (replacement !== undefined) {
        element.data('ujs:enable-with', element.html()); // store enabled state
        element.html(replacement);
      }

      element.bind('click.railsDisable', function(e) { // prevent further clicking
        return rails.stopEverything(e);
      });
      element.data('ujs:disabled', true);
    },

    // Restore element to its original state which was disabled by 'disableElement' above
    enableElement: function(element) {
      if (element.data('ujs:enable-with') !== undefined) {
        element.html(element.data('ujs:enable-with')); // set to old enabled state
        element.removeData('ujs:enable-with'); // clean up cache
      }
      element.unbind('click.railsDisable'); // enable element
      element.removeData('ujs:disabled');
    }
  };

  if (rails.fire($document, 'rails:attachBindings')) {

    $.ajaxPrefilter(function(options, originalOptions, xhr){ if ( !options.crossDomain ) { rails.CSRFProtection(xhr); }});

    // This event works the same as the load event, except that it fires every
    // time the page is loaded.
    //
    // See https://github.com/rails/jquery-ujs/issues/357
    // See https://developer.mozilla.org/en-US/docs/Using_Firefox_1.5_caching
    $(window).on('pageshow.rails', function () {
      $($.rails.enableSelector).each(function () {
        var element = $(this);

        if (element.data('ujs:disabled')) {
          $.rails.enableFormElement(element);
        }
      });

      $($.rails.linkDisableSelector).each(function () {
        var element = $(this);

        if (element.data('ujs:disabled')) {
          $.rails.enableElement(element);
        }
      });
    });

    $document.on('ajax:complete', rails.linkDisableSelector, function() {
        rails.enableElement($(this));
    });

    $document.on('ajax:complete', rails.buttonDisableSelector, function() {
        rails.enableFormElement($(this));
    });

    $document.on('click.rails', rails.linkClickSelector, function(e) {
      var link = $(this), method = link.data('method'), data = link.data('params'), metaClick = e.metaKey || e.ctrlKey;
      if (!rails.allowAction(link)) return rails.stopEverything(e);

      if (!metaClick && link.is(rails.linkDisableSelector)) rails.disableElement(link);

      if (rails.isRemote(link)) {
        if (metaClick && (!method || method === 'GET') && !data) { return true; }

        var handleRemote = rails.handleRemote(link);
        // Response from rails.handleRemote() will either be false or a deferred object promise.
        if (handleRemote === false) {
          rails.enableElement(link);
        } else {
          handleRemote.fail( function() { rails.enableElement(link); } );
        }
        return false;

      } else if (method) {
        rails.handleMethod(link);
        return false;
      }
    });

    $document.on('click.rails', rails.buttonClickSelector, function(e) {
      var button = $(this);

      if (!rails.allowAction(button) || !rails.isRemote(button)) return rails.stopEverything(e);

      if (button.is(rails.buttonDisableSelector)) rails.disableFormElement(button);

      var handleRemote = rails.handleRemote(button);
      // Response from rails.handleRemote() will either be false or a deferred object promise.
      if (handleRemote === false) {
        rails.enableFormElement(button);
      } else {
        handleRemote.fail( function() { rails.enableFormElement(button); } );
      }
      return false;
    });

    $document.on('change.rails', rails.inputChangeSelector, function(e) {
      var link = $(this);
      if (!rails.allowAction(link) || !rails.isRemote(link)) return rails.stopEverything(e);

      rails.handleRemote(link);
      return false;
    });

    $document.on('submit.rails', rails.formSubmitSelector, function(e) {
      var form = $(this),
        remote = rails.isRemote(form),
        blankRequiredInputs,
        nonBlankFileInputs;

      if (!rails.allowAction(form)) return rails.stopEverything(e);

      // Skip other logic when required values are missing or file upload is present
      if (form.attr('novalidate') === undefined) {
        if (form.data('ujs:formnovalidate-button') === undefined) {
          blankRequiredInputs = rails.blankInputs(form, rails.requiredInputSelector, false);
          if (blankRequiredInputs && rails.fire(form, 'ajax:aborted:required', [blankRequiredInputs])) {
            return rails.stopEverything(e);
          }
        } else {
          // Clear the formnovalidate in case the next button click is not on a formnovalidate button
          // Not strictly necessary to do here, since it is also reset on each button click, but just to be certain
          form.data('ujs:formnovalidate-button', undefined);
        }
      }

      if (remote) {
        nonBlankFileInputs = rails.nonBlankInputs(form, rails.fileInputSelector);
        if (nonBlankFileInputs) {
          // Slight timeout so that the submit button gets properly serialized
          // (make it easy for event handler to serialize form without disabled values)
          setTimeout(function(){ rails.disableFormElements(form); }, 13);
          var aborted = rails.fire(form, 'ajax:aborted:file', [nonBlankFileInputs]);

          // Re-enable form elements if event bindings return false (canceling normal form submission)
          if (!aborted) { setTimeout(function(){ rails.enableFormElements(form); }, 13); }

          return aborted;
        }

        rails.handleRemote(form);
        return false;

      } else {
        // Slight timeout so that the submit button gets properly serialized
        setTimeout(function(){ rails.disableFormElements(form); }, 13);
      }
    });

    $document.on('click.rails', rails.formInputClickSelector, function(event) {
      var button = $(this);

      if (!rails.allowAction(button)) return rails.stopEverything(event);

      // Register the pressed submit button
      var name = button.attr('name'),
        data = name ? {name:name, value:button.val()} : null;

      var form = button.closest('form');
      if (form.length === 0) {
        form = $('#' + button.attr('form'));
      }
      form.data('ujs:submit-button', data);

      // Save attributes from button
      form.data('ujs:formnovalidate-button', button.attr('formnovalidate'));
      form.data('ujs:submit-button-formaction', button.attr('formaction'));
      form.data('ujs:submit-button-formmethod', button.attr('formmethod'));
    });

    $document.on('ajax:send.rails', rails.formSubmitSelector, function(event) {
      if (this === event.target) rails.disableFormElements($(this));
    });

    $document.on('ajax:complete.rails', rails.formSubmitSelector, function(event) {
      if (this === event.target) rails.enableFormElements($(this));
    });

    $(function(){
      rails.refreshCSRFTokens();
    });
  }

})( jQuery );
/*!
 * jQuery UI Core 1.10.4
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/category/ui-core/
 */

(function( $, undefined ) {

var uuid = 0,
	runiqueId = /^ui-id-\d+$/;

// $.ui might exist from components with no dependencies, e.g., $.ui.position
$.ui = $.ui || {};

$.extend( $.ui, {
	version: "1.10.4",

	keyCode: {
		BACKSPACE: 8,
		COMMA: 188,
		DELETE: 46,
		DOWN: 40,
		END: 35,
		ENTER: 13,
		ESCAPE: 27,
		HOME: 36,
		LEFT: 37,
		NUMPAD_ADD: 107,
		NUMPAD_DECIMAL: 110,
		NUMPAD_DIVIDE: 111,
		NUMPAD_ENTER: 108,
		NUMPAD_MULTIPLY: 106,
		NUMPAD_SUBTRACT: 109,
		PAGE_DOWN: 34,
		PAGE_UP: 33,
		PERIOD: 190,
		RIGHT: 39,
		SPACE: 32,
		TAB: 9,
		UP: 38
	}
});

// plugins
$.fn.extend({
	focus: (function( orig ) {
		return function( delay, fn ) {
			return typeof delay === "number" ?
				this.each(function() {
					var elem = this;
					setTimeout(function() {
						$( elem ).focus();
						if ( fn ) {
							fn.call( elem );
						}
					}, delay );
				}) :
				orig.apply( this, arguments );
		};
	})( $.fn.focus ),

	scrollParent: function() {
		var scrollParent;
		if (($.ui.ie && (/(static|relative)/).test(this.css("position"))) || (/absolute/).test(this.css("position"))) {
			scrollParent = this.parents().filter(function() {
				return (/(relative|absolute|fixed)/).test($.css(this,"position")) && (/(auto|scroll)/).test($.css(this,"overflow")+$.css(this,"overflow-y")+$.css(this,"overflow-x"));
			}).eq(0);
		} else {
			scrollParent = this.parents().filter(function() {
				return (/(auto|scroll)/).test($.css(this,"overflow")+$.css(this,"overflow-y")+$.css(this,"overflow-x"));
			}).eq(0);
		}

		return (/fixed/).test(this.css("position")) || !scrollParent.length ? $(document) : scrollParent;
	},

	zIndex: function( zIndex ) {
		if ( zIndex !== undefined ) {
			return this.css( "zIndex", zIndex );
		}

		if ( this.length ) {
			var elem = $( this[ 0 ] ), position, value;
			while ( elem.length && elem[ 0 ] !== document ) {
				// Ignore z-index if position is set to a value where z-index is ignored by the browser
				// This makes behavior of this function consistent across browsers
				// WebKit always returns auto if the element is positioned
				position = elem.css( "position" );
				if ( position === "absolute" || position === "relative" || position === "fixed" ) {
					// IE returns 0 when zIndex is not specified
					// other browsers return a string
					// we ignore the case of nested elements with an explicit value of 0
					// <div style="z-index: -10;"><div style="z-index: 0;"></div></div>
					value = parseInt( elem.css( "zIndex" ), 10 );
					if ( !isNaN( value ) && value !== 0 ) {
						return value;
					}
				}
				elem = elem.parent();
			}
		}

		return 0;
	},

	uniqueId: function() {
		return this.each(function() {
			if ( !this.id ) {
				this.id = "ui-id-" + (++uuid);
			}
		});
	},

	removeUniqueId: function() {
		return this.each(function() {
			if ( runiqueId.test( this.id ) ) {
				$( this ).removeAttr( "id" );
			}
		});
	}
});

// selectors
function focusable( element, isTabIndexNotNaN ) {
	var map, mapName, img,
		nodeName = element.nodeName.toLowerCase();
	if ( "area" === nodeName ) {
		map = element.parentNode;
		mapName = map.name;
		if ( !element.href || !mapName || map.nodeName.toLowerCase() !== "map" ) {
			return false;
		}
		img = $( "img[usemap=#" + mapName + "]" )[0];
		return !!img && visible( img );
	}
	return ( /input|select|textarea|button|object/.test( nodeName ) ?
		!element.disabled :
		"a" === nodeName ?
			element.href || isTabIndexNotNaN :
			isTabIndexNotNaN) &&
		// the element and all of its ancestors must be visible
		visible( element );
}

function visible( element ) {
	return $.expr.filters.visible( element ) &&
		!$( element ).parents().addBack().filter(function() {
			return $.css( this, "visibility" ) === "hidden";
		}).length;
}

$.extend( $.expr[ ":" ], {
	data: $.expr.createPseudo ?
		$.expr.createPseudo(function( dataName ) {
			return function( elem ) {
				return !!$.data( elem, dataName );
			};
		}) :
		// support: jQuery <1.8
		function( elem, i, match ) {
			return !!$.data( elem, match[ 3 ] );
		},

	focusable: function( element ) {
		return focusable( element, !isNaN( $.attr( element, "tabindex" ) ) );
	},

	tabbable: function( element ) {
		var tabIndex = $.attr( element, "tabindex" ),
			isTabIndexNaN = isNaN( tabIndex );
		return ( isTabIndexNaN || tabIndex >= 0 ) && focusable( element, !isTabIndexNaN );
	}
});

// support: jQuery <1.8
if ( !$( "<a>" ).outerWidth( 1 ).jquery ) {
	$.each( [ "Width", "Height" ], function( i, name ) {
		var side = name === "Width" ? [ "Left", "Right" ] : [ "Top", "Bottom" ],
			type = name.toLowerCase(),
			orig = {
				innerWidth: $.fn.innerWidth,
				innerHeight: $.fn.innerHeight,
				outerWidth: $.fn.outerWidth,
				outerHeight: $.fn.outerHeight
			};

		function reduce( elem, size, border, margin ) {
			$.each( side, function() {
				size -= parseFloat( $.css( elem, "padding" + this ) ) || 0;
				if ( border ) {
					size -= parseFloat( $.css( elem, "border" + this + "Width" ) ) || 0;
				}
				if ( margin ) {
					size -= parseFloat( $.css( elem, "margin" + this ) ) || 0;
				}
			});
			return size;
		}

		$.fn[ "inner" + name ] = function( size ) {
			if ( size === undefined ) {
				return orig[ "inner" + name ].call( this );
			}

			return this.each(function() {
				$( this ).css( type, reduce( this, size ) + "px" );
			});
		};

		$.fn[ "outer" + name] = function( size, margin ) {
			if ( typeof size !== "number" ) {
				return orig[ "outer" + name ].call( this, size );
			}

			return this.each(function() {
				$( this).css( type, reduce( this, size, true, margin ) + "px" );
			});
		};
	});
}

// support: jQuery <1.8
if ( !$.fn.addBack ) {
	$.fn.addBack = function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	};
}

// support: jQuery 1.6.1, 1.6.2 (http://bugs.jquery.com/ticket/9413)
if ( $( "<a>" ).data( "a-b", "a" ).removeData( "a-b" ).data( "a-b" ) ) {
	$.fn.removeData = (function( removeData ) {
		return function( key ) {
			if ( arguments.length ) {
				return removeData.call( this, $.camelCase( key ) );
			} else {
				return removeData.call( this );
			}
		};
	})( $.fn.removeData );
}





// deprecated
$.ui.ie = !!/msie [\w.]+/.exec( navigator.userAgent.toLowerCase() );

$.support.selectstart = "onselectstart" in document.createElement( "div" );
$.fn.extend({
	disableSelection: function() {
		return this.bind( ( $.support.selectstart ? "selectstart" : "mousedown" ) +
			".ui-disableSelection", function( event ) {
				event.preventDefault();
			});
	},

	enableSelection: function() {
		return this.unbind( ".ui-disableSelection" );
	}
});

$.extend( $.ui, {
	// $.ui.plugin is deprecated. Use $.widget() extensions instead.
	plugin: {
		add: function( module, option, set ) {
			var i,
				proto = $.ui[ module ].prototype;
			for ( i in set ) {
				proto.plugins[ i ] = proto.plugins[ i ] || [];
				proto.plugins[ i ].push( [ option, set[ i ] ] );
			}
		},
		call: function( instance, name, args ) {
			var i,
				set = instance.plugins[ name ];
			if ( !set || !instance.element[ 0 ].parentNode || instance.element[ 0 ].parentNode.nodeType === 11 ) {
				return;
			}

			for ( i = 0; i < set.length; i++ ) {
				if ( instance.options[ set[ i ][ 0 ] ] ) {
					set[ i ][ 1 ].apply( instance.element, args );
				}
			}
		}
	},

	// only used by resizable
	hasScroll: function( el, a ) {

		//If overflow is hidden, the element might have extra content, but the user wants to hide it
		if ( $( el ).css( "overflow" ) === "hidden") {
			return false;
		}

		var scroll = ( a && a === "left" ) ? "scrollLeft" : "scrollTop",
			has = false;

		if ( el[ scroll ] > 0 ) {
			return true;
		}

		// TODO: determine which cases actually cause this to happen
		// if the element doesn't have the scroll set, see if it's possible to
		// set the scroll
		el[ scroll ] = 1;
		has = ( el[ scroll ] > 0 );
		el[ scroll ] = 0;
		return has;
	}
});

})( jQuery );


/*!
 * jQuery UI Datepicker 1.10.4
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/datepicker/
 *
 * Depends:
 *	jquery.ui.core.js
 */

(function( $, undefined ) {

$.extend($.ui, { datepicker: { version: "1.10.4" } });

var PROP_NAME = "datepicker",
	instActive;

/* Date picker manager.
   Use the singleton instance of this class, $.datepicker, to interact with the date picker.
   Settings for (groups of) date pickers are maintained in an instance object,
   allowing multiple different settings on the same page. */

function Datepicker() {
	this._curInst = null; // The current instance in use
	this._keyEvent = false; // If the last event was a key event
	this._disabledInputs = []; // List of date picker inputs that have been disabled
	this._datepickerShowing = false; // True if the popup picker is showing , false if not
	this._inDialog = false; // True if showing within a "dialog", false if not
	this._mainDivId = "ui-datepicker-div"; // The ID of the main datepicker division
	this._inlineClass = "ui-datepicker-inline"; // The name of the inline marker class
	this._appendClass = "ui-datepicker-append"; // The name of the append marker class
	this._triggerClass = "ui-datepicker-trigger"; // The name of the trigger marker class
	this._dialogClass = "ui-datepicker-dialog"; // The name of the dialog marker class
	this._disableClass = "ui-datepicker-disabled"; // The name of the disabled covering marker class
	this._unselectableClass = "ui-datepicker-unselectable"; // The name of the unselectable cell marker class
	this._currentClass = "ui-datepicker-current-day"; // The name of the current day marker class
	this._dayOverClass = "ui-datepicker-days-cell-over"; // The name of the day hover marker class
	this.regional = []; // Available regional settings, indexed by language code
	this.regional[""] = { // Default regional settings
		closeText: "Done", // Display text for close link
		prevText: "Prev", // Display text for previous month link
		nextText: "Next", // Display text for next month link
		currentText: "Today", // Display text for current month link
		monthNames: ["January","February","March","April","May","June",
			"July","August","September","October","November","December"], // Names of months for drop-down and formatting
		monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], // For formatting
		dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], // For formatting
		dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], // For formatting
		dayNamesMin: ["Su","Mo","Tu","We","Th","Fr","Sa"], // Column headings for days starting at Sunday
		weekHeader: "Wk", // Column header for week of the year
		dateFormat: "mm/dd/yy", // See format options on parseDate
		firstDay: 0, // The first day of the week, Sun = 0, Mon = 1, ...
		isRTL: false, // True if right-to-left language, false if left-to-right
		showMonthAfterYear: false, // True if the year select precedes month, false for month then year
		yearSuffix: "" // Additional text to append to the year in the month headers
	};
	this._defaults = { // Global defaults for all the date picker instances
		showOn: "focus", // "focus" for popup on focus,
			// "button" for trigger button, or "both" for either
		showAnim: "fadeIn", // Name of jQuery animation for popup
		showOptions: {}, // Options for enhanced animations
		defaultDate: null, // Used when field is blank: actual date,
			// +/-number for offset from today, null for today
		appendText: "", // Display text following the input box, e.g. showing the format
		buttonText: "...", // Text for trigger button
		buttonImage: "", // URL for trigger button image
		buttonImageOnly: false, // True if the image appears alone, false if it appears on a button
		hideIfNoPrevNext: false, // True to hide next/previous month links
			// if not applicable, false to just disable them
		navigationAsDateFormat: false, // True if date formatting applied to prev/today/next links
		gotoCurrent: false, // True if today link goes back to current selection instead
		changeMonth: false, // True if month can be selected directly, false if only prev/next
		changeYear: false, // True if year can be selected directly, false if only prev/next
		yearRange: "c-10:c+10", // Range of years to display in drop-down,
			// either relative to today's year (-nn:+nn), relative to currently displayed year
			// (c-nn:c+nn), absolute (nnnn:nnnn), or a combination of the above (nnnn:-n)
		showOtherMonths: false, // True to show dates in other months, false to leave blank
		selectOtherMonths: false, // True to allow selection of dates in other months, false for unselectable
		showWeek: false, // True to show week of the year, false to not show it
		calculateWeek: this.iso8601Week, // How to calculate the week of the year,
			// takes a Date and returns the number of the week for it
		shortYearCutoff: "+10", // Short year values < this are in the current century,
			// > this are in the previous century,
			// string value starting with "+" for current year + value
		minDate: null, // The earliest selectable date, or null for no limit
		maxDate: null, // The latest selectable date, or null for no limit
		duration: "fast", // Duration of display/closure
		beforeShowDay: null, // Function that takes a date and returns an array with
			// [0] = true if selectable, false if not, [1] = custom CSS class name(s) or "",
			// [2] = cell title (optional), e.g. $.datepicker.noWeekends
		beforeShow: null, // Function that takes an input field and
			// returns a set of custom settings for the date picker
		onSelect: null, // Define a callback function when a date is selected
		onChangeMonthYear: null, // Define a callback function when the month or year is changed
		onClose: null, // Define a callback function when the datepicker is closed
		numberOfMonths: 1, // Number of months to show at a time
		showCurrentAtPos: 0, // The position in multipe months at which to show the current month (starting at 0)
		stepMonths: 1, // Number of months to step back/forward
		stepBigMonths: 12, // Number of months to step back/forward for the big links
		altField: "", // Selector for an alternate field to store selected dates into
		altFormat: "", // The date format to use for the alternate field
		constrainInput: true, // The input is constrained by the current date format
		showButtonPanel: false, // True to show button panel, false to not show it
		autoSize: false, // True to size the input for the date format, false to leave as is
		disabled: false // The initial disabled state
	};
	$.extend(this._defaults, this.regional[""]);
	this.dpDiv = bindHover($("<div id='" + this._mainDivId + "' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"));
}

$.extend(Datepicker.prototype, {
	/* Class name added to elements to indicate already configured with a date picker. */
	markerClassName: "hasDatepicker",

	//Keep track of the maximum number of rows displayed (see #7043)
	maxRows: 4,

	// TODO rename to "widget" when switching to widget factory
	_widgetDatepicker: function() {
		return this.dpDiv;
	},

	/* Override the default settings for all instances of the date picker.
	 * @param  settings  object - the new settings to use as defaults (anonymous object)
	 * @return the manager object
	 */
	setDefaults: function(settings) {
		extendRemove(this._defaults, settings || {});
		return this;
	},

	/* Attach the date picker to a jQuery selection.
	 * @param  target	element - the target input field or division or span
	 * @param  settings  object - the new settings to use for this date picker instance (anonymous)
	 */
	_attachDatepicker: function(target, settings) {
		var nodeName, inline, inst;
		nodeName = target.nodeName.toLowerCase();
		inline = (nodeName === "div" || nodeName === "span");
		if (!target.id) {
			this.uuid += 1;
			target.id = "dp" + this.uuid;
		}
		inst = this._newInst($(target), inline);
		inst.settings = $.extend({}, settings || {});
		if (nodeName === "input") {
			this._connectDatepicker(target, inst);
		} else if (inline) {
			this._inlineDatepicker(target, inst);
		}
	},

	/* Create a new instance object. */
	_newInst: function(target, inline) {
		var id = target[0].id.replace(/([^A-Za-z0-9_\-])/g, "\\\\$1"); // escape jQuery meta chars
		return {id: id, input: target, // associated target
			selectedDay: 0, selectedMonth: 0, selectedYear: 0, // current selection
			drawMonth: 0, drawYear: 0, // month being drawn
			inline: inline, // is datepicker inline or not
			dpDiv: (!inline ? this.dpDiv : // presentation div
			bindHover($("<div class='" + this._inlineClass + " ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>")))};
	},

	/* Attach the date picker to an input field. */
	_connectDatepicker: function(target, inst) {
		var input = $(target);
		inst.append = $([]);
		inst.trigger = $([]);
		if (input.hasClass(this.markerClassName)) {
			return;
		}
		this._attachments(input, inst);
		input.addClass(this.markerClassName).keydown(this._doKeyDown).
			keypress(this._doKeyPress).keyup(this._doKeyUp);
		this._autoSize(inst);
		$.data(target, PROP_NAME, inst);
		//If disabled option is true, disable the datepicker once it has been attached to the input (see ticket #5665)
		if( inst.settings.disabled ) {
			this._disableDatepicker( target );
		}
	},

	/* Make attachments based on settings. */
	_attachments: function(input, inst) {
		var showOn, buttonText, buttonImage,
			appendText = this._get(inst, "appendText"),
			isRTL = this._get(inst, "isRTL");

		if (inst.append) {
			inst.append.remove();
		}
		if (appendText) {
			inst.append = $("<span class='" + this._appendClass + "'>" + appendText + "</span>");
			input[isRTL ? "before" : "after"](inst.append);
		}

		input.unbind("focus", this._showDatepicker);

		if (inst.trigger) {
			inst.trigger.remove();
		}

		showOn = this._get(inst, "showOn");
		if (showOn === "focus" || showOn === "both") { // pop-up date picker when in the marked field
			input.focus(this._showDatepicker);
		}
		if (showOn === "button" || showOn === "both") { // pop-up date picker when button clicked
			buttonText = this._get(inst, "buttonText");
			buttonImage = this._get(inst, "buttonImage");
			inst.trigger = $(this._get(inst, "buttonImageOnly") ?
				$("<img/>").addClass(this._triggerClass).
					attr({ src: buttonImage, alt: buttonText, title: buttonText }) :
				$("<button type='button'></button>").addClass(this._triggerClass).
					html(!buttonImage ? buttonText : $("<img/>").attr(
					{ src:buttonImage, alt:buttonText, title:buttonText })));
			input[isRTL ? "before" : "after"](inst.trigger);
			inst.trigger.click(function() {
				if ($.datepicker._datepickerShowing && $.datepicker._lastInput === input[0]) {
					$.datepicker._hideDatepicker();
				} else if ($.datepicker._datepickerShowing && $.datepicker._lastInput !== input[0]) {
					$.datepicker._hideDatepicker();
					$.datepicker._showDatepicker(input[0]);
				} else {
					$.datepicker._showDatepicker(input[0]);
				}
				return false;
			});
		}
	},

	/* Apply the maximum length for the date format. */
	_autoSize: function(inst) {
		if (this._get(inst, "autoSize") && !inst.inline) {
			var findMax, max, maxI, i,
				date = new Date(2009, 12 - 1, 20), // Ensure double digits
				dateFormat = this._get(inst, "dateFormat");

			if (dateFormat.match(/[DM]/)) {
				findMax = function(names) {
					max = 0;
					maxI = 0;
					for (i = 0; i < names.length; i++) {
						if (names[i].length > max) {
							max = names[i].length;
							maxI = i;
						}
					}
					return maxI;
				};
				date.setMonth(findMax(this._get(inst, (dateFormat.match(/MM/) ?
					"monthNames" : "monthNamesShort"))));
				date.setDate(findMax(this._get(inst, (dateFormat.match(/DD/) ?
					"dayNames" : "dayNamesShort"))) + 20 - date.getDay());
			}
			inst.input.attr("size", this._formatDate(inst, date).length);
		}
	},

	/* Attach an inline date picker to a div. */
	_inlineDatepicker: function(target, inst) {
		var divSpan = $(target);
		if (divSpan.hasClass(this.markerClassName)) {
			return;
		}
		divSpan.addClass(this.markerClassName).append(inst.dpDiv);
		$.data(target, PROP_NAME, inst);
		this._setDate(inst, this._getDefaultDate(inst), true);
		this._updateDatepicker(inst);
		this._updateAlternate(inst);
		//If disabled option is true, disable the datepicker before showing it (see ticket #5665)
		if( inst.settings.disabled ) {
			this._disableDatepicker( target );
		}
		// Set display:block in place of inst.dpDiv.show() which won't work on disconnected elements
		// http://bugs.jqueryui.com/ticket/7552 - A Datepicker created on a detached div has zero height
		inst.dpDiv.css( "display", "block" );
	},

	/* Pop-up the date picker in a "dialog" box.
	 * @param  input element - ignored
	 * @param  date	string or Date - the initial date to display
	 * @param  onSelect  function - the function to call when a date is selected
	 * @param  settings  object - update the dialog date picker instance's settings (anonymous object)
	 * @param  pos int[2] - coordinates for the dialog's position within the screen or
	 *					event - with x/y coordinates or
	 *					leave empty for default (screen centre)
	 * @return the manager object
	 */
	_dialogDatepicker: function(input, date, onSelect, settings, pos) {
		var id, browserWidth, browserHeight, scrollX, scrollY,
			inst = this._dialogInst; // internal instance

		if (!inst) {
			this.uuid += 1;
			id = "dp" + this.uuid;
			this._dialogInput = $("<input type='text' id='" + id +
				"' style='position: absolute; top: -100px; width: 0px;'/>");
			this._dialogInput.keydown(this._doKeyDown);
			$("body").append(this._dialogInput);
			inst = this._dialogInst = this._newInst(this._dialogInput, false);
			inst.settings = {};
			$.data(this._dialogInput[0], PROP_NAME, inst);
		}
		extendRemove(inst.settings, settings || {});
		date = (date && date.constructor === Date ? this._formatDate(inst, date) : date);
		this._dialogInput.val(date);

		this._pos = (pos ? (pos.length ? pos : [pos.pageX, pos.pageY]) : null);
		if (!this._pos) {
			browserWidth = document.documentElement.clientWidth;
			browserHeight = document.documentElement.clientHeight;
			scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;
			scrollY = document.documentElement.scrollTop || document.body.scrollTop;
			this._pos = // should use actual width/height below
				[(browserWidth / 2) - 100 + scrollX, (browserHeight / 2) - 150 + scrollY];
		}

		// move input on screen for focus, but hidden behind dialog
		this._dialogInput.css("left", (this._pos[0] + 20) + "px").css("top", this._pos[1] + "px");
		inst.settings.onSelect = onSelect;
		this._inDialog = true;
		this.dpDiv.addClass(this._dialogClass);
		this._showDatepicker(this._dialogInput[0]);
		if ($.blockUI) {
			$.blockUI(this.dpDiv);
		}
		$.data(this._dialogInput[0], PROP_NAME, inst);
		return this;
	},

	/* Detach a datepicker from its control.
	 * @param  target	element - the target input field or division or span
	 */
	_destroyDatepicker: function(target) {
		var nodeName,
			$target = $(target),
			inst = $.data(target, PROP_NAME);

		if (!$target.hasClass(this.markerClassName)) {
			return;
		}

		nodeName = target.nodeName.toLowerCase();
		$.removeData(target, PROP_NAME);
		if (nodeName === "input") {
			inst.append.remove();
			inst.trigger.remove();
			$target.removeClass(this.markerClassName).
				unbind("focus", this._showDatepicker).
				unbind("keydown", this._doKeyDown).
				unbind("keypress", this._doKeyPress).
				unbind("keyup", this._doKeyUp);
		} else if (nodeName === "div" || nodeName === "span") {
			$target.removeClass(this.markerClassName).empty();
		}
	},

	/* Enable the date picker to a jQuery selection.
	 * @param  target	element - the target input field or division or span
	 */
	_enableDatepicker: function(target) {
		var nodeName, inline,
			$target = $(target),
			inst = $.data(target, PROP_NAME);

		if (!$target.hasClass(this.markerClassName)) {
			return;
		}

		nodeName = target.nodeName.toLowerCase();
		if (nodeName === "input") {
			target.disabled = false;
			inst.trigger.filter("button").
				each(function() { this.disabled = false; }).end().
				filter("img").css({opacity: "1.0", cursor: ""});
		} else if (nodeName === "div" || nodeName === "span") {
			inline = $target.children("." + this._inlineClass);
			inline.children().removeClass("ui-state-disabled");
			inline.find("select.ui-datepicker-month, select.ui-datepicker-year").
				prop("disabled", false);
		}
		this._disabledInputs = $.map(this._disabledInputs,
			function(value) { return (value === target ? null : value); }); // delete entry
	},

	/* Disable the date picker to a jQuery selection.
	 * @param  target	element - the target input field or division or span
	 */
	_disableDatepicker: function(target) {
		var nodeName, inline,
			$target = $(target),
			inst = $.data(target, PROP_NAME);

		if (!$target.hasClass(this.markerClassName)) {
			return;
		}

		nodeName = target.nodeName.toLowerCase();
		if (nodeName === "input") {
			target.disabled = true;
			inst.trigger.filter("button").
				each(function() { this.disabled = true; }).end().
				filter("img").css({opacity: "0.5", cursor: "default"});
		} else if (nodeName === "div" || nodeName === "span") {
			inline = $target.children("." + this._inlineClass);
			inline.children().addClass("ui-state-disabled");
			inline.find("select.ui-datepicker-month, select.ui-datepicker-year").
				prop("disabled", true);
		}
		this._disabledInputs = $.map(this._disabledInputs,
			function(value) { return (value === target ? null : value); }); // delete entry
		this._disabledInputs[this._disabledInputs.length] = target;
	},

	/* Is the first field in a jQuery collection disabled as a datepicker?
	 * @param  target	element - the target input field or division or span
	 * @return boolean - true if disabled, false if enabled
	 */
	_isDisabledDatepicker: function(target) {
		if (!target) {
			return false;
		}
		for (var i = 0; i < this._disabledInputs.length; i++) {
			if (this._disabledInputs[i] === target) {
				return true;
			}
		}
		return false;
	},

	/* Retrieve the instance data for the target control.
	 * @param  target  element - the target input field or division or span
	 * @return  object - the associated instance data
	 * @throws  error if a jQuery problem getting data
	 */
	_getInst: function(target) {
		try {
			return $.data(target, PROP_NAME);
		}
		catch (err) {
			throw "Missing instance data for this datepicker";
		}
	},

	/* Update or retrieve the settings for a date picker attached to an input field or division.
	 * @param  target  element - the target input field or division or span
	 * @param  name	object - the new settings to update or
	 *				string - the name of the setting to change or retrieve,
	 *				when retrieving also "all" for all instance settings or
	 *				"defaults" for all global defaults
	 * @param  value   any - the new value for the setting
	 *				(omit if above is an object or to retrieve a value)
	 */
	_optionDatepicker: function(target, name, value) {
		var settings, date, minDate, maxDate,
			inst = this._getInst(target);

		if (arguments.length === 2 && typeof name === "string") {
			return (name === "defaults" ? $.extend({}, $.datepicker._defaults) :
				(inst ? (name === "all" ? $.extend({}, inst.settings) :
				this._get(inst, name)) : null));
		}

		settings = name || {};
		if (typeof name === "string") {
			settings = {};
			settings[name] = value;
		}

		if (inst) {
			if (this._curInst === inst) {
				this._hideDatepicker();
			}

			date = this._getDateDatepicker(target, true);
			minDate = this._getMinMaxDate(inst, "min");
			maxDate = this._getMinMaxDate(inst, "max");
			extendRemove(inst.settings, settings);
			// reformat the old minDate/maxDate values if dateFormat changes and a new minDate/maxDate isn't provided
			if (minDate !== null && settings.dateFormat !== undefined && settings.minDate === undefined) {
				inst.settings.minDate = this._formatDate(inst, minDate);
			}
			if (maxDate !== null && settings.dateFormat !== undefined && settings.maxDate === undefined) {
				inst.settings.maxDate = this._formatDate(inst, maxDate);
			}
			if ( "disabled" in settings ) {
				if ( settings.disabled ) {
					this._disableDatepicker(target);
				} else {
					this._enableDatepicker(target);
				}
			}
			this._attachments($(target), inst);
			this._autoSize(inst);
			this._setDate(inst, date);
			this._updateAlternate(inst);
			this._updateDatepicker(inst);
		}
	},

	// change method deprecated
	_changeDatepicker: function(target, name, value) {
		this._optionDatepicker(target, name, value);
	},

	/* Redraw the date picker attached to an input field or division.
	 * @param  target  element - the target input field or division or span
	 */
	_refreshDatepicker: function(target) {
		var inst = this._getInst(target);
		if (inst) {
			this._updateDatepicker(inst);
		}
	},

	/* Set the dates for a jQuery selection.
	 * @param  target element - the target input field or division or span
	 * @param  date	Date - the new date
	 */
	_setDateDatepicker: function(target, date) {
		var inst = this._getInst(target);
		if (inst) {
			this._setDate(inst, date);
			this._updateDatepicker(inst);
			this._updateAlternate(inst);
		}
	},

	/* Get the date(s) for the first entry in a jQuery selection.
	 * @param  target element - the target input field or division or span
	 * @param  noDefault boolean - true if no default date is to be used
	 * @return Date - the current date
	 */
	_getDateDatepicker: function(target, noDefault) {
		var inst = this._getInst(target);
		if (inst && !inst.inline) {
			this._setDateFromField(inst, noDefault);
		}
		return (inst ? this._getDate(inst) : null);
	},

	/* Handle keystrokes. */
	_doKeyDown: function(event) {
		var onSelect, dateStr, sel,
			inst = $.datepicker._getInst(event.target),
			handled = true,
			isRTL = inst.dpDiv.is(".ui-datepicker-rtl");

		inst._keyEvent = true;
		if ($.datepicker._datepickerShowing) {
			switch (event.keyCode) {
				case 9: $.datepicker._hideDatepicker();
						handled = false;
						break; // hide on tab out
				case 13: sel = $("td." + $.datepicker._dayOverClass + ":not(." +
									$.datepicker._currentClass + ")", inst.dpDiv);
						if (sel[0]) {
							$.datepicker._selectDay(event.target, inst.selectedMonth, inst.selectedYear, sel[0]);
						}

						onSelect = $.datepicker._get(inst, "onSelect");
						if (onSelect) {
							dateStr = $.datepicker._formatDate(inst);

							// trigger custom callback
							onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst]);
						} else {
							$.datepicker._hideDatepicker();
						}

						return false; // don't submit the form
				case 27: $.datepicker._hideDatepicker();
						break; // hide on escape
				case 33: $.datepicker._adjustDate(event.target, (event.ctrlKey ?
							-$.datepicker._get(inst, "stepBigMonths") :
							-$.datepicker._get(inst, "stepMonths")), "M");
						break; // previous month/year on page up/+ ctrl
				case 34: $.datepicker._adjustDate(event.target, (event.ctrlKey ?
							+$.datepicker._get(inst, "stepBigMonths") :
							+$.datepicker._get(inst, "stepMonths")), "M");
						break; // next month/year on page down/+ ctrl
				case 35: if (event.ctrlKey || event.metaKey) {
							$.datepicker._clearDate(event.target);
						}
						handled = event.ctrlKey || event.metaKey;
						break; // clear on ctrl or command +end
				case 36: if (event.ctrlKey || event.metaKey) {
							$.datepicker._gotoToday(event.target);
						}
						handled = event.ctrlKey || event.metaKey;
						break; // current on ctrl or command +home
				case 37: if (event.ctrlKey || event.metaKey) {
							$.datepicker._adjustDate(event.target, (isRTL ? +1 : -1), "D");
						}
						handled = event.ctrlKey || event.metaKey;
						// -1 day on ctrl or command +left
						if (event.originalEvent.altKey) {
							$.datepicker._adjustDate(event.target, (event.ctrlKey ?
								-$.datepicker._get(inst, "stepBigMonths") :
								-$.datepicker._get(inst, "stepMonths")), "M");
						}
						// next month/year on alt +left on Mac
						break;
				case 38: if (event.ctrlKey || event.metaKey) {
							$.datepicker._adjustDate(event.target, -7, "D");
						}
						handled = event.ctrlKey || event.metaKey;
						break; // -1 week on ctrl or command +up
				case 39: if (event.ctrlKey || event.metaKey) {
							$.datepicker._adjustDate(event.target, (isRTL ? -1 : +1), "D");
						}
						handled = event.ctrlKey || event.metaKey;
						// +1 day on ctrl or command +right
						if (event.originalEvent.altKey) {
							$.datepicker._adjustDate(event.target, (event.ctrlKey ?
								+$.datepicker._get(inst, "stepBigMonths") :
								+$.datepicker._get(inst, "stepMonths")), "M");
						}
						// next month/year on alt +right
						break;
				case 40: if (event.ctrlKey || event.metaKey) {
							$.datepicker._adjustDate(event.target, +7, "D");
						}
						handled = event.ctrlKey || event.metaKey;
						break; // +1 week on ctrl or command +down
				default: handled = false;
			}
		} else if (event.keyCode === 36 && event.ctrlKey) { // display the date picker on ctrl+home
			$.datepicker._showDatepicker(this);
		} else {
			handled = false;
		}

		if (handled) {
			event.preventDefault();
			event.stopPropagation();
		}
	},

	/* Filter entered characters - based on date format. */
	_doKeyPress: function(event) {
		var chars, chr,
			inst = $.datepicker._getInst(event.target);

		if ($.datepicker._get(inst, "constrainInput")) {
			chars = $.datepicker._possibleChars($.datepicker._get(inst, "dateFormat"));
			chr = String.fromCharCode(event.charCode == null ? event.keyCode : event.charCode);
			return event.ctrlKey || event.metaKey || (chr < " " || !chars || chars.indexOf(chr) > -1);
		}
	},

	/* Synchronise manual entry and field/alternate field. */
	_doKeyUp: function(event) {
		var date,
			inst = $.datepicker._getInst(event.target);

		if (inst.input.val() !== inst.lastVal) {
			try {
				date = $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"),
					(inst.input ? inst.input.val() : null),
					$.datepicker._getFormatConfig(inst));

				if (date) { // only if valid
					$.datepicker._setDateFromField(inst);
					$.datepicker._updateAlternate(inst);
					$.datepicker._updateDatepicker(inst);
				}
			}
			catch (err) {
			}
		}
		return true;
	},

	/* Pop-up the date picker for a given input field.
	 * If false returned from beforeShow event handler do not show.
	 * @param  input  element - the input field attached to the date picker or
	 *					event - if triggered by focus
	 */
	_showDatepicker: function(input) {
		input = input.target || input;
		if (input.nodeName.toLowerCase() !== "input") { // find from button/image trigger
			input = $("input", input.parentNode)[0];
		}

		if ($.datepicker._isDisabledDatepicker(input) || $.datepicker._lastInput === input) { // already here
			return;
		}

		var inst, beforeShow, beforeShowSettings, isFixed,
			offset, showAnim, duration;

		inst = $.datepicker._getInst(input);
		if ($.datepicker._curInst && $.datepicker._curInst !== inst) {
			$.datepicker._curInst.dpDiv.stop(true, true);
			if ( inst && $.datepicker._datepickerShowing ) {
				$.datepicker._hideDatepicker( $.datepicker._curInst.input[0] );
			}
		}

		beforeShow = $.datepicker._get(inst, "beforeShow");
		beforeShowSettings = beforeShow ? beforeShow.apply(input, [input, inst]) : {};
		if(beforeShowSettings === false){
			return;
		}
		extendRemove(inst.settings, beforeShowSettings);

		inst.lastVal = null;
		$.datepicker._lastInput = input;
		$.datepicker._setDateFromField(inst);

		if ($.datepicker._inDialog) { // hide cursor
			input.value = "";
		}
		if (!$.datepicker._pos) { // position below input
			$.datepicker._pos = $.datepicker._findPos(input);
			$.datepicker._pos[1] += input.offsetHeight; // add the height
		}

		isFixed = false;
		$(input).parents().each(function() {
			isFixed |= $(this).css("position") === "fixed";
			return !isFixed;
		});

		offset = {left: $.datepicker._pos[0], top: $.datepicker._pos[1]};
		$.datepicker._pos = null;
		//to avoid flashes on Firefox
		inst.dpDiv.empty();
		// determine sizing offscreen
		inst.dpDiv.css({position: "absolute", display: "block", top: "-1000px"});
		$.datepicker._updateDatepicker(inst);
		// fix width for dynamic number of date pickers
		// and adjust position before showing
		offset = $.datepicker._checkOffset(inst, offset, isFixed);
		inst.dpDiv.css({position: ($.datepicker._inDialog && $.blockUI ?
			"static" : (isFixed ? "fixed" : "absolute")), display: "none",
			left: offset.left + "px", top: offset.top + "px"});

		if (!inst.inline) {
			showAnim = $.datepicker._get(inst, "showAnim");
			duration = $.datepicker._get(inst, "duration");
			inst.dpDiv.zIndex($(input).zIndex()+1);
			$.datepicker._datepickerShowing = true;

			if ( $.effects && $.effects.effect[ showAnim ] ) {
				inst.dpDiv.show(showAnim, $.datepicker._get(inst, "showOptions"), duration);
			} else {
				inst.dpDiv[showAnim || "show"](showAnim ? duration : null);
			}

			if ( $.datepicker._shouldFocusInput( inst ) ) {
				inst.input.focus();
			}

			$.datepicker._curInst = inst;
		}
	},

	/* Generate the date picker content. */
	_updateDatepicker: function(inst) {
		this.maxRows = 4; //Reset the max number of rows being displayed (see #7043)
		instActive = inst; // for delegate hover events
		inst.dpDiv.empty().append(this._generateHTML(inst));
		this._attachHandlers(inst);
		inst.dpDiv.find("." + this._dayOverClass + " a").mouseover();

		var origyearshtml,
			numMonths = this._getNumberOfMonths(inst),
			cols = numMonths[1],
			width = 17;

		inst.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width("");
		if (cols > 1) {
			inst.dpDiv.addClass("ui-datepicker-multi-" + cols).css("width", (width * cols) + "em");
		}
		inst.dpDiv[(numMonths[0] !== 1 || numMonths[1] !== 1 ? "add" : "remove") +
			"Class"]("ui-datepicker-multi");
		inst.dpDiv[(this._get(inst, "isRTL") ? "add" : "remove") +
			"Class"]("ui-datepicker-rtl");

		if (inst === $.datepicker._curInst && $.datepicker._datepickerShowing && $.datepicker._shouldFocusInput( inst ) ) {
			inst.input.focus();
		}

		// deffered render of the years select (to avoid flashes on Firefox)
		if( inst.yearshtml ){
			origyearshtml = inst.yearshtml;
			setTimeout(function(){
				//assure that inst.yearshtml didn't change.
				if( origyearshtml === inst.yearshtml && inst.yearshtml ){
					inst.dpDiv.find("select.ui-datepicker-year:first").replaceWith(inst.yearshtml);
				}
				origyearshtml = inst.yearshtml = null;
			}, 0);
		}
	},

	// #6694 - don't focus the input if it's already focused
	// this breaks the change event in IE
	// Support: IE and jQuery <1.9
	_shouldFocusInput: function( inst ) {
		return inst.input && inst.input.is( ":visible" ) && !inst.input.is( ":disabled" ) && !inst.input.is( ":focus" );
	},

	/* Check positioning to remain on screen. */
	_checkOffset: function(inst, offset, isFixed) {
		var dpWidth = inst.dpDiv.outerWidth(),
			dpHeight = inst.dpDiv.outerHeight(),
			inputWidth = inst.input ? inst.input.outerWidth() : 0,
			inputHeight = inst.input ? inst.input.outerHeight() : 0,
			viewWidth = document.documentElement.clientWidth + (isFixed ? 0 : $(document).scrollLeft()),
			viewHeight = document.documentElement.clientHeight + (isFixed ? 0 : $(document).scrollTop());

		offset.left -= (this._get(inst, "isRTL") ? (dpWidth - inputWidth) : 0);
		offset.left -= (isFixed && offset.left === inst.input.offset().left) ? $(document).scrollLeft() : 0;
		offset.top -= (isFixed && offset.top === (inst.input.offset().top + inputHeight)) ? $(document).scrollTop() : 0;

		// now check if datepicker is showing outside window viewport - move to a better place if so.
		offset.left -= Math.min(offset.left, (offset.left + dpWidth > viewWidth && viewWidth > dpWidth) ?
			Math.abs(offset.left + dpWidth - viewWidth) : 0);
		offset.top -= Math.min(offset.top, (offset.top + dpHeight > viewHeight && viewHeight > dpHeight) ?
			Math.abs(dpHeight + inputHeight) : 0);

		return offset;
	},

	/* Find an object's position on the screen. */
	_findPos: function(obj) {
		var position,
			inst = this._getInst(obj),
			isRTL = this._get(inst, "isRTL");

		while (obj && (obj.type === "hidden" || obj.nodeType !== 1 || $.expr.filters.hidden(obj))) {
			obj = obj[isRTL ? "previousSibling" : "nextSibling"];
		}

		position = $(obj).offset();
		return [position.left, position.top];
	},

	/* Hide the date picker from view.
	 * @param  input  element - the input field attached to the date picker
	 */
	_hideDatepicker: function(input) {
		var showAnim, duration, postProcess, onClose,
			inst = this._curInst;

		if (!inst || (input && inst !== $.data(input, PROP_NAME))) {
			return;
		}

		if (this._datepickerShowing) {
			showAnim = this._get(inst, "showAnim");
			duration = this._get(inst, "duration");
			postProcess = function() {
				$.datepicker._tidyDialog(inst);
			};

			// DEPRECATED: after BC for 1.8.x $.effects[ showAnim ] is not needed
			if ( $.effects && ( $.effects.effect[ showAnim ] || $.effects[ showAnim ] ) ) {
				inst.dpDiv.hide(showAnim, $.datepicker._get(inst, "showOptions"), duration, postProcess);
			} else {
				inst.dpDiv[(showAnim === "slideDown" ? "slideUp" :
					(showAnim === "fadeIn" ? "fadeOut" : "hide"))]((showAnim ? duration : null), postProcess);
			}

			if (!showAnim) {
				postProcess();
			}
			this._datepickerShowing = false;

			onClose = this._get(inst, "onClose");
			if (onClose) {
				onClose.apply((inst.input ? inst.input[0] : null), [(inst.input ? inst.input.val() : ""), inst]);
			}

			this._lastInput = null;
			if (this._inDialog) {
				this._dialogInput.css({ position: "absolute", left: "0", top: "-100px" });
				if ($.blockUI) {
					$.unblockUI();
					$("body").append(this.dpDiv);
				}
			}
			this._inDialog = false;
		}
	},

	/* Tidy up after a dialog display. */
	_tidyDialog: function(inst) {
		inst.dpDiv.removeClass(this._dialogClass).unbind(".ui-datepicker-calendar");
	},

	/* Close date picker if clicked elsewhere. */
	_checkExternalClick: function(event) {
		if (!$.datepicker._curInst) {
			return;
		}

		var $target = $(event.target),
			inst = $.datepicker._getInst($target[0]);

		if ( ( ( $target[0].id !== $.datepicker._mainDivId &&
				$target.parents("#" + $.datepicker._mainDivId).length === 0 &&
				!$target.hasClass($.datepicker.markerClassName) &&
				!$target.closest("." + $.datepicker._triggerClass).length &&
				$.datepicker._datepickerShowing && !($.datepicker._inDialog && $.blockUI) ) ) ||
			( $target.hasClass($.datepicker.markerClassName) && $.datepicker._curInst !== inst ) ) {
				$.datepicker._hideDatepicker();
		}
	},

	/* Adjust one of the date sub-fields. */
	_adjustDate: function(id, offset, period) {
		var target = $(id),
			inst = this._getInst(target[0]);

		if (this._isDisabledDatepicker(target[0])) {
			return;
		}
		this._adjustInstDate(inst, offset +
			(period === "M" ? this._get(inst, "showCurrentAtPos") : 0), // undo positioning
			period);
		this._updateDatepicker(inst);
	},

	/* Action for current link. */
	_gotoToday: function(id) {
		var date,
			target = $(id),
			inst = this._getInst(target[0]);

		if (this._get(inst, "gotoCurrent") && inst.currentDay) {
			inst.selectedDay = inst.currentDay;
			inst.drawMonth = inst.selectedMonth = inst.currentMonth;
			inst.drawYear = inst.selectedYear = inst.currentYear;
		} else {
			date = new Date();
			inst.selectedDay = date.getDate();
			inst.drawMonth = inst.selectedMonth = date.getMonth();
			inst.drawYear = inst.selectedYear = date.getFullYear();
		}
		this._notifyChange(inst);
		this._adjustDate(target);
	},

	/* Action for selecting a new month/year. */
	_selectMonthYear: function(id, select, period) {
		var target = $(id),
			inst = this._getInst(target[0]);

		inst["selected" + (period === "M" ? "Month" : "Year")] =
		inst["draw" + (period === "M" ? "Month" : "Year")] =
			parseInt(select.options[select.selectedIndex].value,10);

		this._notifyChange(inst);
		this._adjustDate(target);
	},

	/* Action for selecting a day. */
	_selectDay: function(id, month, year, td) {
		var inst,
			target = $(id);

		if ($(td).hasClass(this._unselectableClass) || this._isDisabledDatepicker(target[0])) {
			return;
		}

		inst = this._getInst(target[0]);
		inst.selectedDay = inst.currentDay = $("a", td).html();
		inst.selectedMonth = inst.currentMonth = month;
		inst.selectedYear = inst.currentYear = year;
		this._selectDate(id, this._formatDate(inst,
			inst.currentDay, inst.currentMonth, inst.currentYear));
	},

	/* Erase the input field and hide the date picker. */
	_clearDate: function(id) {
		var target = $(id);
		this._selectDate(target, "");
	},

	/* Update the input field with the selected date. */
	_selectDate: function(id, dateStr) {
		var onSelect,
			target = $(id),
			inst = this._getInst(target[0]);

		dateStr = (dateStr != null ? dateStr : this._formatDate(inst));
		if (inst.input) {
			inst.input.val(dateStr);
		}
		this._updateAlternate(inst);

		onSelect = this._get(inst, "onSelect");
		if (onSelect) {
			onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst]);  // trigger custom callback
		} else if (inst.input) {
			inst.input.trigger("change"); // fire the change event
		}

		if (inst.inline){
			this._updateDatepicker(inst);
		} else {
			this._hideDatepicker();
			this._lastInput = inst.input[0];
			if (typeof(inst.input[0]) !== "object") {
				inst.input.focus(); // restore focus
			}
			this._lastInput = null;
		}
	},

	/* Update any alternate field to synchronise with the main field. */
	_updateAlternate: function(inst) {
		var altFormat, date, dateStr,
			altField = this._get(inst, "altField");

		if (altField) { // update alternate field too
			altFormat = this._get(inst, "altFormat") || this._get(inst, "dateFormat");
			date = this._getDate(inst);
			dateStr = this.formatDate(altFormat, date, this._getFormatConfig(inst));
			$(altField).each(function() { $(this).val(dateStr); });
		}
	},

	/* Set as beforeShowDay function to prevent selection of weekends.
	 * @param  date  Date - the date to customise
	 * @return [boolean, string] - is this date selectable?, what is its CSS class?
	 */
	noWeekends: function(date) {
		var day = date.getDay();
		return [(day > 0 && day < 6), ""];
	},

	/* Set as calculateWeek to determine the week of the year based on the ISO 8601 definition.
	 * @param  date  Date - the date to get the week for
	 * @return  number - the number of the week within the year that contains this date
	 */
	iso8601Week: function(date) {
		var time,
			checkDate = new Date(date.getTime());

		// Find Thursday of this week starting on Monday
		checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));

		time = checkDate.getTime();
		checkDate.setMonth(0); // Compare with Jan 1
		checkDate.setDate(1);
		return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;
	},

	/* Parse a string value into a date object.
	 * See formatDate below for the possible formats.
	 *
	 * @param  format string - the expected format of the date
	 * @param  value string - the date in the above format
	 * @param  settings Object - attributes include:
	 *					shortYearCutoff  number - the cutoff year for determining the century (optional)
	 *					dayNamesShort	string[7] - abbreviated names of the days from Sunday (optional)
	 *					dayNames		string[7] - names of the days from Sunday (optional)
	 *					monthNamesShort string[12] - abbreviated names of the months (optional)
	 *					monthNames		string[12] - names of the months (optional)
	 * @return  Date - the extracted date value or null if value is blank
	 */
	parseDate: function (format, value, settings) {
		if (format == null || value == null) {
			throw "Invalid arguments";
		}

		value = (typeof value === "object" ? value.toString() : value + "");
		if (value === "") {
			return null;
		}

		var iFormat, dim, extra,
			iValue = 0,
			shortYearCutoffTemp = (settings ? settings.shortYearCutoff : null) || this._defaults.shortYearCutoff,
			shortYearCutoff = (typeof shortYearCutoffTemp !== "string" ? shortYearCutoffTemp :
				new Date().getFullYear() % 100 + parseInt(shortYearCutoffTemp, 10)),
			dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort,
			dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames,
			monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort,
			monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames,
			year = -1,
			month = -1,
			day = -1,
			doy = -1,
			literal = false,
			date,
			// Check whether a format character is doubled
			lookAhead = function(match) {
				var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
				if (matches) {
					iFormat++;
				}
				return matches;
			},
			// Extract a number from the string value
			getNumber = function(match) {
				var isDoubled = lookAhead(match),
					size = (match === "@" ? 14 : (match === "!" ? 20 :
					(match === "y" && isDoubled ? 4 : (match === "o" ? 3 : 2)))),
					digits = new RegExp("^\\d{1," + size + "}"),
					num = value.substring(iValue).match(digits);
				if (!num) {
					throw "Missing number at position " + iValue;
				}
				iValue += num[0].length;
				return parseInt(num[0], 10);
			},
			// Extract a name from the string value and convert to an index
			getName = function(match, shortNames, longNames) {
				var index = -1,
					names = $.map(lookAhead(match) ? longNames : shortNames, function (v, k) {
						return [ [k, v] ];
					}).sort(function (a, b) {
						return -(a[1].length - b[1].length);
					});

				$.each(names, function (i, pair) {
					var name = pair[1];
					if (value.substr(iValue, name.length).toLowerCase() === name.toLowerCase()) {
						index = pair[0];
						iValue += name.length;
						return false;
					}
				});
				if (index !== -1) {
					return index + 1;
				} else {
					throw "Unknown name at position " + iValue;
				}
			},
			// Confirm that a literal character matches the string value
			checkLiteral = function() {
				if (value.charAt(iValue) !== format.charAt(iFormat)) {
					throw "Unexpected literal at position " + iValue;
				}
				iValue++;
			};

		for (iFormat = 0; iFormat < format.length; iFormat++) {
			if (literal) {
				if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
					literal = false;
				} else {
					checkLiteral();
				}
			} else {
				switch (format.charAt(iFormat)) {
					case "d":
						day = getNumber("d");
						break;
					case "D":
						getName("D", dayNamesShort, dayNames);
						break;
					case "o":
						doy = getNumber("o");
						break;
					case "m":
						month = getNumber("m");
						break;
					case "M":
						month = getName("M", monthNamesShort, monthNames);
						break;
					case "y":
						year = getNumber("y");
						break;
					case "@":
						date = new Date(getNumber("@"));
						year = date.getFullYear();
						month = date.getMonth() + 1;
						day = date.getDate();
						break;
					case "!":
						date = new Date((getNumber("!") - this._ticksTo1970) / 10000);
						year = date.getFullYear();
						month = date.getMonth() + 1;
						day = date.getDate();
						break;
					case "'":
						if (lookAhead("'")){
							checkLiteral();
						} else {
							literal = true;
						}
						break;
					default:
						checkLiteral();
				}
			}
		}

		if (iValue < value.length){
			extra = value.substr(iValue);
			if (!/^\s+/.test(extra)) {
				throw "Extra/unparsed characters found in date: " + extra;
			}
		}

		if (year === -1) {
			year = new Date().getFullYear();
		} else if (year < 100) {
			year += new Date().getFullYear() - new Date().getFullYear() % 100 +
				(year <= shortYearCutoff ? 0 : -100);
		}

		if (doy > -1) {
			month = 1;
			day = doy;
			do {
				dim = this._getDaysInMonth(year, month - 1);
				if (day <= dim) {
					break;
				}
				month++;
				day -= dim;
			} while (true);
		}

		date = this._daylightSavingAdjust(new Date(year, month - 1, day));
		if (date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day) {
			throw "Invalid date"; // E.g. 31/02/00
		}
		return date;
	},

	/* Standard date formats. */
	ATOM: "yy-mm-dd", // RFC 3339 (ISO 8601)
	COOKIE: "D, dd M yy",
	ISO_8601: "yy-mm-dd",
	RFC_822: "D, d M y",
	RFC_850: "DD, dd-M-y",
	RFC_1036: "D, d M y",
	RFC_1123: "D, d M yy",
	RFC_2822: "D, d M yy",
	RSS: "D, d M y", // RFC 822
	TICKS: "!",
	TIMESTAMP: "@",
	W3C: "yy-mm-dd", // ISO 8601

	_ticksTo1970: (((1970 - 1) * 365 + Math.floor(1970 / 4) - Math.floor(1970 / 100) +
		Math.floor(1970 / 400)) * 24 * 60 * 60 * 10000000),

	/* Format a date object into a string value.
	 * The format can be combinations of the following:
	 * d  - day of month (no leading zero)
	 * dd - day of month (two digit)
	 * o  - day of year (no leading zeros)
	 * oo - day of year (three digit)
	 * D  - day name short
	 * DD - day name long
	 * m  - month of year (no leading zero)
	 * mm - month of year (two digit)
	 * M  - month name short
	 * MM - month name long
	 * y  - year (two digit)
	 * yy - year (four digit)
	 * @ - Unix timestamp (ms since 01/01/1970)
	 * ! - Windows ticks (100ns since 01/01/0001)
	 * "..." - literal text
	 * '' - single quote
	 *
	 * @param  format string - the desired format of the date
	 * @param  date Date - the date value to format
	 * @param  settings Object - attributes include:
	 *					dayNamesShort	string[7] - abbreviated names of the days from Sunday (optional)
	 *					dayNames		string[7] - names of the days from Sunday (optional)
	 *					monthNamesShort string[12] - abbreviated names of the months (optional)
	 *					monthNames		string[12] - names of the months (optional)
	 * @return  string - the date in the above format
	 */
	formatDate: function (format, date, settings) {
		if (!date) {
			return "";
		}

		var iFormat,
			dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort,
			dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames,
			monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort,
			monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames,
			// Check whether a format character is doubled
			lookAhead = function(match) {
				var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
				if (matches) {
					iFormat++;
				}
				return matches;
			},
			// Format a number, with leading zero if necessary
			formatNumber = function(match, value, len) {
				var num = "" + value;
				if (lookAhead(match)) {
					while (num.length < len) {
						num = "0" + num;
					}
				}
				return num;
			},
			// Format a name, short or long as requested
			formatName = function(match, value, shortNames, longNames) {
				return (lookAhead(match) ? longNames[value] : shortNames[value]);
			},
			output = "",
			literal = false;

		if (date) {
			for (iFormat = 0; iFormat < format.length; iFormat++) {
				if (literal) {
					if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
						literal = false;
					} else {
						output += format.charAt(iFormat);
					}
				} else {
					switch (format.charAt(iFormat)) {
						case "d":
							output += formatNumber("d", date.getDate(), 2);
							break;
						case "D":
							output += formatName("D", date.getDay(), dayNamesShort, dayNames);
							break;
						case "o":
							output += formatNumber("o",
								Math.round((new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime() - new Date(date.getFullYear(), 0, 0).getTime()) / 86400000), 3);
							break;
						case "m":
							output += formatNumber("m", date.getMonth() + 1, 2);
							break;
						case "M":
							output += formatName("M", date.getMonth(), monthNamesShort, monthNames);
							break;
						case "y":
							output += (lookAhead("y") ? date.getFullYear() :
								(date.getYear() % 100 < 10 ? "0" : "") + date.getYear() % 100);
							break;
						case "@":
							output += date.getTime();
							break;
						case "!":
							output += date.getTime() * 10000 + this._ticksTo1970;
							break;
						case "'":
							if (lookAhead("'")) {
								output += "'";
							} else {
								literal = true;
							}
							break;
						default:
							output += format.charAt(iFormat);
					}
				}
			}
		}
		return output;
	},

	/* Extract all possible characters from the date format. */
	_possibleChars: function (format) {
		var iFormat,
			chars = "",
			literal = false,
			// Check whether a format character is doubled
			lookAhead = function(match) {
				var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
				if (matches) {
					iFormat++;
				}
				return matches;
			};

		for (iFormat = 0; iFormat < format.length; iFormat++) {
			if (literal) {
				if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
					literal = false;
				} else {
					chars += format.charAt(iFormat);
				}
			} else {
				switch (format.charAt(iFormat)) {
					case "d": case "m": case "y": case "@":
						chars += "0123456789";
						break;
					case "D": case "M":
						return null; // Accept anything
					case "'":
						if (lookAhead("'")) {
							chars += "'";
						} else {
							literal = true;
						}
						break;
					default:
						chars += format.charAt(iFormat);
				}
			}
		}
		return chars;
	},

	/* Get a setting value, defaulting if necessary. */
	_get: function(inst, name) {
		return inst.settings[name] !== undefined ?
			inst.settings[name] : this._defaults[name];
	},

	/* Parse existing date and initialise date picker. */
	_setDateFromField: function(inst, noDefault) {
		if (inst.input.val() === inst.lastVal) {
			return;
		}

		var dateFormat = this._get(inst, "dateFormat"),
			dates = inst.lastVal = inst.input ? inst.input.val() : null,
			defaultDate = this._getDefaultDate(inst),
			date = defaultDate,
			settings = this._getFormatConfig(inst);

		try {
			date = this.parseDate(dateFormat, dates, settings) || defaultDate;
		} catch (event) {
			dates = (noDefault ? "" : dates);
		}
		inst.selectedDay = date.getDate();
		inst.drawMonth = inst.selectedMonth = date.getMonth();
		inst.drawYear = inst.selectedYear = date.getFullYear();
		inst.currentDay = (dates ? date.getDate() : 0);
		inst.currentMonth = (dates ? date.getMonth() : 0);
		inst.currentYear = (dates ? date.getFullYear() : 0);
		this._adjustInstDate(inst);
	},

	/* Retrieve the default date shown on opening. */
	_getDefaultDate: function(inst) {
		return this._restrictMinMax(inst,
			this._determineDate(inst, this._get(inst, "defaultDate"), new Date()));
	},

	/* A date may be specified as an exact value or a relative one. */
	_determineDate: function(inst, date, defaultDate) {
		var offsetNumeric = function(offset) {
				var date = new Date();
				date.setDate(date.getDate() + offset);
				return date;
			},
			offsetString = function(offset) {
				try {
					return $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"),
						offset, $.datepicker._getFormatConfig(inst));
				}
				catch (e) {
					// Ignore
				}

				var date = (offset.toLowerCase().match(/^c/) ?
					$.datepicker._getDate(inst) : null) || new Date(),
					year = date.getFullYear(),
					month = date.getMonth(),
					day = date.getDate(),
					pattern = /([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g,
					matches = pattern.exec(offset);

				while (matches) {
					switch (matches[2] || "d") {
						case "d" : case "D" :
							day += parseInt(matches[1],10); break;
						case "w" : case "W" :
							day += parseInt(matches[1],10) * 7; break;
						case "m" : case "M" :
							month += parseInt(matches[1],10);
							day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
							break;
						case "y": case "Y" :
							year += parseInt(matches[1],10);
							day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
							break;
					}
					matches = pattern.exec(offset);
				}
				return new Date(year, month, day);
			},
			newDate = (date == null || date === "" ? defaultDate : (typeof date === "string" ? offsetString(date) :
				(typeof date === "number" ? (isNaN(date) ? defaultDate : offsetNumeric(date)) : new Date(date.getTime()))));

		newDate = (newDate && newDate.toString() === "Invalid Date" ? defaultDate : newDate);
		if (newDate) {
			newDate.setHours(0);
			newDate.setMinutes(0);
			newDate.setSeconds(0);
			newDate.setMilliseconds(0);
		}
		return this._daylightSavingAdjust(newDate);
	},

	/* Handle switch to/from daylight saving.
	 * Hours may be non-zero on daylight saving cut-over:
	 * > 12 when midnight changeover, but then cannot generate
	 * midnight datetime, so jump to 1AM, otherwise reset.
	 * @param  date  (Date) the date to check
	 * @return  (Date) the corrected date
	 */
	_daylightSavingAdjust: function(date) {
		if (!date) {
			return null;
		}
		date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);
		return date;
	},

	/* Set the date(s) directly. */
	_setDate: function(inst, date, noChange) {
		var clear = !date,
			origMonth = inst.selectedMonth,
			origYear = inst.selectedYear,
			newDate = this._restrictMinMax(inst, this._determineDate(inst, date, new Date()));

		inst.selectedDay = inst.currentDay = newDate.getDate();
		inst.drawMonth = inst.selectedMonth = inst.currentMonth = newDate.getMonth();
		inst.drawYear = inst.selectedYear = inst.currentYear = newDate.getFullYear();
		if ((origMonth !== inst.selectedMonth || origYear !== inst.selectedYear) && !noChange) {
			this._notifyChange(inst);
		}
		this._adjustInstDate(inst);
		if (inst.input) {
			inst.input.val(clear ? "" : this._formatDate(inst));
		}
	},

	/* Retrieve the date(s) directly. */
	_getDate: function(inst) {
		var startDate = (!inst.currentYear || (inst.input && inst.input.val() === "") ? null :
			this._daylightSavingAdjust(new Date(
			inst.currentYear, inst.currentMonth, inst.currentDay)));
			return startDate;
	},

	/* Attach the onxxx handlers.  These are declared statically so
	 * they work with static code transformers like Caja.
	 */
	_attachHandlers: function(inst) {
		var stepMonths = this._get(inst, "stepMonths"),
			id = "#" + inst.id.replace( /\\\\/g, "\\" );
		inst.dpDiv.find("[data-handler]").map(function () {
			var handler = {
				prev: function () {
					$.datepicker._adjustDate(id, -stepMonths, "M");
				},
				next: function () {
					$.datepicker._adjustDate(id, +stepMonths, "M");
				},
				hide: function () {
					$.datepicker._hideDatepicker();
				},
				today: function () {
					$.datepicker._gotoToday(id);
				},
				selectDay: function () {
					$.datepicker._selectDay(id, +this.getAttribute("data-month"), +this.getAttribute("data-year"), this);
					return false;
				},
				selectMonth: function () {
					$.datepicker._selectMonthYear(id, this, "M");
					return false;
				},
				selectYear: function () {
					$.datepicker._selectMonthYear(id, this, "Y");
					return false;
				}
			};
			$(this).bind(this.getAttribute("data-event"), handler[this.getAttribute("data-handler")]);
		});
	},

	/* Generate the HTML for the current state of the date picker. */
	_generateHTML: function(inst) {
		var maxDraw, prevText, prev, nextText, next, currentText, gotoDate,
			controls, buttonPanel, firstDay, showWeek, dayNames, dayNamesMin,
			monthNames, monthNamesShort, beforeShowDay, showOtherMonths,
			selectOtherMonths, defaultDate, html, dow, row, group, col, selectedDate,
			cornerClass, calender, thead, day, daysInMonth, leadDays, curRows, numRows,
			printDate, dRow, tbody, daySettings, otherMonth, unselectable,
			tempDate = new Date(),
			today = this._daylightSavingAdjust(
				new Date(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate())), // clear time
			isRTL = this._get(inst, "isRTL"),
			showButtonPanel = this._get(inst, "showButtonPanel"),
			hideIfNoPrevNext = this._get(inst, "hideIfNoPrevNext"),
			navigationAsDateFormat = this._get(inst, "navigationAsDateFormat"),
			numMonths = this._getNumberOfMonths(inst),
			showCurrentAtPos = this._get(inst, "showCurrentAtPos"),
			stepMonths = this._get(inst, "stepMonths"),
			isMultiMonth = (numMonths[0] !== 1 || numMonths[1] !== 1),
			currentDate = this._daylightSavingAdjust((!inst.currentDay ? new Date(9999, 9, 9) :
				new Date(inst.currentYear, inst.currentMonth, inst.currentDay))),
			minDate = this._getMinMaxDate(inst, "min"),
			maxDate = this._getMinMaxDate(inst, "max"),
			drawMonth = inst.drawMonth - showCurrentAtPos,
			drawYear = inst.drawYear;

		if (drawMonth < 0) {
			drawMonth += 12;
			drawYear--;
		}
		if (maxDate) {
			maxDraw = this._daylightSavingAdjust(new Date(maxDate.getFullYear(),
				maxDate.getMonth() - (numMonths[0] * numMonths[1]) + 1, maxDate.getDate()));
			maxDraw = (minDate && maxDraw < minDate ? minDate : maxDraw);
			while (this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1)) > maxDraw) {
				drawMonth--;
				if (drawMonth < 0) {
					drawMonth = 11;
					drawYear--;
				}
			}
		}
		inst.drawMonth = drawMonth;
		inst.drawYear = drawYear;

		prevText = this._get(inst, "prevText");
		prevText = (!navigationAsDateFormat ? prevText : this.formatDate(prevText,
			this._daylightSavingAdjust(new Date(drawYear, drawMonth - stepMonths, 1)),
			this._getFormatConfig(inst)));

		prev = (this._canAdjustMonth(inst, -1, drawYear, drawMonth) ?
			"<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click'" +
			" title='" + prevText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "e" : "w") + "'>" + prevText + "</span></a>" :
			(hideIfNoPrevNext ? "" : "<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='"+ prevText +"'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "e" : "w") + "'>" + prevText + "</span></a>"));

		nextText = this._get(inst, "nextText");
		nextText = (!navigationAsDateFormat ? nextText : this.formatDate(nextText,
			this._daylightSavingAdjust(new Date(drawYear, drawMonth + stepMonths, 1)),
			this._getFormatConfig(inst)));

		next = (this._canAdjustMonth(inst, +1, drawYear, drawMonth) ?
			"<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click'" +
			" title='" + nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "w" : "e") + "'>" + nextText + "</span></a>" :
			(hideIfNoPrevNext ? "" : "<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='"+ nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "w" : "e") + "'>" + nextText + "</span></a>"));

		currentText = this._get(inst, "currentText");
		gotoDate = (this._get(inst, "gotoCurrent") && inst.currentDay ? currentDate : today);
		currentText = (!navigationAsDateFormat ? currentText :
			this.formatDate(currentText, gotoDate, this._getFormatConfig(inst)));

		controls = (!inst.inline ? "<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>" +
			this._get(inst, "closeText") + "</button>" : "");

		buttonPanel = (showButtonPanel) ? "<div class='ui-datepicker-buttonpane ui-widget-content'>" + (isRTL ? controls : "") +
			(this._isInRange(inst, gotoDate) ? "<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'" +
			">" + currentText + "</button>" : "") + (isRTL ? "" : controls) + "</div>" : "";

		firstDay = parseInt(this._get(inst, "firstDay"),10);
		firstDay = (isNaN(firstDay) ? 0 : firstDay);

		showWeek = this._get(inst, "showWeek");
		dayNames = this._get(inst, "dayNames");
		dayNamesMin = this._get(inst, "dayNamesMin");
		monthNames = this._get(inst, "monthNames");
		monthNamesShort = this._get(inst, "monthNamesShort");
		beforeShowDay = this._get(inst, "beforeShowDay");
		showOtherMonths = this._get(inst, "showOtherMonths");
		selectOtherMonths = this._get(inst, "selectOtherMonths");
		defaultDate = this._getDefaultDate(inst);
		html = "";
		dow;
		for (row = 0; row < numMonths[0]; row++) {
			group = "";
			this.maxRows = 4;
			for (col = 0; col < numMonths[1]; col++) {
				selectedDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, inst.selectedDay));
				cornerClass = " ui-corner-all";
				calender = "";
				if (isMultiMonth) {
					calender += "<div class='ui-datepicker-group";
					if (numMonths[1] > 1) {
						switch (col) {
							case 0: calender += " ui-datepicker-group-first";
								cornerClass = " ui-corner-" + (isRTL ? "right" : "left"); break;
							case numMonths[1]-1: calender += " ui-datepicker-group-last";
								cornerClass = " ui-corner-" + (isRTL ? "left" : "right"); break;
							default: calender += " ui-datepicker-group-middle"; cornerClass = ""; break;
						}
					}
					calender += "'>";
				}
				calender += "<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix" + cornerClass + "'>" +
					(/all|left/.test(cornerClass) && row === 0 ? (isRTL ? next : prev) : "") +
					(/all|right/.test(cornerClass) && row === 0 ? (isRTL ? prev : next) : "") +
					this._generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate,
					row > 0 || col > 0, monthNames, monthNamesShort) + // draw month headers
					"</div><table class='ui-datepicker-calendar'><thead>" +
					"<tr>";
				thead = (showWeek ? "<th class='ui-datepicker-week-col'>" + this._get(inst, "weekHeader") + "</th>" : "");
				for (dow = 0; dow < 7; dow++) { // days of the week
					day = (dow + firstDay) % 7;
					thead += "<th" + ((dow + firstDay + 6) % 7 >= 5 ? " class='ui-datepicker-week-end'" : "") + ">" +
						"<span title='" + dayNames[day] + "'>" + dayNamesMin[day] + "</span></th>";
				}
				calender += thead + "</tr></thead><tbody>";
				daysInMonth = this._getDaysInMonth(drawYear, drawMonth);
				if (drawYear === inst.selectedYear && drawMonth === inst.selectedMonth) {
					inst.selectedDay = Math.min(inst.selectedDay, daysInMonth);
				}
				leadDays = (this._getFirstDayOfMonth(drawYear, drawMonth) - firstDay + 7) % 7;
				curRows = Math.ceil((leadDays + daysInMonth) / 7); // calculate the number of rows to generate
				numRows = (isMultiMonth ? this.maxRows > curRows ? this.maxRows : curRows : curRows); //If multiple months, use the higher number of rows (see #7043)
				this.maxRows = numRows;
				printDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1 - leadDays));
				for (dRow = 0; dRow < numRows; dRow++) { // create date picker rows
					calender += "<tr>";
					tbody = (!showWeek ? "" : "<td class='ui-datepicker-week-col'>" +
						this._get(inst, "calculateWeek")(printDate) + "</td>");
					for (dow = 0; dow < 7; dow++) { // create date picker days
						daySettings = (beforeShowDay ?
							beforeShowDay.apply((inst.input ? inst.input[0] : null), [printDate]) : [true, ""]);
						otherMonth = (printDate.getMonth() !== drawMonth);
						unselectable = (otherMonth && !selectOtherMonths) || !daySettings[0] ||
							(minDate && printDate < minDate) || (maxDate && printDate > maxDate);
						tbody += "<td class='" +
							((dow + firstDay + 6) % 7 >= 5 ? " ui-datepicker-week-end" : "") + // highlight weekends
							(otherMonth ? " ui-datepicker-other-month" : "") + // highlight days from other months
							((printDate.getTime() === selectedDate.getTime() && drawMonth === inst.selectedMonth && inst._keyEvent) || // user pressed key
							(defaultDate.getTime() === printDate.getTime() && defaultDate.getTime() === selectedDate.getTime()) ?
							// or defaultDate is current printedDate and defaultDate is selectedDate
							" " + this._dayOverClass : "") + // highlight selected day
							(unselectable ? " " + this._unselectableClass + " ui-state-disabled": "") +  // highlight unselectable days
							(otherMonth && !showOtherMonths ? "" : " " + daySettings[1] + // highlight custom dates
							(printDate.getTime() === currentDate.getTime() ? " " + this._currentClass : "") + // highlight selected day
							(printDate.getTime() === today.getTime() ? " ui-datepicker-today" : "")) + "'" + // highlight today (if different)
							((!otherMonth || showOtherMonths) && daySettings[2] ? " title='" + daySettings[2].replace(/'/g, "&#39;") + "'" : "") + // cell title
							(unselectable ? "" : " data-handler='selectDay' data-event='click' data-month='" + printDate.getMonth() + "' data-year='" + printDate.getFullYear() + "'") + ">" + // actions
							(otherMonth && !showOtherMonths ? "&#xa0;" : // display for other months
							(unselectable ? "<span class='ui-state-default'>" + printDate.getDate() + "</span>" : "<a class='ui-state-default" +
							(printDate.getTime() === today.getTime() ? " ui-state-highlight" : "") +
							(printDate.getTime() === currentDate.getTime() ? " ui-state-active" : "") + // highlight selected day
							(otherMonth ? " ui-priority-secondary" : "") + // distinguish dates from other months
							"' href='#'>" + printDate.getDate() + "</a>")) + "</td>"; // display selectable date
						printDate.setDate(printDate.getDate() + 1);
						printDate = this._daylightSavingAdjust(printDate);
					}
					calender += tbody + "</tr>";
				}
				drawMonth++;
				if (drawMonth > 11) {
					drawMonth = 0;
					drawYear++;
				}
				calender += "</tbody></table>" + (isMultiMonth ? "</div>" +
							((numMonths[0] > 0 && col === numMonths[1]-1) ? "<div class='ui-datepicker-row-break'></div>" : "") : "");
				group += calender;
			}
			html += group;
		}
		html += buttonPanel;
		inst._keyEvent = false;
		return html;
	},

	/* Generate the month and year header. */
	_generateMonthYearHeader: function(inst, drawMonth, drawYear, minDate, maxDate,
			secondary, monthNames, monthNamesShort) {

		var inMinYear, inMaxYear, month, years, thisYear, determineYear, year, endYear,
			changeMonth = this._get(inst, "changeMonth"),
			changeYear = this._get(inst, "changeYear"),
			showMonthAfterYear = this._get(inst, "showMonthAfterYear"),
			html = "<div class='ui-datepicker-title'>",
			monthHtml = "";

		// month selection
		if (secondary || !changeMonth) {
			monthHtml += "<span class='ui-datepicker-month'>" + monthNames[drawMonth] + "</span>";
		} else {
			inMinYear = (minDate && minDate.getFullYear() === drawYear);
			inMaxYear = (maxDate && maxDate.getFullYear() === drawYear);
			monthHtml += "<select class='ui-datepicker-month' data-handler='selectMonth' data-event='change'>";
			for ( month = 0; month < 12; month++) {
				if ((!inMinYear || month >= minDate.getMonth()) && (!inMaxYear || month <= maxDate.getMonth())) {
					monthHtml += "<option value='" + month + "'" +
						(month === drawMonth ? " selected='selected'" : "") +
						">" + monthNamesShort[month] + "</option>";
				}
			}
			monthHtml += "</select>";
		}

		if (!showMonthAfterYear) {
			html += monthHtml + (secondary || !(changeMonth && changeYear) ? "&#xa0;" : "");
		}

		// year selection
		if ( !inst.yearshtml ) {
			inst.yearshtml = "";
			if (secondary || !changeYear) {
				html += "<span class='ui-datepicker-year'>" + drawYear + "</span>";
			} else {
				// determine range of years to display
				years = this._get(inst, "yearRange").split(":");
				thisYear = new Date().getFullYear();
				determineYear = function(value) {
					var year = (value.match(/c[+\-].*/) ? drawYear + parseInt(value.substring(1), 10) :
						(value.match(/[+\-].*/) ? thisYear + parseInt(value, 10) :
						parseInt(value, 10)));
					return (isNaN(year) ? thisYear : year);
				};
				year = determineYear(years[0]);
				endYear = Math.max(year, determineYear(years[1] || ""));
				year = (minDate ? Math.max(year, minDate.getFullYear()) : year);
				endYear = (maxDate ? Math.min(endYear, maxDate.getFullYear()) : endYear);
				inst.yearshtml += "<select class='ui-datepicker-year' data-handler='selectYear' data-event='change'>";
				for (; year <= endYear; year++) {
					inst.yearshtml += "<option value='" + year + "'" +
						(year === drawYear ? " selected='selected'" : "") +
						">" + year + "</option>";
				}
				inst.yearshtml += "</select>";

				html += inst.yearshtml;
				inst.yearshtml = null;
			}
		}

		html += this._get(inst, "yearSuffix");
		if (showMonthAfterYear) {
			html += (secondary || !(changeMonth && changeYear) ? "&#xa0;" : "") + monthHtml;
		}
		html += "</div>"; // Close datepicker_header
		return html;
	},

	/* Adjust one of the date sub-fields. */
	_adjustInstDate: function(inst, offset, period) {
		var year = inst.drawYear + (period === "Y" ? offset : 0),
			month = inst.drawMonth + (period === "M" ? offset : 0),
			day = Math.min(inst.selectedDay, this._getDaysInMonth(year, month)) + (period === "D" ? offset : 0),
			date = this._restrictMinMax(inst, this._daylightSavingAdjust(new Date(year, month, day)));

		inst.selectedDay = date.getDate();
		inst.drawMonth = inst.selectedMonth = date.getMonth();
		inst.drawYear = inst.selectedYear = date.getFullYear();
		if (period === "M" || period === "Y") {
			this._notifyChange(inst);
		}
	},

	/* Ensure a date is within any min/max bounds. */
	_restrictMinMax: function(inst, date) {
		var minDate = this._getMinMaxDate(inst, "min"),
			maxDate = this._getMinMaxDate(inst, "max"),
			newDate = (minDate && date < minDate ? minDate : date);
		return (maxDate && newDate > maxDate ? maxDate : newDate);
	},

	/* Notify change of month/year. */
	_notifyChange: function(inst) {
		var onChange = this._get(inst, "onChangeMonthYear");
		if (onChange) {
			onChange.apply((inst.input ? inst.input[0] : null),
				[inst.selectedYear, inst.selectedMonth + 1, inst]);
		}
	},

	/* Determine the number of months to show. */
	_getNumberOfMonths: function(inst) {
		var numMonths = this._get(inst, "numberOfMonths");
		return (numMonths == null ? [1, 1] : (typeof numMonths === "number" ? [1, numMonths] : numMonths));
	},

	/* Determine the current maximum date - ensure no time components are set. */
	_getMinMaxDate: function(inst, minMax) {
		return this._determineDate(inst, this._get(inst, minMax + "Date"), null);
	},

	/* Find the number of days in a given month. */
	_getDaysInMonth: function(year, month) {
		return 32 - this._daylightSavingAdjust(new Date(year, month, 32)).getDate();
	},

	/* Find the day of the week of the first of a month. */
	_getFirstDayOfMonth: function(year, month) {
		return new Date(year, month, 1).getDay();
	},

	/* Determines if we should allow a "next/prev" month display change. */
	_canAdjustMonth: function(inst, offset, curYear, curMonth) {
		var numMonths = this._getNumberOfMonths(inst),
			date = this._daylightSavingAdjust(new Date(curYear,
			curMonth + (offset < 0 ? offset : numMonths[0] * numMonths[1]), 1));

		if (offset < 0) {
			date.setDate(this._getDaysInMonth(date.getFullYear(), date.getMonth()));
		}
		return this._isInRange(inst, date);
	},

	/* Is the given date in the accepted range? */
	_isInRange: function(inst, date) {
		var yearSplit, currentYear,
			minDate = this._getMinMaxDate(inst, "min"),
			maxDate = this._getMinMaxDate(inst, "max"),
			minYear = null,
			maxYear = null,
			years = this._get(inst, "yearRange");
			if (years){
				yearSplit = years.split(":");
				currentYear = new Date().getFullYear();
				minYear = parseInt(yearSplit[0], 10);
				maxYear = parseInt(yearSplit[1], 10);
				if ( yearSplit[0].match(/[+\-].*/) ) {
					minYear += currentYear;
				}
				if ( yearSplit[1].match(/[+\-].*/) ) {
					maxYear += currentYear;
				}
			}

		return ((!minDate || date.getTime() >= minDate.getTime()) &&
			(!maxDate || date.getTime() <= maxDate.getTime()) &&
			(!minYear || date.getFullYear() >= minYear) &&
			(!maxYear || date.getFullYear() <= maxYear));
	},

	/* Provide the configuration settings for formatting/parsing. */
	_getFormatConfig: function(inst) {
		var shortYearCutoff = this._get(inst, "shortYearCutoff");
		shortYearCutoff = (typeof shortYearCutoff !== "string" ? shortYearCutoff :
			new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10));
		return {shortYearCutoff: shortYearCutoff,
			dayNamesShort: this._get(inst, "dayNamesShort"), dayNames: this._get(inst, "dayNames"),
			monthNamesShort: this._get(inst, "monthNamesShort"), monthNames: this._get(inst, "monthNames")};
	},

	/* Format the given date for display. */
	_formatDate: function(inst, day, month, year) {
		if (!day) {
			inst.currentDay = inst.selectedDay;
			inst.currentMonth = inst.selectedMonth;
			inst.currentYear = inst.selectedYear;
		}
		var date = (day ? (typeof day === "object" ? day :
			this._daylightSavingAdjust(new Date(year, month, day))) :
			this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay)));
		return this.formatDate(this._get(inst, "dateFormat"), date, this._getFormatConfig(inst));
	}
});

/*
 * Bind hover events for datepicker elements.
 * Done via delegate so the binding only occurs once in the lifetime of the parent div.
 * Global instActive, set by _updateDatepicker allows the handlers to find their way back to the active picker.
 */
function bindHover(dpDiv) {
	var selector = "button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";
	return dpDiv.delegate(selector, "mouseout", function() {
			$(this).removeClass("ui-state-hover");
			if (this.className.indexOf("ui-datepicker-prev") !== -1) {
				$(this).removeClass("ui-datepicker-prev-hover");
			}
			if (this.className.indexOf("ui-datepicker-next") !== -1) {
				$(this).removeClass("ui-datepicker-next-hover");
			}
		})
		.delegate(selector, "mouseover", function(){
			if (!$.datepicker._isDisabledDatepicker( instActive.inline ? dpDiv.parent()[0] : instActive.input[0])) {
				$(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover");
				$(this).addClass("ui-state-hover");
				if (this.className.indexOf("ui-datepicker-prev") !== -1) {
					$(this).addClass("ui-datepicker-prev-hover");
				}
				if (this.className.indexOf("ui-datepicker-next") !== -1) {
					$(this).addClass("ui-datepicker-next-hover");
				}
			}
		});
}

/* jQuery extend now ignores nulls! */
function extendRemove(target, props) {
	$.extend(target, props);
	for (var name in props) {
		if (props[name] == null) {
			target[name] = props[name];
		}
	}
	return target;
}

/* Invoke the datepicker functionality.
   @param  options  string - a command, optionally followed by additional parameters or
					Object - settings for attaching new datepicker functionality
   @return  jQuery object */
$.fn.datepicker = function(options){

	/* Verify an empty collection wasn't passed - Fixes #6976 */
	if ( !this.length ) {
		return this;
	}

	/* Initialise the date picker. */
	if (!$.datepicker.initialized) {
		$(document).mousedown($.datepicker._checkExternalClick);
		$.datepicker.initialized = true;
	}

	/* Append datepicker main container to body if not exist. */
	if ($("#"+$.datepicker._mainDivId).length === 0) {
		$("body").append($.datepicker.dpDiv);
	}

	var otherArgs = Array.prototype.slice.call(arguments, 1);
	if (typeof options === "string" && (options === "isDisabled" || options === "getDate" || options === "widget")) {
		return $.datepicker["_" + options + "Datepicker"].
			apply($.datepicker, [this[0]].concat(otherArgs));
	}
	if (options === "option" && arguments.length === 2 && typeof arguments[1] === "string") {
		return $.datepicker["_" + options + "Datepicker"].
			apply($.datepicker, [this[0]].concat(otherArgs));
	}
	return this.each(function() {
		typeof options === "string" ?
			$.datepicker["_" + options + "Datepicker"].
				apply($.datepicker, [this].concat(otherArgs)) :
			$.datepicker._attachDatepicker(this, options);
	});
};

$.datepicker = new Datepicker(); // singleton instance
$.datepicker.initialized = false;
$.datepicker.uuid = new Date().getTime();
$.datepicker.version = "1.10.4";

})(jQuery);
'use strict';

!(function ($) {

  "use strict";

  var FOUNDATION_VERSION = '6.2.4';

  // Global Foundation object
  // This is attached to the window, or used as a module for AMD/Browserify
  var Foundation = {
    version: FOUNDATION_VERSION,

    /**
     * Stores initialized plugins.
     */
    _plugins: {},

    /**
     * Stores generated unique ids for plugin instances
     */
    _uuids: [],

    /**
     * Returns a boolean for RTL support
     */
    rtl: function rtl() {
      return $('html').attr('dir') === 'rtl';
    },
    /**
     * Defines a Foundation plugin, adding it to the `Foundation` namespace and the list of plugins to initialize when reflowing.
     * @param {Object} plugin - The constructor of the plugin.
     */
    plugin: function plugin(_plugin, name) {
      // Object key to use when adding to global Foundation object
      // Examples: Foundation.Reveal, Foundation.OffCanvas
      var className = name || functionName(_plugin);
      // Object key to use when storing the plugin, also used to create the identifying data attribute for the plugin
      // Examples: data-reveal, data-off-canvas
      var attrName = hyphenate(className);

      // Add to the Foundation object and the plugins list (for reflowing)
      this._plugins[attrName] = this[className] = _plugin;
    },
    /**
     * @function
     * Populates the _uuids array with pointers to each individual plugin instance.
     * Adds the `zfPlugin` data-attribute to programmatically created plugins to allow use of $(selector).foundation(method) calls.
     * Also fires the initialization event for each plugin, consolidating repetitive code.
     * @param {Object} plugin - an instance of a plugin, usually `this` in context.
     * @param {String} name - the name of the plugin, passed as a camelCased string.
     * @fires Plugin#init
     */
    registerPlugin: function registerPlugin(plugin, name) {
      var pluginName = name ? hyphenate(name) : functionName(plugin.constructor).toLowerCase();
      plugin.uuid = this.GetYoDigits(6, pluginName);

      if (!plugin.$element.attr('data-' + pluginName)) {
        plugin.$element.attr('data-' + pluginName, plugin.uuid);
      }
      if (!plugin.$element.data('zfPlugin')) {
        plugin.$element.data('zfPlugin', plugin);
      }
      /**
       * Fires when the plugin has initialized.
       * @event Plugin#init
       */
      plugin.$element.trigger('init.zf.' + pluginName);

      this._uuids.push(plugin.uuid);

      return;
    },
    /**
     * @function
     * Removes the plugins uuid from the _uuids array.
     * Removes the zfPlugin data attribute, as well as the data-plugin-name attribute.
     * Also fires the destroyed event for the plugin, consolidating repetitive code.
     * @param {Object} plugin - an instance of a plugin, usually `this` in context.
     * @fires Plugin#destroyed
     */
    unregisterPlugin: function unregisterPlugin(plugin) {
      var pluginName = hyphenate(functionName(plugin.$element.data('zfPlugin').constructor));

      this._uuids.splice(this._uuids.indexOf(plugin.uuid), 1);
      plugin.$element.removeAttr('data-' + pluginName).removeData('zfPlugin')
      /**
       * Fires when the plugin has been destroyed.
       * @event Plugin#destroyed
       */
      .trigger('destroyed.zf.' + pluginName);
      for (var prop in plugin) {
        plugin[prop] = null; //clean up script to prep for garbage collection.
      }
      return;
    },

    /**
     * @function
     * Causes one or more active plugins to re-initialize, resetting event listeners, recalculating positions, etc.
     * @param {String} plugins - optional string of an individual plugin key, attained by calling `$(element).data('pluginName')`, or string of a plugin class i.e. `'dropdown'`
     * @default If no argument is passed, reflow all currently active plugins.
     */
    reInit: function reInit(plugins) {
      var isJQ = plugins instanceof $;
      try {
        if (isJQ) {
          plugins.each(function () {
            $(this).data('zfPlugin')._init();
          });
        } else {
          var type = typeof plugins,
              _this = this,
              fns = {
            'object': function object(plgs) {
              plgs.forEach(function (p) {
                p = hyphenate(p);
                $('[data-' + p + ']').foundation('_init');
              });
            },
            'string': function string() {
              plugins = hyphenate(plugins);
              $('[data-' + plugins + ']').foundation('_init');
            },
            'undefined': function undefined() {
              this['object'](Object.keys(_this._plugins));
            }
          };
          fns[type](plugins);
        }
      } catch (err) {
        console.error(err);
      } finally {
        return plugins;
      }
    },

    /**
     * returns a random base-36 uid with namespacing
     * @function
     * @param {Number} length - number of random base-36 digits desired. Increase for more random strings.
     * @param {String} namespace - name of plugin to be incorporated in uid, optional.
     * @default {String} '' - if no plugin name is provided, nothing is appended to the uid.
     * @returns {String} - unique id
     */
    GetYoDigits: function GetYoDigits(length, namespace) {
      length = length || 6;
      return Math.round(Math.pow(36, length + 1) - Math.random() * Math.pow(36, length)).toString(36).slice(1) + (namespace ? '-' + namespace : '');
    },
    /**
     * Initialize plugins on any elements within `elem` (and `elem` itself) that aren't already initialized.
     * @param {Object} elem - jQuery object containing the element to check inside. Also checks the element itself, unless it's the `document` object.
     * @param {String|Array} plugins - A list of plugins to initialize. Leave this out to initialize everything.
     */
    reflow: function reflow(elem, plugins) {

      // If plugins is undefined, just grab everything
      if (typeof plugins === 'undefined') {
        plugins = Object.keys(this._plugins);
      }
      // If plugins is a string, convert it to an array with one item
      else if (typeof plugins === 'string') {
          plugins = [plugins];
        }

      var _this = this;

      // Iterate through each plugin
      $.each(plugins, function (i, name) {
        // Get the current plugin
        var plugin = _this._plugins[name];

        // Localize the search to all elements inside elem, as well as elem itself, unless elem === document
        var $elem = $(elem).find('[data-' + name + ']').addBack('[data-' + name + ']');

        // For each plugin found, initialize it
        $elem.each(function () {
          var $el = $(this),
              opts = {};
          // Don't double-dip on plugins
          if ($el.data('zfPlugin')) {
            console.warn("Tried to initialize " + name + " on an element that already has a Foundation plugin.");
            return;
          }

          if ($el.attr('data-options')) {
            var thing = $el.attr('data-options').split(';').forEach(function (e, i) {
              var opt = e.split(':').map(function (el) {
                return el.trim();
              });
              if (opt[0]) opts[opt[0]] = parseValue(opt[1]);
            });
          }
          try {
            $el.data('zfPlugin', new plugin($(this), opts));
          } catch (er) {
            console.error(er);
          } finally {
            return;
          }
        });
      });
    },
    getFnName: functionName,
    transitionend: function transitionend($elem) {
      var transitions = {
        'transition': 'transitionend',
        'WebkitTransition': 'webkitTransitionEnd',
        'MozTransition': 'transitionend',
        'OTransition': 'otransitionend'
      };
      var elem = document.createElement('div'),
          end;

      for (var t in transitions) {
        if (typeof elem.style[t] !== 'undefined') {
          end = transitions[t];
        }
      }
      if (end) {
        return end;
      } else {
        end = setTimeout(function () {
          $elem.triggerHandler('transitionend', [$elem]);
        }, 1);
        return 'transitionend';
      }
    }
  };

  Foundation.util = {
    /**
     * Function for applying a debounce effect to a function call.
     * @function
     * @param {Function} func - Function to be called at end of timeout.
     * @param {Number} delay - Time in ms to delay the call of `func`.
     * @returns function
     */
    throttle: function throttle(func, delay) {
      var timer = null;

      return function () {
        var context = this,
            args = arguments;

        if (timer === null) {
          timer = setTimeout(function () {
            func.apply(context, args);
            timer = null;
          }, delay);
        }
      };
    }
  };

  // TODO: consider not making this a jQuery function
  // TODO: need way to reflow vs. re-initialize
  /**
   * The Foundation jQuery method.
   * @param {String|Array} method - An action to perform on the current jQuery object.
   */
  var foundation = function foundation(method) {
    var type = typeof method,
        $meta = $('meta.foundation-mq'),
        $noJS = $('.no-js');

    if (!$meta.length) {
      $('<meta class="foundation-mq">').appendTo(document.head);
    }
    if ($noJS.length) {
      $noJS.removeClass('no-js');
    }

    if (type === 'undefined') {
      //needs to initialize the Foundation object, or an individual plugin.
      Foundation.MediaQuery._init();
      Foundation.reflow(this);
    } else if (type === 'string') {
      //an individual method to invoke on a plugin or group of plugins
      var args = Array.prototype.slice.call(arguments, 1); //collect all the arguments, if necessary
      var plugClass = this.data('zfPlugin'); //determine the class of plugin

      if (plugClass !== undefined && plugClass[method] !== undefined) {
        //make sure both the class and method exist
        if (this.length === 1) {
          //if there's only one, call it directly.
          plugClass[method].apply(plugClass, args);
        } else {
          this.each(function (i, el) {
            //otherwise loop through the jQuery collection and invoke the method on each
            plugClass[method].apply($(el).data('zfPlugin'), args);
          });
        }
      } else {
        //error for no class or no method
        throw new ReferenceError("We're sorry, '" + method + "' is not an available method for " + (plugClass ? functionName(plugClass) : 'this element') + '.');
      }
    } else {
      //error for invalid argument type
      throw new TypeError('We\'re sorry, ' + type + ' is not a valid parameter. You must use a string representing the method you wish to invoke.');
    }
    return this;
  };

  window.Foundation = Foundation;
  $.fn.foundation = foundation;

  // Polyfill for requestAnimationFrame
  (function () {
    if (!Date.now || !window.Date.now) window.Date.now = Date.now = function () {
      return new Date().getTime();
    };

    var vendors = ['webkit', 'moz'];
    for (var i = 0; i < vendors.length && !window.requestAnimationFrame; ++i) {
      var vp = vendors[i];
      window.requestAnimationFrame = window[vp + 'RequestAnimationFrame'];
      window.cancelAnimationFrame = window[vp + 'CancelAnimationFrame'] || window[vp + 'CancelRequestAnimationFrame'];
    }
    if (/iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent) || !window.requestAnimationFrame || !window.cancelAnimationFrame) {
      var lastTime = 0;
      window.requestAnimationFrame = function (callback) {
        var now = Date.now();
        var nextTime = Math.max(lastTime + 16, now);
        return setTimeout(function () {
          callback(lastTime = nextTime);
        }, nextTime - now);
      };
      window.cancelAnimationFrame = clearTimeout;
    }
    /**
     * Polyfill for performance.now, required by rAF
     */
    if (!window.performance || !window.performance.now) {
      window.performance = {
        start: Date.now(),
        now: function now() {
          return Date.now() - this.start;
        }
      };
    }
  })();
  if (!Function.prototype.bind) {
    Function.prototype.bind = function (oThis) {
      if (typeof this !== 'function') {
        // closest thing possible to the ECMAScript 5
        // internal IsCallable function
        throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');
      }

      var aArgs = Array.prototype.slice.call(arguments, 1),
          fToBind = this,
          fNOP = function fNOP() {},
          fBound = function fBound() {
        return fToBind.apply(this instanceof fNOP ? this : oThis, aArgs.concat(Array.prototype.slice.call(arguments)));
      };

      if (this.prototype) {
        // native functions don't have a prototype
        fNOP.prototype = this.prototype;
      }
      fBound.prototype = new fNOP();

      return fBound;
    };
  }
  // Polyfill to get the name of a function in IE9
  function functionName(fn) {
    if (Function.prototype.name === undefined) {
      var funcNameRegex = /function\s([^(]{1,})\(/;
      var results = funcNameRegex.exec(fn.toString());
      return results && results.length > 1 ? results[1].trim() : "";
    } else if (fn.prototype === undefined) {
      return fn.constructor.name;
    } else {
      return fn.prototype.constructor.name;
    }
  }
  function parseValue(str) {
    if (/true/.test(str)) return true;else if (/false/.test(str)) return false;else if (!isNaN(str * 1)) return parseFloat(str);
    return str;
  }
  // Convert PascalCase to kebab-case
  // Thank you: http://stackoverflow.com/a/8955580
  function hyphenate(str) {
    return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
  }
})(jQuery);
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

!(function ($) {

  /**
   * Abide module.
   * @module foundation.abide
   */

  var Abide = (function () {
    /**
     * Creates a new instance of Abide.
     * @class
     * @fires Abide#init
     * @param {Object} element - jQuery object to add the trigger to.
     * @param {Object} options - Overrides to the default plugin settings.
     */

    function Abide(element) {
      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

      _classCallCheck(this, Abide);

      this.$element = element;
      this.options = $.extend({}, Abide.defaults, this.$element.data(), options);

      this._init();

      Foundation.registerPlugin(this, 'Abide');
    }

    /**
     * Default settings for plugin
     */

    /**
     * Initializes the Abide plugin and calls functions to get Abide functioning on load.
     * @private
     */

    _createClass(Abide, [{
      key: '_init',
      value: function _init() {
        this.$inputs = this.$element.find('input, textarea, select');

        this._events();
      }

      /**
       * Initializes events for Abide.
       * @private
       */
    }, {
      key: '_events',
      value: function _events() {
        var _this2 = this;

        this.$element.off('.abide').on('reset.zf.abide', function () {
          _this2.resetForm();
        }).on('submit.zf.abide', function () {
          return _this2.validateForm();
        });

        if (this.options.validateOn === 'fieldChange') {
          this.$inputs.off('change.zf.abide').on('change.zf.abide', function (e) {
            _this2.validateInput($(e.target));
          });
        }

        if (this.options.liveValidate) {
          this.$inputs.off('input.zf.abide').on('input.zf.abide', function (e) {
            _this2.validateInput($(e.target));
          });
        }
      }

      /**
       * Calls necessary functions to update Abide upon DOM change
       * @private
       */
    }, {
      key: '_reflow',
      value: function _reflow() {
        this._init();
      }

      /**
       * Checks whether or not a form element has the required attribute and if it's checked or not
       * @param {Object} element - jQuery object to check for required attribute
       * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty
       */
    }, {
      key: 'requiredCheck',
      value: function requiredCheck($el) {
        if (!$el.attr('required')) return true;

        var isGood = true;

        switch ($el[0].type) {
          case 'checkbox':
            isGood = $el[0].checked;
            break;

          case 'select':
          case 'select-one':
          case 'select-multiple':
            var opt = $el.find('option:selected');
            if (!opt.length || !opt.val()) isGood = false;
            break;

          default:
            if (!$el.val() || !$el.val().length) isGood = false;
        }

        return isGood;
      }

      /**
       * Based on $el, get the first element with selector in this order:
       * 1. The element's direct sibling('s).
       * 3. The element's parent's children.
       *
       * This allows for multiple form errors per input, though if none are found, no form errors will be shown.
       *
       * @param {Object} $el - jQuery object to use as reference to find the form error selector.
       * @returns {Object} jQuery object with the selector.
       */
    }, {
      key: 'findFormError',
      value: function findFormError($el) {
        var $error = $el.siblings(this.options.formErrorSelector);

        if (!$error.length) {
          $error = $el.parent().find(this.options.formErrorSelector);
        }

        return $error;
      }

      /**
       * Get the first element in this order:
       * 2. The <label> with the attribute `[for="someInputId"]`
       * 3. The `.closest()` <label>
       *
       * @param {Object} $el - jQuery object to check for required attribute
       * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty
       */
    }, {
      key: 'findLabel',
      value: function findLabel($el) {
        var id = $el[0].id;
        var $label = this.$element.find('label[for="' + id + '"]');

        if (!$label.length) {
          return $el.closest('label');
        }

        return $label;
      }

      /**
       * Get the set of labels associated with a set of radio els in this order
       * 2. The <label> with the attribute `[for="someInputId"]`
       * 3. The `.closest()` <label>
       *
       * @param {Object} $el - jQuery object to check for required attribute
       * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty
       */
    }, {
      key: 'findRadioLabels',
      value: function findRadioLabels($els) {
        var _this3 = this;

        var labels = $els.map(function (i, el) {
          var id = el.id;
          var $label = _this3.$element.find('label[for="' + id + '"]');

          if (!$label.length) {
            $label = $(el).closest('label');
          }
          return $label[0];
        });

        return $(labels);
      }

      /**
       * Adds the CSS error class as specified by the Abide settings to the label, input, and the form
       * @param {Object} $el - jQuery object to add the class to
       */
    }, {
      key: 'addErrorClasses',
      value: function addErrorClasses($el) {
        var $label = this.findLabel($el);
        var $formError = this.findFormError($el);

        if ($label.length) {
          $label.addClass(this.options.labelErrorClass);
        }

        if ($formError.length) {
          $formError.addClass(this.options.formErrorClass);
        }

        $el.addClass(this.options.inputErrorClass).attr('data-invalid', '');
      }

      /**
       * Remove CSS error classes etc from an entire radio button group
       * @param {String} groupName - A string that specifies the name of a radio button group
       *
       */

    }, {
      key: 'removeRadioErrorClasses',
      value: function removeRadioErrorClasses(groupName) {
        var $els = this.$element.find(':radio[name="' + groupName + '"]');
        var $labels = this.findRadioLabels($els);
        var $formErrors = this.findFormError($els);

        if ($labels.length) {
          $labels.removeClass(this.options.labelErrorClass);
        }

        if ($formErrors.length) {
          $formErrors.removeClass(this.options.formErrorClass);
        }

        $els.removeClass(this.options.inputErrorClass).removeAttr('data-invalid');
      }

      /**
       * Removes CSS error class as specified by the Abide settings from the label, input, and the form
       * @param {Object} $el - jQuery object to remove the class from
       */
    }, {
      key: 'removeErrorClasses',
      value: function removeErrorClasses($el) {
        // radios need to clear all of the els
        if ($el[0].type == 'radio') {
          return this.removeRadioErrorClasses($el.attr('name'));
        }

        var $label = this.findLabel($el);
        var $formError = this.findFormError($el);

        if ($label.length) {
          $label.removeClass(this.options.labelErrorClass);
        }

        if ($formError.length) {
          $formError.removeClass(this.options.formErrorClass);
        }

        $el.removeClass(this.options.inputErrorClass).removeAttr('data-invalid');
      }

      /**
       * Goes through a form to find inputs and proceeds to validate them in ways specific to their type
       * @fires Abide#invalid
       * @fires Abide#valid
       * @param {Object} element - jQuery object to validate, should be an HTML input
       * @returns {Boolean} goodToGo - If the input is valid or not.
       */
    }, {
      key: 'validateInput',
      value: function validateInput($el) {
        var clearRequire = this.requiredCheck($el),
            validated = false,
            customValidator = true,
            validator = $el.attr('data-validator'),
            equalTo = true;

        // don't validate ignored inputs or hidden inputs
        if ($el.is('[data-abide-ignore]') || $el.is('[type="hidden"]')) {
          return true;
        }

        switch ($el[0].type) {
          case 'radio':
            validated = this.validateRadio($el.attr('name'));
            break;

          case 'checkbox':
            validated = clearRequire;
            break;

          case 'select':
          case 'select-one':
          case 'select-multiple':
            validated = clearRequire;
            break;

          default:
            validated = this.validateText($el);
        }

        if (validator) {
          customValidator = this.matchValidation($el, validator, $el.attr('required'));
        }

        if ($el.attr('data-equalto')) {
          equalTo = this.options.validators.equalTo($el);
        }

        var goodToGo = [clearRequire, validated, customValidator, equalTo].indexOf(false) === -1;
        var message = (goodToGo ? 'valid' : 'invalid') + '.zf.abide';

        this[goodToGo ? 'removeErrorClasses' : 'addErrorClasses']($el);

        /**
         * Fires when the input is done checking for validation. Event trigger is either `valid.zf.abide` or `invalid.zf.abide`
         * Trigger includes the DOM element of the input.
         * @event Abide#valid
         * @event Abide#invalid
         */
        $el.trigger(message, [$el]);

        return goodToGo;
      }

      /**
       * Goes through a form and if there are any invalid inputs, it will display the form error element
       * @returns {Boolean} noError - true if no errors were detected...
       * @fires Abide#formvalid
       * @fires Abide#forminvalid
       */
    }, {
      key: 'validateForm',
      value: function validateForm() {
        var acc = [];
        var _this = this;

        this.$inputs.each(function () {
          acc.push(_this.validateInput($(this)));
        });

        var noError = acc.indexOf(false) === -1;

        this.$element.find('[data-abide-error]').css('display', noError ? 'none' : 'block');

        /**
         * Fires when the form is finished validating. Event trigger is either `formvalid.zf.abide` or `forminvalid.zf.abide`.
         * Trigger includes the element of the form.
         * @event Abide#formvalid
         * @event Abide#forminvalid
         */
        this.$element.trigger((noError ? 'formvalid' : 'forminvalid') + '.zf.abide', [this.$element]);

        return noError;
      }

      /**
       * Determines whether or a not a text input is valid based on the pattern specified in the attribute. If no matching pattern is found, returns true.
       * @param {Object} $el - jQuery object to validate, should be a text input HTML element
       * @param {String} pattern - string value of one of the RegEx patterns in Abide.options.patterns
       * @returns {Boolean} Boolean value depends on whether or not the input value matches the pattern specified
       */
    }, {
      key: 'validateText',
      value: function validateText($el, pattern) {
        // A pattern can be passed to this function, or it will be infered from the input's "pattern" attribute, or it's "type" attribute
        pattern = pattern || $el.attr('pattern') || $el.attr('type');
        var inputText = $el.val();
        var valid = false;

        if (inputText.length) {
          // If the pattern attribute on the element is in Abide's list of patterns, then test that regexp
          if (this.options.patterns.hasOwnProperty(pattern)) {
            valid = this.options.patterns[pattern].test(inputText);
          }
          // If the pattern name isn't also the type attribute of the field, then test it as a regexp
          else if (pattern !== $el.attr('type')) {
              valid = new RegExp(pattern).test(inputText);
            } else {
              valid = true;
            }
        }
        // An empty field is valid if it's not required
        else if (!$el.prop('required')) {
            valid = true;
          }

        return valid;
      }

      /**
       * Determines whether or a not a radio input is valid based on whether or not it is required and selected. Although the function targets a single `<input>`, it validates by checking the `required` and `checked` properties of all radio buttons in its group.
       * @param {String} groupName - A string that specifies the name of a radio button group
       * @returns {Boolean} Boolean value depends on whether or not at least one radio input has been selected (if it's required)
       */
    }, {
      key: 'validateRadio',
      value: function validateRadio(groupName) {
        // If at least one radio in the group has the `required` attribute, the group is considered required
        // Per W3C spec, all radio buttons in a group should have `required`, but we're being nice
        var $group = this.$element.find(':radio[name="' + groupName + '"]');
        var valid = false,
            required = false;

        // For the group to be required, at least one radio needs to be required
        $group.each(function (i, e) {
          if ($(e).attr('required')) {
            required = true;
          }
        });
        if (!required) valid = true;

        if (!valid) {
          // For the group to be valid, at least one radio needs to be checked
          $group.each(function (i, e) {
            if ($(e).prop('checked')) {
              valid = true;
            }
          });
        };

        return valid;
      }

      /**
       * Determines if a selected input passes a custom validation function. Multiple validations can be used, if passed to the element with `data-validator="foo bar baz"` in a space separated listed.
       * @param {Object} $el - jQuery input element.
       * @param {String} validators - a string of function names matching functions in the Abide.options.validators object.
       * @param {Boolean} required - self explanatory?
       * @returns {Boolean} - true if validations passed.
       */
    }, {
      key: 'matchValidation',
      value: function matchValidation($el, validators, required) {
        var _this4 = this;

        required = required ? true : false;

        var clear = validators.split(' ').map(function (v) {
          return _this4.options.validators[v]($el, required, $el.parent());
        });
        return clear.indexOf(false) === -1;
      }

      /**
       * Resets form inputs and styles
       * @fires Abide#formreset
       */
    }, {
      key: 'resetForm',
      value: function resetForm() {
        var $form = this.$element,
            opts = this.options;

        $('.' + opts.labelErrorClass, $form).not('small').removeClass(opts.labelErrorClass);
        $('.' + opts.inputErrorClass, $form).not('small').removeClass(opts.inputErrorClass);
        $(opts.formErrorSelector + '.' + opts.formErrorClass).removeClass(opts.formErrorClass);
        $form.find('[data-abide-error]').css('display', 'none');
        $(':input', $form).not(':button, :submit, :reset, :hidden, :radio, :checkbox, [data-abide-ignore]').val('').removeAttr('data-invalid');
        $(':input:radio', $form).not('[data-abide-ignore]').prop('checked', false).removeAttr('data-invalid');
        $(':input:checkbox', $form).not('[data-abide-ignore]').prop('checked', false).removeAttr('data-invalid');
        /**
         * Fires when the form has been reset.
         * @event Abide#formreset
         */
        $form.trigger('formreset.zf.abide', [$form]);
      }

      /**
       * Destroys an instance of Abide.
       * Removes error styles and classes from elements, without resetting their values.
       */
    }, {
      key: 'destroy',
      value: function destroy() {
        var _this = this;
        this.$element.off('.abide').find('[data-abide-error]').css('display', 'none');

        this.$inputs.off('.abide').each(function () {
          _this.removeErrorClasses($(this));
        });

        Foundation.unregisterPlugin(this);
      }
    }]);

    return Abide;
  })();

  Abide.defaults = {
    /**
     * The default event to validate inputs. Checkboxes and radios validate immediately.
     * Remove or change this value for manual validation.
     * @option
     * @example 'fieldChange'
     */
    validateOn: 'fieldChange',

    /**
     * Class to be applied to input labels on failed validation.
     * @option
     * @example 'is-invalid-label'
     */
    labelErrorClass: 'is-invalid-label',

    /**
     * Class to be applied to inputs on failed validation.
     * @option
     * @example 'is-invalid-input'
     */
    inputErrorClass: 'is-invalid-input',

    /**
     * Class selector to use to target Form Errors for show/hide.
     * @option
     * @example '.form-error'
     */
    formErrorSelector: '.form-error',

    /**
     * Class added to Form Errors on failed validation.
     * @option
     * @example 'is-visible'
     */
    formErrorClass: 'is-visible',

    /**
     * Set to true to validate text inputs on any value change.
     * @option
     * @example false
     */
    liveValidate: false,

    patterns: {
      alpha: /^[a-zA-Z]+$/,
      alpha_numeric: /^[a-zA-Z0-9]+$/,
      integer: /^[-+]?\d+$/,
      number: /^[-+]?\d*(?:[\.\,]\d+)?$/,

      // amex, visa, diners
      card: /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11})$/,
      cvv: /^([0-9]){3,4}$/,

      // http://www.whatwg.org/specs/web-apps/current-work/multipage/states-of-the-type-attribute.html#valid-e-mail-address
      email: /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+$/,

      url: /^(https?|ftp|file|ssh):\/\/(((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/,
      // abc.de
      domain: /^([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,8}$/,

      datetime: /^([0-2][0-9]{3})\-([0-1][0-9])\-([0-3][0-9])T([0-5][0-9])\:([0-5][0-9])\:([0-5][0-9])(Z|([\-\+]([0-1][0-9])\:00))$/,
      // YYYY-MM-DD
      date: /(?:19|20)[0-9]{2}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-9])|(?:(?!02)(?:0[1-9]|1[0-2])-(?:30))|(?:(?:0[13578]|1[02])-31))$/,
      // HH:MM:SS
      time: /^(0[0-9]|1[0-9]|2[0-3])(:[0-5][0-9]){2}$/,
      dateISO: /^\d{4}[\/\-]\d{1,2}[\/\-]\d{1,2}$/,
      // MM/DD/YYYY
      month_day_year: /^(0[1-9]|1[012])[- \/.](0[1-9]|[12][0-9]|3[01])[- \/.]\d{4}$/,
      // DD/MM/YYYY
      day_month_year: /^(0[1-9]|[12][0-9]|3[01])[- \/.](0[1-9]|1[012])[- \/.]\d{4}$/,

      // #FFF or #FFFFFF
      color: /^#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$/
    },

    /**
     * Optional validation functions to be used. `equalTo` being the only default included function.
     * Functions should return only a boolean if the input is valid or not. Functions are given the following arguments:
     * el : The jQuery element to validate.
     * required : Boolean value of the required attribute be present or not.
     * parent : The direct parent of the input.
     * @option
     */
    validators: {
      equalTo: function equalTo(el, required, parent) {
        return $('#' + el.attr('data-equalto')).val() === el.val();
      }
    }
  };

  // Window exports
  Foundation.plugin(Abide, 'Abide');
})(jQuery);
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

!(function ($) {

  /**
   * Accordion module.
   * @module foundation.accordion
   * @requires foundation.util.keyboard
   * @requires foundation.util.motion
   */

  var Accordion = (function () {
    /**
     * Creates a new instance of an accordion.
     * @class
     * @fires Accordion#init
     * @param {jQuery} element - jQuery object to make into an accordion.
     * @param {Object} options - a plain object with settings to override the default options.
     */

    function Accordion(element, options) {
      _classCallCheck(this, Accordion);

      this.$element = element;
      this.options = $.extend({}, Accordion.defaults, this.$element.data(), options);

      this._init();

      Foundation.registerPlugin(this, 'Accordion');
      Foundation.Keyboard.register('Accordion', {
        'ENTER': 'toggle',
        'SPACE': 'toggle',
        'ARROW_DOWN': 'next',
        'ARROW_UP': 'previous'
      });
    }

    /**
     * Initializes the accordion by animating the preset active pane(s).
     * @private
     */

    _createClass(Accordion, [{
      key: '_init',
      value: function _init() {
        this.$element.attr('role', 'tablist');
        this.$tabs = this.$element.children('li, [data-accordion-item]');

        this.$tabs.each(function (idx, el) {
          var $el = $(el),
              $content = $el.children('[data-tab-content]'),
              id = $content[0].id || Foundation.GetYoDigits(6, 'accordion'),
              linkId = el.id || id + '-label';

          $el.find('a:first').attr({
            'aria-controls': id,
            'role': 'tab',
            'id': linkId,
            'aria-expanded': false,
            'aria-selected': false
          });

          $content.attr({ 'role': 'tabpanel', 'aria-labelledby': linkId, 'aria-hidden': true, 'id': id });
        });
        var $initActive = this.$element.find('.is-active').children('[data-tab-content]');
        if ($initActive.length) {
          this.down($initActive, true);
        }
        this._events();
      }

      /**
       * Adds event handlers for items within the accordion.
       * @private
       */
    }, {
      key: '_events',
      value: function _events() {
        var _this = this;

        this.$tabs.each(function () {
          var $elem = $(this);
          var $tabContent = $elem.children('[data-tab-content]');
          if ($tabContent.length) {
            $elem.children('a').off('click.zf.accordion keydown.zf.accordion').on('click.zf.accordion', function (e) {
              e.preventDefault();
              _this.toggle($tabContent);
            }).on('keydown.zf.accordion', function (e) {
              Foundation.Keyboard.handleKey(e, 'Accordion', {
                toggle: function toggle() {
                  _this.toggle($tabContent);
                },
                next: function next() {
                  var $a = $elem.next().find('a').focus();
                  if (!_this.options.multiExpand) {
                    $a.trigger('click.zf.accordion');
                  }
                },
                previous: function previous() {
                  var $a = $elem.prev().find('a').focus();
                  if (!_this.options.multiExpand) {
                    $a.trigger('click.zf.accordion');
                  }
                },
                handled: function handled() {
                  e.preventDefault();
                  e.stopPropagation();
                }
              });
            });
          }
        });
      }

      /**
       * Toggles the selected content pane's open/close state.
       * @param {jQuery} $target - jQuery object of the pane to toggle (`.accordion-content`).
       * @function
       */
    }, {
      key: 'toggle',
      value: function toggle($target) {
        if ($target.parent().hasClass('is-active')) {
          this.up($target);
        } else {
          this.down($target);
        }
      }

      /**
       * Opens the accordion tab defined by `$target`.
       * @param {jQuery} $target - Accordion pane to open (`.accordion-content`).
       * @param {Boolean} firstTime - flag to determine if reflow should happen.
       * @fires Accordion#down
       * @function
       */
    }, {
      key: 'down',
      value: function down($target, firstTime) {
        var _this2 = this;

        $target.attr('aria-hidden', false).parent('[data-tab-content]').addBack().parent().addClass('is-active');

        if (!this.options.multiExpand && !firstTime) {
          var $currentActive = this.$element.children('.is-active').children('[data-tab-content]');
          if ($currentActive.length) {
            this.up($currentActive.not($target));
          }
        }

        $target.slideDown(this.options.slideSpeed, function () {
          /**
           * Fires when the tab is done opening.
           * @event Accordion#down
           */
          _this2.$element.trigger('down.zf.accordion', [$target]);
        });

        $('#' + $target.attr('aria-labelledby')).attr({
          'aria-expanded': true,
          'aria-selected': true
        });
      }

      /**
       * Closes the tab defined by `$target`.
       * @param {jQuery} $target - Accordion tab to close (`.accordion-content`).
       * @fires Accordion#up
       * @function
       */
    }, {
      key: 'up',
      value: function up($target) {
        var $aunts = $target.parent().siblings(),
            _this = this;

        if (!this.options.allowAllClosed && !$aunts.hasClass('is-active') || !$target.parent().hasClass('is-active')) {
          return;
        }

        // Foundation.Move(this.options.slideSpeed, $target, function(){
        $target.slideUp(_this.options.slideSpeed, function () {
          /**
           * Fires when the tab is done collapsing up.
           * @event Accordion#up
           */
          _this.$element.trigger('up.zf.accordion', [$target]);
        });
        // });

        $target.attr('aria-hidden', true).parent().removeClass('is-active');

        $('#' + $target.attr('aria-labelledby')).attr({
          'aria-expanded': false,
          'aria-selected': false
        });
      }

      /**
       * Destroys an instance of an accordion.
       * @fires Accordion#destroyed
       * @function
       */
    }, {
      key: 'destroy',
      value: function destroy() {
        this.$element.find('[data-tab-content]').stop(true).slideUp(0).css('display', '');
        this.$element.find('a').off('.zf.accordion');

        Foundation.unregisterPlugin(this);
      }
    }]);

    return Accordion;
  })();

  Accordion.defaults = {
    /**
     * Amount of time to animate the opening of an accordion pane.
     * @option
     * @example 250
     */
    slideSpeed: 250,
    /**
     * Allow the accordion to have multiple open panes.
     * @option
     * @example false
     */
    multiExpand: false,
    /**
     * Allow the accordion to close all panes.
     * @option
     * @example false
     */
    allowAllClosed: false
  };

  // Window exports
  Foundation.plugin(Accordion, 'Accordion');
})(jQuery);
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

!(function ($) {

  /**
   * AccordionMenu module.
   * @module foundation.accordionMenu
   * @requires foundation.util.keyboard
   * @requires foundation.util.motion
   * @requires foundation.util.nest
   */

  var AccordionMenu = (function () {
    /**
     * Creates a new instance of an accordion menu.
     * @class
     * @fires AccordionMenu#init
     * @param {jQuery} element - jQuery object to make into an accordion menu.
     * @param {Object} options - Overrides to the default plugin settings.
     */

    function AccordionMenu(element, options) {
      _classCallCheck(this, AccordionMenu);

      this.$element = element;
      this.options = $.extend({}, AccordionMenu.defaults, this.$element.data(), options);

      Foundation.Nest.Feather(this.$element, 'accordion');

      this._init();

      Foundation.registerPlugin(this, 'AccordionMenu');
      Foundation.Keyboard.register('AccordionMenu', {
        'ENTER': 'toggle',
        'SPACE': 'toggle',
        'ARROW_RIGHT': 'open',
        'ARROW_UP': 'up',
        'ARROW_DOWN': 'down',
        'ARROW_LEFT': 'close',
        'ESCAPE': 'closeAll'
      });
    }

    /**
     * Initializes the accordion menu by hiding all nested menus.
     * @private
     */

    _createClass(AccordionMenu, [{
      key: '_init',
      value: function _init() {
        this.$element.find('[data-submenu]').not('.is-active').slideUp(0); //.find('a').css('padding-left', '1rem');
        this.$element.attr({
          'role': 'menu',
          'aria-multiselectable': this.options.multiOpen
        });

        this.$menuLinks = this.$element.find('.is-accordion-submenu-parent');
        this.$menuLinks.each(function () {
          var linkId = this.id || Foundation.GetYoDigits(6, 'acc-menu-link'),
              $elem = $(this),
              $sub = $elem.children('[data-submenu]'),
              subId = $sub[0].id || Foundation.GetYoDigits(6, 'acc-menu'),
              isActive = $sub.hasClass('is-active');
          $elem.attr({
            'aria-controls': subId,
            'aria-expanded': isActive,
            'role': 'menuitem',
            'id': linkId
          });
          $sub.attr({
            'aria-labelledby': linkId,
            'aria-hidden': !isActive,
            'role': 'menu',
            'id': subId
          });
        });
        var initPanes = this.$element.find('.is-active');
        if (initPanes.length) {
          var _this = this;
          initPanes.each(function () {
            _this.down($(this));
          });
        }
        this._events();
      }

      /**
       * Adds event handlers for items within the menu.
       * @private
       */
    }, {
      key: '_events',
      value: function _events() {
        var _this = this;

        this.$element.find('li').each(function () {
          var $submenu = $(this).children('[data-submenu]');

          if ($submenu.length) {
            $(this).children('a').off('click.zf.accordionMenu').on('click.zf.accordionMenu', function (e) {
              e.preventDefault();

              _this.toggle($submenu);
            });
          }
        }).on('keydown.zf.accordionmenu', function (e) {
          var $element = $(this),
              $elements = $element.parent('ul').children('li'),
              $prevElement,
              $nextElement,
              $target = $element.children('[data-submenu]');

          $elements.each(function (i) {
            if ($(this).is($element)) {
              $prevElement = $elements.eq(Math.max(0, i - 1)).find('a').first();
              $nextElement = $elements.eq(Math.min(i + 1, $elements.length - 1)).find('a').first();

              if ($(this).children('[data-submenu]:visible').length) {
                // has open sub menu
                $nextElement = $element.find('li:first-child').find('a').first();
              }
              if ($(this).is(':first-child')) {
                // is first element of sub menu
                $prevElement = $element.parents('li').first().find('a').first();
              } else if ($prevElement.parents('li').first().children('[data-submenu]:visible').length) {
                // if previous element has open sub menu
                $prevElement = $prevElement.parents('li').find('li:last-child').find('a').first();
              }
              if ($(this).is(':last-child')) {
                // is last element of sub menu
                $nextElement = $element.parents('li').first().next('li').find('a').first();
              }

              return;
            }
          });

          Foundation.Keyboard.handleKey(e, 'AccordionMenu', {
            open: function open() {
              if ($target.is(':hidden')) {
                _this.down($target);
                $target.find('li').first().find('a').first().focus();
              }
            },
            close: function close() {
              if ($target.length && !$target.is(':hidden')) {
                // close active sub of this item
                _this.up($target);
              } else if ($element.parent('[data-submenu]').length) {
                // close currently open sub
                _this.up($element.parent('[data-submenu]'));
                $element.parents('li').first().find('a').first().focus();
              }
            },
            up: function up() {
              $prevElement.focus();
              return true;
            },
            down: function down() {
              $nextElement.focus();
              return true;
            },
            toggle: function toggle() {
              if ($element.children('[data-submenu]').length) {
                _this.toggle($element.children('[data-submenu]'));
              }
            },
            closeAll: function closeAll() {
              _this.hideAll();
            },
            handled: function handled(preventDefault) {
              if (preventDefault) {
                e.preventDefault();
              }
              e.stopImmediatePropagation();
            }
          });
        }); //.attr('tabindex', 0);
      }

      /**
       * Closes all panes of the menu.
       * @function
       */
    }, {
      key: 'hideAll',
      value: function hideAll() {
        this.$element.find('[data-submenu]').slideUp(this.options.slideSpeed);
      }

      /**
       * Toggles the open/close state of a submenu.
       * @function
       * @param {jQuery} $target - the submenu to toggle
       */
    }, {
      key: 'toggle',
      value: function toggle($target) {
        if (!$target.is(':animated')) {
          if (!$target.is(':hidden')) {
            this.up($target);
          } else {
            this.down($target);
          }
        }
      }

      /**
       * Opens the sub-menu defined by `$target`.
       * @param {jQuery} $target - Sub-menu to open.
       * @fires AccordionMenu#down
       */
    }, {
      key: 'down',
      value: function down($target) {
        var _this = this;

        if (!this.options.multiOpen) {
          this.up(this.$element.find('.is-active').not($target.parentsUntil(this.$element).add($target)));
        }

        $target.addClass('is-active').attr({ 'aria-hidden': false }).parent('.is-accordion-submenu-parent').attr({ 'aria-expanded': true });

        //Foundation.Move(this.options.slideSpeed, $target, function() {
        $target.slideDown(_this.options.slideSpeed, function () {
          /**
           * Fires when the menu is done opening.
           * @event AccordionMenu#down
           */
          _this.$element.trigger('down.zf.accordionMenu', [$target]);
        });
        //});
      }

      /**
       * Closes the sub-menu defined by `$target`. All sub-menus inside the target will be closed as well.
       * @param {jQuery} $target - Sub-menu to close.
       * @fires AccordionMenu#up
       */
    }, {
      key: 'up',
      value: function up($target) {
        var _this = this;
        //Foundation.Move(this.options.slideSpeed, $target, function(){
        $target.slideUp(_this.options.slideSpeed, function () {
          /**
           * Fires when the menu is done collapsing up.
           * @event AccordionMenu#up
           */
          _this.$element.trigger('up.zf.accordionMenu', [$target]);
        });
        //});

        var $menus = $target.find('[data-submenu]').slideUp(0).addBack().attr('aria-hidden', true);

        $menus.parent('.is-accordion-submenu-parent').attr('aria-expanded', false);
      }

      /**
       * Destroys an instance of accordion menu.
       * @fires AccordionMenu#destroyed
       */
    }, {
      key: 'destroy',
      value: function destroy() {
        this.$element.find('[data-submenu]').slideDown(0).css('display', '');
        this.$element.find('a').off('click.zf.accordionMenu');

        Foundation.Nest.Burn(this.$element, 'accordion');
        Foundation.unregisterPlugin(this);
      }
    }]);

    return AccordionMenu;
  })();

  AccordionMenu.defaults = {
    /**
     * Amount of time to animate the opening of a submenu in ms.
     * @option
     * @example 250
     */
    slideSpeed: 250,
    /**
     * Allow the menu to have multiple open panes.
     * @option
     * @example true
     */
    multiOpen: true
  };

  // Window exports
  Foundation.plugin(AccordionMenu, 'AccordionMenu');
})(jQuery);
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

!(function ($) {

  /**
   * Drilldown module.
   * @module foundation.drilldown
   * @requires foundation.util.keyboard
   * @requires foundation.util.motion
   * @requires foundation.util.nest
   */

  var Drilldown = (function () {
    /**
     * Creates a new instance of a drilldown menu.
     * @class
     * @param {jQuery} element - jQuery object to make into an accordion menu.
     * @param {Object} options - Overrides to the default plugin settings.
     */

    function Drilldown(element, options) {
      _classCallCheck(this, Drilldown);

      this.$element = element;
      this.options = $.extend({}, Drilldown.defaults, this.$element.data(), options);

      Foundation.Nest.Feather(this.$element, 'drilldown');

      this._init();

      Foundation.registerPlugin(this, 'Drilldown');
      Foundation.Keyboard.register('Drilldown', {
        'ENTER': 'open',
        'SPACE': 'open',
        'ARROW_RIGHT': 'next',
        'ARROW_UP': 'up',
        'ARROW_DOWN': 'down',
        'ARROW_LEFT': 'previous',
        'ESCAPE': 'close',
        'TAB': 'down',
        'SHIFT_TAB': 'up'
      });
    }

    /**
     * Initializes the drilldown by creating jQuery collections of elements
     * @private
     */

    _createClass(Drilldown, [{
      key: '_init',
      value: function _init() {
        this.$submenuAnchors = this.$element.find('li.is-drilldown-submenu-parent').children('a');
        this.$submenus = this.$submenuAnchors.parent('li').children('[data-submenu]');
        this.$menuItems = this.$element.find('li').not('.js-drilldown-back').attr('role', 'menuitem').find('a');

        this._prepareMenu();

        this._keyboardEvents();
      }

      /**
       * prepares drilldown menu by setting attributes to links and elements
       * sets a min height to prevent content jumping
       * wraps the element if not already wrapped
       * @private
       * @function
       */
    }, {
      key: '_prepareMenu',
      value: function _prepareMenu() {
        var _this = this;
        // if(!this.options.holdOpen){
        //   this._menuLinkEvents();
        // }
        this.$submenuAnchors.each(function () {
          var $link = $(this);
          var $sub = $link.parent();
          if (_this.options.parentLink) {
            $link.clone().prependTo($sub.children('[data-submenu]')).wrap('<li class="is-submenu-parent-item is-submenu-item is-drilldown-submenu-item" role="menu-item"></li>');
          }
          $link.data('savedHref', $link.attr('href')).removeAttr('href').attr('tabindex', 0);
          $link.children('[data-submenu]').attr({
            'aria-hidden': true,
            'tabindex': 0,
            'role': 'menu'
          });
          _this._events($link);
        });
        this.$submenus.each(function () {
          var $menu = $(this),
              $back = $menu.find('.js-drilldown-back');
          if (!$back.length) {
            $menu.prepend(_this.options.backButton);
          }
          _this._back($menu);
        });
        if (!this.$element.parent().hasClass('is-drilldown')) {
          this.$wrapper = $(this.options.wrapper).addClass('is-drilldown');
          this.$wrapper = this.$element.wrap(this.$wrapper).parent().css(this._getMaxDims());
        }
      }

      /**
       * Adds event handlers to elements in the menu.
       * @function
       * @private
       * @param {jQuery} $elem - the current menu item to add handlers to.
       */
    }, {
      key: '_events',
      value: function _events($elem) {
        var _this = this;

        $elem.off('click.zf.drilldown').on('click.zf.drilldown', function (e) {
          if ($(e.target).parentsUntil('ul', 'li').hasClass('is-drilldown-submenu-parent')) {
            e.stopImmediatePropagation();
            e.preventDefault();
          }

          // if(e.target !== e.currentTarget.firstElementChild){
          //   return false;
          // }
          _this._show($elem.parent('li'));

          if (_this.options.closeOnClick) {
            var $body = $('body');
            $body.off('.zf.drilldown').on('click.zf.drilldown', function (e) {
              if (e.target === _this.$element[0] || $.contains(_this.$element[0], e.target)) {
                return;
              }
              e.preventDefault();
              _this._hideAll();
              $body.off('.zf.drilldown');
            });
          }
        });
      }

      /**
       * Adds keydown event listener to `li`'s in the menu.
       * @private
       */
    }, {
      key: '_keyboardEvents',
      value: function _keyboardEvents() {
        var _this = this;

        this.$menuItems.add(this.$element.find('.js-drilldown-back > a')).on('keydown.zf.drilldown', function (e) {

          var $element = $(this),
              $elements = $element.parent('li').parent('ul').children('li').children('a'),
              $prevElement,
              $nextElement;

          $elements.each(function (i) {
            if ($(this).is($element)) {
              $prevElement = $elements.eq(Math.max(0, i - 1));
              $nextElement = $elements.eq(Math.min(i + 1, $elements.length - 1));
              return;
            }
          });

          Foundation.Keyboard.handleKey(e, 'Drilldown', {
            next: function next() {
              if ($element.is(_this.$submenuAnchors)) {
                _this._show($element.parent('li'));
                $element.parent('li').one(Foundation.transitionend($element), function () {
                  $element.parent('li').find('ul li a').filter(_this.$menuItems).first().focus();
                });
                return true;
              }
            },
            previous: function previous() {
              _this._hide($element.parent('li').parent('ul'));
              $element.parent('li').parent('ul').one(Foundation.transitionend($element), function () {
                setTimeout(function () {
                  $element.parent('li').parent('ul').parent('li').children('a').first().focus();
                }, 1);
              });
              return true;
            },
            up: function up() {
              $prevElement.focus();
              return true;
            },
            down: function down() {
              $nextElement.focus();
              return true;
            },
            close: function close() {
              _this._back();
              //_this.$menuItems.first().focus(); // focus to first element
            },
            open: function open() {
              if (!$element.is(_this.$menuItems)) {
                // not menu item means back button
                _this._hide($element.parent('li').parent('ul'));
                $element.parent('li').parent('ul').one(Foundation.transitionend($element), function () {
                  setTimeout(function () {
                    $element.parent('li').parent('ul').parent('li').children('a').first().focus();
                  }, 1);
                });
                return true;
              } else if ($element.is(_this.$submenuAnchors)) {
                _this._show($element.parent('li'));
                $element.parent('li').one(Foundation.transitionend($element), function () {
                  $element.parent('li').find('ul li a').filter(_this.$menuItems).first().focus();
                });
                return true;
              }
            },
            handled: function handled(preventDefault) {
              if (preventDefault) {
                e.preventDefault();
              }
              e.stopImmediatePropagation();
            }
          });
        }); // end keyboardAccess
      }

      /**
       * Closes all open elements, and returns to root menu.
       * @function
       * @fires Drilldown#closed
       */
    }, {
      key: '_hideAll',
      value: function _hideAll() {
        var $elem = this.$element.find('.is-drilldown-submenu.is-active').addClass('is-closing');
        $elem.one(Foundation.transitionend($elem), function (e) {
          $elem.removeClass('is-active is-closing');
        });
        /**
         * Fires when the menu is fully closed.
         * @event Drilldown#closed
         */
        this.$element.trigger('closed.zf.drilldown');
      }

      /**
       * Adds event listener for each `back` button, and closes open menus.
       * @function
       * @fires Drilldown#back
       * @param {jQuery} $elem - the current sub-menu to add `back` event.
       */
    }, {
      key: '_back',
      value: function _back($elem) {
        var _this = this;
        $elem.off('click.zf.drilldown');
        $elem.children('.js-drilldown-back').on('click.zf.drilldown', function (e) {
          e.stopImmediatePropagation();
          // console.log('mouseup on back');
          _this._hide($elem);

          // If there is a parent submenu, call show
          var parentSubMenu = $elem.parent('li').parent('ul').parent('li');
          if (parentSubMenu.length) {
            _this._show(parentSubMenu);
          }
        });
      }

      /**
       * Adds event listener to menu items w/o submenus to close open menus on click.
       * @function
       * @private
       */
    }, {
      key: '_menuLinkEvents',
      value: function _menuLinkEvents() {
        var _this = this;
        this.$menuItems.not('.is-drilldown-submenu-parent').off('click.zf.drilldown').on('click.zf.drilldown', function (e) {
          // e.stopImmediatePropagation();
          setTimeout(function () {
            _this._hideAll();
          }, 0);
        });
      }

      /**
       * Opens a submenu.
       * @function
       * @fires Drilldown#open
       * @param {jQuery} $elem - the current element with a submenu to open, i.e. the `li` tag.
       */
    }, {
      key: '_show',
      value: function _show($elem) {
        $elem.attr('aria-expanded', true);
        $elem.children('[data-submenu]').addClass('is-active').attr('aria-hidden', false);
        /**
         * Fires when the submenu has opened.
         * @event Drilldown#open
         */
        this.$element.trigger('open.zf.drilldown', [$elem]);
      }
    }, {
      key: '_hide',

      /**
       * Hides a submenu
       * @function
       * @fires Drilldown#hide
       * @param {jQuery} $elem - the current sub-menu to hide, i.e. the `ul` tag.
       */
      value: function _hide($elem) {
        var _this = this;
        $elem.parent('li').attr('aria-expanded', false);
        $elem.attr('aria-hidden', true).addClass('is-closing').one(Foundation.transitionend($elem), function () {
          $elem.removeClass('is-active is-closing');
          $elem.blur();
        });
        /**
         * Fires when the submenu has closed.
         * @event Drilldown#hide
         */
        $elem.trigger('hide.zf.drilldown', [$elem]);
      }

      /**
       * Iterates through the nested menus to calculate the min-height, and max-width for the menu.
       * Prevents content jumping.
       * @function
       * @private
       */
    }, {
      key: '_getMaxDims',
      value: function _getMaxDims() {
        var biggest = 0;
        var result = {};

        this.$submenus.add(this.$element).each(function (i, elem) {
          var height = elem.getBoundingClientRect().height;
          if (height > biggest) biggest = height;
        });

        result['min-height'] = biggest + 'px';
        result['max-width'] = this.$element[0].getBoundingClientRect().width + 'px';

        return result;
      }

      /**
       * Destroys the Drilldown Menu
       * @function
       */
    }, {
      key: 'destroy',
      value: function destroy() {
        this._hideAll();
        Foundation.Nest.Burn(this.$element, 'drilldown');
        this.$element.unwrap().find('.js-drilldown-back, .is-submenu-parent-item').remove().end().find('.is-active, .is-closing, .is-drilldown-submenu').removeClass('is-active is-closing is-drilldown-submenu').end().find('[data-submenu]').removeAttr('aria-hidden tabindex role');
        this.$submenuAnchors.each(function () {
          $(this).off('.zf.drilldown');
        });
        this.$element.find('a').each(function () {
          var $link = $(this);
          $link.removeAttr('tabindex');
          if ($link.data('savedHref')) {
            $link.attr('href', $link.data('savedHref')).removeData('savedHref');
          } else {
            return;
          }
        });
        Foundation.unregisterPlugin(this);
      }
    }]);

    return Drilldown;
  })();

  Drilldown.defaults = {
    /**
     * Markup used for JS generated back button. Prepended to submenu lists and deleted on `destroy` method, 'js-drilldown-back' class required. Remove the backslash (`\`) if copy and pasting.
     * @option
     * @example '<\li><\a>Back<\/a><\/li>'
     */
    backButton: '<li class="js-drilldown-back"><a tabindex="0">Back</a></li>',
    /**
     * Markup used to wrap drilldown menu. Use a class name for independent styling; the JS applied class: `is-drilldown` is required. Remove the backslash (`\`) if copy and pasting.
     * @option
     * @example '<\div class="is-drilldown"><\/div>'
     */
    wrapper: '<div></div>',
    /**
     * Adds the parent link to the submenu.
     * @option
     * @example false
     */
    parentLink: false,
    /**
     * Allow the menu to return to root list on body click.
     * @option
     * @example false
     */
    closeOnClick: false
    // holdOpen: false
  };

  // Window exports
  Foundation.plugin(Drilldown, 'Drilldown');
})(jQuery);
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

!(function ($) {

  /**
   * Dropdown module.
   * @module foundation.dropdown
   * @requires foundation.util.keyboard
   * @requires foundation.util.box
   * @requires foundation.util.triggers
   */

  var Dropdown = (function () {
    /**
     * Creates a new instance of a dropdown.
     * @class
     * @param {jQuery} element - jQuery object to make into a dropdown.
     *        Object should be of the dropdown panel, rather than its anchor.
     * @param {Object} options - Overrides to the default plugin settings.
     */

    function Dropdown(element, options) {
      _classCallCheck(this, Dropdown);

      this.$element = element;
      this.options = $.extend({}, Dropdown.defaults, this.$element.data(), options);
      this._init();

      Foundation.registerPlugin(this, 'Dropdown');
      Foundation.Keyboard.register('Dropdown', {
        'ENTER': 'open',
        'SPACE': 'open',
        'ESCAPE': 'close',
        'TAB': 'tab_forward',
        'SHIFT_TAB': 'tab_backward'
      });
    }

    /**
     * Initializes the plugin by setting/checking options and attributes, adding helper variables, and saving the anchor.
     * @function
     * @private
     */

    _createClass(Dropdown, [{
      key: '_init',
      value: function _init() {
        var $id = this.$element.attr('id');

        this.$anchor = $('[data-toggle="' + $id + '"]').length ? $('[data-toggle="' + $id + '"]') : $('[data-open="' + $id + '"]');
        this.$anchor.attr({
          'aria-controls': $id,
          'data-is-focus': false,
          'data-yeti-box': $id,
          'aria-haspopup': true,
          'aria-expanded': false

        });

        this.options.positionClass = this.getPositionClass();
        this.counter = 4;
        this.usedPositions = [];
        this.$element.attr({
          'aria-hidden': 'true',
          'data-yeti-box': $id,
          'data-resize': $id,
          'aria-labelledby': this.$anchor[0].id || Foundation.GetYoDigits(6, 'dd-anchor')
        });
        this._events();
      }

      /**
       * Helper function to determine current orientation of dropdown pane.
       * @function
       * @returns {String} position - string value of a position class.
       */
    }, {
      key: 'getPositionClass',
      value: function getPositionClass() {
        var verticalPosition = this.$element[0].className.match(/(top|left|right|bottom)/g);
        verticalPosition = verticalPosition ? verticalPosition[0] : '';
        var horizontalPosition = /float-(\S+)/.exec(this.$anchor[0].className);
        horizontalPosition = horizontalPosition ? horizontalPosition[1] : '';
        var position = horizontalPosition ? horizontalPosition + ' ' + verticalPosition : verticalPosition;

        return position;
      }

      /**
       * Adjusts the dropdown panes orientation by adding/removing positioning classes.
       * @function
       * @private
       * @param {String} position - position class to remove.
       */
    }, {
      key: '_reposition',
      value: function _reposition(position) {
        this.usedPositions.push(position ? position : 'bottom');
        //default, try switching to opposite side
        if (!position && this.usedPositions.indexOf('top') < 0) {
          this.$element.addClass('top');
        } else if (position === 'top' && this.usedPositions.indexOf('bottom') < 0) {
          this.$element.removeClass(position);
        } else if (position === 'left' && this.usedPositions.indexOf('right') < 0) {
          this.$element.removeClass(position).addClass('right');
        } else if (position === 'right' && this.usedPositions.indexOf('left') < 0) {
          this.$element.removeClass(position).addClass('left');
        }

        //if default change didn't work, try bottom or left first
        else if (!position && this.usedPositions.indexOf('top') > -1 && this.usedPositions.indexOf('left') < 0) {
            this.$element.addClass('left');
          } else if (position === 'top' && this.usedPositions.indexOf('bottom') > -1 && this.usedPositions.indexOf('left') < 0) {
            this.$element.removeClass(position).addClass('left');
          } else if (position === 'left' && this.usedPositions.indexOf('right') > -1 && this.usedPositions.indexOf('bottom') < 0) {
            this.$element.removeClass(position);
          } else if (position === 'right' && this.usedPositions.indexOf('left') > -1 && this.usedPositions.indexOf('bottom') < 0) {
            this.$element.removeClass(position);
          }
          //if nothing cleared, set to bottom
          else {
              this.$element.removeClass(position);
            }
        this.classChanged = true;
        this.counter--;
      }

      /**
       * Sets the position and orientation of the dropdown pane, checks for collisions.
       * Recursively calls itself if a collision is detected, with a new position class.
       * @function
       * @private
       */
    }, {
      key: '_setPosition',
      value: function _setPosition() {
        if (this.$anchor.attr('aria-expanded') === 'false') {
          return false;
        }
        var position = this.getPositionClass(),
            $eleDims = Foundation.Box.GetDimensions(this.$element),
            $anchorDims = Foundation.Box.GetDimensions(this.$anchor),
            _this = this,
            direction = position === 'left' ? 'left' : position === 'right' ? 'left' : 'top',
            param = direction === 'top' ? 'height' : 'width',
            offset = param === 'height' ? this.options.vOffset : this.options.hOffset;

        if ($eleDims.width >= $eleDims.windowDims.width || !this.counter && !Foundation.Box.ImNotTouchingYou(this.$element)) {
          this.$element.offset(Foundation.Box.GetOffsets(this.$element, this.$anchor, 'center bottom', this.options.vOffset, this.options.hOffset, true)).css({
            'width': $eleDims.windowDims.width - this.options.hOffset * 2,
            'height': 'auto'
          });
          this.classChanged = true;
          return false;
        }

        this.$element.offset(Foundation.Box.GetOffsets(this.$element, this.$anchor, position, this.options.vOffset, this.options.hOffset));

        while (!Foundation.Box.ImNotTouchingYou(this.$element, false, true) && this.counter) {
          this._reposition(position);
          this._setPosition();
        }
      }

      /**
       * Adds event listeners to the element utilizing the triggers utility library.
       * @function
       * @private
       */
    }, {
      key: '_events',
      value: function _events() {
        var _this = this;
        this.$element.on({
          'open.zf.trigger': this.open.bind(this),
          'close.zf.trigger': this.close.bind(this),
          'toggle.zf.trigger': this.toggle.bind(this),
          'resizeme.zf.trigger': this._setPosition.bind(this)
        });

        if (this.options.hover) {
          this.$anchor.off('mouseenter.zf.dropdown mouseleave.zf.dropdown').on('mouseenter.zf.dropdown', function () {
            if ($('body[data-whatinput="mouse"]').is('*')) {
              clearTimeout(_this.timeout);
              _this.timeout = setTimeout(function () {
                _this.open();
                _this.$anchor.data('hover', true);
              }, _this.options.hoverDelay);
            }
          }).on('mouseleave.zf.dropdown', function () {
            clearTimeout(_this.timeout);
            _this.timeout = setTimeout(function () {
              _this.close();
              _this.$anchor.data('hover', false);
            }, _this.options.hoverDelay);
          });
          if (this.options.hoverPane) {
            this.$element.off('mouseenter.zf.dropdown mouseleave.zf.dropdown').on('mouseenter.zf.dropdown', function () {
              clearTimeout(_this.timeout);
            }).on('mouseleave.zf.dropdown', function () {
              clearTimeout(_this.timeout);
              _this.timeout = setTimeout(function () {
                _this.close();
                _this.$anchor.data('hover', false);
              }, _this.options.hoverDelay);
            });
          }
        }
        this.$anchor.add(this.$element).on('keydown.zf.dropdown', function (e) {

          var $target = $(this),
              visibleFocusableElements = Foundation.Keyboard.findFocusable(_this.$element);

          Foundation.Keyboard.handleKey(e, 'Dropdown', {
            tab_forward: function tab_forward() {
              if (_this.$element.find(':focus').is(visibleFocusableElements.eq(-1))) {
                // left modal downwards, setting focus to first element
                if (_this.options.trapFocus) {
                  // if focus shall be trapped
                  visibleFocusableElements.eq(0).focus();
                  e.preventDefault();
                } else {
                  // if focus is not trapped, close dropdown on focus out
                  _this.close();
                }
              }
            },
            tab_backward: function tab_backward() {
              if (_this.$element.find(':focus').is(visibleFocusableElements.eq(0)) || _this.$element.is(':focus')) {
                // left modal upwards, setting focus to last element
                if (_this.options.trapFocus) {
                  // if focus shall be trapped
                  visibleFocusableElements.eq(-1).focus();
                  e.preventDefault();
                } else {
                  // if focus is not trapped, close dropdown on focus out
                  _this.close();
                }
              }
            },
            open: function open() {
              if ($target.is(_this.$anchor)) {
                _this.open();
                _this.$element.attr('tabindex', -1).focus();
                e.preventDefault();
              }
            },
            close: function close() {
              _this.close();
              _this.$anchor.focus();
            }
          });
        });
      }

      /**
       * Adds an event handler to the body to close any dropdowns on a click.
       * @function
       * @private
       */
    }, {
      key: '_addBodyHandler',
      value: function _addBodyHandler() {
        var $body = $(document.body).not(this.$element),
            _this = this;
        $body.off('click.zf.dropdown').on('click.zf.dropdown', function (e) {
          if (_this.$anchor.is(e.target) || _this.$anchor.find(e.target).length) {
            return;
          }
          if (_this.$element.find(e.target).length) {
            return;
          }
          _this.close();
          $body.off('click.zf.dropdown');
        });
      }

      /**
       * Opens the dropdown pane, and fires a bubbling event to close other dropdowns.
       * @function
       * @fires Dropdown#closeme
       * @fires Dropdown#show
       */
    }, {
      key: 'open',
      value: function open() {
        // var _this = this;
        /**
         * Fires to close other open dropdowns
         * @event Dropdown#closeme
         */
        this.$element.trigger('closeme.zf.dropdown', this.$element.attr('id'));
        this.$anchor.addClass('hover').attr({ 'aria-expanded': true });
        // this.$element/*.show()*/;
        this._setPosition();
        this.$element.addClass('is-open').attr({ 'aria-hidden': false });

        if (this.options.autoFocus) {
          var $focusable = Foundation.Keyboard.findFocusable(this.$element);
          if ($focusable.length) {
            $focusable.eq(0).focus();
          }
        }

        if (this.options.closeOnClick) {
          this._addBodyHandler();
        }

        /**
         * Fires once the dropdown is visible.
         * @event Dropdown#show
         */
        this.$element.trigger('show.zf.dropdown', [this.$element]);
      }

      /**
       * Closes the open dropdown pane.
       * @function
       * @fires Dropdown#hide
       */
    }, {
      key: 'close',
      value: function close() {
        if (!this.$element.hasClass('is-open')) {
          return false;
        }
        this.$element.removeClass('is-open').attr({ 'aria-hidden': true });

        this.$anchor.removeClass('hover').attr('aria-expanded', false);

        if (this.classChanged) {
          var curPositionClass = this.getPositionClass();
          if (curPositionClass) {
            this.$element.removeClass(curPositionClass);
          }
          this.$element.addClass(this.options.positionClass)
          /*.hide()*/.css({ height: '', width: '' });
          this.classChanged = false;
          this.counter = 4;
          this.usedPositions.length = 0;
        }
        this.$element.trigger('hide.zf.dropdown', [this.$element]);
      }

      /**
       * Toggles the dropdown pane's visibility.
       * @function
       */
    }, {
      key: 'toggle',
      value: function toggle() {
        if (this.$element.hasClass('is-open')) {
          if (this.$anchor.data('hover')) return;
          this.close();
        } else {
          this.open();
        }
      }

      /**
       * Destroys the dropdown.
       * @function
       */
    }, {
      key: 'destroy',
      value: function destroy() {
        this.$element.off('.zf.trigger').hide();
        this.$anchor.off('.zf.dropdown');

        Foundation.unregisterPlugin(this);
      }
    }]);

    return Dropdown;
  })();

  Dropdown.defaults = {
    /**
     * Amount of time to delay opening a submenu on hover event.
     * @option
     * @example 250
     */
    hoverDelay: 250,
    /**
     * Allow submenus to open on hover events
     * @option
     * @example false
     */
    hover: false,
    /**
     * Don't close dropdown when hovering over dropdown pane
     * @option
     * @example true
     */
    hoverPane: false,
    /**
     * Number of pixels between the dropdown pane and the triggering element on open.
     * @option
     * @example 1
     */
    vOffset: 1,
    /**
     * Number of pixels between the dropdown pane and the triggering element on open.
     * @option
     * @example 1
     */
    hOffset: 1,
    /**
     * Class applied to adjust open position. JS will test and fill this in.
     * @option
     * @example 'top'
     */
    positionClass: '',
    /**
     * Allow the plugin to trap focus to the dropdown pane if opened with keyboard commands.
     * @option
     * @example false
     */
    trapFocus: false,
    /**
     * Allow the plugin to set focus to the first focusable element within the pane, regardless of method of opening.
     * @option
     * @example true
     */
    autoFocus: false,
    /**
     * Allows a click on the body to close the dropdown.
     * @option
     * @example false
     */
    closeOnClick: false
  };

  // Window exports
  Foundation.plugin(Dropdown, 'Dropdown');
})(jQuery);
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

!(function ($) {

  /**
   * DropdownMenu module.
   * @module foundation.dropdown-menu
   * @requires foundation.util.keyboard
   * @requires foundation.util.box
   * @requires foundation.util.nest
   */

  var DropdownMenu = (function () {
    /**
     * Creates a new instance of DropdownMenu.
     * @class
     * @fires DropdownMenu#init
     * @param {jQuery} element - jQuery object to make into a dropdown menu.
     * @param {Object} options - Overrides to the default plugin settings.
     */

    function DropdownMenu(element, options) {
      _classCallCheck(this, DropdownMenu);

      this.$element = element;
      this.options = $.extend({}, DropdownMenu.defaults, this.$element.data(), options);

      Foundation.Nest.Feather(this.$element, 'dropdown');
      this._init();

      Foundation.registerPlugin(this, 'DropdownMenu');
      Foundation.Keyboard.register('DropdownMenu', {
        'ENTER': 'open',
        'SPACE': 'open',
        'ARROW_RIGHT': 'next',
        'ARROW_UP': 'up',
        'ARROW_DOWN': 'down',
        'ARROW_LEFT': 'previous',
        'ESCAPE': 'close'
      });
    }

    /**
     * Default settings for plugin
     */

    /**
     * Initializes the plugin, and calls _prepareMenu
     * @private
     * @function
     */

    _createClass(DropdownMenu, [{
      key: '_init',
      value: function _init() {
        var subs = this.$element.find('li.is-dropdown-submenu-parent');
        this.$element.children('.is-dropdown-submenu-parent').children('.is-dropdown-submenu').addClass('first-sub');

        this.$menuItems = this.$element.find('[role="menuitem"]');
        this.$tabs = this.$element.children('[role="menuitem"]');
        this.$tabs.find('ul.is-dropdown-submenu').addClass(this.options.verticalClass);

        if (this.$element.hasClass(this.options.rightClass) || this.options.alignment === 'right' || Foundation.rtl() || this.$element.parents('.top-bar-right').is('*')) {
          this.options.alignment = 'right';
          subs.addClass('opens-left');
        } else {
          subs.addClass('opens-right');
        }
        this.changed = false;
        this._events();
      }
    }, {
      key: '_isVertical',
      value: function _isVertical() {
        return this.$tabs.css('display') === 'block';
      }

      /**
       * Adds event listeners to elements within the menu
       * @private
       * @function
       */
    }, {
      key: '_events',
      value: function _events() {
        var _this = this,
            hasTouch = 'ontouchstart' in window || typeof window.ontouchstart !== 'undefined',
            parClass = 'is-dropdown-submenu-parent';

        // used for onClick and in the keyboard handlers
        var handleClickFn = function handleClickFn(e) {
          var $elem = $(e.target).parentsUntil('ul', '.' + parClass),
              hasSub = $elem.hasClass(parClass),
              hasClicked = $elem.attr('data-is-click') === 'true',
              $sub = $elem.children('.is-dropdown-submenu');

          if (hasSub) {
            if (hasClicked) {
              if (!_this.options.closeOnClick || !_this.options.clickOpen && !hasTouch || _this.options.forceFollow && hasTouch) {
                return;
              } else {
                e.stopImmediatePropagation();
                e.preventDefault();
                _this._hide($elem);
              }
            } else {
              e.preventDefault();
              e.stopImmediatePropagation();
              _this._show($sub);
              $elem.add($elem.parentsUntil(_this.$element, '.' + parClass)).attr('data-is-click', true);
            }
          } else {
            if (_this.options.closeOnClickInside) {
              _this._hide($elem);
            }
            return;
          }
        };

        if (this.options.clickOpen || hasTouch) {
          this.$menuItems.on('click.zf.dropdownmenu touchstart.zf.dropdownmenu', handleClickFn);
        }

        if (!this.options.disableHover) {
          this.$menuItems.on('mouseenter.zf.dropdownmenu', function (e) {
            var $elem = $(this),
                hasSub = $elem.hasClass(parClass);

            if (hasSub) {
              clearTimeout(_this.delay);
              _this.delay = setTimeout(function () {
                _this._show($elem.children('.is-dropdown-submenu'));
              }, _this.options.hoverDelay);
            }
          }).on('mouseleave.zf.dropdownmenu', function (e) {
            var $elem = $(this),
                hasSub = $elem.hasClass(parClass);
            if (hasSub && _this.options.autoclose) {
              if ($elem.attr('data-is-click') === 'true' && _this.options.clickOpen) {
                return false;
              }

              clearTimeout(_this.delay);
              _this.delay = setTimeout(function () {
                _this._hide($elem);
              }, _this.options.closingTime);
            }
          });
        }
        this.$menuItems.on('keydown.zf.dropdownmenu', function (e) {
          var $element = $(e.target).parentsUntil('ul', '[role="menuitem"]'),
              isTab = _this.$tabs.index($element) > -1,
              $elements = isTab ? _this.$tabs : $element.siblings('li').add($element),
              $prevElement,
              $nextElement;

          $elements.each(function (i) {
            if ($(this).is($element)) {
              $prevElement = $elements.eq(i - 1);
              $nextElement = $elements.eq(i + 1);
              return;
            }
          });

          var nextSibling = function nextSibling() {
            if (!$element.is(':last-child')) {
              $nextElement.children('a:first').focus();
              e.preventDefault();
            }
          },
              prevSibling = function prevSibling() {
            $prevElement.children('a:first').focus();
            e.preventDefault();
          },
              openSub = function openSub() {
            var $sub = $element.children('ul.is-dropdown-submenu');
            if ($sub.length) {
              _this._show($sub);
              $element.find('li > a:first').focus();
              e.preventDefault();
            } else {
              return;
            }
          },
              closeSub = function closeSub() {
            //if ($element.is(':first-child')) {
            var close = $element.parent('ul').parent('li');
            close.children('a:first').focus();
            _this._hide(close);
            e.preventDefault();
            //}
          };
          var functions = {
            open: openSub,
            close: function close() {
              _this._hide(_this.$element);
              _this.$menuItems.find('a:first').focus(); // focus to first element
              e.preventDefault();
            },
            handled: function handled() {
              e.stopImmediatePropagation();
            }
          };

          if (isTab) {
            if (_this._isVertical()) {
              // vertical menu
              if (Foundation.rtl()) {
                // right aligned
                $.extend(functions, {
                  down: nextSibling,
                  up: prevSibling,
                  next: closeSub,
                  previous: openSub
                });
              } else {
                // left aligned
                $.extend(functions, {
                  down: nextSibling,
                  up: prevSibling,
                  next: openSub,
                  previous: closeSub
                });
              }
            } else {
              // horizontal menu
              if (Foundation.rtl()) {
                // right aligned
                $.extend(functions, {
                  next: prevSibling,
                  previous: nextSibling,
                  down: openSub,
                  up: closeSub
                });
              } else {
                // left aligned
                $.extend(functions, {
                  next: nextSibling,
                  previous: prevSibling,
                  down: openSub,
                  up: closeSub
                });
              }
            }
          } else {
            // not tabs -> one sub
            if (Foundation.rtl()) {
              // right aligned
              $.extend(functions, {
                next: closeSub,
                previous: openSub,
                down: nextSibling,
                up: prevSibling
              });
            } else {
              // left aligned
              $.extend(functions, {
                next: openSub,
                previous: closeSub,
                down: nextSibling,
                up: prevSibling
              });
            }
          }
          Foundation.Keyboard.handleKey(e, 'DropdownMenu', functions);
        });
      }

      /**
       * Adds an event handler to the body to close any dropdowns on a click.
       * @function
       * @private
       */
    }, {
      key: '_addBodyHandler',
      value: function _addBodyHandler() {
        var $body = $(document.body),
            _this = this;
        $body.off('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu').on('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu', function (e) {
          var $link = _this.$element.find(e.target);
          if ($link.length) {
            return;
          }

          _this._hide();
          $body.off('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu');
        });
      }

      /**
       * Opens a dropdown pane, and checks for collisions first.
       * @param {jQuery} $sub - ul element that is a submenu to show
       * @function
       * @private
       * @fires DropdownMenu#show
       */
    }, {
      key: '_show',
      value: function _show($sub) {
        var idx = this.$tabs.index(this.$tabs.filter(function (i, el) {
          return $(el).find($sub).length > 0;
        }));
        var $sibs = $sub.parent('li.is-dropdown-submenu-parent').siblings('li.is-dropdown-submenu-parent');
        this._hide($sibs, idx);
        $sub.css('visibility', 'hidden').addClass('js-dropdown-active').attr({ 'aria-hidden': false }).parent('li.is-dropdown-submenu-parent').addClass('is-active').attr({ 'aria-expanded': true });
        var clear = Foundation.Box.ImNotTouchingYou($sub, null, true);
        if (!clear) {
          var oldClass = this.options.alignment === 'left' ? '-right' : '-left',
              $parentLi = $sub.parent('.is-dropdown-submenu-parent');
          $parentLi.removeClass('opens' + oldClass).addClass('opens-' + this.options.alignment);
          clear = Foundation.Box.ImNotTouchingYou($sub, null, true);
          if (!clear) {
            $parentLi.removeClass('opens-' + this.options.alignment).addClass('opens-inner');
          }
          this.changed = true;
        }
        $sub.css('visibility', '');
        if (this.options.closeOnClick) {
          this._addBodyHandler();
        }
        /**
         * Fires when the new dropdown pane is visible.
         * @event DropdownMenu#show
         */
        this.$element.trigger('show.zf.dropdownmenu', [$sub]);
      }

      /**
       * Hides a single, currently open dropdown pane, if passed a parameter, otherwise, hides everything.
       * @function
       * @param {jQuery} $elem - element with a submenu to hide
       * @param {Number} idx - index of the $tabs collection to hide
       * @private
       */
    }, {
      key: '_hide',
      value: function _hide($elem, idx) {
        var $toClose;
        if ($elem && $elem.length) {
          $toClose = $elem;
        } else if (idx !== undefined) {
          $toClose = this.$tabs.not(function (i, el) {
            return i === idx;
          });
        } else {
          $toClose = this.$element;
        }
        var somethingToClose = $toClose.hasClass('is-active') || $toClose.find('.is-active').length > 0;

        if (somethingToClose) {
          $toClose.find('li.is-active').add($toClose).attr({
            'aria-expanded': false,
            'data-is-click': false
          }).removeClass('is-active');

          $toClose.find('ul.js-dropdown-active').attr({
            'aria-hidden': true
          }).removeClass('js-dropdown-active');

          if (this.changed || $toClose.find('opens-inner').length) {
            var oldClass = this.options.alignment === 'left' ? 'right' : 'left';
            $toClose.find('li.is-dropdown-submenu-parent').add($toClose).removeClass('opens-inner opens-' + this.options.alignment).addClass('opens-' + oldClass);
            this.changed = false;
          }
          /**
           * Fires when the open menus are closed.
           * @event DropdownMenu#hide
           */
          this.$element.trigger('hide.zf.dropdownmenu', [$toClose]);
        }
      }

      /**
       * Destroys the plugin.
       * @function
       */
    }, {
      key: 'destroy',
      value: function destroy() {
        this.$menuItems.off('.zf.dropdownmenu').removeAttr('data-is-click').removeClass('is-right-arrow is-left-arrow is-down-arrow opens-right opens-left opens-inner');
        $(document.body).off('.zf.dropdownmenu');
        Foundation.Nest.Burn(this.$element, 'dropdown');
        Foundation.unregisterPlugin(this);
      }
    }]);

    return DropdownMenu;
  })();

  DropdownMenu.defaults = {
    /**
     * Disallows hover events from opening submenus
     * @option
     * @example false
     */
    disableHover: false,
    /**
     * Allow a submenu to automatically close on a mouseleave event, if not clicked open.
     * @option
     * @example true
     */
    autoclose: true,
    /**
     * Amount of time to delay opening a submenu on hover event.
     * @option
     * @example 50
     */
    hoverDelay: 50,
    /**
     * Allow a submenu to open/remain open on parent click event. Allows cursor to move away from menu.
     * @option
     * @example true
     */
    clickOpen: false,
    /**
     * Amount of time to delay closing a submenu on a mouseleave event.
     * @option
     * @example 500
     */

    closingTime: 500,
    /**
     * Position of the menu relative to what direction the submenus should open. Handled by JS.
     * @option
     * @example 'left'
     */
    alignment: 'left',
    /**
     * Allow clicks on the body to close any open submenus.
     * @option
     * @example true
     */
    closeOnClick: true,
    /**
     * Allow clicks on leaf anchor links to close any open submenus.
     * @option
     * @example true
     */
    closeOnClickInside: true,
    /**
     * Class applied to vertical oriented menus, Foundation default is `vertical`. Update this if using your own class.
     * @option
     * @example 'vertical'
     */
    verticalClass: 'vertical',
    /**
     * Class applied to right-side oriented menus, Foundation default is `align-right`. Update this if using your own class.
     * @option
     * @example 'align-right'
     */
    rightClass: 'align-right',
    /**
     * Boolean to force overide the clicking of links to perform default action, on second touch event for mobile.
     * @option
     * @example false
     */
    forceFollow: true
  };

  // Window exports
  Foundation.plugin(DropdownMenu, 'DropdownMenu');
})(jQuery);
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

!(function ($) {

  /**
   * Equalizer module.
   * @module foundation.equalizer
   * @requires foundation.util.mediaQuery
   * @requires foundation.util.timerAndImageLoader if equalizer contains images
   */

  var Equalizer = (function () {
    /**
     * Creates a new instance of Equalizer.
     * @class
     * @fires Equalizer#init
     * @param {Object} element - jQuery object to add the trigger to.
     * @param {Object} options - Overrides to the default plugin settings.
     */

    function Equalizer(element, options) {
      _classCallCheck(this, Equalizer);

      this.$element = element;
      this.options = $.extend({}, Equalizer.defaults, this.$element.data(), options);

      this._init();

      Foundation.registerPlugin(this, 'Equalizer');
    }

    /**
     * Default settings for plugin
     */

    /**
     * Initializes the Equalizer plugin and calls functions to get equalizer functioning on load.
     * @private
     */

    _createClass(Equalizer, [{
      key: '_init',
      value: function _init() {
        var eqId = this.$element.attr('data-equalizer') || '';
        var $watched = this.$element.find('[data-equalizer-watch="' + eqId + '"]');

        this.$watched = $watched.length ? $watched : this.$element.find('[data-equalizer-watch]');
        this.$element.attr('data-resize', eqId || Foundation.GetYoDigits(6, 'eq'));

        this.hasNested = this.$element.find('[data-equalizer]').length > 0;
        this.isNested = this.$element.parentsUntil(document.body, '[data-equalizer]').length > 0;
        this.isOn = false;
        this._bindHandler = {
          onResizeMeBound: this._onResizeMe.bind(this),
          onPostEqualizedBound: this._onPostEqualized.bind(this)
        };

        var imgs = this.$element.find('img');
        var tooSmall;
        if (this.options.equalizeOn) {
          tooSmall = this._checkMQ();
          $(window).on('changed.zf.mediaquery', this._checkMQ.bind(this));
        } else {
          this._events();
        }
        if (tooSmall !== undefined && tooSmall === false || tooSmall === undefined) {
          if (imgs.length) {
            Foundation.onImagesLoaded(imgs, this._reflow.bind(this));
          } else {
            this._reflow();
          }
        }
      }

      /**
       * Removes event listeners if the breakpoint is too small.
       * @private
       */
    }, {
      key: '_pauseEvents',
      value: function _pauseEvents() {
        this.isOn = false;
        this.$element.off({
          '.zf.equalizer': this._bindHandler.onPostEqualizedBound,
          'resizeme.zf.trigger': this._bindHandler.onResizeMeBound
        });
      }

      /**
       * function to handle $elements resizeme.zf.trigger, with bound this on _bindHandler.onResizeMeBound
       * @private
       */
    }, {
      key: '_onResizeMe',
      value: function _onResizeMe(e) {
        this._reflow();
      }

      /**
       * function to handle $elements postequalized.zf.equalizer, with bound this on _bindHandler.onPostEqualizedBound
       * @private
       */
    }, {
      key: '_onPostEqualized',
      value: function _onPostEqualized(e) {
        if (e.target !== this.$element[0]) {
          this._reflow();
        }
      }

      /**
       * Initializes events for Equalizer.
       * @private
       */
    }, {
      key: '_events',
      value: function _events() {
        var _this = this;
        this._pauseEvents();
        if (this.hasNested) {
          this.$element.on('postequalized.zf.equalizer', this._bindHandler.onPostEqualizedBound);
        } else {
          this.$element.on('resizeme.zf.trigger', this._bindHandler.onResizeMeBound);
        }
        this.isOn = true;
      }

      /**
       * Checks the current breakpoint to the minimum required size.
       * @private
       */
    }, {
      key: '_checkMQ',
      value: function _checkMQ() {
        var tooSmall = !Foundation.MediaQuery.atLeast(this.options.equalizeOn);
        if (tooSmall) {
          if (this.isOn) {
            this._pauseEvents();
            this.$watched.css('height', 'auto');
          }
        } else {
          if (!this.isOn) {
            this._events();
          }
        }
        return tooSmall;
      }

      /**
       * A noop version for the plugin
       * @private
       */
    }, {
      key: '_killswitch',
      value: function _killswitch() {
        return;
      }

      /**
       * Calls necessary functions to update Equalizer upon DOM change
       * @private
       */
    }, {
      key: '_reflow',
      value: function _reflow() {
        if (!this.options.equalizeOnStack) {
          if (this._isStacked()) {
            this.$watched.css('height', 'auto');
            return false;
          }
        }
        if (this.options.equalizeByRow) {
          this.getHeightsByRow(this.applyHeightByRow.bind(this));
        } else {
          this.getHeights(this.applyHeight.bind(this));
        }
      }

      /**
       * Manually determines if the first 2 elements are *NOT* stacked.
       * @private
       */
    }, {
      key: '_isStacked',
      value: function _isStacked() {
        return this.$watched[0].getBoundingClientRect().top !== this.$watched[1].getBoundingClientRect().top;
      }

      /**
       * Finds the outer heights of children contained within an Equalizer parent and returns them in an array
       * @param {Function} cb - A non-optional callback to return the heights array to.
       * @returns {Array} heights - An array of heights of children within Equalizer container
       */
    }, {
      key: 'getHeights',
      value: function getHeights(cb) {
        var heights = [];
        for (var i = 0, len = this.$watched.length; i < len; i++) {
          this.$watched[i].style.height = 'auto';
          heights.push(this.$watched[i].offsetHeight);
        }
        cb(heights);
      }

      /**
       * Finds the outer heights of children contained within an Equalizer parent and returns them in an array
       * @param {Function} cb - A non-optional callback to return the heights array to.
       * @returns {Array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child
       */
    }, {
      key: 'getHeightsByRow',
      value: function getHeightsByRow(cb) {
        var lastElTopOffset = this.$watched.length ? this.$watched.first().offset().top : 0,
            groups = [],
            group = 0;
        //group by Row
        groups[group] = [];
        for (var i = 0, len = this.$watched.length; i < len; i++) {
          this.$watched[i].style.height = 'auto';
          //maybe could use this.$watched[i].offsetTop
          var elOffsetTop = $(this.$watched[i]).offset().top;
          if (elOffsetTop != lastElTopOffset) {
            group++;
            groups[group] = [];
            lastElTopOffset = elOffsetTop;
          }
          groups[group].push([this.$watched[i], this.$watched[i].offsetHeight]);
        }

        for (var j = 0, ln = groups.length; j < ln; j++) {
          var heights = $(groups[j]).map(function () {
            return this[1];
          }).get();
          var max = Math.max.apply(null, heights);
          groups[j].push(max);
        }
        cb(groups);
      }

      /**
       * Changes the CSS height property of each child in an Equalizer parent to match the tallest
       * @param {array} heights - An array of heights of children within Equalizer container
       * @fires Equalizer#preequalized
       * @fires Equalizer#postequalized
       */
    }, {
      key: 'applyHeight',
      value: function applyHeight(heights) {
        var max = Math.max.apply(null, heights);
        /**
         * Fires before the heights are applied
         * @event Equalizer#preequalized
         */
        this.$element.trigger('preequalized.zf.equalizer');

        this.$watched.css('height', max);

        /**
         * Fires when the heights have been applied
         * @event Equalizer#postequalized
         */
        this.$element.trigger('postequalized.zf.equalizer');
      }

      /**
       * Changes the CSS height property of each child in an Equalizer parent to match the tallest by row
       * @param {array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child
       * @fires Equalizer#preequalized
       * @fires Equalizer#preequalizedRow
       * @fires Equalizer#postequalizedRow
       * @fires Equalizer#postequalized
       */
    }, {
      key: 'applyHeightByRow',
      value: function applyHeightByRow(groups) {
        /**
         * Fires before the heights are applied
         */
        this.$element.trigger('preequalized.zf.equalizer');
        for (var i = 0, len = groups.length; i < len; i++) {
          var groupsILength = groups[i].length,
              max = groups[i][groupsILength - 1];
          if (groupsILength <= 2) {
            $(groups[i][0][0]).css({ 'height': 'auto' });
            continue;
          }
          /**
            * Fires before the heights per row are applied
            * @event Equalizer#preequalizedRow
            */
          this.$element.trigger('preequalizedrow.zf.equalizer');
          for (var j = 0, lenJ = groupsILength - 1; j < lenJ; j++) {
            $(groups[i][j][0]).css({ 'height': max });
          }
          /**
            * Fires when the heights per row have been applied
            * @event Equalizer#postequalizedRow
            */
          this.$element.trigger('postequalizedrow.zf.equalizer');
        }
        /**
         * Fires when the heights have been applied
         */
        this.$element.trigger('postequalized.zf.equalizer');
      }

      /**
       * Destroys an instance of Equalizer.
       * @function
       */
    }, {
      key: 'destroy',
      value: function destroy() {
        this._pauseEvents();
        this.$watched.css('height', 'auto');

        Foundation.unregisterPlugin(this);
      }
    }]);

    return Equalizer;
  })();

  Equalizer.defaults = {
    /**
     * Enable height equalization when stacked on smaller screens.
     * @option
     * @example true
     */
    equalizeOnStack: false,
    /**
     * Enable height equalization row by row.
     * @option
     * @example false
     */
    equalizeByRow: false,
    /**
     * String representing the minimum breakpoint size the plugin should equalize heights on.
     * @option
     * @example 'medium'
     */
    equalizeOn: ''
  };

  // Window exports
  Foundation.plugin(Equalizer, 'Equalizer');
})(jQuery);
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

!(function ($) {

  /**
   * Interchange module.
   * @module foundation.interchange
   * @requires foundation.util.mediaQuery
   * @requires foundation.util.timerAndImageLoader
   */

  var Interchange = (function () {
    /**
     * Creates a new instance of Interchange.
     * @class
     * @fires Interchange#init
     * @param {Object} element - jQuery object to add the trigger to.
     * @param {Object} options - Overrides to the default plugin settings.
     */

    function Interchange(element, options) {
      _classCallCheck(this, Interchange);

      this.$element = element;
      this.options = $.extend({}, Interchange.defaults, options);
      this.rules = [];
      this.currentPath = '';

      this._init();
      this._events();

      Foundation.registerPlugin(this, 'Interchange');
    }

    /**
     * Default settings for plugin
     */

    /**
     * Initializes the Interchange plugin and calls functions to get interchange functioning on load.
     * @function
     * @private
     */

    _createClass(Interchange, [{
      key: '_init',
      value: function _init() {
        this._addBreakpoints();
        this._generateRules();
        this._reflow();
      }

      /**
       * Initializes events for Interchange.
       * @function
       * @private
       */
    }, {
      key: '_events',
      value: function _events() {
        $(window).on('resize.zf.interchange', Foundation.util.throttle(this._reflow.bind(this), 50));
      }

      /**
       * Calls necessary functions to update Interchange upon DOM change
       * @function
       * @private
       */
    }, {
      key: '_reflow',
      value: function _reflow() {
        var match;

        // Iterate through each rule, but only save the last match
        for (var i in this.rules) {
          if (this.rules.hasOwnProperty(i)) {
            var rule = this.rules[i];

            if (window.matchMedia(rule.query).matches) {
              match = rule;
            }
          }
        }

        if (match) {
          this.replace(match.path);
        }
      }

      /**
       * Gets the Foundation breakpoints and adds them to the Interchange.SPECIAL_QUERIES object.
       * @function
       * @private
       */
    }, {
      key: '_addBreakpoints',
      value: function _addBreakpoints() {
        for (var i in Foundation.MediaQuery.queries) {
          if (Foundation.MediaQuery.queries.hasOwnProperty(i)) {
            var query = Foundation.MediaQuery.queries[i];
            Interchange.SPECIAL_QUERIES[query.name] = query.value;
          }
        }
      }

      /**
       * Checks the Interchange element for the provided media query + content pairings
       * @function
       * @private
       * @param {Object} element - jQuery object that is an Interchange instance
       * @returns {Array} scenarios - Array of objects that have 'mq' and 'path' keys with corresponding keys
       */
    }, {
      key: '_generateRules',
      value: function _generateRules(element) {
        var rulesList = [];
        var rules;

        if (this.options.rules) {
          rules = this.options.rules;
        } else {
          rules = this.$element.data('interchange').match(/\[.*?\]/g);
        }

        for (var i in rules) {
          if (rules.hasOwnProperty(i)) {
            var rule = rules[i].slice(1, -1).split(', ');
            var path = rule.slice(0, -1).join('');
            var query = rule[rule.length - 1];

            if (Interchange.SPECIAL_QUERIES[query]) {
              query = Interchange.SPECIAL_QUERIES[query];
            }

            rulesList.push({
              path: path,
              query: query
            });
          }
        }

        this.rules = rulesList;
      }

      /**
       * Update the `src` property of an image, or change the HTML of a container, to the specified path.
       * @function
       * @param {String} path - Path to the image or HTML partial.
       * @fires Interchange#replaced
       */
    }, {
      key: 'replace',
      value: function replace(path) {
        if (this.currentPath === path) return;

        var _this = this,
            trigger = 'replaced.zf.interchange';

        // Replacing images
        if (this.$element[0].nodeName === 'IMG') {
          this.$element.attr('src', path).on('load', function () {
            _this.currentPath = path;
          }).trigger(trigger);
        }
        // Replacing background images
        else if (path.match(/\.(gif|jpg|jpeg|png|svg|tiff)([?#].*)?/i)) {
            this.$element.css({ 'background-image': 'url(' + path + ')' }).trigger(trigger);
          }
          // Replacing HTML
          else {
              $.get(path, function (response) {
                _this.$element.html(response).trigger(trigger);
                $(response).foundation();
                _this.currentPath = path;
              });
            }

        /**
         * Fires when content in an Interchange element is done being loaded.
         * @event Interchange#replaced
         */
        // this.$element.trigger('replaced.zf.interchange');
      }

      /**
       * Destroys an instance of interchange.
       * @function
       */
    }, {
      key: 'destroy',
      value: function destroy() {
        //TODO this.
      }
    }]);

    return Interchange;
  })();

  Interchange.defaults = {
    /**
     * Rules to be applied to Interchange elements. Set with the `data-interchange` array notation.
     * @option
     */
    rules: null
  };

  Interchange.SPECIAL_QUERIES = {
    'landscape': 'screen and (orientation: landscape)',
    'portrait': 'screen and (orientation: portrait)',
    'retina': 'only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min--moz-device-pixel-ratio: 2), only screen and (-o-min-device-pixel-ratio: 2/1), only screen and (min-device-pixel-ratio: 2), only screen and (min-resolution: 192dpi), only screen and (min-resolution: 2dppx)'
  };

  // Window exports
  Foundation.plugin(Interchange, 'Interchange');
})(jQuery);
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

!(function ($) {

  /**
   * Magellan module.
   * @module foundation.magellan
   */

  var Magellan = (function () {
    /**
     * Creates a new instance of Magellan.
     * @class
     * @fires Magellan#init
     * @param {Object} element - jQuery object to add the trigger to.
     * @param {Object} options - Overrides to the default plugin settings.
     */

    function Magellan(element, options) {
      _classCallCheck(this, Magellan);

      this.$element = element;
      this.options = $.extend({}, Magellan.defaults, this.$element.data(), options);

      this._init();

      Foundation.registerPlugin(this, 'Magellan');
    }

    /**
     * Default settings for plugin
     */

    /**
     * Initializes the Magellan plugin and calls functions to get equalizer functioning on load.
     * @private
     */

    _createClass(Magellan, [{
      key: '_init',
      value: function _init() {
        var id = this.$element[0].id || Foundation.GetYoDigits(6, 'magellan');
        var _this = this;
        this.$targets = $('[data-magellan-target]');
        this.$links = this.$element.find('a');
        this.$element.attr({
          'data-resize': id,
          'data-scroll': id,
          'id': id
        });
        this.$active = $();
        this.scrollPos = parseInt(window.pageYOffset, 10);

        this._events();
      }

      /**
       * Calculates an array of pixel values that are the demarcation lines between locations on the page.
       * Can be invoked if new elements are added or the size of a location changes.
       * @function
       */
    }, {
      key: 'calcPoints',
      value: function calcPoints() {
        var _this = this,
            body = document.body,
            html = document.documentElement;

        this.points = [];
        this.winHeight = Math.round(Math.max(window.innerHeight, html.clientHeight));
        this.docHeight = Math.round(Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight));

        this.$targets.each(function () {
          var $tar = $(this),
              pt = Math.round($tar.offset().top - _this.options.threshold);
          $tar.targetPoint = pt;
          _this.points.push(pt);
        });
      }

      /**
       * Initializes events for Magellan.
       * @private
       */
    }, {
      key: '_events',
      value: function _events() {
        var _this = this,
            $body = $('html, body'),
            opts = {
          duration: _this.options.animationDuration,
          easing: _this.options.animationEasing
        };
        $(window).one('load', function () {
          if (_this.options.deepLinking) {
            if (location.hash) {
              _this.scrollToLoc(location.hash);
            }
          }
          _this.calcPoints();
          _this._updateActive();
        });

        this.$element.on({
          'resizeme.zf.trigger': this.reflow.bind(this),
          'scrollme.zf.trigger': this._updateActive.bind(this)
        }).on('click.zf.magellan', 'a[href^="#"]', function (e) {
          e.preventDefault();
          var arrival = this.getAttribute('href');
          _this.scrollToLoc(arrival);
        });
      }

      /**
       * Function to scroll to a given location on the page.
       * @param {String} loc - a properly formatted jQuery id selector. Example: '#foo'
       * @function
       */
    }, {
      key: 'scrollToLoc',
      value: function scrollToLoc(loc) {
        // Do nothing if target does not exist to prevent errors
        if (!$(loc).length) {
          return false;
        }
        var scrollPos = Math.round($(loc).offset().top - this.options.threshold / 2 - this.options.barOffset);

        $('html, body').stop(true).animate({ scrollTop: scrollPos }, this.options.animationDuration, this.options.animationEasing);
      }

      /**
       * Calls necessary functions to update Magellan upon DOM change
       * @function
       */
    }, {
      key: 'reflow',
      value: function reflow() {
        this.calcPoints();
        this._updateActive();
      }

      /**
       * Updates the visibility of an active location link, and updates the url hash for the page, if deepLinking enabled.
       * @private
       * @function
       * @fires Magellan#update
       */
    }, {
      key: '_updateActive',
      value: function _updateActive() /*evt, elem, scrollPos*/{
        var winPos = /*scrollPos ||*/parseInt(window.pageYOffset, 10),
            curIdx;

        if (winPos + this.winHeight === this.docHeight) {
          curIdx = this.points.length - 1;
        } else if (winPos < this.points[0]) {
          curIdx = 0;
        } else {
          var isDown = this.scrollPos < winPos,
              _this = this,
              curVisible = this.points.filter(function (p, i) {
            return isDown ? p - _this.options.barOffset <= winPos : p - _this.options.barOffset - _this.options.threshold <= winPos;
          });
          curIdx = curVisible.length ? curVisible.length - 1 : 0;
        }

        this.$active.removeClass(this.options.activeClass);
        this.$active = this.$links.filter('[href="#' + this.$targets.eq(curIdx).data('magellan-target') + '"]').addClass(this.options.activeClass);

        if (this.options.deepLinking) {
          var hash = this.$active[0].getAttribute('href');
          if (window.history.pushState) {
            window.history.pushState(null, null, hash);
          } else {
            window.location.hash = hash;
          }
        }

        this.scrollPos = winPos;
        /**
         * Fires when magellan is finished updating to the new active element.
         * @event Magellan#update
         */
        this.$element.trigger('update.zf.magellan', [this.$active]);
      }

      /**
       * Destroys an instance of Magellan and resets the url of the window.
       * @function
       */
    }, {
      key: 'destroy',
      value: function destroy() {
        this.$element.off('.zf.trigger .zf.magellan').find('.' + this.options.activeClass).removeClass(this.options.activeClass);

        if (this.options.deepLinking) {
          var hash = this.$active[0].getAttribute('href');
          window.location.hash.replace(hash, '');
        }

        Foundation.unregisterPlugin(this);
      }
    }]);

    return Magellan;
  })();

  Magellan.defaults = {
    /**
     * Amount of time, in ms, the animated scrolling should take between locations.
     * @option
     * @example 500
     */
    animationDuration: 500,
    /**
     * Animation style to use when scrolling between locations.
     * @option
     * @example 'ease-in-out'
     */
    animationEasing: 'linear',
    /**
     * Number of pixels to use as a marker for location changes.
     * @option
     * @example 50
     */
    threshold: 50,
    /**
     * Class applied to the active locations link on the magellan container.
     * @option
     * @example 'active'
     */
    activeClass: 'active',
    /**
     * Allows the script to manipulate the url of the current page, and if supported, alter the history.
     * @option
     * @example true
     */
    deepLinking: false,
    /**
     * Number of pixels to offset the scroll of the page on item click if using a sticky nav bar.
     * @option
     * @example 25
     */
    barOffset: 0
  };

  // Window exports
  Foundation.plugin(Magellan, 'Magellan');
})(jQuery);
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

!(function ($) {

  /**
   * OffCanvas module.
   * @module foundation.offcanvas
   * @requires foundation.util.mediaQuery
   * @requires foundation.util.triggers
   * @requires foundation.util.motion
   */

  var OffCanvas = (function () {
    /**
     * Creates a new instance of an off-canvas wrapper.
     * @class
     * @fires OffCanvas#init
     * @param {Object} element - jQuery object to initialize.
     * @param {Object} options - Overrides to the default plugin settings.
     */

    function OffCanvas(element, options) {
      _classCallCheck(this, OffCanvas);

      this.$element = element;
      this.options = $.extend({}, OffCanvas.defaults, this.$element.data(), options);
      this.$lastTrigger = $();
      this.$triggers = $();

      this._init();
      this._events();

      Foundation.registerPlugin(this, 'OffCanvas');
      Foundation.Keyboard.register('OffCanvas', {
        'ESCAPE': 'close'
      });
    }

    /**
     * Initializes the off-canvas wrapper by adding the exit overlay (if needed).
     * @function
     * @private
     */

    _createClass(OffCanvas, [{
      key: '_init',
      value: function _init() {
        var id = this.$element.attr('id');

        this.$element.attr('aria-hidden', 'true');

        // Find triggers that affect this element and add aria-expanded to them
        this.$triggers = $(document).find('[data-open="' + id + '"], [data-close="' + id + '"], [data-toggle="' + id + '"]').attr('aria-expanded', 'false').attr('aria-controls', id);

        // Add a close trigger over the body if necessary
        if (this.options.closeOnClick) {
          if ($('.js-off-canvas-exit').length) {
            this.$exiter = $('.js-off-canvas-exit');
          } else {
            var exiter = document.createElement('div');
            exiter.setAttribute('class', 'js-off-canvas-exit');
            $('[data-off-canvas-content]').append(exiter);

            this.$exiter = $(exiter);
          }
        }

        this.options.isRevealed = this.options.isRevealed || new RegExp(this.options.revealClass, 'g').test(this.$element[0].className);

        if (this.options.isRevealed) {
          this.options.revealOn = this.options.revealOn || this.$element[0].className.match(/(reveal-for-medium|reveal-for-large)/g)[0].split('-')[2];
          this._setMQChecker();
        }
        if (!this.options.transitionTime) {
          this.options.transitionTime = parseFloat(window.getComputedStyle($('[data-off-canvas-wrapper]')[0]).transitionDuration) * 1000;
        }
      }

      /**
       * Adds event handlers to the off-canvas wrapper and the exit overlay.
       * @function
       * @private
       */
    }, {
      key: '_events',
      value: function _events() {
        this.$element.off('.zf.trigger .zf.offcanvas').on({
          'open.zf.trigger': this.open.bind(this),
          'close.zf.trigger': this.close.bind(this),
          'toggle.zf.trigger': this.toggle.bind(this),
          'keydown.zf.offcanvas': this._handleKeyboard.bind(this)
        });

        if (this.options.closeOnClick && this.$exiter.length) {
          this.$exiter.on({ 'click.zf.offcanvas': this.close.bind(this) });
        }
      }

      /**
       * Applies event listener for elements that will reveal at certain breakpoints.
       * @private
       */
    }, {
      key: '_setMQChecker',
      value: function _setMQChecker() {
        var _this = this;

        $(window).on('changed.zf.mediaquery', function () {
          if (Foundation.MediaQuery.atLeast(_this.options.revealOn)) {
            _this.reveal(true);
          } else {
            _this.reveal(false);
          }
        }).one('load.zf.offcanvas', function () {
          if (Foundation.MediaQuery.atLeast(_this.options.revealOn)) {
            _this.reveal(true);
          }
        });
      }

      /**
       * Handles the revealing/hiding the off-canvas at breakpoints, not the same as open.
       * @param {Boolean} isRevealed - true if element should be revealed.
       * @function
       */
    }, {
      key: 'reveal',
      value: function reveal(isRevealed) {
        var $closer = this.$element.find('[data-close]');
        if (isRevealed) {
          this.close();
          this.isRevealed = true;
          // if (!this.options.forceTop) {
          //   var scrollPos = parseInt(window.pageYOffset);
          //   this.$element[0].style.transform = 'translate(0,' + scrollPos + 'px)';
          // }
          // if (this.options.isSticky) { this._stick(); }
          this.$element.off('open.zf.trigger toggle.zf.trigger');
          if ($closer.length) {
            $closer.hide();
          }
        } else {
          this.isRevealed = false;
          // if (this.options.isSticky || !this.options.forceTop) {
          //   this.$element[0].style.transform = '';
          //   $(window).off('scroll.zf.offcanvas');
          // }
          this.$element.on({
            'open.zf.trigger': this.open.bind(this),
            'toggle.zf.trigger': this.toggle.bind(this)
          });
          if ($closer.length) {
            $closer.show();
          }
        }
      }

      /**
       * Opens the off-canvas menu.
       * @function
       * @param {Object} event - Event object passed from listener.
       * @param {jQuery} trigger - element that triggered the off-canvas to open.
       * @fires OffCanvas#opened
       */
    }, {
      key: 'open',
      value: function open(event, trigger) {
        if (this.$element.hasClass('is-open') || this.isRevealed) {
          return;
        }
        var _this = this,
            $body = $(document.body);

        if (this.options.forceTop) {
          $('body').scrollTop(0);
        }
        // window.pageYOffset = 0;

        // if (!this.options.forceTop) {
        //   var scrollPos = parseInt(window.pageYOffset);
        //   this.$element[0].style.transform = 'translate(0,' + scrollPos + 'px)';
        //   if (this.$exiter.length) {
        //     this.$exiter[0].style.transform = 'translate(0,' + scrollPos + 'px)';
        //   }
        // }
        /**
         * Fires when the off-canvas menu opens.
         * @event OffCanvas#opened
         */

        var $wrapper = $('[data-off-canvas-wrapper]');
        $wrapper.addClass('is-off-canvas-open is-open-' + _this.options.position);

        _this.$element.addClass('is-open');

        // if (_this.options.isSticky) {
        //   _this._stick();
        // }

        this.$triggers.attr('aria-expanded', 'true');
        this.$element.attr('aria-hidden', 'false').trigger('opened.zf.offcanvas');

        if (this.options.closeOnClick) {
          this.$exiter.addClass('is-visible');
        }

        if (trigger) {
          this.$lastTrigger = trigger;
        }

        if (this.options.autoFocus) {
          $wrapper.one(Foundation.transitionend($wrapper), function () {
            if (_this.$element.hasClass('is-open')) {
              // handle double clicks
              _this.$element.attr('tabindex', '-1');
              _this.$element.focus();
            }
          });
        }

        if (this.options.trapFocus) {
          $wrapper.one(Foundation.transitionend($wrapper), function () {
            if (_this.$element.hasClass('is-open')) {
              // handle double clicks
              _this.$element.attr('tabindex', '-1');
              _this.trapFocus();
            }
          });
        }
      }

      /**
       * Traps focus within the offcanvas on open.
       * @private
       */
    }, {
      key: '_trapFocus',
      value: function _trapFocus() {
        var focusable = Foundation.Keyboard.findFocusable(this.$element),
            first = focusable.eq(0),
            last = focusable.eq(-1);

        focusable.off('.zf.offcanvas').on('keydown.zf.offcanvas', function (e) {
          var key = Foundation.Keyboard.parseKey(e);
          if (key === 'TAB' && e.target === last[0]) {
            e.preventDefault();
            first.focus();
          }
          if (key === 'SHIFT_TAB' && e.target === first[0]) {
            e.preventDefault();
            last.focus();
          }
        });
      }

      /**
       * Allows the offcanvas to appear sticky utilizing translate properties.
       * @private
       */
      // OffCanvas.prototype._stick = function() {
      //   var elStyle = this.$element[0].style;
      //
      //   if (this.options.closeOnClick) {
      //     var exitStyle = this.$exiter[0].style;
      //   }
      //
      //   $(window).on('scroll.zf.offcanvas', function(e) {
      //     console.log(e);
      //     var pageY = window.pageYOffset;
      //     elStyle.transform = 'translate(0,' + pageY + 'px)';
      //     if (exitStyle !== undefined) { exitStyle.transform = 'translate(0,' + pageY + 'px)'; }
      //   });
      //   // this.$element.trigger('stuck.zf.offcanvas');
      // };
      /**
       * Closes the off-canvas menu.
       * @function
       * @param {Function} cb - optional cb to fire after closure.
       * @fires OffCanvas#closed
       */
    }, {
      key: 'close',
      value: function close(cb) {
        if (!this.$element.hasClass('is-open') || this.isRevealed) {
          return;
        }

        var _this = this;

        //  Foundation.Move(this.options.transitionTime, this.$element, function() {
        $('[data-off-canvas-wrapper]').removeClass('is-off-canvas-open is-open-' + _this.options.position);
        _this.$element.removeClass('is-open');
        // Foundation._reflow();
        // });
        this.$element.attr('aria-hidden', 'true')
        /**
         * Fires when the off-canvas menu opens.
         * @event OffCanvas#closed
         */
        .trigger('closed.zf.offcanvas');
        // if (_this.options.isSticky || !_this.options.forceTop) {
        //   setTimeout(function() {
        //     _this.$element[0].style.transform = '';
        //     $(window).off('scroll.zf.offcanvas');
        //   }, this.options.transitionTime);
        // }
        if (this.options.closeOnClick) {
          this.$exiter.removeClass('is-visible');
        }

        this.$triggers.attr('aria-expanded', 'false');
        if (this.options.trapFocus) {
          $('[data-off-canvas-content]').removeAttr('tabindex');
        }
      }

      /**
       * Toggles the off-canvas menu open or closed.
       * @function
       * @param {Object} event - Event object passed from listener.
       * @param {jQuery} trigger - element that triggered the off-canvas to open.
       */
    }, {
      key: 'toggle',
      value: function toggle(event, trigger) {
        if (this.$element.hasClass('is-open')) {
          this.close(event, trigger);
        } else {
          this.open(event, trigger);
        }
      }

      /**
       * Handles keyboard input when detected. When the escape key is pressed, the off-canvas menu closes, and focus is restored to the element that opened the menu.
       * @function
       * @private
       */
    }, {
      key: '_handleKeyboard',
      value: function _handleKeyboard(e) {
        var _this2 = this;

        Foundation.Keyboard.handleKey(e, 'OffCanvas', {
          close: function close() {
            _this2.close();
            _this2.$lastTrigger.focus();
            return true;
          },
          handled: function handled() {
            e.stopPropagation();
            e.preventDefault();
          }
        });
      }

      /**
       * Destroys the offcanvas plugin.
       * @function
       */
    }, {
      key: 'destroy',
      value: function destroy() {
        this.close();
        this.$element.off('.zf.trigger .zf.offcanvas');
        this.$exiter.off('.zf.offcanvas');

        Foundation.unregisterPlugin(this);
      }
    }]);

    return OffCanvas;
  })();

  OffCanvas.defaults = {
    /**
     * Allow the user to click outside of the menu to close it.
     * @option
     * @example true
     */
    closeOnClick: true,

    /**
     * Amount of time in ms the open and close transition requires. If none selected, pulls from body style.
     * @option
     * @example 500
     */
    transitionTime: 0,

    /**
     * Direction the offcanvas opens from. Determines class applied to body.
     * @option
     * @example left
     */
    position: 'left',

    /**
     * Force the page to scroll to top on open.
     * @option
     * @example true
     */
    forceTop: true,

    /**
     * Allow the offcanvas to remain open for certain breakpoints.
     * @option
     * @example false
     */
    isRevealed: false,

    /**
     * Breakpoint at which to reveal. JS will use a RegExp to target standard classes, if changing classnames, pass your class with the `revealClass` option.
     * @option
     * @example reveal-for-large
     */
    revealOn: null,

    /**
     * Force focus to the offcanvas on open. If true, will focus the opening trigger on close. Sets tabindex of [data-off-canvas-content] to -1 for accessibility purposes.
     * @option
     * @example true
     */
    autoFocus: true,

    /**
     * Class used to force an offcanvas to remain open. Foundation defaults for this are `reveal-for-large` & `reveal-for-medium`.
     * @option
     * TODO improve the regex testing for this.
     * @example reveal-for-large
     */
    revealClass: 'reveal-for-',

    /**
     * Triggers optional focus trapping when opening an offcanvas. Sets tabindex of [data-off-canvas-content] to -1 for accessibility purposes.
     * @option
     * @example true
     */
    trapFocus: false
  };

  // Window exports
  Foundation.plugin(OffCanvas, 'OffCanvas');
})(jQuery);
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

!(function ($) {

  /**
   * Orbit module.
   * @module foundation.orbit
   * @requires foundation.util.keyboard
   * @requires foundation.util.motion
   * @requires foundation.util.timerAndImageLoader
   * @requires foundation.util.touch
   */

  var Orbit = (function () {
    /**
    * Creates a new instance of an orbit carousel.
    * @class
    * @param {jQuery} element - jQuery object to make into an Orbit Carousel.
    * @param {Object} options - Overrides to the default plugin settings.
    */

    function Orbit(element, options) {
      _classCallCheck(this, Orbit);

      this.$element = element;
      this.options = $.extend({}, Orbit.defaults, this.$element.data(), options);

      this._init();

      Foundation.registerPlugin(this, 'Orbit');
      Foundation.Keyboard.register('Orbit', {
        'ltr': {
          'ARROW_RIGHT': 'next',
          'ARROW_LEFT': 'previous'
        },
        'rtl': {
          'ARROW_LEFT': 'next',
          'ARROW_RIGHT': 'previous'
        }
      });
    }

    /**
    * Initializes the plugin by creating jQuery collections, setting attributes, and starting the animation.
    * @function
    * @private
    */

    _createClass(Orbit, [{
      key: '_init',
      value: function _init() {
        this.$wrapper = this.$element.find('.' + this.options.containerClass);
        this.$slides = this.$element.find('.' + this.options.slideClass);
        var $images = this.$element.find('img'),
            initActive = this.$slides.filter('.is-active');

        if (!initActive.length) {
          this.$slides.eq(0).addClass('is-active');
        }

        if (!this.options.useMUI) {
          this.$slides.addClass('no-motionui');
        }

        if ($images.length) {
          Foundation.onImagesLoaded($images, this._prepareForOrbit.bind(this));
        } else {
          this._prepareForOrbit(); //hehe
        }

        if (this.options.bullets) {
          this._loadBullets();
        }

        this._events();

        if (this.options.autoPlay && this.$slides.length > 1) {
          this.geoSync();
        }

        if (this.options.accessible) {
          // allow wrapper to be focusable to enable arrow navigation
          this.$wrapper.attr('tabindex', 0);
        }
      }

      /**
      * Creates a jQuery collection of bullets, if they are being used.
      * @function
      * @private
      */
    }, {
      key: '_loadBullets',
      value: function _loadBullets() {
        this.$bullets = this.$element.find('.' + this.options.boxOfBullets).find('button');
      }

      /**
      * Sets a `timer` object on the orbit, and starts the counter for the next slide.
      * @function
      */
    }, {
      key: 'geoSync',
      value: function geoSync() {
        var _this = this;
        this.timer = new Foundation.Timer(this.$element, {
          duration: this.options.timerDelay,
          infinite: false
        }, function () {
          _this.changeSlide(true);
        });
        this.timer.start();
      }

      /**
      * Sets wrapper and slide heights for the orbit.
      * @function
      * @private
      */
    }, {
      key: '_prepareForOrbit',
      value: function _prepareForOrbit() {
        var _this = this;
        this._setWrapperHeight(function (max) {
          _this._setSlideHeight(max);
        });
      }

      /**
      * Calulates the height of each slide in the collection, and uses the tallest one for the wrapper height.
      * @function
      * @private
      * @param {Function} cb - a callback function to fire when complete.
      */
    }, {
      key: '_setWrapperHeight',
      value: function _setWrapperHeight(cb) {
        //rewrite this to `for` loop
        var max = 0,
            temp,
            counter = 0;

        this.$slides.each(function () {
          temp = this.getBoundingClientRect().height;
          $(this).attr('data-slide', counter);

          if (counter) {
            //if not the first slide, set css position and display property
            $(this).css({ 'position': 'relative', 'display': 'none' });
          }
          max = temp > max ? temp : max;
          counter++;
        });

        if (counter === this.$slides.length) {
          this.$wrapper.css({ 'height': max }); //only change the wrapper height property once.
          cb(max); //fire callback with max height dimension.
        }
      }

      /**
      * Sets the max-height of each slide.
      * @function
      * @private
      */
    }, {
      key: '_setSlideHeight',
      value: function _setSlideHeight(height) {
        this.$slides.each(function () {
          $(this).css('max-height', height);
        });
      }

      /**
      * Adds event listeners to basically everything within the element.
      * @function
      * @private
      */
    }, {
      key: '_events',
      value: function _events() {
        var _this = this;

        //***************************************
        //**Now using custom event - thanks to:**
        //**      Yohai Ararat of Toronto      **
        //***************************************
        if (this.$slides.length > 1) {

          if (this.options.swipe) {
            this.$slides.off('swipeleft.zf.orbit swiperight.zf.orbit').on('swipeleft.zf.orbit', function (e) {
              e.preventDefault();
              _this.changeSlide(true);
            }).on('swiperight.zf.orbit', function (e) {
              e.preventDefault();
              _this.changeSlide(false);
            });
          }
          //***************************************

          if (this.options.autoPlay) {
            this.$slides.on('click.zf.orbit', function () {
              _this.$element.data('clickedOn', _this.$element.data('clickedOn') ? false : true);
              _this.timer[_this.$element.data('clickedOn') ? 'pause' : 'start']();
            });

            if (this.options.pauseOnHover) {
              this.$element.on('mouseenter.zf.orbit', function () {
                _this.timer.pause();
              }).on('mouseleave.zf.orbit', function () {
                if (!_this.$element.data('clickedOn')) {
                  _this.timer.start();
                }
              });
            }
          }

          if (this.options.navButtons) {
            var $controls = this.$element.find('.' + this.options.nextClass + ', .' + this.options.prevClass);
            $controls.attr('tabindex', 0)
            //also need to handle enter/return and spacebar key presses
            .on('click.zf.orbit touchend.zf.orbit', function (e) {
              e.preventDefault();
              _this.changeSlide($(this).hasClass(_this.options.nextClass));
            });
          }

          if (this.options.bullets) {
            this.$bullets.on('click.zf.orbit touchend.zf.orbit', function () {
              if (/is-active/g.test(this.className)) {
                return false;
              } //if this is active, kick out of function.
              var idx = $(this).data('slide'),
                  ltr = idx > _this.$slides.filter('.is-active').data('slide'),
                  $slide = _this.$slides.eq(idx);

              _this.changeSlide(ltr, $slide, idx);
            });
          }

          if (this.options.accessible) {
            this.$wrapper.add(this.$bullets).on('keydown.zf.orbit', function (e) {
              // handle keyboard event with keyboard util
              Foundation.Keyboard.handleKey(e, 'Orbit', {
                next: function next() {
                  _this.changeSlide(true);
                },
                previous: function previous() {
                  _this.changeSlide(false);
                },
                handled: function handled() {
                  // if bullet is focused, make sure focus moves
                  if ($(e.target).is(_this.$bullets)) {
                    _this.$bullets.filter('.is-active').focus();
                  }
                }
              });
            });
          }
        }
      }

      /**
      * Changes the current slide to a new one.
      * @function
      * @param {Boolean} isLTR - flag if the slide should move left to right.
      * @param {jQuery} chosenSlide - the jQuery element of the slide to show next, if one is selected.
      * @param {Number} idx - the index of the new slide in its collection, if one chosen.
      * @fires Orbit#slidechange
      */
    }, {
      key: 'changeSlide',
      value: function changeSlide(isLTR, chosenSlide, idx) {
        var $curSlide = this.$slides.filter('.is-active').eq(0);

        if (/mui/g.test($curSlide[0].className)) {
          return false;
        } //if the slide is currently animating, kick out of the function

        var $firstSlide = this.$slides.first(),
            $lastSlide = this.$slides.last(),
            dirIn = isLTR ? 'Right' : 'Left',
            dirOut = isLTR ? 'Left' : 'Right',
            _this = this,
            $newSlide;

        if (!chosenSlide) {
          //most of the time, this will be auto played or clicked from the navButtons.
          $newSlide = isLTR ? //if wrapping enabled, check to see if there is a `next` or `prev` sibling, if not, select the first or last slide to fill in. if wrapping not enabled, attempt to select `next` or `prev`, if there's nothing there, the function will kick out on next step. CRAZY NESTED TERNARIES!!!!!
          this.options.infiniteWrap ? $curSlide.next('.' + this.options.slideClass).length ? $curSlide.next('.' + this.options.slideClass) : $firstSlide : $curSlide.next('.' + this.options.slideClass) : //pick next slide if moving left to right
          this.options.infiniteWrap ? $curSlide.prev('.' + this.options.slideClass).length ? $curSlide.prev('.' + this.options.slideClass) : $lastSlide : $curSlide.prev('.' + this.options.slideClass); //pick prev slide if moving right to left
        } else {
            $newSlide = chosenSlide;
          }

        if ($newSlide.length) {
          /**
          * Triggers before the next slide starts animating in and only if a next slide has been found.
          * @event Orbit#beforeslidechange
          */
          this.$element.trigger('beforeslidechange.zf.orbit', [$curSlide, $newSlide]);

          if (this.options.bullets) {
            idx = idx || this.$slides.index($newSlide); //grab index to update bullets
            this._updateBullets(idx);
          }

          if (this.options.useMUI) {
            Foundation.Motion.animateIn($newSlide.addClass('is-active').css({ 'position': 'absolute', 'top': 0 }), this.options['animInFrom' + dirIn], function () {
              $newSlide.css({ 'position': 'relative', 'display': 'block' }).attr('aria-live', 'polite');
            });

            Foundation.Motion.animateOut($curSlide.removeClass('is-active'), this.options['animOutTo' + dirOut], function () {
              $curSlide.removeAttr('aria-live');
              if (_this.options.autoPlay && !_this.timer.isPaused) {
                _this.timer.restart();
              }
              //do stuff?
            });
          } else {
              $curSlide.removeClass('is-active is-in').removeAttr('aria-live').hide();
              $newSlide.addClass('is-active is-in').attr('aria-live', 'polite').show();
              if (this.options.autoPlay && !this.timer.isPaused) {
                this.timer.restart();
              }
            }
          /**
          * Triggers when the slide has finished animating in.
          * @event Orbit#slidechange
          */
          this.$element.trigger('slidechange.zf.orbit', [$newSlide]);
        }
      }

      /**
      * Updates the active state of the bullets, if displayed.
      * @function
      * @private
      * @param {Number} idx - the index of the current slide.
      */
    }, {
      key: '_updateBullets',
      value: function _updateBullets(idx) {
        var $oldBullet = this.$element.find('.' + this.options.boxOfBullets).find('.is-active').removeClass('is-active').blur(),
            span = $oldBullet.find('span:last').detach(),
            $newBullet = this.$bullets.eq(idx).addClass('is-active').append(span);
      }

      /**
      * Destroys the carousel and hides the element.
      * @function
      */
    }, {
      key: 'destroy',
      value: function destroy() {
        this.$element.off('.zf.orbit').find('*').off('.zf.orbit').end().hide();
        Foundation.unregisterPlugin(this);
      }
    }]);

    return Orbit;
  })();

  Orbit.defaults = {
    /**
    * Tells the JS to look for and loadBullets.
    * @option
    * @example true
    */
    bullets: true,
    /**
    * Tells the JS to apply event listeners to nav buttons
    * @option
    * @example true
    */
    navButtons: true,
    /**
    * motion-ui animation class to apply
    * @option
    * @example 'slide-in-right'
    */
    animInFromRight: 'slide-in-right',
    /**
    * motion-ui animation class to apply
    * @option
    * @example 'slide-out-right'
    */
    animOutToRight: 'slide-out-right',
    /**
    * motion-ui animation class to apply
    * @option
    * @example 'slide-in-left'
    *
    */
    animInFromLeft: 'slide-in-left',
    /**
    * motion-ui animation class to apply
    * @option
    * @example 'slide-out-left'
    */
    animOutToLeft: 'slide-out-left',
    /**
    * Allows Orbit to automatically animate on page load.
    * @option
    * @example true
    */
    autoPlay: true,
    /**
    * Amount of time, in ms, between slide transitions
    * @option
    * @example 5000
    */
    timerDelay: 5000,
    /**
    * Allows Orbit to infinitely loop through the slides
    * @option
    * @example true
    */
    infiniteWrap: true,
    /**
    * Allows the Orbit slides to bind to swipe events for mobile, requires an additional util library
    * @option
    * @example true
    */
    swipe: true,
    /**
    * Allows the timing function to pause animation on hover.
    * @option
    * @example true
    */
    pauseOnHover: true,
    /**
    * Allows Orbit to bind keyboard events to the slider, to animate frames with arrow keys
    * @option
    * @example true
    */
    accessible: true,
    /**
    * Class applied to the container of Orbit
    * @option
    * @example 'orbit-container'
    */
    containerClass: 'orbit-container',
    /**
    * Class applied to individual slides.
    * @option
    * @example 'orbit-slide'
    */
    slideClass: 'orbit-slide',
    /**
    * Class applied to the bullet container. You're welcome.
    * @option
    * @example 'orbit-bullets'
    */
    boxOfBullets: 'orbit-bullets',
    /**
    * Class applied to the `next` navigation button.
    * @option
    * @example 'orbit-next'
    */
    nextClass: 'orbit-next',
    /**
    * Class applied to the `previous` navigation button.
    * @option
    * @example 'orbit-previous'
    */
    prevClass: 'orbit-previous',
    /**
    * Boolean to flag the js to use motion ui classes or not. Default to true for backwards compatability.
    * @option
    * @example true
    */
    useMUI: true
  };

  // Window exports
  Foundation.plugin(Orbit, 'Orbit');
})(jQuery);
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

!(function ($) {

  /**
   * ResponsiveMenu module.
   * @module foundation.responsiveMenu
   * @requires foundation.util.triggers
   * @requires foundation.util.mediaQuery
   * @requires foundation.util.accordionMenu
   * @requires foundation.util.drilldown
   * @requires foundation.util.dropdown-menu
   */

  var ResponsiveMenu = (function () {
    /**
     * Creates a new instance of a responsive menu.
     * @class
     * @fires ResponsiveMenu#init
     * @param {jQuery} element - jQuery object to make into a dropdown menu.
     * @param {Object} options - Overrides to the default plugin settings.
     */

    function ResponsiveMenu(element, options) {
      _classCallCheck(this, ResponsiveMenu);

      this.$element = $(element);
      this.rules = this.$element.data('responsive-menu');
      this.currentMq = null;
      this.currentPlugin = null;

      this._init();
      this._events();

      Foundation.registerPlugin(this, 'ResponsiveMenu');
    }

    /**
     * Initializes the Menu by parsing the classes from the 'data-ResponsiveMenu' attribute on the element.
     * @function
     * @private
     */

    _createClass(ResponsiveMenu, [{
      key: '_init',
      value: function _init() {
        // The first time an Interchange plugin is initialized, this.rules is converted from a string of "classes" to an object of rules
        if (typeof this.rules === 'string') {
          var rulesTree = {};

          // Parse rules from "classes" pulled from data attribute
          var rules = this.rules.split(' ');

          // Iterate through every rule found
          for (var i = 0; i < rules.length; i++) {
            var rule = rules[i].split('-');
            var ruleSize = rule.length > 1 ? rule[0] : 'small';
            var rulePlugin = rule.length > 1 ? rule[1] : rule[0];

            if (MenuPlugins[rulePlugin] !== null) {
              rulesTree[ruleSize] = MenuPlugins[rulePlugin];
            }
          }

          this.rules = rulesTree;
        }

        if (!$.isEmptyObject(this.rules)) {
          this._checkMediaQueries();
        }
      }

      /**
       * Initializes events for the Menu.
       * @function
       * @private
       */
    }, {
      key: '_events',
      value: function _events() {
        var _this = this;

        $(window).on('changed.zf.mediaquery', function () {
          _this._checkMediaQueries();
        });
        // $(window).on('resize.zf.ResponsiveMenu', function() {
        //   _this._checkMediaQueries();
        // });
      }

      /**
       * Checks the current screen width against available media queries. If the media query has changed, and the plugin needed has changed, the plugins will swap out.
       * @function
       * @private
       */
    }, {
      key: '_checkMediaQueries',
      value: function _checkMediaQueries() {
        var matchedMq,
            _this = this;
        // Iterate through each rule and find the last matching rule
        $.each(this.rules, function (key) {
          if (Foundation.MediaQuery.atLeast(key)) {
            matchedMq = key;
          }
        });

        // No match? No dice
        if (!matchedMq) return;

        // Plugin already initialized? We good
        if (this.currentPlugin instanceof this.rules[matchedMq].plugin) return;

        // Remove existing plugin-specific CSS classes
        $.each(MenuPlugins, function (key, value) {
          _this.$element.removeClass(value.cssClass);
        });

        // Add the CSS class for the new plugin
        this.$element.addClass(this.rules[matchedMq].cssClass);

        // Create an instance of the new plugin
        if (this.currentPlugin) this.currentPlugin.destroy();
        this.currentPlugin = new this.rules[matchedMq].plugin(this.$element, {});
      }

      /**
       * Destroys the instance of the current plugin on this element, as well as the window resize handler that switches the plugins out.
       * @function
       */
    }, {
      key: 'destroy',
      value: function destroy() {
        this.currentPlugin.destroy();
        $(window).off('.zf.ResponsiveMenu');
        Foundation.unregisterPlugin(this);
      }
    }]);

    return ResponsiveMenu;
  })();

  ResponsiveMenu.defaults = {};

  // The plugin matches the plugin classes with these plugin instances.
  var MenuPlugins = {
    dropdown: {
      cssClass: 'dropdown',
      plugin: Foundation._plugins['dropdown-menu'] || null
    },
    drilldown: {
      cssClass: 'drilldown',
      plugin: Foundation._plugins['drilldown'] || null
    },
    accordion: {
      cssClass: 'accordion-menu',
      plugin: Foundation._plugins['accordion-menu'] || null
    }
  };

  // Window exports
  Foundation.plugin(ResponsiveMenu, 'ResponsiveMenu');
})(jQuery);
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

!(function ($) {

  /**
   * ResponsiveToggle module.
   * @module foundation.responsiveToggle
   * @requires foundation.util.mediaQuery
   */

  var ResponsiveToggle = (function () {
    /**
     * Creates a new instance of Tab Bar.
     * @class
     * @fires ResponsiveToggle#init
     * @param {jQuery} element - jQuery object to attach tab bar functionality to.
     * @param {Object} options - Overrides to the default plugin settings.
     */

    function ResponsiveToggle(element, options) {
      _classCallCheck(this, ResponsiveToggle);

      this.$element = $(element);
      this.options = $.extend({}, ResponsiveToggle.defaults, this.$element.data(), options);

      this._init();
      this._events();

      Foundation.registerPlugin(this, 'ResponsiveToggle');
    }

    /**
     * Initializes the tab bar by finding the target element, toggling element, and running update().
     * @function
     * @private
     */

    _createClass(ResponsiveToggle, [{
      key: '_init',
      value: function _init() {
        var targetID = this.$element.data('responsive-toggle');
        if (!targetID) {
          console.error('Your tab bar needs an ID of a Menu as the value of data-tab-bar.');
        }

        this.$targetMenu = $('#' + targetID);
        this.$toggler = this.$element.find('[data-toggle]');

        this._update();
      }

      /**
       * Adds necessary event handlers for the tab bar to work.
       * @function
       * @private
       */
    }, {
      key: '_events',
      value: function _events() {
        var _this = this;

        this._updateMqHandler = this._update.bind(this);

        $(window).on('changed.zf.mediaquery', this._updateMqHandler);

        this.$toggler.on('click.zf.responsiveToggle', this.toggleMenu.bind(this));
      }

      /**
       * Checks the current media query to determine if the tab bar should be visible or hidden.
       * @function
       * @private
       */
    }, {
      key: '_update',
      value: function _update() {
        // Mobile
        if (!Foundation.MediaQuery.atLeast(this.options.hideFor)) {
          this.$element.show();
          this.$targetMenu.hide();
        }

        // Desktop
        else {
            this.$element.hide();
            this.$targetMenu.show();
          }
      }

      /**
       * Toggles the element attached to the tab bar. The toggle only happens if the screen is small enough to allow it.
       * @function
       * @fires ResponsiveToggle#toggled
       */
    }, {
      key: 'toggleMenu',
      value: function toggleMenu() {
        if (!Foundation.MediaQuery.atLeast(this.options.hideFor)) {
          this.$targetMenu.toggle(0);

          /**
           * Fires when the element attached to the tab bar toggles.
           * @event ResponsiveToggle#toggled
           */
          this.$element.trigger('toggled.zf.responsiveToggle');
        }
      }
    }, {
      key: 'destroy',
      value: function destroy() {
        this.$element.off('.zf.responsiveToggle');
        this.$toggler.off('.zf.responsiveToggle');

        $(window).off('changed.zf.mediaquery', this._updateMqHandler);

        Foundation.unregisterPlugin(this);
      }
    }]);

    return ResponsiveToggle;
  })();

  ResponsiveToggle.defaults = {
    /**
     * The breakpoint after which the menu is always shown, and the tab bar is hidden.
     * @option
     * @example 'medium'
     */
    hideFor: 'medium'
  };

  // Window exports
  Foundation.plugin(ResponsiveToggle, 'ResponsiveToggle');
})(jQuery);
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

!(function ($) {

  /**
   * Reveal module.
   * @module foundation.reveal
   * @requires foundation.util.keyboard
   * @requires foundation.util.box
   * @requires foundation.util.triggers
   * @requires foundation.util.mediaQuery
   * @requires foundation.util.motion if using animations
   */

  var Reveal = (function () {
    /**
     * Creates a new instance of Reveal.
     * @class
     * @param {jQuery} element - jQuery object to use for the modal.
     * @param {Object} options - optional parameters.
     */

    function Reveal(element, options) {
      _classCallCheck(this, Reveal);

      this.$element = element;
      this.options = $.extend({}, Reveal.defaults, this.$element.data(), options);
      this._init();

      Foundation.registerPlugin(this, 'Reveal');
      Foundation.Keyboard.register('Reveal', {
        'ENTER': 'open',
        'SPACE': 'open',
        'ESCAPE': 'close',
        'TAB': 'tab_forward',
        'SHIFT_TAB': 'tab_backward'
      });
    }

    /**
     * Initializes the modal by adding the overlay and close buttons, (if selected).
     * @private
     */

    _createClass(Reveal, [{
      key: '_init',
      value: function _init() {
        this.id = this.$element.attr('id');
        this.isActive = false;
        this.cached = { mq: Foundation.MediaQuery.current };
        this.isMobile = mobileSniff();

        this.$anchor = $('[data-open="' + this.id + '"]').length ? $('[data-open="' + this.id + '"]') : $('[data-toggle="' + this.id + '"]');
        this.$anchor.attr({
          'aria-controls': this.id,
          'aria-haspopup': true,
          'tabindex': 0
        });

        if (this.options.fullScreen || this.$element.hasClass('full')) {
          this.options.fullScreen = true;
          this.options.overlay = false;
        }
        if (this.options.overlay && !this.$overlay) {
          this.$overlay = this._makeOverlay(this.id);
        }

        this.$element.attr({
          'role': 'dialog',
          'aria-hidden': true,
          'data-yeti-box': this.id,
          'data-resize': this.id
        });

        if (this.$overlay) {
          this.$element.detach().appendTo(this.$overlay);
        } else {
          this.$element.detach().appendTo($('body'));
          this.$element.addClass('without-overlay');
        }
        this._events();
        if (this.options.deepLink && window.location.hash === '#' + this.id) {
          $(window).one('load.zf.reveal', this.open.bind(this));
        }
      }

      /**
       * Creates an overlay div to display behind the modal.
       * @private
       */
    }, {
      key: '_makeOverlay',
      value: function _makeOverlay(id) {
        var $overlay = $('<div></div>').addClass('reveal-overlay').appendTo('body');
        return $overlay;
      }

      /**
       * Updates position of modal
       * TODO:  Figure out if we actually need to cache these values or if it doesn't matter
       * @private
       */
    }, {
      key: '_updatePosition',
      value: function _updatePosition() {
        var width = this.$element.outerWidth();
        var outerWidth = $(window).width();
        var height = this.$element.outerHeight();
        var outerHeight = $(window).height();
        var left, top;
        if (this.options.hOffset === 'auto') {
          left = parseInt((outerWidth - width) / 2, 10);
        } else {
          left = parseInt(this.options.hOffset, 10);
        }
        if (this.options.vOffset === 'auto') {
          if (height > outerHeight) {
            top = parseInt(Math.min(100, outerHeight / 10), 10);
          } else {
            top = parseInt((outerHeight - height) / 4, 10);
          }
        } else {
          top = parseInt(this.options.vOffset, 10);
        }
        this.$element.css({ top: top + 'px' });
        // only worry about left if we don't have an overlay or we havea  horizontal offset,
        // otherwise we're perfectly in the middle
        if (!this.$overlay || this.options.hOffset !== 'auto') {
          this.$element.css({ left: left + 'px' });
          this.$element.css({ margin: '0px' });
        }
      }

      /**
       * Adds event handlers for the modal.
       * @private
       */
    }, {
      key: '_events',
      value: function _events() {
        var _this2 = this;

        var _this = this;

        this.$element.on({
          'open.zf.trigger': this.open.bind(this),
          'close.zf.trigger': function closeZfTrigger(event, $element) {
            if (event.target === _this.$element[0] || $(event.target).parents('[data-closable]')[0] === $element) {
              // only close reveal when it's explicitly called
              return _this2.close.apply(_this2);
            }
          },
          'toggle.zf.trigger': this.toggle.bind(this),
          'resizeme.zf.trigger': function resizemeZfTrigger() {
            _this._updatePosition();
          }
        });

        if (this.$anchor.length) {
          this.$anchor.on('keydown.zf.reveal', function (e) {
            if (e.which === 13 || e.which === 32) {
              e.stopPropagation();
              e.preventDefault();
              _this.open();
            }
          });
        }

        if (this.options.closeOnClick && this.options.overlay) {
          this.$overlay.off('.zf.reveal').on('click.zf.reveal', function (e) {
            if (e.target === _this.$element[0] || $.contains(_this.$element[0], e.target) || !$.contains(document, e.target)) {
              return;
            }
            _this.close();
          });
        }
        if (this.options.deepLink) {
          $(window).on('popstate.zf.reveal:' + this.id, this._handleState.bind(this));
        }
      }

      /**
       * Handles modal methods on back/forward button clicks or any other event that triggers popstate.
       * @private
       */
    }, {
      key: '_handleState',
      value: function _handleState(e) {
        if (window.location.hash === '#' + this.id && !this.isActive) {
          this.open();
        } else {
          this.close();
        }
      }

      /**
       * Opens the modal controlled by `this.$anchor`, and closes all others by default.
       * @function
       * @fires Reveal#closeme
       * @fires Reveal#open
       */
    }, {
      key: 'open',
      value: function open() {
        var _this3 = this;

        if (this.options.deepLink) {
          var hash = '#' + this.id;

          if (window.history.pushState) {
            window.history.pushState(null, null, hash);
          } else {
            window.location.hash = hash;
          }
        }

        this.isActive = true;

        // Make elements invisible, but remove display: none so we can get size and positioning
        this.$element.css({ 'visibility': 'hidden' }).show().scrollTop(0);
        if (this.options.overlay) {
          this.$overlay.css({ 'visibility': 'hidden' }).show();
        }

        this._updatePosition();

        this.$element.hide().css({ 'visibility': '' });

        if (this.$overlay) {
          this.$overlay.css({ 'visibility': '' }).hide();
          if (this.$element.hasClass('fast')) {
            this.$overlay.addClass('fast');
          } else if (this.$element.hasClass('slow')) {
            this.$overlay.addClass('slow');
          }
        }

        if (!this.options.multipleOpened) {
          /**
           * Fires immediately before the modal opens.
           * Closes any other modals that are currently open
           * @event Reveal#closeme
           */
          this.$element.trigger('closeme.zf.reveal', this.id);
        }
        // Motion UI method of reveal
        if (this.options.animationIn) {
          var _this;

          (function () {
            var afterAnimationFocus = function afterAnimationFocus() {
              _this.$element.attr({
                'aria-hidden': false,
                'tabindex': -1
              }).focus();
            };

            _this = _this3;

            if (_this3.options.overlay) {
              Foundation.Motion.animateIn(_this3.$overlay, 'fade-in');
            }
            Foundation.Motion.animateIn(_this3.$element, _this3.options.animationIn, function () {
              _this3.focusableElements = Foundation.Keyboard.findFocusable(_this3.$element);
              afterAnimationFocus();
            });
          })();
        }
        // jQuery method of reveal
        else {
            if (this.options.overlay) {
              this.$overlay.show(0);
            }
            this.$element.show(this.options.showDelay);
          }

        // handle accessibility
        this.$element.attr({
          'aria-hidden': false,
          'tabindex': -1
        }).focus();

        /**
         * Fires when the modal has successfully opened.
         * @event Reveal#open
         */
        this.$element.trigger('open.zf.reveal');

        if (this.isMobile) {
          this.originalScrollPos = window.pageYOffset;
          $('html, body').addClass('is-reveal-open');
        } else {
          $('body').addClass('is-reveal-open');
        }

        setTimeout(function () {
          _this3._extraHandlers();
        }, 0);
      }

      /**
       * Adds extra event handlers for the body and window if necessary.
       * @private
       */
    }, {
      key: '_extraHandlers',
      value: function _extraHandlers() {
        var _this = this;
        this.focusableElements = Foundation.Keyboard.findFocusable(this.$element);

        if (!this.options.overlay && this.options.closeOnClick && !this.options.fullScreen) {
          $('body').on('click.zf.reveal', function (e) {
            if (e.target === _this.$element[0] || $.contains(_this.$element[0], e.target) || !$.contains(document, e.target)) {
              return;
            }
            _this.close();
          });
        }

        if (this.options.closeOnEsc) {
          $(window).on('keydown.zf.reveal', function (e) {
            Foundation.Keyboard.handleKey(e, 'Reveal', {
              close: function close() {
                if (_this.options.closeOnEsc) {
                  _this.close();
                  _this.$anchor.focus();
                }
              }
            });
          });
        }

        // lock focus within modal while tabbing
        this.$element.on('keydown.zf.reveal', function (e) {
          var $target = $(this);
          // handle keyboard event with keyboard util
          Foundation.Keyboard.handleKey(e, 'Reveal', {
            tab_forward: function tab_forward() {
              _this.focusableElements = Foundation.Keyboard.findFocusable(_this.$element);
              if (_this.$element.find(':focus').is(_this.focusableElements.eq(-1))) {
                // left modal downwards, setting focus to first element
                _this.focusableElements.eq(0).focus();
                return true;
              }
              if (_this.focusableElements.length === 0) {
                // no focusable elements inside the modal at all, prevent tabbing in general
                return true;
              }
            },
            tab_backward: function tab_backward() {
              _this.focusableElements = Foundation.Keyboard.findFocusable(_this.$element);
              if (_this.$element.find(':focus').is(_this.focusableElements.eq(0)) || _this.$element.is(':focus')) {
                // left modal upwards, setting focus to last element
                _this.focusableElements.eq(-1).focus();
                return true;
              }
              if (_this.focusableElements.length === 0) {
                // no focusable elements inside the modal at all, prevent tabbing in general
                return true;
              }
            },
            open: function open() {
              if (_this.$element.find(':focus').is(_this.$element.find('[data-close]'))) {
                setTimeout(function () {
                  // set focus back to anchor if close button has been activated
                  _this.$anchor.focus();
                }, 1);
              } else if ($target.is(_this.focusableElements)) {
                // dont't trigger if acual element has focus (i.e. inputs, links, ...)
                _this.open();
              }
            },
            close: function close() {
              if (_this.options.closeOnEsc) {
                _this.close();
                _this.$anchor.focus();
              }
            },
            handled: function handled(preventDefault) {
              if (preventDefault) {
                e.preventDefault();
              }
            }
          });
        });
      }

      /**
       * Closes the modal.
       * @function
       * @fires Reveal#closed
       */
    }, {
      key: 'close',
      value: function close() {
        if (!this.isActive || !this.$element.is(':visible')) {
          return false;
        }
        var _this = this;

        // Motion UI method of hiding
        if (this.options.animationOut) {
          if (this.options.overlay) {
            Foundation.Motion.animateOut(this.$overlay, 'fade-out', finishUp);
          } else {
            finishUp();
          }

          Foundation.Motion.animateOut(this.$element, this.options.animationOut);
        }
        // jQuery method of hiding
        else {
            if (this.options.overlay) {
              this.$overlay.hide(0, finishUp);
            } else {
              finishUp();
            }

            this.$element.hide(this.options.hideDelay);
          }

        // Conditionals to remove extra event listeners added on open
        if (this.options.closeOnEsc) {
          $(window).off('keydown.zf.reveal');
        }

        if (!this.options.overlay && this.options.closeOnClick) {
          $('body').off('click.zf.reveal');
        }

        this.$element.off('keydown.zf.reveal');

        function finishUp() {
          if (_this.isMobile) {
            $('html, body').removeClass('is-reveal-open');
            if (_this.originalScrollPos) {
              $('body').scrollTop(_this.originalScrollPos);
              _this.originalScrollPos = null;
            }
          } else {
            $('body').removeClass('is-reveal-open');
          }

          _this.$element.attr('aria-hidden', true);

          /**
          * Fires when the modal is done closing.
          * @event Reveal#closed
          */
          _this.$element.trigger('closed.zf.reveal');
        }

        /**
        * Resets the modal content
        * This prevents a running video to keep going in the background
        */
        if (this.options.resetOnClose) {
          this.$element.html(this.$element.html());
        }

        this.isActive = false;
        if (_this.options.deepLink) {
          if (window.history.replaceState) {
            window.history.replaceState("", document.title, window.location.pathname);
          } else {
            window.location.hash = '';
          }
        }
      }

      /**
       * Toggles the open/closed state of a modal.
       * @function
       */
    }, {
      key: 'toggle',
      value: function toggle() {
        if (this.isActive) {
          this.close();
        } else {
          this.open();
        }
      }
    }, {
      key: 'destroy',

      /**
       * Destroys an instance of a modal.
       * @function
       */
      value: function destroy() {
        if (this.options.overlay) {
          this.$element.appendTo($('body')); // move $element outside of $overlay to prevent error unregisterPlugin()
          this.$overlay.hide().off().remove();
        }
        this.$element.hide().off();
        this.$anchor.off('.zf');
        $(window).off('.zf.reveal:' + this.id);

        Foundation.unregisterPlugin(this);
      }
    }]);

    return Reveal;
  })();

  Reveal.defaults = {
    /**
     * Motion-UI class to use for animated elements. If none used, defaults to simple show/hide.
     * @option
     * @example 'slide-in-left'
     */
    animationIn: '',
    /**
     * Motion-UI class to use for animated elements. If none used, defaults to simple show/hide.
     * @option
     * @example 'slide-out-right'
     */
    animationOut: '',
    /**
     * Time, in ms, to delay the opening of a modal after a click if no animation used.
     * @option
     * @example 10
     */
    showDelay: 0,
    /**
     * Time, in ms, to delay the closing of a modal after a click if no animation used.
     * @option
     * @example 10
     */
    hideDelay: 0,
    /**
     * Allows a click on the body/overlay to close the modal.
     * @option
     * @example true
     */
    closeOnClick: true,
    /**
     * Allows the modal to close if the user presses the `ESCAPE` key.
     * @option
     * @example true
     */
    closeOnEsc: true,
    /**
     * If true, allows multiple modals to be displayed at once.
     * @option
     * @example false
     */
    multipleOpened: false,
    /**
     * Distance, in pixels, the modal should push down from the top of the screen.
     * @option
     * @example auto
     */
    vOffset: 'auto',
    /**
     * Distance, in pixels, the modal should push in from the side of the screen.
     * @option
     * @example auto
     */
    hOffset: 'auto',
    /**
     * Allows the modal to be fullscreen, completely blocking out the rest of the view. JS checks for this as well.
     * @option
     * @example false
     */
    fullScreen: false,
    /**
     * Percentage of screen height the modal should push up from the bottom of the view.
     * @option
     * @example 10
     */
    btmOffsetPct: 10,
    /**
     * Allows the modal to generate an overlay div, which will cover the view when modal opens.
     * @option
     * @example true
     */
    overlay: true,
    /**
     * Allows the modal to remove and reinject markup on close. Should be true if using video elements w/o using provider's api, otherwise, videos will continue to play in the background.
     * @option
     * @example false
     */
    resetOnClose: false,
    /**
     * Allows the modal to alter the url on open/close, and allows the use of the `back` button to close modals. ALSO, allows a modal to auto-maniacally open on page load IF the hash === the modal's user-set id.
     * @option
     * @example false
     */
    deepLink: false
  };

  // Window exports
  Foundation.plugin(Reveal, 'Reveal');

  function iPhoneSniff() {
    return (/iP(ad|hone|od).*OS/.test(window.navigator.userAgent)
    );
  }

  function androidSniff() {
    return (/Android/.test(window.navigator.userAgent)
    );
  }

  function mobileSniff() {
    return iPhoneSniff() || androidSniff();
  }
})(jQuery);
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

!(function ($) {

  /**
   * Slider module.
   * @module foundation.slider
   * @requires foundation.util.motion
   * @requires foundation.util.triggers
   * @requires foundation.util.keyboard
   * @requires foundation.util.touch
   */

  var Slider = (function () {
    /**
     * Creates a new instance of a drilldown menu.
     * @class
     * @param {jQuery} element - jQuery object to make into an accordion menu.
     * @param {Object} options - Overrides to the default plugin settings.
     */

    function Slider(element, options) {
      _classCallCheck(this, Slider);

      this.$element = element;
      this.options = $.extend({}, Slider.defaults, this.$element.data(), options);

      this._init();

      Foundation.registerPlugin(this, 'Slider');
      Foundation.Keyboard.register('Slider', {
        'ltr': {
          'ARROW_RIGHT': 'increase',
          'ARROW_UP': 'increase',
          'ARROW_DOWN': 'decrease',
          'ARROW_LEFT': 'decrease',
          'SHIFT_ARROW_RIGHT': 'increase_fast',
          'SHIFT_ARROW_UP': 'increase_fast',
          'SHIFT_ARROW_DOWN': 'decrease_fast',
          'SHIFT_ARROW_LEFT': 'decrease_fast'
        },
        'rtl': {
          'ARROW_LEFT': 'increase',
          'ARROW_RIGHT': 'decrease',
          'SHIFT_ARROW_LEFT': 'increase_fast',
          'SHIFT_ARROW_RIGHT': 'decrease_fast'
        }
      });
    }

    /**
     * Initilizes the plugin by reading/setting attributes, creating collections and setting the initial position of the handle(s).
     * @function
     * @private
     */

    _createClass(Slider, [{
      key: '_init',
      value: function _init() {
        this.inputs = this.$element.find('input');
        this.handles = this.$element.find('[data-slider-handle]');

        this.$handle = this.handles.eq(0);
        this.$input = this.inputs.length ? this.inputs.eq(0) : $('#' + this.$handle.attr('aria-controls'));
        this.$fill = this.$element.find('[data-slider-fill]').css(this.options.vertical ? 'height' : 'width', 0);

        var isDbl = false,
            _this = this;
        if (this.options.disabled || this.$element.hasClass(this.options.disabledClass)) {
          this.options.disabled = true;
          this.$element.addClass(this.options.disabledClass);
        }
        if (!this.inputs.length) {
          this.inputs = $().add(this.$input);
          this.options.binding = true;
        }
        this._setInitAttr(0);
        this._events(this.$handle);

        if (this.handles[1]) {
          this.options.doubleSided = true;
          this.$handle2 = this.handles.eq(1);
          this.$input2 = this.inputs.length > 1 ? this.inputs.eq(1) : $('#' + this.$handle2.attr('aria-controls'));

          if (!this.inputs[1]) {
            this.inputs = this.inputs.add(this.$input2);
          }
          isDbl = true;

          this._setHandlePos(this.$handle, this.options.initialStart, true, function () {

            _this._setHandlePos(_this.$handle2, _this.options.initialEnd, true);
          });
          // this.$handle.triggerHandler('click.zf.slider');
          this._setInitAttr(1);
          this._events(this.$handle2);
        }

        if (!isDbl) {
          this._setHandlePos(this.$handle, this.options.initialStart, true);
        }
      }

      /**
       * Sets the position of the selected handle and fill bar.
       * @function
       * @private
       * @param {jQuery} $hndl - the selected handle to move.
       * @param {Number} location - floating point between the start and end values of the slider bar.
       * @param {Function} cb - callback function to fire on completion.
       * @fires Slider#moved
       * @fires Slider#changed
       */
    }, {
      key: '_setHandlePos',
      value: function _setHandlePos($hndl, location, noInvert, cb) {
        // don't move if the slider has been disabled since its initialization
        if (this.$element.hasClass(this.options.disabledClass)) {
          return;
        }
        //might need to alter that slightly for bars that will have odd number selections.
        location = parseFloat(location); //on input change events, convert string to number...grumble.

        // prevent slider from running out of bounds, if value exceeds the limits set through options, override the value to min/max
        if (location < this.options.start) {
          location = this.options.start;
        } else if (location > this.options.end) {
          location = this.options.end;
        }

        var isDbl = this.options.doubleSided;

        if (isDbl) {
          //this block is to prevent 2 handles from crossing eachother. Could/should be improved.
          if (this.handles.index($hndl) === 0) {
            var h2Val = parseFloat(this.$handle2.attr('aria-valuenow'));
            location = location >= h2Val ? h2Val - this.options.step : location;
          } else {
            var h1Val = parseFloat(this.$handle.attr('aria-valuenow'));
            location = location <= h1Val ? h1Val + this.options.step : location;
          }
        }

        //this is for single-handled vertical sliders, it adjusts the value to account for the slider being "upside-down"
        //for click and drag events, it's weird due to the scale(-1, 1) css property
        if (this.options.vertical && !noInvert) {
          location = this.options.end - location;
        }

        var _this = this,
            vert = this.options.vertical,
            hOrW = vert ? 'height' : 'width',
            lOrT = vert ? 'top' : 'left',
            handleDim = $hndl[0].getBoundingClientRect()[hOrW],
            elemDim = this.$element[0].getBoundingClientRect()[hOrW],

        //percentage of bar min/max value based on click or drag point
        pctOfBar = percent(location - this.options.start, this.options.end - this.options.start).toFixed(2),

        //number of actual pixels to shift the handle, based on the percentage obtained above
        pxToMove = (elemDim - handleDim) * pctOfBar,

        //percentage of bar to shift the handle
        movement = (percent(pxToMove, elemDim) * 100).toFixed(this.options.decimal);
        //fixing the decimal value for the location number, is passed to other methods as a fixed floating-point value
        location = parseFloat(location.toFixed(this.options.decimal));
        // declare empty object for css adjustments, only used with 2 handled-sliders
        var css = {};

        this._setValues($hndl, location);

        // TODO update to calculate based on values set to respective inputs??
        if (isDbl) {
          var isLeftHndl = this.handles.index($hndl) === 0,

          //empty variable, will be used for min-height/width for fill bar
          dim,

          //percentage w/h of the handle compared to the slider bar
          handlePct = ~ ~(percent(handleDim, elemDim) * 100);
          //if left handle, the math is slightly different than if it's the right handle, and the left/top property needs to be changed for the fill bar
          if (isLeftHndl) {
            //left or top percentage value to apply to the fill bar.
            css[lOrT] = movement + '%';
            //calculate the new min-height/width for the fill bar.
            dim = parseFloat(this.$handle2[0].style[lOrT]) - movement + handlePct;
            //this callback is necessary to prevent errors and allow the proper placement and initialization of a 2-handled slider
            //plus, it means we don't care if 'dim' isNaN on init, it won't be in the future.
            if (cb && typeof cb === 'function') {
              cb();
            } //this is only needed for the initialization of 2 handled sliders
          } else {
              //just caching the value of the left/bottom handle's left/top property
              var handlePos = parseFloat(this.$handle[0].style[lOrT]);
              //calculate the new min-height/width for the fill bar. Use isNaN to prevent false positives for numbers <= 0
              //based on the percentage of movement of the handle being manipulated, less the opposing handle's left/top position, plus the percentage w/h of the handle itself
              dim = movement - (isNaN(handlePos) ? this.options.initialStart / ((this.options.end - this.options.start) / 100) : handlePos) + handlePct;
            }
          // assign the min-height/width to our css object
          css['min-' + hOrW] = dim + '%';
        }

        this.$element.one('finished.zf.animate', function () {
          /**
           * Fires when the handle is done moving.
           * @event Slider#moved
           */
          _this.$element.trigger('moved.zf.slider', [$hndl]);
        });

        //because we don't know exactly how the handle will be moved, check the amount of time it should take to move.
        var moveTime = this.$element.data('dragging') ? 1000 / 60 : this.options.moveTime;

        Foundation.Move(moveTime, $hndl, function () {
          //adjusting the left/top property of the handle, based on the percentage calculated above
          $hndl.css(lOrT, movement + '%');

          if (!_this.options.doubleSided) {
            //if single-handled, a simple method to expand the fill bar
            _this.$fill.css(hOrW, pctOfBar * 100 + '%');
          } else {
            //otherwise, use the css object we created above
            _this.$fill.css(css);
          }
        });

        /**
         * Fires when the value has not been change for a given time.
         * @event Slider#changed
         */
        clearTimeout(_this.timeout);
        _this.timeout = setTimeout(function () {
          _this.$element.trigger('changed.zf.slider', [$hndl]);
        }, _this.options.changedDelay);
      }

      /**
       * Sets the initial attribute for the slider element.
       * @function
       * @private
       * @param {Number} idx - index of the current handle/input to use.
       */
    }, {
      key: '_setInitAttr',
      value: function _setInitAttr(idx) {
        var id = this.inputs.eq(idx).attr('id') || Foundation.GetYoDigits(6, 'slider');
        this.inputs.eq(idx).attr({
          'id': id,
          'max': this.options.end,
          'min': this.options.start,
          'step': this.options.step
        });
        this.handles.eq(idx).attr({
          'role': 'slider',
          'aria-controls': id,
          'aria-valuemax': this.options.end,
          'aria-valuemin': this.options.start,
          'aria-valuenow': idx === 0 ? this.options.initialStart : this.options.initialEnd,
          'aria-orientation': this.options.vertical ? 'vertical' : 'horizontal',
          'tabindex': 0
        });
      }

      /**
       * Sets the input and `aria-valuenow` values for the slider element.
       * @function
       * @private
       * @param {jQuery} $handle - the currently selected handle.
       * @param {Number} val - floating point of the new value.
       */
    }, {
      key: '_setValues',
      value: function _setValues($handle, val) {
        var idx = this.options.doubleSided ? this.handles.index($handle) : 0;
        this.inputs.eq(idx).val(val);
        $handle.attr('aria-valuenow', val);
      }

      /**
       * Handles events on the slider element.
       * Calculates the new location of the current handle.
       * If there are two handles and the bar was clicked, it determines which handle to move.
       * @function
       * @private
       * @param {Object} e - the `event` object passed from the listener.
       * @param {jQuery} $handle - the current handle to calculate for, if selected.
       * @param {Number} val - floating point number for the new value of the slider.
       * TODO clean this up, there's a lot of repeated code between this and the _setHandlePos fn.
       */
    }, {
      key: '_handleEvent',
      value: function _handleEvent(e, $handle, val) {
        var value, hasVal;
        if (!val) {
          //click or drag events
          e.preventDefault();
          var _this = this,
              vertical = this.options.vertical,
              param = vertical ? 'height' : 'width',
              direction = vertical ? 'top' : 'left',
              eventOffset = vertical ? e.pageY : e.pageX,
              halfOfHandle = this.$handle[0].getBoundingClientRect()[param] / 2,
              barDim = this.$element[0].getBoundingClientRect()[param],
              windowScroll = vertical ? $(window).scrollTop() : $(window).scrollLeft();

          var elemOffset = this.$element.offset()[direction];

          // touch events emulated by the touch util give position relative to screen, add window.scroll to event coordinates...
          // best way to guess this is simulated is if clientY == pageY
          if (e.clientY === e.pageY) {
            eventOffset = eventOffset + windowScroll;
          }
          var eventFromBar = eventOffset - elemOffset;
          var barXY;
          if (eventFromBar < 0) {
            barXY = 0;
          } else if (eventFromBar > barDim) {
            barXY = barDim;
          } else {
            barXY = eventFromBar;
          }
          var offsetPct = percent(barXY, barDim);

          value = (this.options.end - this.options.start) * offsetPct + this.options.start;

          // turn everything around for RTL, yay math!
          if (Foundation.rtl() && !this.options.vertical) {
            value = this.options.end - value;
          }

          value = _this._adjustValue(null, value);
          //boolean flag for the setHandlePos fn, specifically for vertical sliders
          hasVal = false;

          if (!$handle) {
            //figure out which handle it is, pass it to the next function.
            var firstHndlPos = absPosition(this.$handle, direction, barXY, param),
                secndHndlPos = absPosition(this.$handle2, direction, barXY, param);
            $handle = firstHndlPos <= secndHndlPos ? this.$handle : this.$handle2;
          }
        } else {
          //change event on input
          value = this._adjustValue(null, val);
          hasVal = true;
        }

        this._setHandlePos($handle, value, hasVal);
      }

      /**
       * Adjustes value for handle in regard to step value. returns adjusted value
       * @function
       * @private
       * @param {jQuery} $handle - the selected handle.
       * @param {Number} value - value to adjust. used if $handle is falsy
       */
    }, {
      key: '_adjustValue',
      value: function _adjustValue($handle, value) {
        var val,
            step = this.options.step,
            div = parseFloat(step / 2),
            left,
            prev_val,
            next_val;
        if (!!$handle) {
          val = parseFloat($handle.attr('aria-valuenow'));
        } else {
          val = value;
        }
        left = val % step;
        prev_val = val - left;
        next_val = prev_val + step;
        if (left === 0) {
          return val;
        }
        val = val >= prev_val + div ? next_val : prev_val;
        return val;
      }

      /**
       * Adds event listeners to the slider elements.
       * @function
       * @private
       * @param {jQuery} $handle - the current handle to apply listeners to.
       */
    }, {
      key: '_events',
      value: function _events($handle) {
        var _this = this,
            curHandle,
            timer;

        this.inputs.off('change.zf.slider').on('change.zf.slider', function (e) {
          var idx = _this.inputs.index($(this));
          _this._handleEvent(e, _this.handles.eq(idx), $(this).val());
        });

        if (this.options.clickSelect) {
          this.$element.off('click.zf.slider').on('click.zf.slider', function (e) {
            if (_this.$element.data('dragging')) {
              return false;
            }

            if (!$(e.target).is('[data-slider-handle]')) {
              if (_this.options.doubleSided) {
                _this._handleEvent(e);
              } else {
                _this._handleEvent(e, _this.$handle);
              }
            }
          });
        }

        if (this.options.draggable) {
          this.handles.addTouch();

          var $body = $('body');
          $handle.off('mousedown.zf.slider').on('mousedown.zf.slider', function (e) {
            $handle.addClass('is-dragging');
            _this.$fill.addClass('is-dragging'); //
            _this.$element.data('dragging', true);

            curHandle = $(e.currentTarget);

            $body.on('mousemove.zf.slider', function (e) {
              e.preventDefault();
              _this._handleEvent(e, curHandle);
            }).on('mouseup.zf.slider', function (e) {
              _this._handleEvent(e, curHandle);

              $handle.removeClass('is-dragging');
              _this.$fill.removeClass('is-dragging');
              _this.$element.data('dragging', false);

              $body.off('mousemove.zf.slider mouseup.zf.slider');
            });
          })
          // prevent events triggered by touch
          .on('selectstart.zf.slider touchmove.zf.slider', function (e) {
            e.preventDefault();
          });
        }

        $handle.off('keydown.zf.slider').on('keydown.zf.slider', function (e) {
          var _$handle = $(this),
              idx = _this.options.doubleSided ? _this.handles.index(_$handle) : 0,
              oldValue = parseFloat(_this.inputs.eq(idx).val()),
              newValue;

          // handle keyboard event with keyboard util
          Foundation.Keyboard.handleKey(e, 'Slider', {
            decrease: function decrease() {
              newValue = oldValue - _this.options.step;
            },
            increase: function increase() {
              newValue = oldValue + _this.options.step;
            },
            decrease_fast: function decrease_fast() {
              newValue = oldValue - _this.options.step * 10;
            },
            increase_fast: function increase_fast() {
              newValue = oldValue + _this.options.step * 10;
            },
            handled: function handled() {
              // only set handle pos when event was handled specially
              e.preventDefault();
              _this._setHandlePos(_$handle, newValue, true);
            }
          });
          /*if (newValue) { // if pressed key has special function, update value
            e.preventDefault();
            _this._setHandlePos(_$handle, newValue);
          }*/
        });
      }

      /**
       * Destroys the slider plugin.
       */
    }, {
      key: 'destroy',
      value: function destroy() {
        this.handles.off('.zf.slider');
        this.inputs.off('.zf.slider');
        this.$element.off('.zf.slider');

        Foundation.unregisterPlugin(this);
      }
    }]);

    return Slider;
  })();

  Slider.defaults = {
    /**
     * Minimum value for the slider scale.
     * @option
     * @example 0
     */
    start: 0,
    /**
     * Maximum value for the slider scale.
     * @option
     * @example 100
     */
    end: 100,
    /**
     * Minimum value change per change event.
     * @option
     * @example 1
     */
    step: 1,
    /**
     * Value at which the handle/input *(left handle/first input)* should be set to on initialization.
     * @option
     * @example 0
     */
    initialStart: 0,
    /**
     * Value at which the right handle/second input should be set to on initialization.
     * @option
     * @example 100
     */
    initialEnd: 100,
    /**
     * Allows the input to be located outside the container and visible. Set to by the JS
     * @option
     * @example false
     */
    binding: false,
    /**
     * Allows the user to click/tap on the slider bar to select a value.
     * @option
     * @example true
     */
    clickSelect: true,
    /**
     * Set to true and use the `vertical` class to change alignment to vertical.
     * @option
     * @example false
     */
    vertical: false,
    /**
     * Allows the user to drag the slider handle(s) to select a value.
     * @option
     * @example true
     */
    draggable: true,
    /**
     * Disables the slider and prevents event listeners from being applied. Double checked by JS with `disabledClass`.
     * @option
     * @example false
     */
    disabled: false,
    /**
     * Allows the use of two handles. Double checked by the JS. Changes some logic handling.
     * @option
     * @example false
     */
    doubleSided: false,
    /**
     * Potential future feature.
     */
    // steps: 100,
    /**
     * Number of decimal places the plugin should go to for floating point precision.
     * @option
     * @example 2
     */
    decimal: 2,
    /**
     * Time delay for dragged elements.
     */
    // dragDelay: 0,
    /**
     * Time, in ms, to animate the movement of a slider handle if user clicks/taps on the bar. Needs to be manually set if updating the transition time in the Sass settings.
     * @option
     * @example 200
     */
    moveTime: 200, //update this if changing the transition time in the sass
    /**
     * Class applied to disabled sliders.
     * @option
     * @example 'disabled'
     */
    disabledClass: 'disabled',
    /**
     * Will invert the default layout for a vertical<span data-tooltip title="who would do this???"> </span>slider.
     * @option
     * @example false
     */
    invertVertical: false,
    /**
     * Milliseconds before the `changed.zf-slider` event is triggered after value change.
     * @option
     * @example 500
     */
    changedDelay: 500
  };

  function percent(frac, num) {
    return frac / num;
  }
  function absPosition($handle, dir, clickPos, param) {
    return Math.abs($handle.position()[dir] + $handle[param]() / 2 - clickPos);
  }

  // Window exports
  Foundation.plugin(Slider, 'Slider');
})(jQuery);

//*********this is in case we go to static, absolute positions instead of dynamic positioning********
// this.setSteps(function() {
//   _this._events();
//   var initStart = _this.options.positions[_this.options.initialStart - 1] || null;
//   var initEnd = _this.options.initialEnd ? _this.options.position[_this.options.initialEnd - 1] : null;
//   if (initStart || initEnd) {
//     _this._handleEvent(initStart, initEnd);
//   }
// });

//***********the other part of absolute positions*************
// Slider.prototype.setSteps = function(cb) {
//   var posChange = this.$element.outerWidth() / this.options.steps;
//   var counter = 0
//   while(counter < this.options.steps) {
//     if (counter) {
//       this.options.positions.push(this.options.positions[counter - 1] + posChange);
//     } else {
//       this.options.positions.push(posChange);
//     }
//     counter++;
//   }
//   cb();
// };
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

!(function ($) {

  /**
   * Sticky module.
   * @module foundation.sticky
   * @requires foundation.util.triggers
   * @requires foundation.util.mediaQuery
   */

  var Sticky = (function () {
    /**
     * Creates a new instance of a sticky thing.
     * @class
     * @param {jQuery} element - jQuery object to make sticky.
     * @param {Object} options - options object passed when creating the element programmatically.
     */

    function Sticky(element, options) {
      _classCallCheck(this, Sticky);

      this.$element = element;
      this.options = $.extend({}, Sticky.defaults, this.$element.data(), options);

      this._init();

      Foundation.registerPlugin(this, 'Sticky');
    }

    /**
     * Initializes the sticky element by adding classes, getting/setting dimensions, breakpoints and attributes
     * @function
     * @private
     */

    _createClass(Sticky, [{
      key: '_init',
      value: function _init() {
        var $parent = this.$element.parent('[data-sticky-container]'),
            id = this.$element[0].id || Foundation.GetYoDigits(6, 'sticky'),
            _this = this;

        if (!$parent.length) {
          this.wasWrapped = true;
        }
        this.$container = $parent.length ? $parent : $(this.options.container).wrapInner(this.$element);
        this.$container.addClass(this.options.containerClass);

        this.$element.addClass(this.options.stickyClass).attr({ 'data-resize': id });

        this.scrollCount = this.options.checkEvery;
        this.isStuck = false;
        $(window).one('load.zf.sticky', function () {
          //We calculate the container height to have correct values for anchor points offset calculation.
          _this.containerHeight = _this.$element.css("display") == "none" ? 0 : _this.$element[0].getBoundingClientRect().height;
          _this.$container.css('height', _this.containerHeight);
          _this.elemHeight = _this.containerHeight;
          if (_this.options.anchor !== '') {
            _this.$anchor = $('#' + _this.options.anchor);
          } else {
            _this._parsePoints();
          }

          _this._setSizes(function () {
            _this._calc(false);
          });
          _this._events(id.split('-').reverse().join('-'));
        });
      }

      /**
       * If using multiple elements as anchors, calculates the top and bottom pixel values the sticky thing should stick and unstick on.
       * @function
       * @private
       */
    }, {
      key: '_parsePoints',
      value: function _parsePoints() {
        var top = this.options.topAnchor == "" ? 1 : this.options.topAnchor,
            btm = this.options.btmAnchor == "" ? document.documentElement.scrollHeight : this.options.btmAnchor,
            pts = [top, btm],
            breaks = {};
        for (var i = 0, len = pts.length; i < len && pts[i]; i++) {
          var pt;
          if (typeof pts[i] === 'number') {
            pt = pts[i];
          } else {
            var place = pts[i].split(':'),
                anchor = $('#' + place[0]);

            pt = anchor.offset().top;
            if (place[1] && place[1].toLowerCase() === 'bottom') {
              pt += anchor[0].getBoundingClientRect().height;
            }
          }
          breaks[i] = pt;
        }

        this.points = breaks;
        return;
      }

      /**
       * Adds event handlers for the scrolling element.
       * @private
       * @param {String} id - psuedo-random id for unique scroll event listener.
       */
    }, {
      key: '_events',
      value: function _events(id) {
        var _this = this,
            scrollListener = this.scrollListener = 'scroll.zf.' + id;
        if (this.isOn) {
          return;
        }
        if (this.canStick) {
          this.isOn = true;
          $(window).off(scrollListener).on(scrollListener, function (e) {
            if (_this.scrollCount === 0) {
              _this.scrollCount = _this.options.checkEvery;
              _this._setSizes(function () {
                _this._calc(false, window.pageYOffset);
              });
            } else {
              _this.scrollCount--;
              _this._calc(false, window.pageYOffset);
            }
          });
        }

        this.$element.off('resizeme.zf.trigger').on('resizeme.zf.trigger', function (e, el) {
          _this._setSizes(function () {
            _this._calc(false);
            if (_this.canStick) {
              if (!_this.isOn) {
                _this._events(id);
              }
            } else if (_this.isOn) {
              _this._pauseListeners(scrollListener);
            }
          });
        });
      }

      /**
       * Removes event handlers for scroll and change events on anchor.
       * @fires Sticky#pause
       * @param {String} scrollListener - unique, namespaced scroll listener attached to `window`
       */
    }, {
      key: '_pauseListeners',
      value: function _pauseListeners(scrollListener) {
        this.isOn = false;
        $(window).off(scrollListener);

        /**
         * Fires when the plugin is paused due to resize event shrinking the view.
         * @event Sticky#pause
         * @private
         */
        this.$element.trigger('pause.zf.sticky');
      }

      /**
       * Called on every `scroll` event and on `_init`
       * fires functions based on booleans and cached values
       * @param {Boolean} checkSizes - true if plugin should recalculate sizes and breakpoints.
       * @param {Number} scroll - current scroll position passed from scroll event cb function. If not passed, defaults to `window.pageYOffset`.
       */
    }, {
      key: '_calc',
      value: function _calc(checkSizes, scroll) {
        if (checkSizes) {
          this._setSizes();
        }

        if (!this.canStick) {
          if (this.isStuck) {
            this._removeSticky(true);
          }
          return false;
        }

        if (!scroll) {
          scroll = window.pageYOffset;
        }

        if (scroll >= this.topPoint) {
          if (scroll <= this.bottomPoint) {
            if (!this.isStuck) {
              this._setSticky();
            }
          } else {
            if (this.isStuck) {
              this._removeSticky(false);
            }
          }
        } else {
          if (this.isStuck) {
            this._removeSticky(true);
          }
        }
      }

      /**
       * Causes the $element to become stuck.
       * Adds `position: fixed;`, and helper classes.
       * @fires Sticky#stuckto
       * @function
       * @private
       */
    }, {
      key: '_setSticky',
      value: function _setSticky() {
        var _this = this,
            stickTo = this.options.stickTo,
            mrgn = stickTo === 'top' ? 'marginTop' : 'marginBottom',
            notStuckTo = stickTo === 'top' ? 'bottom' : 'top',
            css = {};

        css[mrgn] = this.options[mrgn] + 'em';
        css[stickTo] = 0;
        css[notStuckTo] = 'auto';
        css['left'] = this.$container.offset().left + parseInt(window.getComputedStyle(this.$container[0])["padding-left"], 10);
        this.isStuck = true;
        this.$element.removeClass('is-anchored is-at-' + notStuckTo).addClass('is-stuck is-at-' + stickTo).css(css)
        /**
         * Fires when the $element has become `position: fixed;`
         * Namespaced to `top` or `bottom`, e.g. `sticky.zf.stuckto:top`
         * @event Sticky#stuckto
         */
        .trigger('sticky.zf.stuckto:' + stickTo);
        this.$element.on("transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd", function () {
          _this._setSizes();
        });
      }

      /**
       * Causes the $element to become unstuck.
       * Removes `position: fixed;`, and helper classes.
       * Adds other helper classes.
       * @param {Boolean} isTop - tells the function if the $element should anchor to the top or bottom of its $anchor element.
       * @fires Sticky#unstuckfrom
       * @private
       */
    }, {
      key: '_removeSticky',
      value: function _removeSticky(isTop) {
        var stickTo = this.options.stickTo,
            stickToTop = stickTo === 'top',
            css = {},
            anchorPt = (this.points ? this.points[1] - this.points[0] : this.anchorHeight) - this.elemHeight,
            mrgn = stickToTop ? 'marginTop' : 'marginBottom',
            notStuckTo = stickToTop ? 'bottom' : 'top',
            topOrBottom = isTop ? 'top' : 'bottom';

        css[mrgn] = 0;

        css['bottom'] = 'auto';
        if (isTop) {
          css['top'] = 0;
        } else {
          css['top'] = anchorPt;
        }

        css['left'] = '';
        this.isStuck = false;
        this.$element.removeClass('is-stuck is-at-' + stickTo).addClass('is-anchored is-at-' + topOrBottom).css(css)
        /**
         * Fires when the $element has become anchored.
         * Namespaced to `top` or `bottom`, e.g. `sticky.zf.unstuckfrom:bottom`
         * @event Sticky#unstuckfrom
         */
        .trigger('sticky.zf.unstuckfrom:' + topOrBottom);
      }

      /**
       * Sets the $element and $container sizes for plugin.
       * Calls `_setBreakPoints`.
       * @param {Function} cb - optional callback function to fire on completion of `_setBreakPoints`.
       * @private
       */
    }, {
      key: '_setSizes',
      value: function _setSizes(cb) {
        this.canStick = Foundation.MediaQuery.atLeast(this.options.stickyOn);
        if (!this.canStick) {
          if (cb && typeof cb === 'function') {
            cb();
          }
        }
        var _this = this,
            newElemWidth = this.$container[0].getBoundingClientRect().width,
            comp = window.getComputedStyle(this.$container[0]),
            pdng = parseInt(comp['padding-right'], 10);

        if (this.$anchor && this.$anchor.length) {
          this.anchorHeight = this.$anchor[0].getBoundingClientRect().height;
        } else {
          this._parsePoints();
        }

        this.$element.css({
          'max-width': newElemWidth - pdng + 'px'
        });

        var newContainerHeight = this.$element[0].getBoundingClientRect().height || this.containerHeight;
        if (this.$element.css("display") == "none") {
          newContainerHeight = 0;
        }
        this.containerHeight = newContainerHeight;
        this.$container.css({
          height: newContainerHeight
        });
        this.elemHeight = newContainerHeight;

        if (this.isStuck) {
          this.$element.css({ "left": this.$container.offset().left + parseInt(comp['padding-left'], 10) });
        } else {
          if (this.$element.hasClass('is-at-bottom')) {
            var anchorPt = (this.points ? this.points[1] - this.$container.offset().top : this.anchorHeight) - this.elemHeight;
            this.$element.css('top', anchorPt);
          }
        }

        this._setBreakPoints(newContainerHeight, function () {
          if (cb && typeof cb === 'function') {
            cb();
          }
        });
      }

      /**
       * Sets the upper and lower breakpoints for the element to become sticky/unsticky.
       * @param {Number} elemHeight - px value for sticky.$element height, calculated by `_setSizes`.
       * @param {Function} cb - optional callback function to be called on completion.
       * @private
       */
    }, {
      key: '_setBreakPoints',
      value: function _setBreakPoints(elemHeight, cb) {
        if (!this.canStick) {
          if (cb && typeof cb === 'function') {
            cb();
          } else {
            return false;
          }
        }
        var mTop = emCalc(this.options.marginTop),
            mBtm = emCalc(this.options.marginBottom),
            topPoint = this.points ? this.points[0] : this.$anchor.offset().top,
            bottomPoint = this.points ? this.points[1] : topPoint + this.anchorHeight,

        // topPoint = this.$anchor.offset().top || this.points[0],
        // bottomPoint = topPoint + this.anchorHeight || this.points[1],
        winHeight = window.innerHeight;

        if (this.options.stickTo === 'top') {
          topPoint -= mTop;
          bottomPoint -= elemHeight + mTop;
        } else if (this.options.stickTo === 'bottom') {
          topPoint -= winHeight - (elemHeight + mBtm);
          bottomPoint -= winHeight - mBtm;
        } else {
          //this would be the stickTo: both option... tricky
        }

        this.topPoint = topPoint;
        this.bottomPoint = bottomPoint;

        if (cb && typeof cb === 'function') {
          cb();
        }
      }

      /**
       * Destroys the current sticky element.
       * Resets the element to the top position first.
       * Removes event listeners, JS-added css properties and classes, and unwraps the $element if the JS added the $container.
       * @function
       */
    }, {
      key: 'destroy',
      value: function destroy() {
        this._removeSticky(true);

        this.$element.removeClass(this.options.stickyClass + ' is-anchored is-at-top').css({
          height: '',
          top: '',
          bottom: '',
          'max-width': ''
        }).off('resizeme.zf.trigger');
        if (this.$anchor && this.$anchor.length) {
          this.$anchor.off('change.zf.sticky');
        }
        $(window).off(this.scrollListener);

        if (this.wasWrapped) {
          this.$element.unwrap();
        } else {
          this.$container.removeClass(this.options.containerClass).css({
            height: ''
          });
        }
        Foundation.unregisterPlugin(this);
      }
    }]);

    return Sticky;
  })();

  Sticky.defaults = {
    /**
     * Customizable container template. Add your own classes for styling and sizing.
     * @option
     * @example '&lt;div data-sticky-container class="small-6 columns"&gt;&lt;/div&gt;'
     */
    container: '<div data-sticky-container></div>',
    /**
     * Location in the view the element sticks to.
     * @option
     * @example 'top'
     */
    stickTo: 'top',
    /**
     * If anchored to a single element, the id of that element.
     * @option
     * @example 'exampleId'
     */
    anchor: '',
    /**
     * If using more than one element as anchor points, the id of the top anchor.
     * @option
     * @example 'exampleId:top'
     */
    topAnchor: '',
    /**
     * If using more than one element as anchor points, the id of the bottom anchor.
     * @option
     * @example 'exampleId:bottom'
     */
    btmAnchor: '',
    /**
     * Margin, in `em`'s to apply to the top of the element when it becomes sticky.
     * @option
     * @example 1
     */
    marginTop: 1,
    /**
     * Margin, in `em`'s to apply to the bottom of the element when it becomes sticky.
     * @option
     * @example 1
     */
    marginBottom: 1,
    /**
     * Breakpoint string that is the minimum screen size an element should become sticky.
     * @option
     * @example 'medium'
     */
    stickyOn: 'medium',
    /**
     * Class applied to sticky element, and removed on destruction. Foundation defaults to `sticky`.
     * @option
     * @example 'sticky'
     */
    stickyClass: 'sticky',
    /**
     * Class applied to sticky container. Foundation defaults to `sticky-container`.
     * @option
     * @example 'sticky-container'
     */
    containerClass: 'sticky-container',
    /**
     * Number of scroll events between the plugin's recalculating sticky points. Setting it to `0` will cause it to recalc every scroll event, setting it to `-1` will prevent recalc on scroll.
     * @option
     * @example 50
     */
    checkEvery: -1
  };

  /**
   * Helper function to calculate em values
   * @param Number {em} - number of em's to calculate into pixels
   */
  function emCalc(em) {
    return parseInt(window.getComputedStyle(document.body, null).fontSize, 10) * em;
  }

  // Window exports
  Foundation.plugin(Sticky, 'Sticky');
})(jQuery);
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

!(function ($) {

  /**
   * Tabs module.
   * @module foundation.tabs
   * @requires foundation.util.keyboard
   * @requires foundation.util.timerAndImageLoader if tabs contain images
   */

  var Tabs = (function () {
    /**
     * Creates a new instance of tabs.
     * @class
     * @fires Tabs#init
     * @param {jQuery} element - jQuery object to make into tabs.
     * @param {Object} options - Overrides to the default plugin settings.
     */

    function Tabs(element, options) {
      _classCallCheck(this, Tabs);

      this.$element = element;
      this.options = $.extend({}, Tabs.defaults, this.$element.data(), options);

      this._init();
      Foundation.registerPlugin(this, 'Tabs');
      Foundation.Keyboard.register('Tabs', {
        'ENTER': 'open',
        'SPACE': 'open',
        'ARROW_RIGHT': 'next',
        'ARROW_UP': 'previous',
        'ARROW_DOWN': 'next',
        'ARROW_LEFT': 'previous'
        // 'TAB': 'next',
        // 'SHIFT_TAB': 'previous'
      });
    }

    /**
     * Initializes the tabs by showing and focusing (if autoFocus=true) the preset active tab.
     * @private
     */

    _createClass(Tabs, [{
      key: '_init',
      value: function _init() {
        var _this = this;

        this.$tabTitles = this.$element.find('.' + this.options.linkClass);
        this.$tabContent = $('[data-tabs-content="' + this.$element[0].id + '"]');

        this.$tabTitles.each(function () {
          var $elem = $(this),
              $link = $elem.find('a'),
              isActive = $elem.hasClass('is-active'),
              hash = $link[0].hash.slice(1),
              linkId = $link[0].id ? $link[0].id : hash + '-label',
              $tabContent = $('#' + hash);

          $elem.attr({ 'role': 'presentation' });

          $link.attr({
            'role': 'tab',
            'aria-controls': hash,
            'aria-selected': isActive,
            'id': linkId
          });

          $tabContent.attr({
            'role': 'tabpanel',
            'aria-hidden': !isActive,
            'aria-labelledby': linkId
          });

          if (isActive && _this.options.autoFocus) {
            $link.focus();
          }
        });

        if (this.options.matchHeight) {
          var $images = this.$tabContent.find('img');

          if ($images.length) {
            Foundation.onImagesLoaded($images, this._setHeight.bind(this));
          } else {
            this._setHeight();
          }
        }

        this._events();
      }

      /**
       * Adds event handlers for items within the tabs.
       * @private
       */
    }, {
      key: '_events',
      value: function _events() {
        this._addKeyHandler();
        this._addClickHandler();
        this._setHeightMqHandler = null;

        if (this.options.matchHeight) {
          this._setHeightMqHandler = this._setHeight.bind(this);

          $(window).on('changed.zf.mediaquery', this._setHeightMqHandler);
        }
      }

      /**
       * Adds click handlers for items within the tabs.
       * @private
       */
    }, {
      key: '_addClickHandler',
      value: function _addClickHandler() {
        var _this = this;

        this.$element.off('click.zf.tabs').on('click.zf.tabs', '.' + this.options.linkClass, function (e) {
          e.preventDefault();
          e.stopPropagation();
          if ($(this).hasClass('is-active')) {
            return;
          }
          _this._handleTabChange($(this));
        });
      }

      /**
       * Adds keyboard event handlers for items within the tabs.
       * @private
       */
    }, {
      key: '_addKeyHandler',
      value: function _addKeyHandler() {
        var _this = this;
        var $firstTab = _this.$element.find('li:first-of-type');
        var $lastTab = _this.$element.find('li:last-of-type');

        this.$tabTitles.off('keydown.zf.tabs').on('keydown.zf.tabs', function (e) {
          if (e.which === 9) return;

          var $element = $(this),
              $elements = $element.parent('ul').children('li'),
              $prevElement,
              $nextElement;

          $elements.each(function (i) {
            if ($(this).is($element)) {
              if (_this.options.wrapOnKeys) {
                $prevElement = i === 0 ? $elements.last() : $elements.eq(i - 1);
                $nextElement = i === $elements.length - 1 ? $elements.first() : $elements.eq(i + 1);
              } else {
                $prevElement = $elements.eq(Math.max(0, i - 1));
                $nextElement = $elements.eq(Math.min(i + 1, $elements.length - 1));
              }
              return;
            }
          });

          // handle keyboard event with keyboard util
          Foundation.Keyboard.handleKey(e, 'Tabs', {
            open: function open() {
              $element.find('[role="tab"]').focus();
              _this._handleTabChange($element);
            },
            previous: function previous() {
              $prevElement.find('[role="tab"]').focus();
              _this._handleTabChange($prevElement);
            },
            next: function next() {
              $nextElement.find('[role="tab"]').focus();
              _this._handleTabChange($nextElement);
            },
            handled: function handled() {
              e.stopPropagation();
              e.preventDefault();
            }
          });
        });
      }

      /**
       * Opens the tab `$targetContent` defined by `$target`.
       * @param {jQuery} $target - Tab to open.
       * @fires Tabs#change
       * @function
       */
    }, {
      key: '_handleTabChange',
      value: function _handleTabChange($target) {
        var $tabLink = $target.find('[role="tab"]'),
            hash = $tabLink[0].hash,
            $targetContent = this.$tabContent.find(hash),
            $oldTab = this.$element.find('.' + this.options.linkClass + '.is-active').removeClass('is-active').find('[role="tab"]').attr({ 'aria-selected': 'false' });

        $('#' + $oldTab.attr('aria-controls')).removeClass('is-active').attr({ 'aria-hidden': 'true' });

        $target.addClass('is-active');

        $tabLink.attr({ 'aria-selected': 'true' });

        $targetContent.addClass('is-active').attr({ 'aria-hidden': 'false' });

        /**
         * Fires when the plugin has successfully changed tabs.
         * @event Tabs#change
         */
        this.$element.trigger('change.zf.tabs', [$target]);
      }

      /**
       * Public method for selecting a content pane to display.
       * @param {jQuery | String} elem - jQuery object or string of the id of the pane to display.
       * @function
       */
    }, {
      key: 'selectTab',
      value: function selectTab(elem) {
        var idStr;

        if (typeof elem === 'object') {
          idStr = elem[0].id;
        } else {
          idStr = elem;
        }

        if (idStr.indexOf('#') < 0) {
          idStr = '#' + idStr;
        }

        var $target = this.$tabTitles.find('[href="' + idStr + '"]').parent('.' + this.options.linkClass);

        this._handleTabChange($target);
      }
    }, {
      key: '_setHeight',

      /**
       * Sets the height of each panel to the height of the tallest panel.
       * If enabled in options, gets called on media query change.
       * If loading content via external source, can be called directly or with _reflow.
       * @function
       * @private
       */
      value: function _setHeight() {
        var max = 0;
        this.$tabContent.find('.' + this.options.panelClass).css('height', '').each(function () {
          var panel = $(this),
              isActive = panel.hasClass('is-active');

          if (!isActive) {
            panel.css({ 'visibility': 'hidden', 'display': 'block' });
          }

          var temp = this.getBoundingClientRect().height;

          if (!isActive) {
            panel.css({
              'visibility': '',
              'display': ''
            });
          }

          max = temp > max ? temp : max;
        }).css('height', max + 'px');
      }

      /**
       * Destroys an instance of an tabs.
       * @fires Tabs#destroyed
       */
    }, {
      key: 'destroy',
      value: function destroy() {
        this.$element.find('.' + this.options.linkClass).off('.zf.tabs').hide().end().find('.' + this.options.panelClass).hide();

        if (this.options.matchHeight) {
          if (this._setHeightMqHandler != null) {
            $(window).off('changed.zf.mediaquery', this._setHeightMqHandler);
          }
        }

        Foundation.unregisterPlugin(this);
      }
    }]);

    return Tabs;
  })();

  Tabs.defaults = {
    /**
     * Allows the window to scroll to content of active pane on load if set to true.
     * @option
     * @example false
     */
    autoFocus: false,

    /**
     * Allows keyboard input to 'wrap' around the tab links.
     * @option
     * @example true
     */
    wrapOnKeys: true,

    /**
     * Allows the tab content panes to match heights if set to true.
     * @option
     * @example false
     */
    matchHeight: false,

    /**
     * Class applied to `li`'s in tab link list.
     * @option
     * @example 'tabs-title'
     */
    linkClass: 'tabs-title',

    /**
     * Class applied to the content containers.
     * @option
     * @example 'tabs-panel'
     */
    panelClass: 'tabs-panel'
  };

  function checkClass($elem) {
    return $elem.hasClass('is-active');
  }

  // Window exports
  Foundation.plugin(Tabs, 'Tabs');
})(jQuery);
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

!(function ($) {

  /**
   * Toggler module.
   * @module foundation.toggler
   * @requires foundation.util.motion
   * @requires foundation.util.triggers
   */

  var Toggler = (function () {
    /**
     * Creates a new instance of Toggler.
     * @class
     * @fires Toggler#init
     * @param {Object} element - jQuery object to add the trigger to.
     * @param {Object} options - Overrides to the default plugin settings.
     */

    function Toggler(element, options) {
      _classCallCheck(this, Toggler);

      this.$element = element;
      this.options = $.extend({}, Toggler.defaults, element.data(), options);
      this.className = '';

      this._init();
      this._events();

      Foundation.registerPlugin(this, 'Toggler');
    }

    /**
     * Initializes the Toggler plugin by parsing the toggle class from data-toggler, or animation classes from data-animate.
     * @function
     * @private
     */

    _createClass(Toggler, [{
      key: '_init',
      value: function _init() {
        var input;
        // Parse animation classes if they were set
        if (this.options.animate) {
          input = this.options.animate.split(' ');

          this.animationIn = input[0];
          this.animationOut = input[1] || null;
        }
        // Otherwise, parse toggle class
        else {
            input = this.$element.data('toggler');
            // Allow for a . at the beginning of the string
            this.className = input[0] === '.' ? input.slice(1) : input;
          }

        // Add ARIA attributes to triggers
        var id = this.$element[0].id;
        $('[data-open="' + id + '"], [data-close="' + id + '"], [data-toggle="' + id + '"]').attr('aria-controls', id);
        // If the target is hidden, add aria-hidden
        this.$element.attr('aria-expanded', this.$element.is(':hidden') ? false : true);
      }

      /**
       * Initializes events for the toggle trigger.
       * @function
       * @private
       */
    }, {
      key: '_events',
      value: function _events() {
        this.$element.off('toggle.zf.trigger').on('toggle.zf.trigger', this.toggle.bind(this));
      }

      /**
       * Toggles the target class on the target element. An event is fired from the original trigger depending on if the resultant state was "on" or "off".
       * @function
       * @fires Toggler#on
       * @fires Toggler#off
       */
    }, {
      key: 'toggle',
      value: function toggle() {
        this[this.options.animate ? '_toggleAnimate' : '_toggleClass']();
      }
    }, {
      key: '_toggleClass',
      value: function _toggleClass() {
        this.$element.toggleClass(this.className);

        var isOn = this.$element.hasClass(this.className);
        if (isOn) {
          /**
           * Fires if the target element has the class after a toggle.
           * @event Toggler#on
           */
          this.$element.trigger('on.zf.toggler');
        } else {
          /**
           * Fires if the target element does not have the class after a toggle.
           * @event Toggler#off
           */
          this.$element.trigger('off.zf.toggler');
        }

        this._updateARIA(isOn);
      }
    }, {
      key: '_toggleAnimate',
      value: function _toggleAnimate() {
        var _this = this;

        if (this.$element.is(':hidden')) {
          Foundation.Motion.animateIn(this.$element, this.animationIn, function () {
            _this._updateARIA(true);
            this.trigger('on.zf.toggler');
          });
        } else {
          Foundation.Motion.animateOut(this.$element, this.animationOut, function () {
            _this._updateARIA(false);
            this.trigger('off.zf.toggler');
          });
        }
      }
    }, {
      key: '_updateARIA',
      value: function _updateARIA(isOn) {
        this.$element.attr('aria-expanded', isOn ? true : false);
      }

      /**
       * Destroys the instance of Toggler on the element.
       * @function
       */
    }, {
      key: 'destroy',
      value: function destroy() {
        this.$element.off('.zf.toggler');
        Foundation.unregisterPlugin(this);
      }
    }]);

    return Toggler;
  })();

  Toggler.defaults = {
    /**
     * Tells the plugin if the element should animated when toggled.
     * @option
     * @example false
     */
    animate: false
  };

  // Window exports
  Foundation.plugin(Toggler, 'Toggler');
})(jQuery);
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

!(function ($) {

  /**
   * Tooltip module.
   * @module foundation.tooltip
   * @requires foundation.util.box
   * @requires foundation.util.mediaQuery
   * @requires foundation.util.triggers
   */

  var Tooltip = (function () {
    /**
     * Creates a new instance of a Tooltip.
     * @class
     * @fires Tooltip#init
     * @param {jQuery} element - jQuery object to attach a tooltip to.
     * @param {Object} options - object to extend the default configuration.
     */

    function Tooltip(element, options) {
      _classCallCheck(this, Tooltip);

      this.$element = element;
      this.options = $.extend({}, Tooltip.defaults, this.$element.data(), options);

      this.isActive = false;
      this.isClick = false;
      this._init();

      Foundation.registerPlugin(this, 'Tooltip');
    }

    /**
     * Initializes the tooltip by setting the creating the tip element, adding it's text, setting private variables and setting attributes on the anchor.
     * @private
     */

    _createClass(Tooltip, [{
      key: '_init',
      value: function _init() {
        var elemId = this.$element.attr('aria-describedby') || Foundation.GetYoDigits(6, 'tooltip');

        this.options.positionClass = this.options.positionClass || this._getPositionClass(this.$element);
        this.options.tipText = this.options.tipText || this.$element.attr('title');
        this.template = this.options.template ? $(this.options.template) : this._buildTemplate(elemId);

        this.template.appendTo(document.body).text(this.options.tipText).hide();

        this.$element.attr({
          'title': '',
          'aria-describedby': elemId,
          'data-yeti-box': elemId,
          'data-toggle': elemId,
          'data-resize': elemId
        }).addClass(this.options.triggerClass);

        //helper variables to track movement on collisions
        this.usedPositions = [];
        this.counter = 4;
        this.classChanged = false;

        this._events();
      }

      /**
       * Grabs the current positioning class, if present, and returns the value or an empty string.
       * @private
       */
    }, {
      key: '_getPositionClass',
      value: function _getPositionClass(element) {
        if (!element) {
          return '';
        }
        // var position = element.attr('class').match(/top|left|right/g);
        var position = element[0].className.match(/\b(top|left|right)\b/g);
        position = position ? position[0] : '';
        return position;
      }
    }, {
      key: '_buildTemplate',

      /**
       * builds the tooltip element, adds attributes, and returns the template.
       * @private
       */
      value: function _buildTemplate(id) {
        var templateClasses = (this.options.tooltipClass + ' ' + this.options.positionClass + ' ' + this.options.templateClasses).trim();
        var $template = $('<div></div>').addClass(templateClasses).attr({
          'role': 'tooltip',
          'aria-hidden': true,
          'data-is-active': false,
          'data-is-focus': false,
          'id': id
        });
        return $template;
      }

      /**
       * Function that gets called if a collision event is detected.
       * @param {String} position - positioning class to try
       * @private
       */
    }, {
      key: '_reposition',
      value: function _reposition(position) {
        this.usedPositions.push(position ? position : 'bottom');

        //default, try switching to opposite side
        if (!position && this.usedPositions.indexOf('top') < 0) {
          this.template.addClass('top');
        } else if (position === 'top' && this.usedPositions.indexOf('bottom') < 0) {
          this.template.removeClass(position);
        } else if (position === 'left' && this.usedPositions.indexOf('right') < 0) {
          this.template.removeClass(position).addClass('right');
        } else if (position === 'right' && this.usedPositions.indexOf('left') < 0) {
          this.template.removeClass(position).addClass('left');
        }

        //if default change didn't work, try bottom or left first
        else if (!position && this.usedPositions.indexOf('top') > -1 && this.usedPositions.indexOf('left') < 0) {
            this.template.addClass('left');
          } else if (position === 'top' && this.usedPositions.indexOf('bottom') > -1 && this.usedPositions.indexOf('left') < 0) {
            this.template.removeClass(position).addClass('left');
          } else if (position === 'left' && this.usedPositions.indexOf('right') > -1 && this.usedPositions.indexOf('bottom') < 0) {
            this.template.removeClass(position);
          } else if (position === 'right' && this.usedPositions.indexOf('left') > -1 && this.usedPositions.indexOf('bottom') < 0) {
            this.template.removeClass(position);
          }
          //if nothing cleared, set to bottom
          else {
              this.template.removeClass(position);
            }
        this.classChanged = true;
        this.counter--;
      }

      /**
       * sets the position class of an element and recursively calls itself until there are no more possible positions to attempt, or the tooltip element is no longer colliding.
       * if the tooltip is larger than the screen width, default to full width - any user selected margin
       * @private
       */
    }, {
      key: '_setPosition',
      value: function _setPosition() {
        var position = this._getPositionClass(this.template),
            $tipDims = Foundation.Box.GetDimensions(this.template),
            $anchorDims = Foundation.Box.GetDimensions(this.$element),
            direction = position === 'left' ? 'left' : position === 'right' ? 'left' : 'top',
            param = direction === 'top' ? 'height' : 'width',
            offset = param === 'height' ? this.options.vOffset : this.options.hOffset,
            _this = this;

        if ($tipDims.width >= $tipDims.windowDims.width || !this.counter && !Foundation.Box.ImNotTouchingYou(this.template)) {
          this.template.offset(Foundation.Box.GetOffsets(this.template, this.$element, 'center bottom', this.options.vOffset, this.options.hOffset, true)).css({
            // this.$element.offset(Foundation.GetOffsets(this.template, this.$element, 'center bottom', this.options.vOffset, this.options.hOffset, true)).css({
            'width': $anchorDims.windowDims.width - this.options.hOffset * 2,
            'height': 'auto'
          });
          return false;
        }

        this.template.offset(Foundation.Box.GetOffsets(this.template, this.$element, 'center ' + (position || 'bottom'), this.options.vOffset, this.options.hOffset));

        while (!Foundation.Box.ImNotTouchingYou(this.template) && this.counter) {
          this._reposition(position);
          this._setPosition();
        }
      }

      /**
       * reveals the tooltip, and fires an event to close any other open tooltips on the page
       * @fires Tooltip#closeme
       * @fires Tooltip#show
       * @function
       */
    }, {
      key: 'show',
      value: function show() {
        if (this.options.showOn !== 'all' && !Foundation.MediaQuery.atLeast(this.options.showOn)) {
          // console.error('The screen is too small to display this tooltip');
          return false;
        }

        var _this = this;
        this.template.css('visibility', 'hidden').show();
        this._setPosition();

        /**
         * Fires to close all other open tooltips on the page
         * @event Closeme#tooltip
         */
        this.$element.trigger('closeme.zf.tooltip', this.template.attr('id'));

        this.template.attr({
          'data-is-active': true,
          'aria-hidden': false
        });
        _this.isActive = true;
        // console.log(this.template);
        this.template.stop().hide().css('visibility', '').fadeIn(this.options.fadeInDuration, function () {
          //maybe do stuff?
        });
        /**
         * Fires when the tooltip is shown
         * @event Tooltip#show
         */
        this.$element.trigger('show.zf.tooltip');
      }

      /**
       * Hides the current tooltip, and resets the positioning class if it was changed due to collision
       * @fires Tooltip#hide
       * @function
       */
    }, {
      key: 'hide',
      value: function hide() {
        // console.log('hiding', this.$element.data('yeti-box'));
        var _this = this;
        this.template.stop().attr({
          'aria-hidden': true,
          'data-is-active': false
        }).fadeOut(this.options.fadeOutDuration, function () {
          _this.isActive = false;
          _this.isClick = false;
          if (_this.classChanged) {
            _this.template.removeClass(_this._getPositionClass(_this.template)).addClass(_this.options.positionClass);

            _this.usedPositions = [];
            _this.counter = 4;
            _this.classChanged = false;
          }
        });
        /**
         * fires when the tooltip is hidden
         * @event Tooltip#hide
         */
        this.$element.trigger('hide.zf.tooltip');
      }

      /**
       * adds event listeners for the tooltip and its anchor
       * TODO combine some of the listeners like focus and mouseenter, etc.
       * @private
       */
    }, {
      key: '_events',
      value: function _events() {
        var _this = this;
        var $template = this.template;
        var isFocus = false;

        if (!this.options.disableHover) {

          this.$element.on('mouseenter.zf.tooltip', function (e) {
            if (!_this.isActive) {
              _this.timeout = setTimeout(function () {
                _this.show();
              }, _this.options.hoverDelay);
            }
          }).on('mouseleave.zf.tooltip', function (e) {
            clearTimeout(_this.timeout);
            if (!isFocus || _this.isClick && !_this.options.clickOpen) {
              _this.hide();
            }
          });
        }

        if (this.options.clickOpen) {
          this.$element.on('mousedown.zf.tooltip', function (e) {
            e.stopImmediatePropagation();
            if (_this.isClick) {
              //_this.hide();
              // _this.isClick = false;
            } else {
                _this.isClick = true;
                if ((_this.options.disableHover || !_this.$element.attr('tabindex')) && !_this.isActive) {
                  _this.show();
                }
              }
          });
        } else {
          this.$element.on('mousedown.zf.tooltip', function (e) {
            e.stopImmediatePropagation();
            _this.isClick = true;
          });
        }

        if (!this.options.disableForTouch) {
          this.$element.on('tap.zf.tooltip touchend.zf.tooltip', function (e) {
            _this.isActive ? _this.hide() : _this.show();
          });
        }

        this.$element.on({
          // 'toggle.zf.trigger': this.toggle.bind(this),
          // 'close.zf.trigger': this.hide.bind(this)
          'close.zf.trigger': this.hide.bind(this)
        });

        this.$element.on('focus.zf.tooltip', function (e) {
          isFocus = true;
          if (_this.isClick) {
            // If we're not showing open on clicks, we need to pretend a click-launched focus isn't
            // a real focus, otherwise on hover and come back we get bad behavior
            if (!_this.options.clickOpen) {
              isFocus = false;
            }
            return false;
          } else {
            _this.show();
          }
        }).on('focusout.zf.tooltip', function (e) {
          isFocus = false;
          _this.isClick = false;
          _this.hide();
        }).on('resizeme.zf.trigger', function () {
          if (_this.isActive) {
            _this._setPosition();
          }
        });
      }

      /**
       * adds a toggle method, in addition to the static show() & hide() functions
       * @function
       */
    }, {
      key: 'toggle',
      value: function toggle() {
        if (this.isActive) {
          this.hide();
        } else {
          this.show();
        }
      }

      /**
       * Destroys an instance of tooltip, removes template element from the view.
       * @function
       */
    }, {
      key: 'destroy',
      value: function destroy() {
        this.$element.attr('title', this.template.text()).off('.zf.trigger .zf.tootip')
        //  .removeClass('has-tip')
        .removeAttr('aria-describedby').removeAttr('data-yeti-box').removeAttr('data-toggle').removeAttr('data-resize');

        this.template.remove();

        Foundation.unregisterPlugin(this);
      }
    }]);

    return Tooltip;
  })();

  Tooltip.defaults = {
    disableForTouch: false,
    /**
     * Time, in ms, before a tooltip should open on hover.
     * @option
     * @example 200
     */
    hoverDelay: 200,
    /**
     * Time, in ms, a tooltip should take to fade into view.
     * @option
     * @example 150
     */
    fadeInDuration: 150,
    /**
     * Time, in ms, a tooltip should take to fade out of view.
     * @option
     * @example 150
     */
    fadeOutDuration: 150,
    /**
     * Disables hover events from opening the tooltip if set to true
     * @option
     * @example false
     */
    disableHover: false,
    /**
     * Optional addtional classes to apply to the tooltip template on init.
     * @option
     * @example 'my-cool-tip-class'
     */
    templateClasses: '',
    /**
     * Non-optional class added to tooltip templates. Foundation default is 'tooltip'.
     * @option
     * @example 'tooltip'
     */
    tooltipClass: 'tooltip',
    /**
     * Class applied to the tooltip anchor element.
     * @option
     * @example 'has-tip'
     */
    triggerClass: 'has-tip',
    /**
     * Minimum breakpoint size at which to open the tooltip.
     * @option
     * @example 'small'
     */
    showOn: 'small',
    /**
     * Custom template to be used to generate markup for tooltip.
     * @option
     * @example '&lt;div class="tooltip"&gt;&lt;/div&gt;'
     */
    template: '',
    /**
     * Text displayed in the tooltip template on open.
     * @option
     * @example 'Some cool space fact here.'
     */
    tipText: '',
    touchCloseText: 'Tap to close.',
    /**
     * Allows the tooltip to remain open if triggered with a click or touch event.
     * @option
     * @example true
     */
    clickOpen: true,
    /**
     * Additional positioning classes, set by the JS
     * @option
     * @example 'top'
     */
    positionClass: '',
    /**
     * Distance, in pixels, the template should push away from the anchor on the Y axis.
     * @option
     * @example 10
     */
    vOffset: 10,
    /**
     * Distance, in pixels, the template should push away from the anchor on the X axis, if aligned to a side.
     * @option
     * @example 12
     */
    hOffset: 12
  };

  /**
   * TODO utilize resize event trigger
   */

  // Window exports
  Foundation.plugin(Tooltip, 'Tooltip');
})(jQuery);
'use strict';

!(function ($) {

  Foundation.Box = {
    ImNotTouchingYou: ImNotTouchingYou,
    GetDimensions: GetDimensions,
    GetOffsets: GetOffsets
  };

  /**
   * Compares the dimensions of an element to a container and determines collision events with container.
   * @function
   * @param {jQuery} element - jQuery object to test for collisions.
   * @param {jQuery} parent - jQuery object to use as bounding container.
   * @param {Boolean} lrOnly - set to true to check left and right values only.
   * @param {Boolean} tbOnly - set to true to check top and bottom values only.
   * @default if no parent object passed, detects collisions with `window`.
   * @returns {Boolean} - true if collision free, false if a collision in any direction.
   */
  function ImNotTouchingYou(element, parent, lrOnly, tbOnly) {
    var eleDims = GetDimensions(element),
        top,
        bottom,
        left,
        right;

    if (parent) {
      var parDims = GetDimensions(parent);

      bottom = eleDims.offset.top + eleDims.height <= parDims.height + parDims.offset.top;
      top = eleDims.offset.top >= parDims.offset.top;
      left = eleDims.offset.left >= parDims.offset.left;
      right = eleDims.offset.left + eleDims.width <= parDims.width + parDims.offset.left;
    } else {
      bottom = eleDims.offset.top + eleDims.height <= eleDims.windowDims.height + eleDims.windowDims.offset.top;
      top = eleDims.offset.top >= eleDims.windowDims.offset.top;
      left = eleDims.offset.left >= eleDims.windowDims.offset.left;
      right = eleDims.offset.left + eleDims.width <= eleDims.windowDims.width;
    }

    var allDirs = [bottom, top, left, right];

    if (lrOnly) {
      return left === right === true;
    }

    if (tbOnly) {
      return top === bottom === true;
    }

    return allDirs.indexOf(false) === -1;
  };

  /**
   * Uses native methods to return an object of dimension values.
   * @function
   * @param {jQuery || HTML} element - jQuery object or DOM element for which to get the dimensions. Can be any element other that document or window.
   * @returns {Object} - nested object of integer pixel values
   * TODO - if element is window, return only those values.
   */
  function GetDimensions(elem, test) {
    elem = elem.length ? elem[0] : elem;

    if (elem === window || elem === document) {
      throw new Error("I'm sorry, Dave. I'm afraid I can't do that.");
    }

    var rect = elem.getBoundingClientRect(),
        parRect = elem.parentNode.getBoundingClientRect(),
        winRect = document.body.getBoundingClientRect(),
        winY = window.pageYOffset,
        winX = window.pageXOffset;

    return {
      width: rect.width,
      height: rect.height,
      offset: {
        top: rect.top + winY,
        left: rect.left + winX
      },
      parentDims: {
        width: parRect.width,
        height: parRect.height,
        offset: {
          top: parRect.top + winY,
          left: parRect.left + winX
        }
      },
      windowDims: {
        width: winRect.width,
        height: winRect.height,
        offset: {
          top: winY,
          left: winX
        }
      }
    };
  }

  /**
   * Returns an object of top and left integer pixel values for dynamically rendered elements,
   * such as: Tooltip, Reveal, and Dropdown
   * @function
   * @param {jQuery} element - jQuery object for the element being positioned.
   * @param {jQuery} anchor - jQuery object for the element's anchor point.
   * @param {String} position - a string relating to the desired position of the element, relative to it's anchor
   * @param {Number} vOffset - integer pixel value of desired vertical separation between anchor and element.
   * @param {Number} hOffset - integer pixel value of desired horizontal separation between anchor and element.
   * @param {Boolean} isOverflow - if a collision event is detected, sets to true to default the element to full width - any desired offset.
   * TODO alter/rewrite to work with `em` values as well/instead of pixels
   */
  function GetOffsets(element, anchor, position, vOffset, hOffset, isOverflow) {
    var $eleDims = GetDimensions(element),
        $anchorDims = anchor ? GetDimensions(anchor) : null;

    switch (position) {
      case 'top':
        return {
          left: Foundation.rtl() ? $anchorDims.offset.left - $eleDims.width + $anchorDims.width : $anchorDims.offset.left,
          top: $anchorDims.offset.top - ($eleDims.height + vOffset)
        };
        break;
      case 'left':
        return {
          left: $anchorDims.offset.left - ($eleDims.width + hOffset),
          top: $anchorDims.offset.top
        };
        break;
      case 'right':
        return {
          left: $anchorDims.offset.left + $anchorDims.width + hOffset,
          top: $anchorDims.offset.top
        };
        break;
      case 'center top':
        return {
          left: $anchorDims.offset.left + $anchorDims.width / 2 - $eleDims.width / 2,
          top: $anchorDims.offset.top - ($eleDims.height + vOffset)
        };
        break;
      case 'center bottom':
        return {
          left: isOverflow ? hOffset : $anchorDims.offset.left + $anchorDims.width / 2 - $eleDims.width / 2,
          top: $anchorDims.offset.top + $anchorDims.height + vOffset
        };
        break;
      case 'center left':
        return {
          left: $anchorDims.offset.left - ($eleDims.width + hOffset),
          top: $anchorDims.offset.top + $anchorDims.height / 2 - $eleDims.height / 2
        };
        break;
      case 'center right':
        return {
          left: $anchorDims.offset.left + $anchorDims.width + hOffset + 1,
          top: $anchorDims.offset.top + $anchorDims.height / 2 - $eleDims.height / 2
        };
        break;
      case 'center':
        return {
          left: $eleDims.windowDims.offset.left + $eleDims.windowDims.width / 2 - $eleDims.width / 2,
          top: $eleDims.windowDims.offset.top + $eleDims.windowDims.height / 2 - $eleDims.height / 2
        };
        break;
      case 'reveal':
        return {
          left: ($eleDims.windowDims.width - $eleDims.width) / 2,
          top: $eleDims.windowDims.offset.top + vOffset
        };
      case 'reveal full':
        return {
          left: $eleDims.windowDims.offset.left,
          top: $eleDims.windowDims.offset.top
        };
        break;
      case 'left bottom':
        return {
          left: $anchorDims.offset.left,
          top: $anchorDims.offset.top + $anchorDims.height
        };
        break;
      case 'right bottom':
        return {
          left: $anchorDims.offset.left + $anchorDims.width + hOffset - $eleDims.width,
          top: $anchorDims.offset.top + $anchorDims.height
        };
        break;
      default:
        return {
          left: Foundation.rtl() ? $anchorDims.offset.left - $eleDims.width + $anchorDims.width : $anchorDims.offset.left + hOffset,
          top: $anchorDims.offset.top + $anchorDims.height + vOffset
        };
    }
  }
})(jQuery);
/*******************************************
 *                                         *
 * This util was created by Marius Olbertz *
 * Please thank Marius on GitHub /owlbertz *
 * or the web http://www.mariusolbertz.de/ *
 *                                         *
 ******************************************/

'use strict';

!(function ($) {

  var keyCodes = {
    9: 'TAB',
    13: 'ENTER',
    27: 'ESCAPE',
    32: 'SPACE',
    37: 'ARROW_LEFT',
    38: 'ARROW_UP',
    39: 'ARROW_RIGHT',
    40: 'ARROW_DOWN'
  };

  var commands = {};

  var Keyboard = {
    keys: getKeyCodes(keyCodes),

    /**
     * Parses the (keyboard) event and returns a String that represents its key
     * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE
     * @param {Event} event - the event generated by the event handler
     * @return String key - String that represents the key pressed
     */
    parseKey: function parseKey(event) {
      var key = keyCodes[event.which || event.keyCode] || String.fromCharCode(event.which).toUpperCase();
      if (event.shiftKey) key = 'SHIFT_' + key;
      if (event.ctrlKey) key = 'CTRL_' + key;
      if (event.altKey) key = 'ALT_' + key;
      return key;
    },

    /**
     * Handles the given (keyboard) event
     * @param {Event} event - the event generated by the event handler
     * @param {String} component - Foundation component's name, e.g. Slider or Reveal
     * @param {Objects} functions - collection of functions that are to be executed
     */
    handleKey: function handleKey(event, component, functions) {
      var commandList = commands[component],
          keyCode = this.parseKey(event),
          cmds,
          command,
          fn;

      if (!commandList) return console.warn('Component not defined!');

      if (typeof commandList.ltr === 'undefined') {
        // this component does not differentiate between ltr and rtl
        cmds = commandList; // use plain list
      } else {
          // merge ltr and rtl: if document is rtl, rtl overwrites ltr and vice versa
          if (Foundation.rtl()) cmds = $.extend({}, commandList.ltr, commandList.rtl);else cmds = $.extend({}, commandList.rtl, commandList.ltr);
        }
      command = cmds[keyCode];

      fn = functions[command];
      if (fn && typeof fn === 'function') {
        // execute function  if exists
        var returnValue = fn.apply();
        if (functions.handled || typeof functions.handled === 'function') {
          // execute function when event was handled
          functions.handled(returnValue);
        }
      } else {
        if (functions.unhandled || typeof functions.unhandled === 'function') {
          // execute function when event was not handled
          functions.unhandled();
        }
      }
    },

    /**
     * Finds all focusable elements within the given `$element`
     * @param {jQuery} $element - jQuery object to search within
     * @return {jQuery} $focusable - all focusable elements within `$element`
     */
    findFocusable: function findFocusable($element) {
      return $element.find('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]').filter(function () {
        if (!$(this).is(':visible') || $(this).attr('tabindex') < 0) {
          return false;
        } //only have visible elements and those that have a tabindex greater or equal 0
        return true;
      });
    },

    /**
     * Returns the component name name
     * @param {Object} component - Foundation component, e.g. Slider or Reveal
     * @return String componentName
     */

    register: function register(componentName, cmds) {
      commands[componentName] = cmds;
    }
  };

  /*
   * Constants for easier comparing.
   * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE
   */
  function getKeyCodes(kcs) {
    var k = {};
    for (var kc in kcs) k[kcs[kc]] = kcs[kc];
    return k;
  }

  Foundation.Keyboard = Keyboard;
})(jQuery);
'use strict';

!(function ($) {

  // Default set of media queries
  var defaultQueries = {
    'default': 'only screen',
    landscape: 'only screen and (orientation: landscape)',
    portrait: 'only screen and (orientation: portrait)',
    retina: 'only screen and (-webkit-min-device-pixel-ratio: 2),' + 'only screen and (min--moz-device-pixel-ratio: 2),' + 'only screen and (-o-min-device-pixel-ratio: 2/1),' + 'only screen and (min-device-pixel-ratio: 2),' + 'only screen and (min-resolution: 192dpi),' + 'only screen and (min-resolution: 2dppx)'
  };

  var MediaQuery = {
    queries: [],

    current: '',

    /**
     * Initializes the media query helper, by extracting the breakpoint list from the CSS and activating the breakpoint watcher.
     * @function
     * @private
     */
    _init: function _init() {
      var self = this;
      var extractedStyles = $('.foundation-mq').css('font-family');
      var namedQueries;

      namedQueries = parseStyleToObject(extractedStyles);

      for (var key in namedQueries) {
        if (namedQueries.hasOwnProperty(key)) {
          self.queries.push({
            name: key,
            value: 'only screen and (min-width: ' + namedQueries[key] + ')'
          });
        }
      }

      this.current = this._getCurrentSize();

      this._watcher();
    },

    /**
     * Checks if the screen is at least as wide as a breakpoint.
     * @function
     * @param {String} size - Name of the breakpoint to check.
     * @returns {Boolean} `true` if the breakpoint matches, `false` if it's smaller.
     */
    atLeast: function atLeast(size) {
      var query = this.get(size);

      if (query) {
        return window.matchMedia(query).matches;
      }

      return false;
    },

    /**
     * Gets the media query of a breakpoint.
     * @function
     * @param {String} size - Name of the breakpoint to get.
     * @returns {String|null} - The media query of the breakpoint, or `null` if the breakpoint doesn't exist.
     */
    get: function get(size) {
      for (var i in this.queries) {
        if (this.queries.hasOwnProperty(i)) {
          var query = this.queries[i];
          if (size === query.name) return query.value;
        }
      }

      return null;
    },

    /**
     * Gets the current breakpoint name by testing every breakpoint and returning the last one to match (the biggest one).
     * @function
     * @private
     * @returns {String} Name of the current breakpoint.
     */
    _getCurrentSize: function _getCurrentSize() {
      var matched;

      for (var i = 0; i < this.queries.length; i++) {
        var query = this.queries[i];

        if (window.matchMedia(query.value).matches) {
          matched = query;
        }
      }

      if (typeof matched === 'object') {
        return matched.name;
      } else {
        return matched;
      }
    },

    /**
     * Activates the breakpoint watcher, which fires an event on the window whenever the breakpoint changes.
     * @function
     * @private
     */
    _watcher: function _watcher() {
      var _this = this;

      $(window).on('resize.zf.mediaquery', function () {
        var newSize = _this._getCurrentSize(),
            currentSize = _this.current;

        if (newSize !== currentSize) {
          // Change the current media query
          _this.current = newSize;

          // Broadcast the media query change on the window
          $(window).trigger('changed.zf.mediaquery', [newSize, currentSize]);
        }
      });
    }
  };

  Foundation.MediaQuery = MediaQuery;

  // matchMedia() polyfill - Test a CSS media type/query in JS.
  // Authors & copyright (c) 2012: Scott Jehl, Paul Irish, Nicholas Zakas, David Knight. Dual MIT/BSD license
  window.matchMedia || (window.matchMedia = (function () {
    'use strict';

    // For browsers that support matchMedium api such as IE 9 and webkit
    var styleMedia = window.styleMedia || window.media;

    // For those that don't support matchMedium
    if (!styleMedia) {
      var style = document.createElement('style'),
          script = document.getElementsByTagName('script')[0],
          info = null;

      style.type = 'text/css';
      style.id = 'matchmediajs-test';

      script && script.parentNode && script.parentNode.insertBefore(style, script);

      // 'style.currentStyle' is used by IE <= 8 and 'window.getComputedStyle' for all other browsers
      info = 'getComputedStyle' in window && window.getComputedStyle(style, null) || style.currentStyle;

      styleMedia = {
        matchMedium: function matchMedium(media) {
          var text = '@media ' + media + '{ #matchmediajs-test { width: 1px; } }';

          // 'style.styleSheet' is used by IE <= 8 and 'style.textContent' for all other browsers
          if (style.styleSheet) {
            style.styleSheet.cssText = text;
          } else {
            style.textContent = text;
          }

          // Test if media query is true or false
          return info.width === '1px';
        }
      };
    }

    return function (media) {
      return {
        matches: styleMedia.matchMedium(media || 'all'),
        media: media || 'all'
      };
    };
  })());

  // Thank you: https://github.com/sindresorhus/query-string
  function parseStyleToObject(str) {
    var styleObject = {};

    if (typeof str !== 'string') {
      return styleObject;
    }

    str = str.trim().slice(1, -1); // browsers re-quote string style values

    if (!str) {
      return styleObject;
    }

    styleObject = str.split('&').reduce(function (ret, param) {
      var parts = param.replace(/\+/g, ' ').split('=');
      var key = parts[0];
      var val = parts[1];
      key = decodeURIComponent(key);

      // missing `=` should be `null`:
      // http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
      val = val === undefined ? null : decodeURIComponent(val);

      if (!ret.hasOwnProperty(key)) {
        ret[key] = val;
      } else if (Array.isArray(ret[key])) {
        ret[key].push(val);
      } else {
        ret[key] = [ret[key], val];
      }
      return ret;
    }, {});

    return styleObject;
  }

  Foundation.MediaQuery = MediaQuery;
})(jQuery);
'use strict';

!(function ($) {

  /**
   * Motion module.
   * @module foundation.motion
   */

  var initClasses = ['mui-enter', 'mui-leave'];
  var activeClasses = ['mui-enter-active', 'mui-leave-active'];

  var Motion = {
    animateIn: function animateIn(element, animation, cb) {
      animate(true, element, animation, cb);
    },

    animateOut: function animateOut(element, animation, cb) {
      animate(false, element, animation, cb);
    }
  };

  function Move(duration, elem, fn) {
    var anim,
        prog,
        start = null;
    // console.log('called');

    function move(ts) {
      if (!start) start = window.performance.now();
      // console.log(start, ts);
      prog = ts - start;
      fn.apply(elem);

      if (prog < duration) {
        anim = window.requestAnimationFrame(move, elem);
      } else {
        window.cancelAnimationFrame(anim);
        elem.trigger('finished.zf.animate', [elem]).triggerHandler('finished.zf.animate', [elem]);
      }
    }
    anim = window.requestAnimationFrame(move);
  }

  /**
   * Animates an element in or out using a CSS transition class.
   * @function
   * @private
   * @param {Boolean} isIn - Defines if the animation is in or out.
   * @param {Object} element - jQuery or HTML object to animate.
   * @param {String} animation - CSS class to use.
   * @param {Function} cb - Callback to run when animation is finished.
   */
  function animate(isIn, element, animation, cb) {
    element = $(element).eq(0);

    if (!element.length) return;

    var initClass = isIn ? initClasses[0] : initClasses[1];
    var activeClass = isIn ? activeClasses[0] : activeClasses[1];

    // Set up the animation
    reset();

    element.addClass(animation).css('transition', 'none');

    requestAnimationFrame(function () {
      element.addClass(initClass);
      if (isIn) element.show();
    });

    // Start the animation
    requestAnimationFrame(function () {
      element[0].offsetWidth;
      element.css('transition', '').addClass(activeClass);
    });

    // Clean up the animation when it finishes
    element.one(Foundation.transitionend(element), finish);

    // Hides the element (for out animations), resets the element, and runs a callback
    function finish() {
      if (!isIn) element.hide();
      reset();
      if (cb) cb.apply(element);
    }

    // Resets transitions and removes motion-specific classes
    function reset() {
      element[0].style.transitionDuration = 0;
      element.removeClass(initClass + ' ' + activeClass + ' ' + animation);
    }
  }

  Foundation.Move = Move;
  Foundation.Motion = Motion;
})(jQuery);
'use strict';

!(function ($) {

  var Nest = {
    Feather: function Feather(menu) {
      var type = arguments.length <= 1 || arguments[1] === undefined ? 'zf' : arguments[1];

      menu.attr('role', 'menubar');

      var items = menu.find('li').attr({ 'role': 'menuitem' }),
          subMenuClass = 'is-' + type + '-submenu',
          subItemClass = subMenuClass + '-item',
          hasSubClass = 'is-' + type + '-submenu-parent';

      menu.find('a:first').attr('tabindex', 0);

      items.each(function () {
        var $item = $(this),
            $sub = $item.children('ul');

        if ($sub.length) {
          $item.addClass(hasSubClass).attr({
            'aria-haspopup': true,
            'aria-expanded': false,
            'aria-label': $item.children('a:first').text()
          });

          $sub.addClass('submenu ' + subMenuClass).attr({
            'data-submenu': '',
            'aria-hidden': true,
            'role': 'menu'
          });
        }

        if ($item.parent('[data-submenu]').length) {
          $item.addClass('is-submenu-item ' + subItemClass);
        }
      });

      return;
    },

    Burn: function Burn(menu, type) {
      var items = menu.find('li').removeAttr('tabindex'),
          subMenuClass = 'is-' + type + '-submenu',
          subItemClass = subMenuClass + '-item',
          hasSubClass = 'is-' + type + '-submenu-parent';

      menu.find('>li, .menu, .menu > li').removeClass(subMenuClass + ' ' + subItemClass + ' ' + hasSubClass + ' is-submenu-item submenu is-active').removeAttr('data-submenu').css('display', '');

      // console.log(      menu.find('.' + subMenuClass + ', .' + subItemClass + ', .has-submenu, .is-submenu-item, .submenu, [data-submenu]')
      //           .removeClass(subMenuClass + ' ' + subItemClass + ' has-submenu is-submenu-item submenu')
      //           .removeAttr('data-submenu'));
      // items.each(function(){
      //   var $item = $(this),
      //       $sub = $item.children('ul');
      //   if($item.parent('[data-submenu]').length){
      //     $item.removeClass('is-submenu-item ' + subItemClass);
      //   }
      //   if($sub.length){
      //     $item.removeClass('has-submenu');
      //     $sub.removeClass('submenu ' + subMenuClass).removeAttr('data-submenu');
      //   }
      // });
    }
  };

  Foundation.Nest = Nest;
})(jQuery);
'use strict';

!(function ($) {

  function Timer(elem, options, cb) {
    var _this = this,
        duration = options.duration,
        //options is an object for easily adding features later.
    nameSpace = Object.keys(elem.data())[0] || 'timer',
        remain = -1,
        start,
        timer;

    this.isPaused = false;

    this.restart = function () {
      remain = -1;
      clearTimeout(timer);
      this.start();
    };

    this.start = function () {
      this.isPaused = false;
      // if(!elem.data('paused')){ return false; }//maybe implement this sanity check if used for other things.
      clearTimeout(timer);
      remain = remain <= 0 ? duration : remain;
      elem.data('paused', false);
      start = Date.now();
      timer = setTimeout(function () {
        if (options.infinite) {
          _this.restart(); //rerun the timer.
        }
        if (cb && typeof cb === 'function') {
          cb();
        }
      }, remain);
      elem.trigger('timerstart.zf.' + nameSpace);
    };

    this.pause = function () {
      this.isPaused = true;
      //if(elem.data('paused')){ return false; }//maybe implement this sanity check if used for other things.
      clearTimeout(timer);
      elem.data('paused', true);
      var end = Date.now();
      remain = remain - (end - start);
      elem.trigger('timerpaused.zf.' + nameSpace);
    };
  }

  /**
   * Runs a callback function when images are fully loaded.
   * @param {Object} images - Image(s) to check if loaded.
   * @param {Func} callback - Function to execute when image is fully loaded.
   */
  function onImagesLoaded(images, callback) {
    var self = this,
        unloaded = images.length;

    if (unloaded === 0) {
      callback();
    }

    images.each(function () {
      if (this.complete) {
        singleImageLoaded();
      } else if (typeof this.naturalWidth !== 'undefined' && this.naturalWidth > 0) {
        singleImageLoaded();
      } else {
        $(this).one('load', function () {
          singleImageLoaded();
        });
      }
    });

    function singleImageLoaded() {
      unloaded--;
      if (unloaded === 0) {
        callback();
      }
    }
  }

  Foundation.Timer = Timer;
  Foundation.onImagesLoaded = onImagesLoaded;
})(jQuery);
//**************************************************
//**Work inspired by multiple jquery swipe plugins**
//**Done by Yohai Ararat ***************************
'use strict';

(function ($) {

	$.spotSwipe = {
		version: '1.0.0',
		enabled: 'ontouchstart' in document.documentElement,
		preventDefault: false,
		moveThreshold: 75,
		timeThreshold: 200
	};

	var startPosX,
	    startPosY,
	    startTime,
	    elapsedTime,
	    isMoving = false;

	function onTouchEnd() {
		//  alert(this);
		this.removeEventListener('touchmove', onTouchMove);
		this.removeEventListener('touchend', onTouchEnd);
		isMoving = false;
	}

	function onTouchMove(e) {
		if ($.spotSwipe.preventDefault) {
			e.preventDefault();
		}
		if (isMoving) {
			var x = e.touches[0].pageX;
			var y = e.touches[0].pageY;
			var dx = startPosX - x;
			var dy = startPosY - y;
			var dir;
			elapsedTime = new Date().getTime() - startTime;
			if (Math.abs(dx) >= $.spotSwipe.moveThreshold && elapsedTime <= $.spotSwipe.timeThreshold) {
				dir = dx > 0 ? 'left' : 'right';
			}
			// else if(Math.abs(dy) >= $.spotSwipe.moveThreshold && elapsedTime <= $.spotSwipe.timeThreshold) {
			//   dir = dy > 0 ? 'down' : 'up';
			// }
			if (dir) {
				e.preventDefault();
				onTouchEnd.call(this);
				$(this).trigger('swipe', dir).trigger('swipe' + dir);
			}
		}
	}

	function onTouchStart(e) {
		if (e.touches.length == 1) {
			startPosX = e.touches[0].pageX;
			startPosY = e.touches[0].pageY;
			isMoving = true;
			startTime = new Date().getTime();
			this.addEventListener('touchmove', onTouchMove, false);
			this.addEventListener('touchend', onTouchEnd, false);
		}
	}

	function init() {
		this.addEventListener && this.addEventListener('touchstart', onTouchStart, false);
	}

	function teardown() {
		this.removeEventListener('touchstart', onTouchStart);
	}

	$.event.special.swipe = { setup: init };

	$.each(['left', 'up', 'down', 'right'], function () {
		$.event.special['swipe' + this] = { setup: function setup() {
				$(this).on('swipe', $.noop);
			} };
	});
})(jQuery);
/****************************************************
 * Method for adding psuedo drag events to elements *
 ***************************************************/
!(function ($) {
	$.fn.addTouch = function () {
		this.each(function (i, el) {
			$(el).bind('touchstart touchmove touchend touchcancel', function () {
				//we pass the original event object because the jQuery event
				//object is normalized to w3c specs and does not provide the TouchList
				handleTouch(event);
			});
		});

		var handleTouch = function handleTouch(event) {
			var touches = event.changedTouches,
			    first = touches[0],
			    eventTypes = {
				touchstart: 'mousedown',
				touchmove: 'mousemove',
				touchend: 'mouseup'
			},
			    type = eventTypes[event.type],
			    simulatedEvent;

			if ('MouseEvent' in window && typeof window.MouseEvent === 'function') {
				simulatedEvent = new window.MouseEvent(type, {
					'bubbles': true,
					'cancelable': true,
					'screenX': first.screenX,
					'screenY': first.screenY,
					'clientX': first.clientX,
					'clientY': first.clientY
				});
			} else {
				simulatedEvent = document.createEvent('MouseEvent');
				simulatedEvent.initMouseEvent(type, true, true, window, 1, first.screenX, first.screenY, first.clientX, first.clientY, false, false, false, false, 0, /*left*/null);
			}
			first.target.dispatchEvent(simulatedEvent);
		};
	};
})(jQuery);

//**********************************
//**From the jQuery Mobile Library**
//**need to recreate functionality**
//**and try to improve if possible**
//**********************************

/* Removing the jQuery function ****
************************************

(function( $, window, undefined ) {

	var $document = $( document ),
		// supportTouch = $.mobile.support.touch,
		touchStartEvent = 'touchstart'//supportTouch ? "touchstart" : "mousedown",
		touchStopEvent = 'touchend'//supportTouch ? "touchend" : "mouseup",
		touchMoveEvent = 'touchmove'//supportTouch ? "touchmove" : "mousemove";

	// setup new event shortcuts
	$.each( ( "touchstart touchmove touchend " +
		"swipe swipeleft swiperight" ).split( " " ), function( i, name ) {

		$.fn[ name ] = function( fn ) {
			return fn ? this.bind( name, fn ) : this.trigger( name );
		};

		// jQuery < 1.8
		if ( $.attrFn ) {
			$.attrFn[ name ] = true;
		}
	});

	function triggerCustomEvent( obj, eventType, event, bubble ) {
		var originalType = event.type;
		event.type = eventType;
		if ( bubble ) {
			$.event.trigger( event, undefined, obj );
		} else {
			$.event.dispatch.call( obj, event );
		}
		event.type = originalType;
	}

	// also handles taphold

	// Also handles swipeleft, swiperight
	$.event.special.swipe = {

		// More than this horizontal displacement, and we will suppress scrolling.
		scrollSupressionThreshold: 30,

		// More time than this, and it isn't a swipe.
		durationThreshold: 1000,

		// Swipe horizontal displacement must be more than this.
		horizontalDistanceThreshold: window.devicePixelRatio >= 2 ? 15 : 30,

		// Swipe vertical displacement must be less than this.
		verticalDistanceThreshold: window.devicePixelRatio >= 2 ? 15 : 30,

		getLocation: function ( event ) {
			var winPageX = window.pageXOffset,
				winPageY = window.pageYOffset,
				x = event.clientX,
				y = event.clientY;

			if ( event.pageY === 0 && Math.floor( y ) > Math.floor( event.pageY ) ||
				event.pageX === 0 && Math.floor( x ) > Math.floor( event.pageX ) ) {

				// iOS4 clientX/clientY have the value that should have been
				// in pageX/pageY. While pageX/page/ have the value 0
				x = x - winPageX;
				y = y - winPageY;
			} else if ( y < ( event.pageY - winPageY) || x < ( event.pageX - winPageX ) ) {

				// Some Android browsers have totally bogus values for clientX/Y
				// when scrolling/zooming a page. Detectable since clientX/clientY
				// should never be smaller than pageX/pageY minus page scroll
				x = event.pageX - winPageX;
				y = event.pageY - winPageY;
			}

			return {
				x: x,
				y: y
			};
		},

		start: function( event ) {
			var data = event.originalEvent.touches ?
					event.originalEvent.touches[ 0 ] : event,
				location = $.event.special.swipe.getLocation( data );
			return {
						time: ( new Date() ).getTime(),
						coords: [ location.x, location.y ],
						origin: $( event.target )
					};
		},

		stop: function( event ) {
			var data = event.originalEvent.touches ?
					event.originalEvent.touches[ 0 ] : event,
				location = $.event.special.swipe.getLocation( data );
			return {
						time: ( new Date() ).getTime(),
						coords: [ location.x, location.y ]
					};
		},

		handleSwipe: function( start, stop, thisObject, origTarget ) {
			if ( stop.time - start.time < $.event.special.swipe.durationThreshold &&
				Math.abs( start.coords[ 0 ] - stop.coords[ 0 ] ) > $.event.special.swipe.horizontalDistanceThreshold &&
				Math.abs( start.coords[ 1 ] - stop.coords[ 1 ] ) < $.event.special.swipe.verticalDistanceThreshold ) {
				var direction = start.coords[0] > stop.coords[ 0 ] ? "swipeleft" : "swiperight";

				triggerCustomEvent( thisObject, "swipe", $.Event( "swipe", { target: origTarget, swipestart: start, swipestop: stop }), true );
				triggerCustomEvent( thisObject, direction,$.Event( direction, { target: origTarget, swipestart: start, swipestop: stop } ), true );
				return true;
			}
			return false;

		},

		// This serves as a flag to ensure that at most one swipe event event is
		// in work at any given time
		eventInProgress: false,

		setup: function() {
			var events,
				thisObject = this,
				$this = $( thisObject ),
				context = {};

			// Retrieve the events data for this element and add the swipe context
			events = $.data( this, "mobile-events" );
			if ( !events ) {
				events = { length: 0 };
				$.data( this, "mobile-events", events );
			}
			events.length++;
			events.swipe = context;

			context.start = function( event ) {

				// Bail if we're already working on a swipe event
				if ( $.event.special.swipe.eventInProgress ) {
					return;
				}
				$.event.special.swipe.eventInProgress = true;

				var stop,
					start = $.event.special.swipe.start( event ),
					origTarget = event.target,
					emitted = false;

				context.move = function( event ) {
					if ( !start || event.isDefaultPrevented() ) {
						return;
					}

					stop = $.event.special.swipe.stop( event );
					if ( !emitted ) {
						emitted = $.event.special.swipe.handleSwipe( start, stop, thisObject, origTarget );
						if ( emitted ) {

							// Reset the context to make way for the next swipe event
							$.event.special.swipe.eventInProgress = false;
						}
					}
					// prevent scrolling
					if ( Math.abs( start.coords[ 0 ] - stop.coords[ 0 ] ) > $.event.special.swipe.scrollSupressionThreshold ) {
						event.preventDefault();
					}
				};

				context.stop = function() {
						emitted = true;

						// Reset the context to make way for the next swipe event
						$.event.special.swipe.eventInProgress = false;
						$document.off( touchMoveEvent, context.move );
						context.move = null;
				};

				$document.on( touchMoveEvent, context.move )
					.one( touchStopEvent, context.stop );
			};
			$this.on( touchStartEvent, context.start );
		},

		teardown: function() {
			var events, context;

			events = $.data( this, "mobile-events" );
			if ( events ) {
				context = events.swipe;
				delete events.swipe;
				events.length--;
				if ( events.length === 0 ) {
					$.removeData( this, "mobile-events" );
				}
			}

			if ( context ) {
				if ( context.start ) {
					$( this ).off( touchStartEvent, context.start );
				}
				if ( context.move ) {
					$document.off( touchMoveEvent, context.move );
				}
				if ( context.stop ) {
					$document.off( touchStopEvent, context.stop );
				}
			}
		}
	};
	$.each({
		swipeleft: "swipe.left",
		swiperight: "swipe.right"
	}, function( event, sourceEvent ) {

		$.event.special[ event ] = {
			setup: function() {
				$( this ).bind( sourceEvent, $.noop );
			},
			teardown: function() {
				$( this ).unbind( sourceEvent );
			}
		};
	});
})( jQuery, this );
*/
//**************************************************;
'use strict';

!(function ($) {

  var MutationObserver = (function () {
    var prefixes = ['WebKit', 'Moz', 'O', 'Ms', ''];
    for (var i = 0; i < prefixes.length; i++) {
      if (prefixes[i] + 'MutationObserver' in window) {
        return window[prefixes[i] + 'MutationObserver'];
      }
    }
    return false;
  })();

  var triggers = function triggers(el, type) {
    el.data(type).split(' ').forEach(function (id) {
      $('#' + id)[type === 'close' ? 'trigger' : 'triggerHandler'](type + '.zf.trigger', [el]);
    });
  };
  // Elements with [data-open] will reveal a plugin that supports it when clicked.
  $(document).on('click.zf.trigger', '[data-open]', function () {
    triggers($(this), 'open');
  });

  // Elements with [data-close] will close a plugin that supports it when clicked.
  // If used without a value on [data-close], the event will bubble, allowing it to close a parent component.
  $(document).on('click.zf.trigger', '[data-close]', function () {
    var id = $(this).data('close');
    if (id) {
      triggers($(this), 'close');
    } else {
      $(this).trigger('close.zf.trigger');
    }
  });

  // Elements with [data-toggle] will toggle a plugin that supports it when clicked.
  $(document).on('click.zf.trigger', '[data-toggle]', function () {
    triggers($(this), 'toggle');
  });

  // Elements with [data-closable] will respond to close.zf.trigger events.
  $(document).on('close.zf.trigger', '[data-closable]', function (e) {
    e.stopPropagation();
    var animation = $(this).data('closable');

    if (animation !== '') {
      Foundation.Motion.animateOut($(this), animation, function () {
        $(this).trigger('closed.zf');
      });
    } else {
      $(this).fadeOut().trigger('closed.zf');
    }
  });

  $(document).on('focus.zf.trigger blur.zf.trigger', '[data-toggle-focus]', function () {
    var id = $(this).data('toggle-focus');
    $('#' + id).triggerHandler('toggle.zf.trigger', [$(this)]);
  });

  /**
  * Fires once after all other scripts have loaded
  * @function
  * @private
  */
  $(window).on('load', function () {
    checkListeners();
  });

  function checkListeners() {
    eventsListener();
    resizeListener();
    scrollListener();
    closemeListener();
  }

  //******** only fires this function once on load, if there's something to watch ********
  function closemeListener(pluginName) {
    var yetiBoxes = $('[data-yeti-box]'),
        plugNames = ['dropdown', 'tooltip', 'reveal'];

    if (pluginName) {
      if (typeof pluginName === 'string') {
        plugNames.push(pluginName);
      } else if (typeof pluginName === 'object' && typeof pluginName[0] === 'string') {
        plugNames.concat(pluginName);
      } else {
        console.error('Plugin names must be strings');
      }
    }
    if (yetiBoxes.length) {
      var listeners = plugNames.map(function (name) {
        return 'closeme.zf.' + name;
      }).join(' ');

      $(window).off(listeners).on(listeners, function (e, pluginId) {
        var plugin = e.namespace.split('.')[0];
        var plugins = $('[data-' + plugin + ']').not('[data-yeti-box="' + pluginId + '"]');

        plugins.each(function () {
          var _this = $(this);

          _this.triggerHandler('close.zf.trigger', [_this]);
        });
      });
    }
  }

  function resizeListener(debounce) {
    var timer = undefined,
        $nodes = $('[data-resize]');
    if ($nodes.length) {
      $(window).off('resize.zf.trigger').on('resize.zf.trigger', function (e) {
        if (timer) {
          clearTimeout(timer);
        }

        timer = setTimeout(function () {

          if (!MutationObserver) {
            //fallback for IE 9
            $nodes.each(function () {
              $(this).triggerHandler('resizeme.zf.trigger');
            });
          }
          //trigger all listening elements and signal a resize event
          $nodes.attr('data-events', "resize");
        }, debounce || 10); //default time to emit resize event
      });
    }
  }

  function scrollListener(debounce) {
    var timer = undefined,
        $nodes = $('[data-scroll]');
    if ($nodes.length) {
      $(window).off('scroll.zf.trigger').on('scroll.zf.trigger', function (e) {
        if (timer) {
          clearTimeout(timer);
        }

        timer = setTimeout(function () {

          if (!MutationObserver) {
            //fallback for IE 9
            $nodes.each(function () {
              $(this).triggerHandler('scrollme.zf.trigger');
            });
          }
          //trigger all listening elements and signal a scroll event
          $nodes.attr('data-events', "scroll");
        }, debounce || 10); //default time to emit scroll event
      });
    }
  }

  function eventsListener() {
    if (!MutationObserver) {
      return false;
    }
    var nodes = document.querySelectorAll('[data-resize], [data-scroll], [data-mutate]');

    //element callback
    var listeningElementsMutation = function listeningElementsMutation(mutationRecordsList) {
      var $target = $(mutationRecordsList[0].target);
      //trigger the event handler for the element depending on type
      switch ($target.attr("data-events")) {

        case "resize":
          $target.triggerHandler('resizeme.zf.trigger', [$target]);
          break;

        case "scroll":
          $target.triggerHandler('scrollme.zf.trigger', [$target, window.pageYOffset]);
          break;

        // case "mutate" :
        // console.log('mutate', $target);
        // $target.triggerHandler('mutate.zf.trigger');
        //
        // //make sure we don't get stuck in an infinite loop from sloppy codeing
        // if ($target.index('[data-mutate]') == $("[data-mutate]").length-1) {
        //   domMutationObserver();
        // }
        // break;

        default:
          return false;
        //nothing
      }
    };

    if (nodes.length) {
      //for each element that needs to listen for resizing, scrolling, (or coming soon mutation) add a single observer
      for (var i = 0; i <= nodes.length - 1; i++) {
        var elementObserver = new MutationObserver(listeningElementsMutation);
        elementObserver.observe(nodes[i], { attributes: true, childList: false, characterData: false, subtree: false, attributeFilter: ["data-events"] });
      }
    }
  }

  // ------------------------------------

  // [PH]
  // Foundation.CheckWatchers = checkWatchers;
  Foundation.IHearYou = checkListeners;
  // Foundation.ISeeYou = scrollListener;
  // Foundation.IFeelYou = closemeListener;
})(jQuery);

// function domMutationObserver(debounce) {
//   // !!! This is coming soon and needs more work; not active  !!! //
//   var timer,
//   nodes = document.querySelectorAll('[data-mutate]');
//   //
//   if (nodes.length) {
//     // var MutationObserver = (function () {
//     //   var prefixes = ['WebKit', 'Moz', 'O', 'Ms', ''];
//     //   for (var i=0; i < prefixes.length; i++) {
//     //     if (prefixes[i] + 'MutationObserver' in window) {
//     //       return window[prefixes[i] + 'MutationObserver'];
//     //     }
//     //   }
//     //   return false;
//     // }());
//
//
//     //for the body, we need to listen for all changes effecting the style and class attributes
//     var bodyObserver = new MutationObserver(bodyMutation);
//     bodyObserver.observe(document.body, { attributes: true, childList: true, characterData: false, subtree:true, attributeFilter:["style", "class"]});
//
//
//     //body callback
//     function bodyMutation(mutate) {
//       //trigger all listening elements and signal a mutation event
//       if (timer) { clearTimeout(timer); }
//
//       timer = setTimeout(function() {
//         bodyObserver.disconnect();
//         $('[data-mutate]').attr('data-events',"mutate");
//       }, debounce || 150);
//     }
//   }
// };
"use strict";
(function(K,sa){var ka="undefined"!=typeof module;ka&&(K=global);var a="0123456789abcdef".split(""),ra=[-2147483648,8388608,32768,128],ea=[24,16,8,0],da=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,
2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,
2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,
3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591],e=[],oa=function(a){return Z(a,384)},pa=function(a){return Z(a,256)},qa=function(a){return Z(a,224)},Z=function(Z,K){var n,q,r,t,u,v,w,x,y,z,A,B,C,D,
E,F,p,ka=!1,g,fa=0,la=0,ma=0,na=Z.length,L,M,f,b,d,c,ia,ja,ga,ha,aa,ba,h,k,l,m,ca;384==K?(n=3418070365,q=3238371032,r=1654270250,t=914150663,u=2438529370,v=812702999,w=355462360,x=4144912697,y=1731405415,z=4290775857,A=2394180231,B=1750603025,C=3675008525,D=1694076839,E=1203062813,F=3204075428):256==K?(n=573645204,q=4230739756,r=2673172387,t=3360449730,u=596883563,v=1867755857,w=2520282905,x=1497426621,y=2519219938,z=2827943907,A=3193839141,B=1401305490,C=721525244,D=746961066,E=246885852,F=2177182882):
224==K?(n=2352822216,q=424955298,r=1944164710,t=2312950998,u=502970286,v=855612546,w=1738396948,x=1479516111,y=258812777,z=2077511080,A=2011393907,B=79989058,C=1067287976,D=1780299464,E=286451373,F=2446758561):(n=1779033703,q=4089235720,r=3144134277,t=2227873595,u=1013904242,v=4271175723,w=2773480762,x=1595750129,y=1359893119,z=2917565137,A=2600822924,B=725511199,C=528734635,D=4215389547,E=1541459225,F=327033209,K=512);p=0;do{e[0]=p;e[1]=e[2]=e[3]=e[4]=e[5]=e[6]=e[7]=e[8]=e[9]=e[10]=e[11]=e[12]=e[13]=
e[14]=e[15]=e[16]=e[17]=e[18]=e[19]=e[20]=e[21]=e[22]=e[23]=e[24]=e[25]=e[26]=e[27]=e[28]=e[29]=e[30]=e[31]=e[32]=0;for(g=la;fa<na&&128>g;++fa)p=Z.charCodeAt(fa),128>p?e[g>>2]|=p<<ea[g++&3]:(2048>p?e[g>>2]|=(192|p>>6)<<ea[g++&3]:(55296>p||57344<=p?e[g>>2]|=(224|p>>12)<<ea[g++&3]:(p=65536+((p&1023)<<10|Z.charCodeAt(++fa)&1023),e[g>>2]|=(240|p>>18)<<ea[g++&3],e[g>>2]|=(128|p>>12&63)<<ea[g++&3]),e[g>>2]|=(128|p>>6&63)<<ea[g++&3]),e[g>>2]|=(128|p&63)<<ea[g++&3]);ma+=g-la;la=g-128;fa==na&&(e[g>>2]|=ra[g&
3],++fa);p=e[32];fa>na&&112>g&&(e[31]=ma<<3,ka=!0);for(g=32;160>g;g+=2)h=e[g-30],k=e[g-29],L=(h>>>1|k<<31)^(h>>>8|k<<24)^h>>>7,M=(k>>>1|h<<31)^(k>>>8|h<<24)^(k>>>7|h<<25),h=e[g-4],k=e[g-3],f=(h>>>19|k<<13)^(k>>>29|h<<3)^h>>>6,b=(k>>>19|h<<13)^(h>>>29|k<<3)^(k>>>6|h<<26),h=e[g-32],k=e[g-31],l=e[g-14],m=e[g-13],d=(m&65535)+(k&65535)+(M&65535)+(b&65535),b=(m>>>16)+(k>>>16)+(M>>>16)+(b>>>16)+(d>>>16),c=(l&65535)+(h&65535)+(L&65535)+(f&65535)+(b>>>16),f=(l>>>16)+(h>>>16)+(L>>>16)+(f>>>16)+(c>>>16),e[g]=
f<<16|c&65535,e[g+1]=b<<16|d&65535;var N=n,O=q,G=r,H=t,I=u,J=v,P=w,Q=x,R=y,S=z,T=A,U=B,V=C,W=D,X=E,Y=F;ga=G&I;ha=H&J;for(g=0;160>g;g+=8)L=(N>>>28|O<<4)^(O>>>2|N<<30)^(O>>>7|N<<25),M=(O>>>28|N<<4)^(N>>>2|O<<30)^(N>>>7|O<<25),f=(R>>>14|S<<18)^(R>>>18|S<<14)^(S>>>9|R<<23),b=(S>>>14|R<<18)^(S>>>18|R<<14)^(R>>>9|S<<23),ia=N&G,ja=O&H,aa=ia^N&I^ga,ba=ja^O&J^ha,ca=R&T^~R&V,c=S&U^~S&W,h=e[g],k=e[g+1],l=da[g],m=da[g+1],d=(m&65535)+(k&65535)+(c&65535)+(b&65535)+(Y&65535),b=(m>>>16)+(k>>>16)+(c>>>16)+(b>>>16)+
(Y>>>16)+(d>>>16),c=(l&65535)+(h&65535)+(ca&65535)+(f&65535)+(X&65535)+(b>>>16),f=(l>>>16)+(h>>>16)+(ca>>>16)+(f>>>16)+(X>>>16)+(c>>>16),h=f<<16|c&65535,k=b<<16|d&65535,d=(ba&65535)+(M&65535),b=(ba>>>16)+(M>>>16)+(d>>>16),c=(aa&65535)+(L&65535)+(b>>>16),f=(aa>>>16)+(L>>>16)+(c>>>16),l=f<<16|c&65535,m=b<<16|d&65535,d=(Q&65535)+(k&65535),b=(Q>>>16)+(k>>>16)+(d>>>16),c=(P&65535)+(h&65535)+(b>>>16),f=(P>>>16)+(h>>>16)+(c>>>16),X=f<<16|c&65535,Y=b<<16|d&65535,d=(m&65535)+(k&65535),b=(m>>>16)+(k>>>16)+
(d>>>16),c=(l&65535)+(h&65535)+(b>>>16),f=(l>>>16)+(h>>>16)+(c>>>16),P=f<<16|c&65535,Q=b<<16|d&65535,L=(P>>>28|Q<<4)^(Q>>>2|P<<30)^(Q>>>7|P<<25),M=(Q>>>28|P<<4)^(P>>>2|Q<<30)^(P>>>7|Q<<25),f=(X>>>14|Y<<18)^(X>>>18|Y<<14)^(Y>>>9|X<<23),b=(Y>>>14|X<<18)^(Y>>>18|X<<14)^(X>>>9|Y<<23),ga=P&N,ha=Q&O,aa=ga^P&G^ia,ba=ha^Q&H^ja,ca=X&R^~X&T,c=Y&S^~Y&U,h=e[g+2],k=e[g+3],l=da[g+2],m=da[g+3],d=(m&65535)+(k&65535)+(c&65535)+(b&65535)+(W&65535),b=(m>>>16)+(k>>>16)+(c>>>16)+(b>>>16)+(W>>>16)+(d>>>16),c=(l&65535)+
(h&65535)+(ca&65535)+(f&65535)+(V&65535)+(b>>>16),f=(l>>>16)+(h>>>16)+(ca>>>16)+(f>>>16)+(V>>>16)+(c>>>16),h=f<<16|c&65535,k=b<<16|d&65535,d=(ba&65535)+(M&65535),b=(ba>>>16)+(M>>>16)+(d>>>16),c=(aa&65535)+(L&65535)+(b>>>16),f=(aa>>>16)+(L>>>16)+(c>>>16),l=f<<16|c&65535,m=b<<16|d&65535,d=(J&65535)+(k&65535),b=(J>>>16)+(k>>>16)+(d>>>16),c=(I&65535)+(h&65535)+(b>>>16),f=(I>>>16)+(h>>>16)+(c>>>16),V=f<<16|c&65535,W=b<<16|d&65535,d=(m&65535)+(k&65535),b=(m>>>16)+(k>>>16)+(d>>>16),c=(l&65535)+(h&65535)+
(b>>>16),f=(l>>>16)+(h>>>16)+(c>>>16),I=f<<16|c&65535,J=b<<16|d&65535,L=(I>>>28|J<<4)^(J>>>2|I<<30)^(J>>>7|I<<25),M=(J>>>28|I<<4)^(I>>>2|J<<30)^(I>>>7|J<<25),f=(V>>>14|W<<18)^(V>>>18|W<<14)^(W>>>9|V<<23),b=(W>>>14|V<<18)^(W>>>18|V<<14)^(V>>>9|W<<23),ia=I&P,ja=J&Q,aa=ia^I&N^ga,ba=ja^J&O^ha,ca=V&X^~V&R,c=W&Y^~W&S,h=e[g+4],k=e[g+5],l=da[g+4],m=da[g+5],d=(m&65535)+(k&65535)+(c&65535)+(b&65535)+(U&65535),b=(m>>>16)+(k>>>16)+(c>>>16)+(b>>>16)+(U>>>16)+(d>>>16),c=(l&65535)+(h&65535)+(ca&65535)+(f&65535)+
(T&65535)+(b>>>16),f=(l>>>16)+(h>>>16)+(ca>>>16)+(f>>>16)+(T>>>16)+(c>>>16),h=f<<16|c&65535,k=b<<16|d&65535,d=(ba&65535)+(M&65535),b=(ba>>>16)+(M>>>16)+(d>>>16),c=(aa&65535)+(L&65535)+(b>>>16),f=(aa>>>16)+(L>>>16)+(c>>>16),l=f<<16|c&65535,m=b<<16|d&65535,d=(H&65535)+(k&65535),b=(H>>>16)+(k>>>16)+(d>>>16),c=(G&65535)+(h&65535)+(b>>>16),f=(G>>>16)+(h>>>16)+(c>>>16),T=f<<16|c&65535,U=b<<16|d&65535,d=(m&65535)+(k&65535),b=(m>>>16)+(k>>>16)+(d>>>16),c=(l&65535)+(h&65535)+(b>>>16),f=(l>>>16)+(h>>>16)+(c>>>
16),G=f<<16|c&65535,H=b<<16|d&65535,L=(G>>>28|H<<4)^(H>>>2|G<<30)^(H>>>7|G<<25),M=(H>>>28|G<<4)^(G>>>2|H<<30)^(G>>>7|H<<25),f=(T>>>14|U<<18)^(T>>>18|U<<14)^(U>>>9|T<<23),b=(U>>>14|T<<18)^(U>>>18|T<<14)^(T>>>9|U<<23),ga=G&I,ha=H&J,aa=ga^G&P^ia,ba=ha^H&Q^ja,ca=T&V^~T&X,c=U&W^~U&Y,h=e[g+6],k=e[g+7],l=da[g+6],m=da[g+7],d=(m&65535)+(k&65535)+(c&65535)+(b&65535)+(S&65535),b=(m>>>16)+(k>>>16)+(c>>>16)+(b>>>16)+(S>>>16)+(d>>>16),c=(l&65535)+(h&65535)+(ca&65535)+(f&65535)+(R&65535)+(b>>>16),f=(l>>>16)+(h>>>
16)+(ca>>>16)+(f>>>16)+(R>>>16)+(c>>>16),h=f<<16|c&65535,k=b<<16|d&65535,d=(ba&65535)+(M&65535),b=(ba>>>16)+(M>>>16)+(d>>>16),c=(aa&65535)+(L&65535)+(b>>>16),f=(aa>>>16)+(L>>>16)+(c>>>16),l=f<<16|c&65535,m=b<<16|d&65535,d=(O&65535)+(k&65535),b=(O>>>16)+(k>>>16)+(d>>>16),c=(N&65535)+(h&65535)+(b>>>16),f=(N>>>16)+(h>>>16)+(c>>>16),R=f<<16|c&65535,S=b<<16|d&65535,d=(m&65535)+(k&65535),b=(m>>>16)+(k>>>16)+(d>>>16),c=(l&65535)+(h&65535)+(b>>>16),f=(l>>>16)+(h>>>16)+(c>>>16),N=f<<16|c&65535,O=b<<16|d&65535;
d=(q&65535)+(O&65535);b=(q>>>16)+(O>>>16)+(d>>>16);c=(n&65535)+(N&65535)+(b>>>16);f=(n>>>16)+(N>>>16)+(c>>>16);n=f<<16|c&65535;q=b<<16|d&65535;d=(t&65535)+(H&65535);b=(t>>>16)+(H>>>16)+(d>>>16);c=(r&65535)+(G&65535)+(b>>>16);f=(r>>>16)+(G>>>16)+(c>>>16);r=f<<16|c&65535;t=b<<16|d&65535;d=(v&65535)+(J&65535);b=(v>>>16)+(J>>>16)+(d>>>16);c=(u&65535)+(I&65535)+(b>>>16);f=(u>>>16)+(I>>>16)+(c>>>16);u=f<<16|c&65535;v=b<<16|d&65535;d=(x&65535)+(Q&65535);b=(x>>>16)+(Q>>>16)+(d>>>16);c=(w&65535)+(P&65535)+
(b>>>16);f=(w>>>16)+(P>>>16)+(c>>>16);w=f<<16|c&65535;x=b<<16|d&65535;d=(z&65535)+(S&65535);b=(z>>>16)+(S>>>16)+(d>>>16);c=(y&65535)+(R&65535)+(b>>>16);f=(y>>>16)+(R>>>16)+(c>>>16);y=f<<16|c&65535;z=b<<16|d&65535;d=(B&65535)+(U&65535);b=(B>>>16)+(U>>>16)+(d>>>16);c=(A&65535)+(T&65535)+(b>>>16);f=(A>>>16)+(T>>>16)+(c>>>16);A=f<<16|c&65535;B=b<<16|d&65535;d=(D&65535)+(W&65535);b=(D>>>16)+(W>>>16)+(d>>>16);c=(C&65535)+(V&65535)+(b>>>16);f=(C>>>16)+(V>>>16)+(c>>>16);C=f<<16|c&65535;D=b<<16|d&65535;d=
(F&65535)+(Y&65535);b=(F>>>16)+(Y>>>16)+(d>>>16);c=(E&65535)+(X&65535)+(b>>>16);f=(E>>>16)+(X>>>16)+(c>>>16);E=f<<16|c&65535;F=b<<16|d&65535}while(!ka);n=a[n>>28&15]+a[n>>24&15]+a[n>>20&15]+a[n>>16&15]+a[n>>12&15]+a[n>>8&15]+a[n>>4&15]+a[n&15]+a[q>>28&15]+a[q>>24&15]+a[q>>20&15]+a[q>>16&15]+a[q>>12&15]+a[q>>8&15]+a[q>>4&15]+a[q&15]+a[r>>28&15]+a[r>>24&15]+a[r>>20&15]+a[r>>16&15]+a[r>>12&15]+a[r>>8&15]+a[r>>4&15]+a[r&15]+a[t>>28&15]+a[t>>24&15]+a[t>>20&15]+a[t>>16&15]+a[t>>12&15]+a[t>>8&15]+a[t>>4&
15]+a[t&15]+a[u>>28&15]+a[u>>24&15]+a[u>>20&15]+a[u>>16&15]+a[u>>12&15]+a[u>>8&15]+a[u>>4&15]+a[u&15]+a[v>>28&15]+a[v>>24&15]+a[v>>20&15]+a[v>>16&15]+a[v>>12&15]+a[v>>8&15]+a[v>>4&15]+a[v&15]+a[w>>28&15]+a[w>>24&15]+a[w>>20&15]+a[w>>16&15]+a[w>>12&15]+a[w>>8&15]+a[w>>4&15]+a[w&15];256<=K&&(n+=a[x>>28&15]+a[x>>24&15]+a[x>>20&15]+a[x>>16&15]+a[x>>12&15]+a[x>>8&15]+a[x>>4&15]+a[x&15]);384<=K&&(n+=a[y>>28&15]+a[y>>24&15]+a[y>>20&15]+a[y>>16&15]+a[y>>12&15]+a[y>>8&15]+a[y>>4&15]+a[y&15]+a[z>>28&15]+a[z>>
24&15]+a[z>>20&15]+a[z>>16&15]+a[z>>12&15]+a[z>>8&15]+a[z>>4&15]+a[z&15]+a[A>>28&15]+a[A>>24&15]+a[A>>20&15]+a[A>>16&15]+a[A>>12&15]+a[A>>8&15]+a[A>>4&15]+a[A&15]+a[B>>28&15]+a[B>>24&15]+a[B>>20&15]+a[B>>16&15]+a[B>>12&15]+a[B>>8&15]+a[B>>4&15]+a[B&15]);512==K&&(n+=a[C>>28&15]+a[C>>24&15]+a[C>>20&15]+a[C>>16&15]+a[C>>12&15]+a[C>>8&15]+a[C>>4&15]+a[C&15]+a[D>>28&15]+a[D>>24&15]+a[D>>20&15]+a[D>>16&15]+a[D>>12&15]+a[D>>8&15]+a[D>>4&15]+a[D&15]+a[E>>28&15]+a[E>>24&15]+a[E>>20&15]+a[E>>16&15]+a[E>>12&
15]+a[E>>8&15]+a[E>>4&15]+a[E&15]+a[F>>28&15]+a[F>>24&15]+a[F>>20&15]+a[F>>16&15]+a[F>>12&15]+a[F>>8&15]+a[F>>4&15]+a[F&15]);return n};!K.JS_SHA512_TEST&&ka?(Z.sha512=Z,Z.sha384=oa,Z.sha512_256=pa,Z.sha512_224=qa,module.exports=Z):K&&(K.sha512=Z,K.sha384=oa,K.sha512_256=pa,K.sha512_224=qa)})(this);
!function(r){function e(o){if(t[o])return t[o].exports;var n=t[o]={exports:{},id:o,loaded:!1};return r[o].call(n.exports,n,n.exports,e),n.loaded=!0,n.exports}var t={};return e.m=r,e.c=t,e.p="/webpack/",e(0)}([function(r,e){}]);
// added by hyper-rails:  These lines must preceed other requires especially turbo_links


// This is a manifest file that'll be compiled into application.js, which will include all the files
// listed below.
//
// Any JavaScript/Coffee file within this directory, lib/assets/javascripts, vendor/assets/javascripts,
// or any plugin's vendor/assets/javascripts directory can be referenced here using a relative path.
//
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// compiled file.
//
// Read Sprockets README (https://github.com/rails/sprockets#sprockets-directives) for details
// about supported directives.


//






Opal.load('components');
//= require turbolinks
//= require_tree .

$(function(){ $(document).foundation(); });
jQuery.sha512 = sha512;
